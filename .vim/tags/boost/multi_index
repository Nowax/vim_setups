!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE	multi_index/detail/index_node_base.hpp	/^  BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))$/;"	f	namespace:boost::multi_index::detail	signature:(Node)
BOOST_MULTI_INDEX_CHECK_DECREMENTABLE_ITERATOR	multi_index/detail/safe_mode.hpp	73;"	d
BOOST_MULTI_INDEX_CHECK_DEREFERENCEABLE_ITERATOR	multi_index/detail/safe_mode.hpp	63;"	d
BOOST_MULTI_INDEX_CHECK_DIFFERENT_CONTAINER	multi_index/detail/safe_mode.hpp	103;"	d
BOOST_MULTI_INDEX_CHECK_INCREMENTABLE_ITERATOR	multi_index/detail/safe_mode.hpp	68;"	d
BOOST_MULTI_INDEX_CHECK_IN_BOUNDS	multi_index/detail/safe_mode.hpp	98;"	d
BOOST_MULTI_INDEX_CHECK_IS_OWNER	multi_index/detail/safe_mode.hpp	78;"	d
BOOST_MULTI_INDEX_CHECK_OUTSIDE_RANGE	multi_index/detail/safe_mode.hpp	93;"	d
BOOST_MULTI_INDEX_CHECK_SAME_OWNER	multi_index/detail/safe_mode.hpp	83;"	d
BOOST_MULTI_INDEX_CHECK_VALID_ITERATOR	multi_index/detail/safe_mode.hpp	58;"	d
BOOST_MULTI_INDEX_CHECK_VALID_RANGE	multi_index/detail/safe_mode.hpp	88;"	d
BOOST_MULTI_INDEX_CK_APPLY_METAFUNCTION_N	multi_index/composite_key.hpp	102;"	d
BOOST_MULTI_INDEX_CK_APPLY_METAFUNCTION_N	multi_index/composite_key.hpp	1317;"	d
BOOST_MULTI_INDEX_CK_COMPLETE_COMP_OPS	multi_index/composite_key.hpp	1314;"	d
BOOST_MULTI_INDEX_CK_COMPLETE_COMP_OPS	multi_index/composite_key.hpp	800;"	d
BOOST_MULTI_INDEX_CK_CTOR_ARG	multi_index/composite_key.hpp	1318;"	d
BOOST_MULTI_INDEX_CK_CTOR_ARG	multi_index/composite_key.hpp	97;"	d
BOOST_MULTI_INDEX_CK_ENUM	multi_index/composite_key.hpp	1321;"	d
BOOST_MULTI_INDEX_CK_ENUM	multi_index/composite_key.hpp	80;"	d
BOOST_MULTI_INDEX_CK_ENUM_PARAMS	multi_index/composite_key.hpp	1320;"	d
BOOST_MULTI_INDEX_CK_ENUM_PARAMS	multi_index/composite_key.hpp	85;"	d
BOOST_MULTI_INDEX_CK_IDENTITY_ENUM_MACRO	multi_index/composite_key.hpp	1315;"	d
BOOST_MULTI_INDEX_CK_IDENTITY_ENUM_MACRO	multi_index/composite_key.hpp	169;"	d
BOOST_MULTI_INDEX_CK_NTH_COMPOSITE_KEY_FUNCTOR	multi_index/composite_key.hpp	1316;"	d
BOOST_MULTI_INDEX_CK_NTH_COMPOSITE_KEY_FUNCTOR	multi_index/composite_key.hpp	136;"	d
BOOST_MULTI_INDEX_CK_RESULT_EQUAL_TO_SUPER	multi_index/composite_key.hpp	1130;"	d
BOOST_MULTI_INDEX_CK_RESULT_EQUAL_TO_SUPER	multi_index/composite_key.hpp	1313;"	d
BOOST_MULTI_INDEX_CK_RESULT_GREATER_SUPER	multi_index/composite_key.hpp	1182;"	d
BOOST_MULTI_INDEX_CK_RESULT_GREATER_SUPER	multi_index/composite_key.hpp	1311;"	d
BOOST_MULTI_INDEX_CK_RESULT_HASH_SUPER	multi_index/composite_key.hpp	1208;"	d
BOOST_MULTI_INDEX_CK_RESULT_HASH_SUPER	multi_index/composite_key.hpp	1310;"	d
BOOST_MULTI_INDEX_CK_RESULT_LESS_SUPER	multi_index/composite_key.hpp	1156;"	d
BOOST_MULTI_INDEX_CK_RESULT_LESS_SUPER	multi_index/composite_key.hpp	1312;"	d
BOOST_MULTI_INDEX_CK_TEMPLATE_PARM	multi_index/composite_key.hpp	1319;"	d
BOOST_MULTI_INDEX_CK_TEMPLATE_PARM	multi_index/composite_key.hpp	92;"	d
BOOST_MULTI_INDEX_COMPOSITE_KEY_HPP	multi_index/composite_key.hpp	10;"	d
BOOST_MULTI_INDEX_COMPOSITE_KEY_SIZE	multi_index/composite_key.hpp	1322;"	d
BOOST_MULTI_INDEX_COMPOSITE_KEY_SIZE	multi_index/composite_key.hpp	72;"	d
BOOST_MULTI_INDEX_COMPOSITE_KEY_SIZE	multi_index/composite_key.hpp	75;"	d
BOOST_MULTI_INDEX_CONST_MEM_FUN	multi_index/mem_fun.hpp	192;"	d
BOOST_MULTI_INDEX_CONST_MEM_FUN	multi_index/mem_fun.hpp	201;"	d
BOOST_MULTI_INDEX_DETAIL_ACCESS_SPECIFIER_HPP	multi_index/detail/access_specifier.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_ADL_SWAP_HPP	multi_index/detail/adl_swap.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_ARCHIVE_CONSTRUCTED_HPP	multi_index/detail/archive_constructed.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_AUTO_SPACE_HPP	multi_index/detail/auto_space.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_BASE_TYPE_HPP	multi_index/detail/base_type.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_BIDIR_NODE_ITERATOR_HPP	multi_index/detail/bidir_node_iterator.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_BUCKET_ARRAY_HPP	multi_index/detail/bucket_array.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_CONVERTER_HPP	multi_index/detail/converter.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_COPY_MAP_HPP	multi_index/detail/copy_map.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_DO_NOT_COPY_ELEMENTS_TAG_HPP	multi_index/detail/do_not_copy_elements_tag.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_DUPLICATES_ITERATOR_HPP	multi_index/detail/duplicates_iterator.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_HASH_INDEX_ARGS_HPP	multi_index/detail/hash_index_args.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_HASH_INDEX_ITERATOR_HPP	multi_index/detail/hash_index_iterator.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_HASH_INDEX_NODE_HPP	multi_index/detail/hash_index_node.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_HAS_TAG_HPP	multi_index/detail/has_tag.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_HEADER_HOLDER_HPP	multi_index/detail/header_holder.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_INDEX_BASE_HPP	multi_index/detail/index_base.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_INDEX_LOADER_HPP	multi_index/detail/index_loader.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_INDEX_MATCHER_HPP	multi_index/detail/index_matcher.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_INDEX_NODE_BASE_HPP	multi_index/detail/index_node_base.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_INDEX_SAVER_HPP	multi_index/detail/index_saver.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_INVARIANT_ASSERT_HPP	multi_index/detail/invariant_assert.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_IS_INDEX_LIST_HPP	multi_index/detail/is_index_list.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_ITER_ADAPTOR_HPP	multi_index/detail/iter_adaptor.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_MODIFY_KEY_ADAPTOR_HPP	multi_index/detail/modify_key_adaptor.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_MSVC_INDEX_SPECIFIER_HPP	multi_index/detail/msvc_index_specifier.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_NODE_TYPE_HPP	multi_index/detail/node_type.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_NO_DUPLICATE_TAGS_HPP	multi_index/detail/no_duplicate_tags.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_ORD_INDEX_ARGS_HPP	multi_index/detail/ord_index_args.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_ORD_INDEX_NODE_HPP	multi_index/detail/ord_index_node.hpp	37;"	d
BOOST_MULTI_INDEX_DETAIL_ORD_INDEX_OPS_HPP	multi_index/detail/ord_index_ops.hpp	37;"	d
BOOST_MULTI_INDEX_DETAIL_PREVENT_ETI_HPP	multi_index/detail/prevent_eti.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_RND_INDEX_LOADER_HPP	multi_index/detail/rnd_index_loader.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_RND_INDEX_NODE_HPP	multi_index/detail/rnd_index_node.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_RND_INDEX_OPS_HPP	multi_index/detail/rnd_index_ops.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_RND_INDEX_PTR_ARRAY_HPP	multi_index/detail/rnd_index_ptr_array.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_RND_NODE_ITERATOR_HPP	multi_index/detail/rnd_node_iterator.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_SAFE_CTR_PROXY_HPP	multi_index/detail/safe_ctr_proxy.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_SAFE_MODE_HPP	multi_index/detail/safe_mode.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_SCOPE_GUARD_HPP	multi_index/detail/scope_guard.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_SEQ_INDEX_NODE_HPP	multi_index/detail/seq_index_node.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_SEQ_INDEX_OPS_HPP	multi_index/detail/seq_index_ops.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_SERIALIZATION_VERSION_HPP	multi_index/detail/serialization_version.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_UINTPTR_TYPE_HPP	multi_index/detail/uintptr_type.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_UNBOUNDED_HPP	multi_index/detail/unbounded.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_VALUE_COMPARE_HPP	multi_index/detail/value_compare.hpp	10;"	d
BOOST_MULTI_INDEX_DETAIL_VARTEMPL_SUPPORT_HPP	multi_index/detail/vartempl_support.hpp	10;"	d
BOOST_MULTI_INDEX_FORWARD_PARAM_PACK	multi_index/detail/vartempl_support.hpp	82;"	d
BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK	multi_index/detail/vartempl_support.hpp	74;"	d
BOOST_MULTI_INDEX_GLOBAL_FUN_HPP	multi_index/global_fun.hpp	10;"	d
BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT	multi_index/hashed_index.hpp	1386;"	d
BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT	multi_index/hashed_index.hpp	57;"	d
BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT	multi_index/hashed_index.hpp	61;"	d
BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT_OF	multi_index/hashed_index.hpp	1387;"	d
BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT_OF	multi_index/hashed_index.hpp	53;"	d
BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT_OF	multi_index/hashed_index.hpp	60;"	d
BOOST_MULTI_INDEX_HASHED_INDEX_FWD_HPP	multi_index/hashed_index_fwd.hpp	10;"	d
BOOST_MULTI_INDEX_HASHED_INDEX_HPP	multi_index/hashed_index.hpp	10;"	d
BOOST_MULTI_INDEX_IDENTITY_FWD_HPP	multi_index/identity_fwd.hpp	10;"	d
BOOST_MULTI_INDEX_IDENTITY_HPP	multi_index/identity.hpp	10;"	d
BOOST_MULTI_INDEX_INDEXED_BY_HPP	multi_index/indexed_by.hpp	10;"	d
BOOST_MULTI_INDEX_INDEXED_BY_SIZE	multi_index/indexed_by.hpp	42;"	d
BOOST_MULTI_INDEX_INDEXED_BY_SIZE	multi_index/indexed_by.hpp	45;"	d
BOOST_MULTI_INDEX_INDEXED_BY_SIZE	multi_index/indexed_by.hpp	70;"	d
BOOST_MULTI_INDEX_INDEXED_BY_TEMPLATE_PARM	multi_index/indexed_by.hpp	48;"	d
BOOST_MULTI_INDEX_INDEXED_BY_TEMPLATE_PARM	multi_index/indexed_by.hpp	69;"	d
BOOST_MULTI_INDEX_INVARIANT_ASSERT	multi_index/detail/invariant_assert.hpp	18;"	d
BOOST_MULTI_INDEX_KEY_EXTRACTORS_HPP	multi_index/key_extractors.hpp	10;"	d
BOOST_MULTI_INDEX_LIMIT_COMPOSITE_KEY_SIZE	multi_index/composite_key.hpp	63;"	d
BOOST_MULTI_INDEX_LIMIT_COMPOSITE_KEY_SIZE	multi_index/composite_key.hpp	65;"	d
BOOST_MULTI_INDEX_LIMIT_INDEXED_BY_SIZE	multi_index/indexed_by.hpp	35;"	d
BOOST_MULTI_INDEX_LIMIT_INDEXED_BY_SIZE	multi_index/indexed_by.hpp	37;"	d
BOOST_MULTI_INDEX_LIMIT_TAG_SIZE	multi_index/tag.hpp	38;"	d
BOOST_MULTI_INDEX_LIMIT_TAG_SIZE	multi_index/tag.hpp	40;"	d
BOOST_MULTI_INDEX_LIMIT_VARTEMPL_ARGS	multi_index/detail/vartempl_support.hpp	64;"	d
BOOST_MULTI_INDEX_MEMBER	multi_index/member.hpp	258;"	d
BOOST_MULTI_INDEX_MEMBER	multi_index/member.hpp	261;"	d
BOOST_MULTI_INDEX_MEMBER_HPP	multi_index/member.hpp	10;"	d
BOOST_MULTI_INDEX_MEM_FUN	multi_index/mem_fun.hpp	195;"	d
BOOST_MULTI_INDEX_MEM_FUN	multi_index/mem_fun.hpp	203;"	d
BOOST_MULTI_INDEX_MEM_FUN_HPP	multi_index/mem_fun.hpp	10;"	d
BOOST_MULTI_INDEX_NULL_PARAM_PACK	multi_index/detail/vartempl_support.hpp	93;"	d
BOOST_MULTI_INDEX_ORDERED_INDEX_FWD_HPP	multi_index/ordered_index_fwd.hpp	10;"	d
BOOST_MULTI_INDEX_ORDERED_INDEX_HPP	multi_index/ordered_index.hpp	37;"	d
BOOST_MULTI_INDEX_ORD_INDEX_CHECK_INVARIANT	multi_index/ordered_index.hpp	1526;"	d
BOOST_MULTI_INDEX_ORD_INDEX_CHECK_INVARIANT	multi_index/ordered_index.hpp	89;"	d
BOOST_MULTI_INDEX_ORD_INDEX_CHECK_INVARIANT	multi_index/ordered_index.hpp	93;"	d
BOOST_MULTI_INDEX_ORD_INDEX_CHECK_INVARIANT_OF	multi_index/ordered_index.hpp	1527;"	d
BOOST_MULTI_INDEX_ORD_INDEX_CHECK_INVARIANT_OF	multi_index/ordered_index.hpp	85;"	d
BOOST_MULTI_INDEX_ORD_INDEX_CHECK_INVARIANT_OF	multi_index/ordered_index.hpp	92;"	d
BOOST_MULTI_INDEX_OVERLOADS_TO_VARTEMPL	multi_index/detail/vartempl_support.hpp	122;"	d
BOOST_MULTI_INDEX_OVERLOADS_TO_VARTEMPL_AUX	multi_index/detail/vartempl_support.hpp	103;"	d
BOOST_MULTI_INDEX_OVERLOADS_TO_VARTEMPL_EXTRA_ARG	multi_index/detail/vartempl_support.hpp	152;"	d
BOOST_MULTI_INDEX_OVERLOADS_TO_VARTEMPL_EXTRA_ARG_AUX	multi_index/detail/vartempl_support.hpp	129;"	d
BOOST_MULTI_INDEX_PRIVATE_IF_MEMBER_TEMPLATE_FRIENDS	multi_index/detail/access_specifier.hpp	26;"	d
BOOST_MULTI_INDEX_PRIVATE_IF_MEMBER_TEMPLATE_FRIENDS	multi_index/detail/access_specifier.hpp	29;"	d
BOOST_MULTI_INDEX_PRIVATE_IF_USING_DECL_FOR_TEMPL_FUNCTIONS	multi_index/detail/access_specifier.hpp	50;"	d
BOOST_MULTI_INDEX_PRIVATE_IF_USING_DECL_FOR_TEMPL_FUNCTIONS	multi_index/detail/access_specifier.hpp	52;"	d
BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDS	multi_index/detail/access_specifier.hpp	25;"	d
BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDS	multi_index/detail/access_specifier.hpp	28;"	d
BOOST_MULTI_INDEX_RANDOM_ACCESS_INDEX_FWD_HPP	multi_index/random_access_index_fwd.hpp	10;"	d
BOOST_MULTI_INDEX_RANDOM_ACCESS_INDEX_HPP	multi_index/random_access_index.hpp	10;"	d
BOOST_MULTI_INDEX_RND_INDEX_CHECK_INVARIANT	multi_index/random_access_index.hpp	1171;"	d
BOOST_MULTI_INDEX_RND_INDEX_CHECK_INVARIANT	multi_index/random_access_index.hpp	62;"	d
BOOST_MULTI_INDEX_RND_INDEX_CHECK_INVARIANT	multi_index/random_access_index.hpp	66;"	d
BOOST_MULTI_INDEX_RND_INDEX_CHECK_INVARIANT_OF	multi_index/random_access_index.hpp	1172;"	d
BOOST_MULTI_INDEX_RND_INDEX_CHECK_INVARIANT_OF	multi_index/random_access_index.hpp	58;"	d
BOOST_MULTI_INDEX_RND_INDEX_CHECK_INVARIANT_OF	multi_index/random_access_index.hpp	65;"	d
BOOST_MULTI_INDEX_SAFE_MODE_ASSERT	multi_index/detail/safe_mode.hpp	49;"	d
BOOST_MULTI_INDEX_SAFE_MODE_ASSERT	multi_index/detail/safe_mode.hpp	50;"	d
BOOST_MULTI_INDEX_SAFE_MODE_ASSERT	multi_index/detail/safe_mode.hpp	54;"	d
BOOST_MULTI_INDEX_SAFE_MODE_ERRORS_HPP	multi_index/safe_mode_errors.hpp	10;"	d
BOOST_MULTI_INDEX_SEQUENCED_INDEX_FWD_HPP	multi_index/sequenced_index_fwd.hpp	10;"	d
BOOST_MULTI_INDEX_SEQUENCED_INDEX_HPP	multi_index/sequenced_index.hpp	10;"	d
BOOST_MULTI_INDEX_SEQ_INDEX_CHECK_INVARIANT	multi_index/sequenced_index.hpp	1067;"	d
BOOST_MULTI_INDEX_SEQ_INDEX_CHECK_INVARIANT	multi_index/sequenced_index.hpp	58;"	d
BOOST_MULTI_INDEX_SEQ_INDEX_CHECK_INVARIANT	multi_index/sequenced_index.hpp	62;"	d
BOOST_MULTI_INDEX_SEQ_INDEX_CHECK_INVARIANT_OF	multi_index/sequenced_index.hpp	1068;"	d
BOOST_MULTI_INDEX_SEQ_INDEX_CHECK_INVARIANT_OF	multi_index/sequenced_index.hpp	54;"	d
BOOST_MULTI_INDEX_SEQ_INDEX_CHECK_INVARIANT_OF	multi_index/sequenced_index.hpp	61;"	d
BOOST_MULTI_INDEX_TAG_HPP	multi_index/tag.hpp	10;"	d
BOOST_MULTI_INDEX_TAG_SIZE	multi_index/tag.hpp	45;"	d
BOOST_MULTI_INDEX_TAG_SIZE	multi_index/tag.hpp	47;"	d
BOOST_MULTI_INDEX_TAG_SIZE	multi_index/tag.hpp	90;"	d
BOOST_MULTI_INDEX_TEMPLATE_0	multi_index/detail/vartempl_support.hpp	101;"	d
BOOST_MULTI_INDEX_TEMPLATE_N	multi_index/detail/vartempl_support.hpp	98;"	d
BOOST_MULTI_INDEX_TEMPLATE_PARAM_PACK	multi_index/detail/vartempl_support.hpp	67;"	d
BOOST_MULTI_INDEX_VARTEMPL_ARG	multi_index/detail/vartempl_support.hpp	71;"	d
BOOST_MULTI_INDEX_VARTEMPL_FORWARD_ARG	multi_index/detail/vartempl_support.hpp	79;"	d
BOOST_MULTI_INDEX_VARTEMPL_TO_PLACEMENT_NEW	multi_index/detail/vartempl_support.hpp	185;"	d
BOOST_MULTI_INDEX_VARTEMPL_TO_PLACEMENT_NEW	multi_index/detail/vartempl_support.hpp	194;"	d
BOOST_MULTI_INDEX_VARTEMPL_TO_PLACEMENT_NEW_AUX	multi_index/detail/vartempl_support.hpp	165;"	d
BOOST_MULTI_INDEX_VARTEMPL_TO_PLACEMENT_NEW_AUX	multi_index/detail/vartempl_support.hpp	193;"	d
BOOST_STATIC_ASSERT	multi_index/detail/base_type.hpp	/^  BOOST_STATIC_ASSERT(detail::is_index_list<IndexSpecifierList>::value);$/;"	p	struct:boost::multi_index::detail::multi_index_base_type	access:public	signature:(detail::is_index_list<IndexSpecifierList>::value)
BOOST_STATIC_ASSERT	multi_index/detail/hash_index_args.hpp	/^  BOOST_STATIC_ASSERT(is_tag<tag_list_type>::value);$/;"	p	struct:boost::multi_index::detail::hashed_index_args	access:public	signature:(is_tag<tag_list_type>::value)
BOOST_STATIC_ASSERT	multi_index/detail/node_type.hpp	/^  BOOST_STATIC_ASSERT(detail::is_index_list<IndexSpecifierList>::value);$/;"	p	struct:boost::multi_index::detail::multi_index_node_type	access:public	signature:(detail::is_index_list<IndexSpecifierList>::value)
BOOST_STATIC_ASSERT	multi_index/detail/ord_index_args.hpp	/^  BOOST_STATIC_ASSERT(is_tag<tag_list_type>::value);$/;"	p	struct:boost::multi_index::detail::ordered_index_args	access:public	signature:(is_tag<tag_list_type>::value)
BOOST_STATIC_ASSERT	multi_index/random_access_index.hpp	/^  BOOST_STATIC_ASSERT(detail::is_tag<TagList>::value);$/;"	p	struct:boost::multi_index::random_access	access:public	signature:(detail::is_tag<TagList>::value)
BOOST_STATIC_ASSERT	multi_index/sequenced_index.hpp	/^  BOOST_STATIC_ASSERT(detail::is_tag<TagList>::value);$/;"	p	struct:boost::multi_index::sequenced	access:public	signature:(detail::is_tag<TagList>::value)
BOOST_STATIC_ASSERT	multi_index/tag.hpp	/^  BOOST_STATIC_ASSERT(detail::no_duplicate_tags<type>::value);$/;"	p	struct:boost::multi_index::tag	access:public	signature:(detail::no_duplicate_tags<type>::value)
BOOST_STATIC_CONSTANT	multi_index/detail/base_type.hpp	/^  BOOST_STATIC_CONSTANT(int,length=mpl::size<IndexSpecifierList>::value);$/;"	p	struct:boost::multi_index::detail::nth_layer	access:public	signature:(int,length=mpl::size<IndexSpecifierList>::value)
BOOST_STATIC_CONSTANT	multi_index/detail/is_index_list.hpp	/^  BOOST_STATIC_CONSTANT(bool,mpl_sequence=mpl::is_sequence<T>::value);$/;"	p	struct:boost::multi_index::detail::is_index_list	access:public	signature:(bool,mpl_sequence=mpl::is_sequence<T>::value)
BOOST_STATIC_CONSTANT	multi_index/detail/is_index_list.hpp	/^  BOOST_STATIC_CONSTANT(bool,non_empty=!mpl::empty<T>::value);$/;"	p	struct:boost::multi_index::detail::is_index_list	access:public	signature:(bool,non_empty=!mpl::empty<T>::value)
BOOST_STATIC_CONSTANT	multi_index/detail/is_index_list.hpp	/^  BOOST_STATIC_CONSTANT(bool,value=mpl_sequence&&non_empty);$/;"	p	struct:boost::multi_index::detail::is_index_list	access:public	signature:(bool,value=mpl_sequence&&non_empty)
BOOST_STATIC_CONSTANT	multi_index/detail/no_duplicate_tags.hpp	/^  BOOST_STATIC_CONSTANT($/;"	p	struct:boost::multi_index::detail::no_duplicate_tags	access:public	signature:( bool,value=!(mpl::has_key<aux,duplicate_tag_mark>::value))
BOOST_STATIC_CONSTANT	multi_index/detail/no_duplicate_tags.hpp	/^  BOOST_STATIC_CONSTANT($/;"	p	struct:boost::multi_index::detail::no_duplicate_tags_in_index_list	access:public	signature:( bool,value=!(mpl::has_key<aux,duplicate_tag_mark>::value))
BOOST_STATIC_CONSTANT	multi_index/detail/seq_index_ops.hpp	/^BOOST_STATIC_CONSTANT($/;"	p	namespace:boost::multi_index::detail	signature:( std::size_t, sequenced_index_sort_max_fill= (std::size_t)std::numeric_limits<std::size_t>::digits+1)
BOOST_STATIC_CONSTANT	multi_index/detail/serialization_version.hpp	/^  BOOST_STATIC_CONSTANT(int,value=version<T>::value);$/;"	p	struct:boost::serialization::version	access:public	signature:(int,value=version<T>::value)
BOOST_STATIC_CONSTANT	multi_index/detail/uintptr_type.hpp	/^  BOOST_STATIC_CONSTANT(bool,has_uintptr_type=(index>=0));$/;"	p	struct:boost::multi_index::detail::uintptr_aux	access:public	signature:(bool,has_uintptr_type=(index>=0))
BOOST_STATIC_CONSTANT	multi_index/detail/uintptr_type.hpp	/^  BOOST_STATIC_CONSTANT(int,index=$/;"	p	struct:boost::multi_index::detail::uintptr_aux	access:public	signature:(int,index= sizeof(void*)==sizeof(uintptr_candidates<0>::type)?0: sizeof(void*)==sizeof(uintptr_candidates<1>::type)?1: sizeof(void*)==sizeof(uintptr_candidates<2>::type)?2: sizeof(void*)==sizeof(uintptr_candidates<3>::type)?3: sizeof(void*)==sizeof(uintptr_candidates<4>::type)?4:-1)
BOOST_STATIC_CONSTANT	multi_index/tag.hpp	/^  BOOST_STATIC_CONSTANT(bool,value=(is_base_and_derived<tag_marker,T>::value));$/;"	p	struct:boost::multi_index::detail::is_tag	access:public	signature:(bool,value=(is_base_and_derived<tag_marker,T>::value))
add	multi_index/detail/index_loader.hpp	/^  void add(Node* node,Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::index_loader	access:public	signature:(Node* node,Archive& ar,const unsigned int)
add	multi_index/detail/index_matcher.hpp	/^  void add(Node* node)$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:public	signature:(Node* node)
add	multi_index/detail/index_matcher.hpp	/^  void add(void* node)$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:(void* node)
add	multi_index/detail/index_saver.hpp	/^  void add(Node* node,Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::index_saver	access:public	signature:(Node* node,Archive& ar,const unsigned int)
add_node_to_algorithm	multi_index/detail/index_matcher.hpp	/^  void add_node_to_algorithm(Node* node)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:private	signature:(Node* node) const
add_node_to_algorithm	multi_index/detail/index_matcher.hpp	/^  void add_node_to_algorithm(void* node)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:(void* node) const
add_track	multi_index/detail/index_loader.hpp	/^  void add_track(Node* node,Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::index_loader	access:public	signature:(Node* node,Archive& ar,const unsigned int)
add_track	multi_index/detail/index_saver.hpp	/^  void add_track(Node* node,Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::index_saver	access:public	signature:(Node* node,Archive& ar,const unsigned int)
adl_swap	multi_index/detail/adl_swap.hpp	/^void adl_swap(T& x,T& y)$/;"	f	namespace:boost::multi_index::detail	signature:(T& x,T& y)
advance	multi_index/detail/duplicates_iterator.hpp	/^  void advance()$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:private	signature:()
advance	multi_index/detail/iter_adaptor.hpp	/^  static void advance(Class& x,typename Class::difference_type n)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(Class& x,typename Class::difference_type n)
advance	multi_index/detail/rnd_index_node.hpp	/^  static void advance(pointer& x,std::ptrdiff_t n)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(pointer& x,std::ptrdiff_t n)
advance	multi_index/detail/rnd_index_node.hpp	/^  static void advance(random_access_index_node*& x,std::ptrdiff_t n)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(random_access_index_node*& x,std::ptrdiff_t n)
advance	multi_index/detail/safe_mode.hpp	/^  void advance(difference_type n)$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(difference_type n)
al	multi_index/detail/rnd_index_loader.hpp	/^  Allocator                               al;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
al_	multi_index/detail/auto_space.hpp	/^    Allocator,T>::type                          al_;$/;"	m	struct:boost::multi_index::detail::auto_space	access:private
al_	multi_index/detail/copy_map.hpp	/^  allocator_type                                  al_;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
alg	multi_index/detail/index_saver.hpp	/^  index_matcher::algorithm<Node,Allocator> alg;$/;"	m	class:boost::multi_index::detail::index_saver	access:private
algorithm	multi_index/detail/index_matcher.hpp	/^  algorithm(const Allocator& al,std::size_t size):super(al,size){}$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:public	signature:(const Allocator& al,std::size_t size)
algorithm	multi_index/detail/index_matcher.hpp	/^class algorithm:private algorithm_base<Allocator>$/;"	c	namespace:boost::multi_index::detail::index_matcher	inherits:algorithm_base
algorithm_base	multi_index/detail/index_matcher.hpp	/^  algorithm_base(const Allocator& al,std::size_t size):$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:(const Allocator& al,std::size_t size)
algorithm_base	multi_index/detail/index_matcher.hpp	/^class algorithm_base:private noncopyable$/;"	c	namespace:boost::multi_index::detail::index_matcher	inherits:noncopyable
allocator_pointer	multi_index/detail/copy_map.hpp	/^  typedef typename allocator_type::pointer        allocator_pointer;$/;"	t	class:boost::multi_index::detail::copy_map	access:private
allocator_type	multi_index/detail/copy_map.hpp	/^  >::type                                         allocator_type;$/;"	t	class:boost::multi_index::detail::copy_map	access:private
allocator_type	multi_index/detail/index_node_base.hpp	/^  typedef Allocator       allocator_type;$/;"	t	struct:boost::multi_index::detail::index_node_base	access:public
allocator_type	multi_index/hashed_index.hpp	/^  typedef typename super::final_allocator_type       allocator_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
allocator_type	multi_index/ordered_index.hpp	/^  typedef typename super::final_allocator_type       allocator_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
allocator_type	multi_index/random_access_index.hpp	/^  typedef typename super::final_allocator_type     allocator_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
allocator_type	multi_index/sequenced_index.hpp	/^  typedef typename super::final_allocator_type        allocator_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
apply	multi_index/detail/base_type.hpp	/^  struct apply:$/;"	s	struct:boost::multi_index::detail::index_applier	inherits:msvc_index_specifier::,result_index_class	access:public
apply	multi_index/detail/has_tag.hpp	/^  struct apply:mpl::contains<BOOST_DEDUCED_TYPENAME Index::tag_list,Tag>$/;"	s	struct:boost::multi_index::detail::has_tag	inherits:mpl::contains	access:public
apply	multi_index/detail/iter_adaptor.hpp	/^  struct apply$/;"	s	struct:boost::multi_index::detail::iter_adaptor_selector	access:public
apply	multi_index/detail/no_duplicate_tags.hpp	/^  struct apply$/;"	s	struct:boost::multi_index::detail::duplicate_tag_marker	access:public
apply	multi_index/detail/no_duplicate_tags.hpp	/^  struct apply:mpl::fold<$/;"	s	struct:boost::multi_index::detail::duplicate_tag_list_marker	inherits:mpl::fold	access:public
apply	multi_index/detail/node_type.hpp	/^  struct apply:$/;"	s	struct:boost::multi_index::detail::index_node_applier	inherits:msvc_index_specifier::,result_node_class	access:public
archive_constructed	multi_index/detail/archive_constructed.hpp	/^  archive_constructed(Archive& ar,const unsigned int version)$/;"	f	struct:boost::multi_index::detail::archive_constructed	access:public	signature:(Archive& ar,const unsigned int version)
archive_constructed	multi_index/detail/archive_constructed.hpp	/^  archive_constructed(const char* name,Archive& ar,const unsigned int version)$/;"	f	struct:boost::multi_index::detail::archive_constructed	access:public	signature:(const char* name,Archive& ar,const unsigned int version)
archive_constructed	multi_index/detail/archive_constructed.hpp	/^struct archive_constructed:private noncopyable$/;"	s	namespace:boost::multi_index::detail	inherits:noncopyable
assign	multi_index/random_access_index.hpp	/^  void assign(InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(InputIterator first,InputIterator last)
assign	multi_index/random_access_index.hpp	/^  void assign(size_type n,value_param_type value)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n,value_param_type value)
assign	multi_index/random_access_index.hpp	/^  void assign(std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(std::initializer_list<value_type> list)
assign	multi_index/sequenced_index.hpp	/^  void assign(InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(InputIterator first,InputIterator last)
assign	multi_index/sequenced_index.hpp	/^  void assign(size_type n,value_param_type value)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(size_type n,value_param_type value)
assign	multi_index/sequenced_index.hpp	/^  void assign(std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(std::initializer_list<value_type> list)
assign_iter	multi_index/random_access_index.hpp	/^  void assign_iter(InputIterator first,InputIterator last,mpl::true_)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(InputIterator first,InputIterator last,mpl::true_)
assign_iter	multi_index/random_access_index.hpp	/^  void assign_iter(size_type n,value_param_type value,mpl::false_)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(size_type n,value_param_type value,mpl::false_)
assign_iter	multi_index/sequenced_index.hpp	/^  void assign_iter(InputIterator first,InputIterator last,mpl::true_)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(InputIterator first,InputIterator last,mpl::true_)
assign_iter	multi_index/sequenced_index.hpp	/^  void assign_iter(size_type n,value_param_type value,mpl::false_)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(size_type n,value_param_type value,mpl::false_)
at	multi_index/detail/bucket_array.hpp	/^  pointer at(std::size_t n)const{return buckets()+n;}$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(std::size_t n) const
at	multi_index/detail/rnd_index_ptr_array.hpp	/^  pointer at(std::size_t n)const{return ptrs()+n;}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(std::size_t n) const
at	multi_index/random_access_index.hpp	/^  const_reference at(size_type n)const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n) const
attach	multi_index/detail/safe_mode.hpp	/^  inline void attach(safe_container_base* cont_);$/;"	p	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:(safe_container_base* cont_)
attach	multi_index/detail/safe_mode.hpp	/^void safe_iterator_base::attach(safe_container_base* cont_)$/;"	f	class:boost::multi_index::detail::safe_iterator_base	signature:(safe_container_base* cont_)
auto_space	multi_index/detail/auto_space.hpp	/^  explicit auto_space(const Allocator& al=Allocator(),std::size_t n=1):$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:(const Allocator& al=Allocator(),std::size_t n=1)
auto_space	multi_index/detail/auto_space.hpp	/^struct auto_space:private noncopyable$/;"	s	namespace:boost::multi_index::detail	inherits:noncopyable
aux	multi_index/detail/no_duplicate_tags.hpp	/^  >::type aux;$/;"	t	struct:boost::multi_index::detail::no_duplicate_tags	access:public
aux	multi_index/detail/no_duplicate_tags.hpp	/^  >::type aux;$/;"	t	struct:boost::multi_index::detail::no_duplicate_tags_in_index_list	access:public
b	multi_index/detail/iter_adaptor.hpp	/^  Base b;$/;"	m	class:boost::multi_index::detail::iter_adaptor	access:private
back	multi_index/random_access_index.hpp	/^  const_reference back()const{return operator[](size()-1);}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
back	multi_index/sequenced_index.hpp	/^  const_reference back()const{return *--end();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
base_reference	multi_index/detail/iter_adaptor.hpp	/^  Base&       base_reference(){return b;}$/;"	f	class:boost::multi_index::detail::iter_adaptor	access:protected	signature:()
base_reference	multi_index/detail/iter_adaptor.hpp	/^  const Base& base_reference()const{return b;}$/;"	f	class:boost::multi_index::detail::iter_adaptor	access:protected	signature:() const
base_type	multi_index/detail/index_node_base.hpp	/^  typedef index_node_base base_type; \/* used for serialization purposes *\/$/;"	t	struct:boost::multi_index::detail::index_node_base	access:public
begin	multi_index/detail/bucket_array.hpp	/^  pointer begin()const{return buckets();}$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:() const
begin	multi_index/detail/copy_map.hpp	/^  const_iterator begin()const{return &*spc.data();}$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:() const
begin	multi_index/detail/rnd_index_ptr_array.hpp	/^  pointer begin()const{return ptrs();}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:() const
begin	multi_index/detail/safe_ctr_proxy.hpp	/^  const_iterator begin()const{return begin_impl();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy	access:public	signature:() const
begin	multi_index/detail/safe_ctr_proxy.hpp	/^  iterator       begin(){return begin_impl();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy	access:public	signature:()
begin	multi_index/hashed_index.hpp	/^  const_iterator begin()const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
begin	multi_index/hashed_index.hpp	/^  const_local_iterator begin(size_type n)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
begin	multi_index/hashed_index.hpp	/^  iterator begin()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
begin	multi_index/hashed_index.hpp	/^  local_iterator begin(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n)
begin	multi_index/ordered_index.hpp	/^  const_iterator         begin()const{return make_iterator(leftmost());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
begin	multi_index/ordered_index.hpp	/^  iterator               begin(){return make_iterator(leftmost());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
begin	multi_index/random_access_index.hpp	/^  const_iterator         begin()const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
begin	multi_index/random_access_index.hpp	/^  iterator               begin()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
begin	multi_index/sequenced_index.hpp	/^  const_iterator         begin()const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
begin	multi_index/sequenced_index.hpp	/^  iterator               begin()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
begin_algorithm	multi_index/detail/index_matcher.hpp	/^  void begin_algorithm()const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:() const
begin_chunk	multi_index/detail/duplicates_iterator.hpp	/^  Node*     begin_chunk;$/;"	m	class:boost::multi_index::detail::duplicates_iterator	access:private
begin_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual const_iterator begin_impl()const=0;$/;"	p	class:boost::multi_index::detail::safe_ctr_proxy	access:protected	signature:() const
begin_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual const_iterator begin_impl()const{return container().begin();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public	signature:() const
begin_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual iterator       begin_impl()=0;$/;"	p	class:boost::multi_index::detail::safe_ctr_proxy	access:protected	signature:()
begin_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual iterator       begin_impl(){return container().begin();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public	signature:()
bidir_node_iterator	multi_index/detail/bidir_node_iterator.hpp	/^  bidir_node_iterator(){}$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:()
bidir_node_iterator	multi_index/detail/bidir_node_iterator.hpp	/^  explicit bidir_node_iterator(Node* node_):node(node_){}$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:(Node* node_)
bidir_node_iterator	multi_index/detail/bidir_node_iterator.hpp	/^class bidir_node_iterator:$/;"	c	namespace:boost::multi_index::detail	inherits:bidirectional_iterator_helper
bidirectional_iter_adaptor_base	multi_index/detail/iter_adaptor.hpp	/^class bidirectional_iter_adaptor_base:$/;"	c	namespace:boost::multi_index::detail	inherits:bidirectional_iterator_helper
black	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_color{red=false,black=true};$/;"	e	enum:boost::multi_index::detail::ordered_index_color
black_count	multi_index/detail/ord_index_node.hpp	/^  static std::size_t black_count(pointer node,pointer root)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer node,pointer root)
boost	multi_index/composite_key.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/adl_swap.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/archive_constructed.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/auto_space.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/base_type.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/bidir_node_iterator.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/bucket_array.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/converter.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/copy_map.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/do_not_copy_elements_tag.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/duplicates_iterator.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/has_tag.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/hash_index_args.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/hash_index_iterator.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/hash_index_node.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/header_holder.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/index_base.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/index_loader.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/index_matcher.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/index_node_base.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/index_saver.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/is_index_list.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/iter_adaptor.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/modify_key_adaptor.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/msvc_index_specifier.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/no_duplicate_tags.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/node_type.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/ord_index_args.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/ord_index_node.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/ord_index_ops.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/prevent_eti.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/rnd_index_loader.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/rnd_index_node.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/rnd_index_ops.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/rnd_index_ptr_array.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/rnd_node_iterator.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/safe_ctr_proxy.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/safe_mode.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/scope_guard.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/seq_index_node.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/seq_index_ops.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/serialization_version.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/uintptr_type.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/unbounded.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/value_compare.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/vartempl_support.hpp	/^namespace boost{$/;"	n
boost	multi_index/detail/vartempl_support.hpp	/^namespace boost{namespace multi_index{namespace detail{$/;"	n
boost	multi_index/global_fun.hpp	/^namespace boost{$/;"	n
boost	multi_index/hashed_index.hpp	/^namespace boost{$/;"	n
boost	multi_index/hashed_index_fwd.hpp	/^namespace boost{$/;"	n
boost	multi_index/identity.hpp	/^namespace boost{$/;"	n
boost	multi_index/identity_fwd.hpp	/^namespace boost{$/;"	n
boost	multi_index/indexed_by.hpp	/^namespace boost{$/;"	n
boost	multi_index/mem_fun.hpp	/^namespace boost{$/;"	n
boost	multi_index/member.hpp	/^namespace boost{$/;"	n
boost	multi_index/ordered_index.hpp	/^namespace boost{$/;"	n
boost	multi_index/ordered_index_fwd.hpp	/^namespace boost{$/;"	n
boost	multi_index/random_access_index.hpp	/^namespace boost{$/;"	n
boost	multi_index/random_access_index_fwd.hpp	/^namespace boost{$/;"	n
boost	multi_index/safe_mode_errors.hpp	/^namespace boost{$/;"	n
boost	multi_index/sequenced_index.hpp	/^namespace boost{$/;"	n
boost	multi_index/sequenced_index_fwd.hpp	/^namespace boost{$/;"	n
boost	multi_index/tag.hpp	/^namespace boost{$/;"	n
boost::multi_index	multi_index/composite_key.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/adl_swap.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/archive_constructed.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/auto_space.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/base_type.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/bidir_node_iterator.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/bucket_array.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/converter.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/copy_map.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/do_not_copy_elements_tag.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/duplicates_iterator.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/has_tag.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/hash_index_args.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/hash_index_iterator.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/hash_index_node.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/header_holder.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/index_base.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/index_loader.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/index_matcher.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/index_node_base.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/index_saver.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/is_index_list.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/iter_adaptor.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/modify_key_adaptor.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/msvc_index_specifier.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/no_duplicate_tags.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/node_type.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/ord_index_args.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/ord_index_node.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/ord_index_ops.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/prevent_eti.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/rnd_index_loader.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/rnd_index_node.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/rnd_index_ops.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/rnd_index_ptr_array.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/rnd_node_iterator.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/safe_ctr_proxy.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/safe_mode.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/scope_guard.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/seq_index_node.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/seq_index_ops.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/serialization_version.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/uintptr_type.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/unbounded.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/value_compare.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/vartempl_support.hpp	/^namespace boost{namespace multi_index{namespace detail{$/;"	n	namespace:boost
boost::multi_index	multi_index/detail/vartempl_support.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/global_fun.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/hashed_index.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/hashed_index_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/identity.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/identity_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/indexed_by.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/mem_fun.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/member.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/ordered_index.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/ordered_index_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/random_access_index.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/random_access_index_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/safe_mode_errors.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/sequenced_index.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/sequenced_index_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index	multi_index/tag.hpp	/^namespace multi_index{$/;"	n	namespace:boost
boost::multi_index::__anon1::unbounded	multi_index/detail/unbounded.hpp	/^static detail::unbounded_type& unbounded=unbounded_obj;$/;"	m	namespace:boost::multi_index::__anon1
boost::multi_index::__anon1::unbounded_obj	multi_index/detail/unbounded.hpp	/^static detail::unbounded_type  unbounded_obj=detail::unbounded_type();$/;"	m	namespace:boost::multi_index::__anon1
boost::multi_index::const_mem_fun	multi_index/mem_fun.hpp	/^struct const_mem_fun$/;"	s	namespace:boost::multi_index
boost::multi_index::const_mem_fun::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const Class& x)const$/;"	f	struct:boost::multi_index::const_mem_fun	access:public	signature:(const Class& x) const
boost::multi_index::const_mem_fun::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::const_mem_fun	access:public	signature:(const reference_wrapper<Class>& x) const
boost::multi_index::const_mem_fun::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<const Class>& x)const$/;"	f	struct:boost::multi_index::const_mem_fun	access:public	signature:(const reference_wrapper<const Class>& x) const
boost::multi_index::const_mem_fun::operator ()	multi_index/mem_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::const_mem_fun	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::const_mem_fun::result_type	multi_index/mem_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::const_mem_fun	access:public
boost::multi_index::const_mem_fun_explicit	multi_index/mem_fun.hpp	/^struct const_mem_fun_explicit$/;"	s	namespace:boost::multi_index
boost::multi_index::const_mem_fun_explicit::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const Class& x)const$/;"	f	struct:boost::multi_index::const_mem_fun_explicit	access:public	signature:(const Class& x) const
boost::multi_index::const_mem_fun_explicit::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::const_mem_fun_explicit	access:public	signature:(const reference_wrapper<Class>& x) const
boost::multi_index::const_mem_fun_explicit::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<const Class>& x)const$/;"	f	struct:boost::multi_index::const_mem_fun_explicit	access:public	signature:(const reference_wrapper<const Class>& x) const
boost::multi_index::const_mem_fun_explicit::operator ()	multi_index/mem_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::const_mem_fun_explicit	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::const_mem_fun_explicit::result_type	multi_index/mem_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::const_mem_fun_explicit	access:public
boost::multi_index::detail	multi_index/composite_key.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/adl_swap.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/archive_constructed.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/auto_space.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/base_type.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/bidir_node_iterator.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/bucket_array.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/converter.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/copy_map.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/do_not_copy_elements_tag.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/duplicates_iterator.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/has_tag.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/hash_index_args.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/hash_index_iterator.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/hash_index_node.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/header_holder.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/index_base.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/index_loader.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/index_matcher.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/index_node_base.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/index_saver.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/is_index_list.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/iter_adaptor.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/modify_key_adaptor.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/msvc_index_specifier.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/no_duplicate_tags.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/node_type.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/ord_index_args.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/ord_index_node.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/ord_index_ops.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/prevent_eti.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/rnd_index_loader.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/rnd_index_node.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/rnd_index_ops.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/rnd_index_ptr_array.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/rnd_node_iterator.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/safe_ctr_proxy.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/safe_mode.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/scope_guard.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/seq_index_node.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/seq_index_ops.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/serialization_version.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/uintptr_type.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/unbounded.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/unbounded.hpp	/^namespace detail{struct unbounded_type{};}$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/value_compare.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/vartempl_support.hpp	/^namespace boost{namespace multi_index{namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/detail/vartempl_support.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/global_fun.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/hashed_index.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/hashed_index_fwd.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/identity.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/member.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/ordered_index.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/ordered_index_fwd.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/random_access_index.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/random_access_index_fwd.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/sequenced_index.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/sequenced_index_fwd.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail	multi_index/tag.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
boost::multi_index::detail::BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE	multi_index/detail/index_node_base.hpp	/^  BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))$/;"	f	namespace:boost::multi_index::detail	signature:(Node)
boost::multi_index::detail::BOOST_STATIC_CONSTANT	multi_index/detail/seq_index_ops.hpp	/^BOOST_STATIC_CONSTANT($/;"	p	namespace:boost::multi_index::detail	signature:( std::size_t, sequenced_index_sort_max_fill= (std::size_t)std::numeric_limits<std::size_t>::digits+1)
boost::multi_index::detail::adl_swap	multi_index/detail/adl_swap.hpp	/^void adl_swap(T& x,T& y)$/;"	f	namespace:boost::multi_index::detail	signature:(T& x,T& y)
boost::multi_index::detail::archive_constructed	multi_index/detail/archive_constructed.hpp	/^struct archive_constructed:private noncopyable$/;"	s	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::archive_constructed::archive_constructed	multi_index/detail/archive_constructed.hpp	/^  archive_constructed(Archive& ar,const unsigned int version)$/;"	f	struct:boost::multi_index::detail::archive_constructed	access:public	signature:(Archive& ar,const unsigned int version)
boost::multi_index::detail::archive_constructed::archive_constructed	multi_index/detail/archive_constructed.hpp	/^  archive_constructed(const char* name,Archive& ar,const unsigned int version)$/;"	f	struct:boost::multi_index::detail::archive_constructed	access:public	signature:(const char* name,Archive& ar,const unsigned int version)
boost::multi_index::detail::archive_constructed::get	multi_index/detail/archive_constructed.hpp	/^  T& get(){return *static_cast<T*>(static_cast<void*>(&space));}$/;"	f	struct:boost::multi_index::detail::archive_constructed	access:public	signature:()
boost::multi_index::detail::archive_constructed::space	multi_index/detail/archive_constructed.hpp	/^  typename aligned_storage<sizeof(T),alignment_of<T>::value>::type space;$/;"	m	struct:boost::multi_index::detail::archive_constructed	access:private
boost::multi_index::detail::archive_constructed::~archive_constructed	multi_index/detail/archive_constructed.hpp	/^  ~archive_constructed()$/;"	f	struct:boost::multi_index::detail::archive_constructed	access:public	signature:()
boost::multi_index::detail::auto_space	multi_index/detail/auto_space.hpp	/^struct auto_space:private noncopyable$/;"	s	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::auto_space::al_	multi_index/detail/auto_space.hpp	/^    Allocator,T>::type                          al_;$/;"	m	struct:boost::multi_index::detail::auto_space	access:private
boost::multi_index::detail::auto_space::auto_space	multi_index/detail/auto_space.hpp	/^  explicit auto_space(const Allocator& al=Allocator(),std::size_t n=1):$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:(const Allocator& al=Allocator(),std::size_t n=1)
boost::multi_index::detail::auto_space::data	multi_index/detail/auto_space.hpp	/^  pointer data()const{return data_;}$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:() const
boost::multi_index::detail::auto_space::data_	multi_index/detail/auto_space.hpp	/^  pointer                                       data_;$/;"	m	struct:boost::multi_index::detail::auto_space	access:private
boost::multi_index::detail::auto_space::get_allocator	multi_index/detail/auto_space.hpp	/^  Allocator get_allocator()const{return al_;}$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:() const
boost::multi_index::detail::auto_space::n_	multi_index/detail/auto_space.hpp	/^  std::size_t                                   n_;$/;"	m	struct:boost::multi_index::detail::auto_space	access:private
boost::multi_index::detail::auto_space::pointer	multi_index/detail/auto_space.hpp	/^  >::type::pointer pointer;$/;"	t	struct:boost::multi_index::detail::auto_space	access:public
boost::multi_index::detail::auto_space::swap	multi_index/detail/auto_space.hpp	/^  void swap(auto_space& x)$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:(auto_space& x)
boost::multi_index::detail::auto_space::~auto_space	multi_index/detail/auto_space.hpp	/^  ~auto_space()$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:()
boost::multi_index::detail::bidir_node_iterator	multi_index/detail/bidir_node_iterator.hpp	/^class bidir_node_iterator:$/;"	c	namespace:boost::multi_index::detail	inherits:bidirectional_iterator_helper
boost::multi_index::detail::bidir_node_iterator::bidir_node_iterator	multi_index/detail/bidir_node_iterator.hpp	/^  bidir_node_iterator(){}$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:()
boost::multi_index::detail::bidir_node_iterator::bidir_node_iterator	multi_index/detail/bidir_node_iterator.hpp	/^  explicit bidir_node_iterator(Node* node_):node(node_){}$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:(Node* node_)
boost::multi_index::detail::bidir_node_iterator::get_node	multi_index/detail/bidir_node_iterator.hpp	/^  Node* get_node()const{return node;}$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:() const
boost::multi_index::detail::bidir_node_iterator::load	multi_index/detail/bidir_node_iterator.hpp	/^  void load(Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:(Archive& ar,const unsigned int)
boost::multi_index::detail::bidir_node_iterator::node	multi_index/detail/bidir_node_iterator.hpp	/^  Node* node;$/;"	m	class:boost::multi_index::detail::bidir_node_iterator	access:private
boost::multi_index::detail::bidir_node_iterator::node_base_type	multi_index/detail/bidir_node_iterator.hpp	/^  typedef typename Node::base_type node_base_type;$/;"	t	class:boost::multi_index::detail::bidir_node_iterator	access:public
boost::multi_index::detail::bidir_node_iterator::node_type	multi_index/detail/bidir_node_iterator.hpp	/^  typedef Node node_type;$/;"	t	class:boost::multi_index::detail::bidir_node_iterator	access:public
boost::multi_index::detail::bidir_node_iterator::operator *	multi_index/detail/bidir_node_iterator.hpp	/^  const typename Node::value_type& operator*()const$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:() const
boost::multi_index::detail::bidir_node_iterator::operator ++	multi_index/detail/bidir_node_iterator.hpp	/^  bidir_node_iterator& operator++()$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:()
boost::multi_index::detail::bidir_node_iterator::operator --	multi_index/detail/bidir_node_iterator.hpp	/^  bidir_node_iterator& operator--()$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:()
boost::multi_index::detail::bidir_node_iterator::save	multi_index/detail/bidir_node_iterator.hpp	/^  void save(Archive& ar,const unsigned int)const$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:(Archive& ar,const unsigned int) const
boost::multi_index::detail::bidirectional_iter_adaptor_base	multi_index/detail/iter_adaptor.hpp	/^class bidirectional_iter_adaptor_base:$/;"	c	namespace:boost::multi_index::detail	inherits:bidirectional_iterator_helper
boost::multi_index::detail::bidirectional_iter_adaptor_base::final	multi_index/detail/iter_adaptor.hpp	/^  Derived& final(){return *static_cast<Derived*>(this);}$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:private	signature:()
boost::multi_index::detail::bidirectional_iter_adaptor_base::final	multi_index/detail/iter_adaptor.hpp	/^  const Derived& final()const{return *static_cast<const Derived*>(this);}$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:private	signature:() const
boost::multi_index::detail::bidirectional_iter_adaptor_base::operator *	multi_index/detail/iter_adaptor.hpp	/^  reference operator*()const$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:public	signature:() const
boost::multi_index::detail::bidirectional_iter_adaptor_base::operator ++	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator++()$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:public	signature:()
boost::multi_index::detail::bidirectional_iter_adaptor_base::operator --	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator--()$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:public	signature:()
boost::multi_index::detail::bidirectional_iter_adaptor_base::operator ==	multi_index/detail/iter_adaptor.hpp	/^  friend bool operator==(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
boost::multi_index::detail::bidirectional_iter_adaptor_base::reference	multi_index/detail/iter_adaptor.hpp	/^  typedef typename Base::reference reference;$/;"	t	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:public
boost::multi_index::detail::black	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_color{red=false,black=true};$/;"	e	enum:boost::multi_index::detail::ordered_index_color
boost::multi_index::detail::both_unbounded_tag	multi_index/detail/unbounded.hpp	/^struct both_unbounded_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::bucket_array	multi_index/detail/bucket_array.hpp	/^class bucket_array:public bucket_array_base$/;"	c	namespace:boost::multi_index::detail	inherits:bucket_array_base
boost::multi_index::detail::bucket_array::at	multi_index/detail/bucket_array.hpp	/^  pointer at(std::size_t n)const{return buckets()+n;}$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(std::size_t n) const
boost::multi_index::detail::bucket_array::begin	multi_index/detail/bucket_array.hpp	/^  pointer begin()const{return buckets();}$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:() const
boost::multi_index::detail::bucket_array::bucket_array	multi_index/detail/bucket_array.hpp	/^  bucket_array(const Allocator& al,pointer end_,std::size_t size):$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(const Allocator& al,pointer end_,std::size_t size)
boost::multi_index::detail::bucket_array::buckets	multi_index/detail/bucket_array.hpp	/^  pointer buckets()const$/;"	f	class:boost::multi_index::detail::bucket_array	access:private	signature:() const
boost::multi_index::detail::bucket_array::clear	multi_index/detail/bucket_array.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:()
boost::multi_index::detail::bucket_array::end	multi_index/detail/bucket_array.hpp	/^  pointer end()const{return buckets()+size_;}$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:() const
boost::multi_index::detail::bucket_array::first_nonempty	multi_index/detail/bucket_array.hpp	/^  std::size_t first_nonempty(std::size_t n)const$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(std::size_t n) const
boost::multi_index::detail::bucket_array::node_impl_type	multi_index/detail/bucket_array.hpp	/^  >::type                                           node_impl_type;$/;"	t	class:boost::multi_index::detail::bucket_array	access:private
boost::multi_index::detail::bucket_array::pointer	multi_index/detail/bucket_array.hpp	/^  typedef typename node_impl_type::pointer          pointer;$/;"	t	class:boost::multi_index::detail::bucket_array	access:public
boost::multi_index::detail::bucket_array::position	multi_index/detail/bucket_array.hpp	/^  std::size_t position(std::size_t hash)const$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(std::size_t hash) const
boost::multi_index::detail::bucket_array::serialize	multi_index/detail/bucket_array.hpp	/^  void serialize(Archive&,const unsigned int)$/;"	f	class:boost::multi_index::detail::bucket_array	access:private	signature:(Archive&,const unsigned int)
boost::multi_index::detail::bucket_array::size	multi_index/detail/bucket_array.hpp	/^  std::size_t size()const$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:() const
boost::multi_index::detail::bucket_array::size_	multi_index/detail/bucket_array.hpp	/^  std::size_t                          size_;$/;"	m	class:boost::multi_index::detail::bucket_array	access:private
boost::multi_index::detail::bucket_array::spc	multi_index/detail/bucket_array.hpp	/^  auto_space<node_impl_type,Allocator> spc;$/;"	m	class:boost::multi_index::detail::bucket_array	access:private
boost::multi_index::detail::bucket_array::swap	multi_index/detail/bucket_array.hpp	/^  void swap(bucket_array& x)$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(bucket_array& x)
boost::multi_index::detail::bucket_array_base	multi_index/detail/bucket_array.hpp	/^class bucket_array_base:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::bucket_array_base::next_prime	multi_index/detail/bucket_array.hpp	/^  inline static std::size_t next_prime(std::size_t n)$/;"	f	class:boost::multi_index::detail::bucket_array_base	access:protected	signature:(std::size_t n)
boost::multi_index::detail::const_identity_base	multi_index/identity.hpp	/^struct const_identity_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::const_identity_base::operator ()	multi_index/identity.hpp	/^  Type& operator()($/;"	f	struct:boost::multi_index::detail::const_identity_base	access:public	signature:( const reference_wrapper<typename remove_const<Type>::type>& x,int=0) const
boost::multi_index::detail::const_identity_base::operator ()	multi_index/identity.hpp	/^  Type& operator()(Type& x)const$/;"	f	struct:boost::multi_index::detail::const_identity_base	access:public	signature:(Type& x) const
boost::multi_index::detail::const_identity_base::operator ()	multi_index/identity.hpp	/^  Type& operator()(const reference_wrapper<Type>& x)const$/;"	f	struct:boost::multi_index::detail::const_identity_base	access:public	signature:(const reference_wrapper<Type>& x) const
boost::multi_index::detail::const_identity_base::operator ()	multi_index/identity.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::const_identity_base	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::detail::const_identity_base::result_type	multi_index/identity.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::const_identity_base	access:public
boost::multi_index::detail::const_member_base	multi_index/member.hpp	/^struct const_member_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::const_member_base::operator ()	multi_index/member.hpp	/^  Type& operator()(const Class& x)const$/;"	f	struct:boost::multi_index::detail::const_member_base	access:public	signature:(const Class& x) const
boost::multi_index::detail::const_member_base::operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<Class>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::const_member_base	access:public	signature:(const reference_wrapper<Class>& x,int=0) const
boost::multi_index::detail::const_member_base::operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<const Class>& x)const$/;"	f	struct:boost::multi_index::detail::const_member_base	access:public	signature:(const reference_wrapper<const Class>& x) const
boost::multi_index::detail::const_member_base::operator ()	multi_index/member.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::const_member_base	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::detail::const_member_base::result_type	multi_index/member.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::const_member_base	access:public
boost::multi_index::detail::const_member_offset_base	multi_index/member.hpp	/^struct const_member_offset_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::const_member_offset_base::operator ()	multi_index/member.hpp	/^  Type& operator()(const Class& x)const$/;"	f	struct:boost::multi_index::detail::const_member_offset_base	access:public	signature:(const Class& x) const
boost::multi_index::detail::const_member_offset_base::operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<Class>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::const_member_offset_base	access:public	signature:(const reference_wrapper<Class>& x,int=0) const
boost::multi_index::detail::const_member_offset_base::operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<const Class>& x)const$/;"	f	struct:boost::multi_index::detail::const_member_offset_base	access:public	signature:(const reference_wrapper<const Class>& x) const
boost::multi_index::detail::const_member_offset_base::operator ()	multi_index/member.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::const_member_offset_base	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::detail::const_member_offset_base::result_type	multi_index/member.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::const_member_offset_base	access:public
boost::multi_index::detail::const_ref_global_fun_base	multi_index/global_fun.hpp	/^struct const_ref_global_fun_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::const_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  Type operator()($/;"	f	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public	signature:( const reference_wrapper< typename remove_const< typename remove_reference<Value>::type>::type>& x,int=0) const
boost::multi_index::detail::const_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  Type operator()($/;"	f	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public	signature:( const reference_wrapper< typename remove_reference<Value>::type>& x) const
boost::multi_index::detail::const_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  Type operator()(Value x)const$/;"	f	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public	signature:(Value x) const
boost::multi_index::detail::const_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::detail::const_ref_global_fun_base::result_type	multi_index/global_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public
boost::multi_index::detail::converter	multi_index/detail/converter.hpp	/^struct converter$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::converter::const_iterator	multi_index/detail/converter.hpp	/^  static typename Index::const_iterator const_iterator($/;"	f	struct:boost::multi_index::detail::converter	access:public	signature:( const MultiIndexContainer& x,typename MultiIndexContainer::node_type* node)
boost::multi_index::detail::converter::index	multi_index/detail/converter.hpp	/^  static Index&       index(MultiIndexContainer& x){return x;}$/;"	f	struct:boost::multi_index::detail::converter	access:public	signature:(MultiIndexContainer& x)
boost::multi_index::detail::converter::index	multi_index/detail/converter.hpp	/^  static const Index& index(const MultiIndexContainer& x){return x;}$/;"	f	struct:boost::multi_index::detail::converter	access:public	signature:(const MultiIndexContainer& x)
boost::multi_index::detail::converter::iterator	multi_index/detail/converter.hpp	/^  static typename Index::iterator iterator($/;"	f	struct:boost::multi_index::detail::converter	access:public	signature:( MultiIndexContainer& x,typename MultiIndexContainer::node_type* node)
boost::multi_index::detail::copy_map	multi_index/detail/copy_map.hpp	/^class copy_map:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::copy_map::al_	multi_index/detail/copy_map.hpp	/^  allocator_type                                  al_;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
boost::multi_index::detail::copy_map::allocator_pointer	multi_index/detail/copy_map.hpp	/^  typedef typename allocator_type::pointer        allocator_pointer;$/;"	t	class:boost::multi_index::detail::copy_map	access:private
boost::multi_index::detail::copy_map::allocator_type	multi_index/detail/copy_map.hpp	/^  >::type                                         allocator_type;$/;"	t	class:boost::multi_index::detail::copy_map	access:private
boost::multi_index::detail::copy_map::begin	multi_index/detail/copy_map.hpp	/^  const_iterator begin()const{return &*spc.data();}$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:() const
boost::multi_index::detail::copy_map::clone	multi_index/detail/copy_map.hpp	/^  void clone(Node* node)$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:(Node* node)
boost::multi_index::detail::copy_map::const_iterator	multi_index/detail/copy_map.hpp	/^  typedef const copy_map_entry<Node>* const_iterator;$/;"	t	class:boost::multi_index::detail::copy_map	access:public
boost::multi_index::detail::copy_map::copy_map	multi_index/detail/copy_map.hpp	/^  copy_map($/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:( const Allocator& al,std::size_t size,Node* header_org,Node* header_cpy)
boost::multi_index::detail::copy_map::deallocate	multi_index/detail/copy_map.hpp	/^  void deallocate(Node* node)$/;"	f	class:boost::multi_index::detail::copy_map	access:private	signature:(Node* node)
boost::multi_index::detail::copy_map::end	multi_index/detail/copy_map.hpp	/^  const_iterator end()const{return &*(spc.data()+n);}$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:() const
boost::multi_index::detail::copy_map::find	multi_index/detail/copy_map.hpp	/^  Node* find(Node* node)const$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:(Node* node) const
boost::multi_index::detail::copy_map::header_cpy_	multi_index/detail/copy_map.hpp	/^  Node*                                           header_cpy_;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
boost::multi_index::detail::copy_map::header_org_	multi_index/detail/copy_map.hpp	/^  Node*                                           header_org_;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
boost::multi_index::detail::copy_map::n	multi_index/detail/copy_map.hpp	/^  std::size_t                                     n;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
boost::multi_index::detail::copy_map::release	multi_index/detail/copy_map.hpp	/^  void release()$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:()
boost::multi_index::detail::copy_map::released	multi_index/detail/copy_map.hpp	/^  bool                                            released;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
boost::multi_index::detail::copy_map::size_	multi_index/detail/copy_map.hpp	/^  std::size_t                                     size_;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
boost::multi_index::detail::copy_map::spc	multi_index/detail/copy_map.hpp	/^  auto_space<copy_map_entry<Node>,Allocator>      spc;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
boost::multi_index::detail::copy_map::~copy_map	multi_index/detail/copy_map.hpp	/^  ~copy_map()$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:()
boost::multi_index::detail::copy_map_entry	multi_index/detail/copy_map.hpp	/^struct copy_map_entry$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::copy_map_entry::copy_map_entry	multi_index/detail/copy_map.hpp	/^  copy_map_entry(Node* f,Node* s):first(f),second(s){}$/;"	f	struct:boost::multi_index::detail::copy_map_entry	access:public	signature:(Node* f,Node* s)
boost::multi_index::detail::copy_map_entry::first	multi_index/detail/copy_map.hpp	/^  Node* first;$/;"	m	struct:boost::multi_index::detail::copy_map_entry	access:public
boost::multi_index::detail::copy_map_entry::operator <	multi_index/detail/copy_map.hpp	/^  bool operator<(const copy_map_entry<Node>& x)const$/;"	f	struct:boost::multi_index::detail::copy_map_entry	access:public	signature:(const copy_map_entry<Node>& x) const
boost::multi_index::detail::copy_map_entry::second	multi_index/detail/copy_map.hpp	/^  Node* second;$/;"	m	struct:boost::multi_index::detail::copy_map_entry	access:public
boost::multi_index::detail::do_not_copy_elements_tag	multi_index/detail/do_not_copy_elements_tag.hpp	/^struct do_not_copy_elements_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::duplicate_tag_list_marker	multi_index/detail/no_duplicate_tags.hpp	/^struct duplicate_tag_list_marker$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::duplicate_tag_list_marker::apply	multi_index/detail/no_duplicate_tags.hpp	/^  struct apply:mpl::fold<$/;"	s	struct:boost::multi_index::detail::duplicate_tag_list_marker	inherits:mpl::fold	access:public
boost::multi_index::detail::duplicate_tag_mark	multi_index/detail/no_duplicate_tags.hpp	/^struct duplicate_tag_mark{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::duplicate_tag_marker	multi_index/detail/no_duplicate_tags.hpp	/^struct duplicate_tag_marker$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::duplicate_tag_marker::apply	multi_index/detail/no_duplicate_tags.hpp	/^  struct apply$/;"	s	struct:boost::multi_index::detail::duplicate_tag_marker	access:public
boost::multi_index::detail::duplicate_tag_marker::apply::type	multi_index/detail/no_duplicate_tags.hpp	/^    > type;$/;"	t	struct:boost::multi_index::detail::duplicate_tag_marker::apply	access:public
boost::multi_index::detail::duplicates_iterator	multi_index/detail/duplicates_iterator.hpp	/^class duplicates_iterator$/;"	c	namespace:boost::multi_index::detail
boost::multi_index::detail::duplicates_iterator::advance	multi_index/detail/duplicates_iterator.hpp	/^  void advance()$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:private	signature:()
boost::multi_index::detail::duplicates_iterator::begin_chunk	multi_index/detail/duplicates_iterator.hpp	/^  Node*     begin_chunk;$/;"	m	class:boost::multi_index::detail::duplicates_iterator	access:private
boost::multi_index::detail::duplicates_iterator::difference_type	multi_index/detail/duplicates_iterator.hpp	/^  typedef std::ptrdiff_t                   difference_type;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
boost::multi_index::detail::duplicates_iterator::duplicates_iterator	multi_index/detail/duplicates_iterator.hpp	/^  duplicates_iterator(Node* end_,Predicate pred_):$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:(Node* end_,Predicate pred_)
boost::multi_index::detail::duplicates_iterator::duplicates_iterator	multi_index/detail/duplicates_iterator.hpp	/^  duplicates_iterator(Node* node_,Node* end_,Predicate pred_):$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:(Node* node_,Node* end_,Predicate pred_)
boost::multi_index::detail::duplicates_iterator::end	multi_index/detail/duplicates_iterator.hpp	/^  Node*     end;$/;"	m	class:boost::multi_index::detail::duplicates_iterator	access:private
boost::multi_index::detail::duplicates_iterator::get_node	multi_index/detail/duplicates_iterator.hpp	/^  Node* get_node()const{return node;}$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:() const
boost::multi_index::detail::duplicates_iterator::iterator_category	multi_index/detail/duplicates_iterator.hpp	/^  typedef std::forward_iterator_tag        iterator_category;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
boost::multi_index::detail::duplicates_iterator::node	multi_index/detail/duplicates_iterator.hpp	/^  Node*     node;$/;"	m	class:boost::multi_index::detail::duplicates_iterator	access:private
boost::multi_index::detail::duplicates_iterator::operator *	multi_index/detail/duplicates_iterator.hpp	/^  reference operator*()const$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:() const
boost::multi_index::detail::duplicates_iterator::operator ++	multi_index/detail/duplicates_iterator.hpp	/^  duplicates_iterator operator++(int)$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:(int)
boost::multi_index::detail::duplicates_iterator::operator ++	multi_index/detail/duplicates_iterator.hpp	/^  duplicates_iterator& operator++()$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:()
boost::multi_index::detail::duplicates_iterator::operator ->	multi_index/detail/duplicates_iterator.hpp	/^  pointer operator->()const$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:() const
boost::multi_index::detail::duplicates_iterator::pointer	multi_index/detail/duplicates_iterator.hpp	/^  typedef const typename Node::value_type* pointer;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
boost::multi_index::detail::duplicates_iterator::pred	multi_index/detail/duplicates_iterator.hpp	/^  Predicate pred;$/;"	m	class:boost::multi_index::detail::duplicates_iterator	access:private
boost::multi_index::detail::duplicates_iterator::reference	multi_index/detail/duplicates_iterator.hpp	/^  typedef const typename Node::value_type& reference;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
boost::multi_index::detail::duplicates_iterator::sync	multi_index/detail/duplicates_iterator.hpp	/^  void sync()$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:private	signature:()
boost::multi_index::detail::duplicates_iterator::value_type	multi_index/detail/duplicates_iterator.hpp	/^  typedef typename Node::value_type        value_type;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
boost::multi_index::detail::emplaced_tag	multi_index/detail/index_base.hpp	/^struct emplaced_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::forward_iter_adaptor_base	multi_index/detail/iter_adaptor.hpp	/^class forward_iter_adaptor_base:$/;"	c	namespace:boost::multi_index::detail	inherits:forward_iterator_helper
boost::multi_index::detail::forward_iter_adaptor_base::final	multi_index/detail/iter_adaptor.hpp	/^  Derived& final(){return *static_cast<Derived*>(this);}$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:private	signature:()
boost::multi_index::detail::forward_iter_adaptor_base::final	multi_index/detail/iter_adaptor.hpp	/^  const Derived& final()const{return *static_cast<const Derived*>(this);}$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:private	signature:() const
boost::multi_index::detail::forward_iter_adaptor_base::operator *	multi_index/detail/iter_adaptor.hpp	/^  reference operator*()const$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:public	signature:() const
boost::multi_index::detail::forward_iter_adaptor_base::operator ++	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator++()$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:public	signature:()
boost::multi_index::detail::forward_iter_adaptor_base::operator ==	multi_index/detail/iter_adaptor.hpp	/^  friend bool operator==(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
boost::multi_index::detail::forward_iter_adaptor_base::reference	multi_index/detail/iter_adaptor.hpp	/^  typedef typename Base::reference reference;$/;"	t	class:boost::multi_index::detail::forward_iter_adaptor_base	access:public
boost::multi_index::detail::has_tag	multi_index/detail/has_tag.hpp	/^struct has_tag$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::has_tag::apply	multi_index/detail/has_tag.hpp	/^  struct apply:mpl::contains<BOOST_DEDUCED_TYPENAME Index::tag_list,Tag>$/;"	s	struct:boost::multi_index::detail::has_tag	inherits:mpl::contains	access:public
boost::multi_index::detail::has_uintptr_type	multi_index/detail/uintptr_type.hpp	/^typedef mpl::bool_<uintptr_aux::has_uintptr_type> has_uintptr_type;$/;"	t	namespace:boost::multi_index::detail
boost::multi_index::detail::hashed_index	multi_index/hashed_index.hpp	/^class hashed_index:$/;"	c	namespace:boost::multi_index::detail	inherits:BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDSSuperMeta::type,safe_ctr_proxy_impl
boost::multi_index::detail::hashed_index::allocator_type	multi_index/hashed_index.hpp	/^  typedef typename super::final_allocator_type       allocator_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::begin	multi_index/hashed_index.hpp	/^  const_iterator begin()const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::begin	multi_index/hashed_index.hpp	/^  const_local_iterator begin(size_type n)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
boost::multi_index::detail::hashed_index::begin	multi_index/hashed_index.hpp	/^  iterator begin()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
boost::multi_index::detail::hashed_index::begin	multi_index/hashed_index.hpp	/^  local_iterator begin(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n)
boost::multi_index::detail::hashed_index::bucket	multi_index/hashed_index.hpp	/^  size_type bucket(key_param_type k)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(key_param_type k) const
boost::multi_index::detail::hashed_index::bucket_array_type	multi_index/hashed_index.hpp	/^    typename super::final_allocator_type>            bucket_array_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::bucket_count	multi_index/hashed_index.hpp	/^  size_type bucket_count()const{return buckets.size();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::bucket_size	multi_index/hashed_index.hpp	/^  size_type bucket_size(size_type n)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
boost::multi_index::detail::hashed_index::buckets	multi_index/hashed_index.hpp	/^  bucket_array_type            buckets;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::calculate_max_load	multi_index/hashed_index.hpp	/^  void calculate_max_load()$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:()
boost::multi_index::detail::hashed_index::cbegin	multi_index/hashed_index.hpp	/^  const_iterator cbegin()const{return begin();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::cbegin	multi_index/hashed_index.hpp	/^  const_local_iterator cbegin(size_type n)const{return begin(n);}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
boost::multi_index::detail::hashed_index::cend	multi_index/hashed_index.hpp	/^  const_iterator cend()const{return end();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::cend	multi_index/hashed_index.hpp	/^  const_local_iterator cend(size_type n)const{return end(n);}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
boost::multi_index::detail::hashed_index::check_invariant_	multi_index/hashed_index.hpp	/^  void check_invariant_()const{this->final_check_invariant_();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::clear	multi_index/hashed_index.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
boost::multi_index::detail::hashed_index::clear_	multi_index/hashed_index.hpp	/^  void clear_()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
boost::multi_index::detail::hashed_index::const_iterator	multi_index/hashed_index.hpp	/^  typedef iterator                                   const_iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::const_iterator_type_list	multi_index/hashed_index.hpp	/^    const_iterator>::type                     const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
boost::multi_index::detail::hashed_index::const_local_iterator	multi_index/hashed_index.hpp	/^  typedef const_iterator                             const_local_iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::const_pointer	multi_index/hashed_index.hpp	/^  typedef typename allocator_type::const_pointer     const_pointer;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::const_reference	multi_index/hashed_index.hpp	/^  typedef typename allocator_type::const_reference   const_reference;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::copy_	multi_index/hashed_index.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x, const copy_map_type& map)
boost::multi_index::detail::hashed_index::copy_map_type	multi_index/hashed_index.hpp	/^  typedef typename super::copy_map_type       copy_map_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
boost::multi_index::detail::hashed_index::count	multi_index/hashed_index.hpp	/^  size_type count($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const CompatibleKey& k, const CompatibleHash& hash,const CompatiblePred& eq) const
boost::multi_index::detail::hashed_index::count	multi_index/hashed_index.hpp	/^  size_type count(const CompatibleKey& k)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const CompatibleKey& k) const
boost::multi_index::detail::hashed_index::ctor_args	multi_index/hashed_index.hpp	/^    key_from_value,hasher,key_equal>                 ctor_args;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::ctor_args_list	multi_index/hashed_index.hpp	/^    typename super::ctor_args_list>           ctor_args_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
boost::multi_index::detail::hashed_index::delete_all_nodes_	multi_index/hashed_index.hpp	/^  void delete_all_nodes_()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
boost::multi_index::detail::hashed_index::detach_iterators	multi_index/hashed_index.hpp	/^  void detach_iterators(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x)
boost::multi_index::detail::hashed_index::difference_type	multi_index/hashed_index.hpp	/^  typedef std::ptrdiff_t                             difference_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::emplace_hint_impl	multi_index/hashed_index.hpp	/^  iterator emplace_hint_impl($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( iterator position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::hashed_index::emplace_impl	multi_index/hashed_index.hpp	/^  std::pair<iterator,bool> emplace_impl(BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::hashed_index::emplace_return_type	multi_index/hashed_index.hpp	/^  typedef std::pair<iterator,bool>                     emplace_return_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::empty	multi_index/hashed_index.hpp	/^  bool      empty()const{return this->final_empty_();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::end	multi_index/hashed_index.hpp	/^  const_iterator end()const{return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::end	multi_index/hashed_index.hpp	/^  const_local_iterator end(size_type n)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
boost::multi_index::detail::hashed_index::end	multi_index/hashed_index.hpp	/^  iterator       end(){return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
boost::multi_index::detail::hashed_index::end	multi_index/hashed_index.hpp	/^  local_iterator end(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n)
boost::multi_index::detail::hashed_index::eq_	multi_index/hashed_index.hpp	/^  key_equal                    eq_;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::equal_range	multi_index/hashed_index.hpp	/^  std::pair<iterator,iterator> equal_range($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const CompatibleKey& k, const CompatibleHash& hash,const CompatiblePred& eq) const
boost::multi_index::detail::hashed_index::equal_range	multi_index/hashed_index.hpp	/^  std::pair<iterator,iterator> equal_range(const CompatibleKey& k)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const CompatibleKey& k) const
boost::multi_index::detail::hashed_index::erase	multi_index/hashed_index.hpp	/^  iterator erase(iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator first,iterator last)
boost::multi_index::detail::hashed_index::erase	multi_index/hashed_index.hpp	/^  iterator erase(iterator position)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position)
boost::multi_index::detail::hashed_index::erase	multi_index/hashed_index.hpp	/^  size_type erase(key_param_type k)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(key_param_type k)
boost::multi_index::detail::hashed_index::erase_	multi_index/hashed_index.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* x)
boost::multi_index::detail::hashed_index::final_node_type	multi_index/hashed_index.hpp	/^  typedef typename super::final_node_type     final_node_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
boost::multi_index::detail::hashed_index::find	multi_index/hashed_index.hpp	/^  iterator find($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const CompatibleKey& k, const CompatibleHash& hash,const CompatiblePred& eq) const
boost::multi_index::detail::hashed_index::find	multi_index/hashed_index.hpp	/^  iterator find(const CompatibleKey& k)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const CompatibleKey& k) const
boost::multi_index::detail::hashed_index::find_bucket	multi_index/hashed_index.hpp	/^  std::size_t find_bucket(value_param_type v)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(value_param_type v) const
boost::multi_index::detail::hashed_index::first_bucket	multi_index/hashed_index.hpp	/^  std::size_t                  first_bucket;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::get_allocator	multi_index/hashed_index.hpp	/^  allocator_type get_allocator()const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::hash_	multi_index/hashed_index.hpp	/^  hasher                       hash_;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::hash_function	multi_index/hashed_index.hpp	/^  hasher         hash_function()const{return hash_;}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::hashed_index	multi_index/hashed_index.hpp	/^  hashed_index($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::hashed_index::hashed_index	multi_index/hashed_index.hpp	/^  hashed_index($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x, do_not_copy_elements_tag)
boost::multi_index::detail::hashed_index::hashed_index	multi_index/hashed_index.hpp	/^  hashed_index(const ctor_args_list& args_list,const allocator_type& al):$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const ctor_args_list& args_list,const allocator_type& al)
boost::multi_index::detail::hashed_index::hasher	multi_index/hashed_index.hpp	/^  typedef Hash                                       hasher;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::header	multi_index/hashed_index.hpp	/^  node_type* header()const{return this->final_header();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:() const
boost::multi_index::detail::hashed_index::in_place	multi_index/hashed_index.hpp	/^  bool in_place($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( node_impl_pointer x,key_param_type k,std::size_t buc, hashed_non_unique_tag) const
boost::multi_index::detail::hashed_index::in_place	multi_index/hashed_index.hpp	/^  bool in_place($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( node_impl_pointer x,key_param_type k,std::size_t buc, hashed_unique_tag) const
boost::multi_index::detail::hashed_index::index_loader_type	multi_index/hashed_index.hpp	/^  typedef typename super::index_loader_type   index_loader_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
boost::multi_index::detail::hashed_index::index_saver_type	multi_index/hashed_index.hpp	/^  typedef typename super::index_saver_type    index_saver_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
boost::multi_index::detail::hashed_index::index_type_list	multi_index/hashed_index.hpp	/^    hashed_index>::type                       index_type_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
boost::multi_index::detail::hashed_index::insert	multi_index/hashed_index.hpp	/^  iterator insert(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
boost::multi_index::detail::hashed_index::insert	multi_index/hashed_index.hpp	/^  iterator insert(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,const value_type& x)
boost::multi_index::detail::hashed_index::insert	multi_index/hashed_index.hpp	/^  std::pair<iterator,bool> insert(const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::hashed_index::insert	multi_index/hashed_index.hpp	/^  void insert(InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(InputIterator first,InputIterator last)
boost::multi_index::detail::hashed_index::insert	multi_index/hashed_index.hpp	/^  void insert(std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(std::initializer_list<value_type> list)
boost::multi_index::detail::hashed_index::insert_	multi_index/hashed_index.hpp	/^  node_type* insert_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( value_param_type v,node_type* position,node_type* x,Variant variant)
boost::multi_index::detail::hashed_index::insert_	multi_index/hashed_index.hpp	/^  node_type* insert_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
boost::multi_index::detail::hashed_index::invariant_	multi_index/hashed_index.hpp	/^  bool invariant_()const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::iterator	multi_index/hashed_index.hpp	/^        node_type,bucket_array_type> > >             iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::iterator	multi_index/hashed_index.hpp	/^    hashed_index>                                    iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::iterator	multi_index/hashed_index.hpp	/^    node_type,bucket_array_type>                     iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::iterator_to	multi_index/hashed_index.hpp	/^  const_iterator iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x) const
boost::multi_index::detail::hashed_index::iterator_to	multi_index/hashed_index.hpp	/^  iterator iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::hashed_index::iterator_type_list	multi_index/hashed_index.hpp	/^    iterator>::type                           iterator_type_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
boost::multi_index::detail::hashed_index::key	multi_index/hashed_index.hpp	/^  key_from_value               key;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::key_eq	multi_index/hashed_index.hpp	/^  key_equal      key_eq()const{return eq_;}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::key_equal	multi_index/hashed_index.hpp	/^  typedef Pred                                       key_equal;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::key_extractor	multi_index/hashed_index.hpp	/^  key_from_value key_extractor()const{return key;}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::key_from_value	multi_index/hashed_index.hpp	/^  typedef KeyFromValue                               key_from_value;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::key_param_type	multi_index/hashed_index.hpp	/^    key_type>::param_type                              key_param_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::key_type	multi_index/hashed_index.hpp	/^  typedef typename KeyFromValue::result_type         key_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::link	multi_index/hashed_index.hpp	/^  static void link(node_impl_pointer x,node_impl_pointer pos)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_impl_pointer x,node_impl_pointer pos)
boost::multi_index::detail::hashed_index::link	multi_index/hashed_index.hpp	/^  static void link(node_type* x,node_impl_pointer pos)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x,node_impl_pointer pos)
boost::multi_index::detail::hashed_index::link_point	multi_index/hashed_index.hpp	/^  bool link_point($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( value_param_type v,node_impl_pointer& pos,hashed_non_unique_tag)
boost::multi_index::detail::hashed_index::link_point	multi_index/hashed_index.hpp	/^  bool link_point($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( value_param_type v,node_impl_pointer& pos,hashed_unique_tag)
boost::multi_index::detail::hashed_index::load_	multi_index/hashed_index.hpp	/^  void load_(Archive& ar,const unsigned int version,const index_loader_type& lm)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(Archive& ar,const unsigned int version,const index_loader_type& lm)
boost::multi_index::detail::hashed_index::load_factor	multi_index/hashed_index.hpp	/^  float load_factor()const{return static_cast<float>(size())\/bucket_count();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::local_iterator	multi_index/hashed_index.hpp	/^  typedef iterator                                   local_iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::local_iterator_to	multi_index/hashed_index.hpp	/^  const_local_iterator local_iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x) const
boost::multi_index::detail::hashed_index::local_iterator_to	multi_index/hashed_index.hpp	/^  local_iterator local_iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::hashed_index::make_iterator	multi_index/hashed_index.hpp	/^  const_iterator make_iterator(node_type* node)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* node) const
boost::multi_index::detail::hashed_index::make_iterator	multi_index/hashed_index.hpp	/^  iterator make_iterator(node_type* node)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* node)
boost::multi_index::detail::hashed_index::max_bucket_count	multi_index/hashed_index.hpp	/^  size_type max_bucket_count()const{return static_cast<size_type>(-1);}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::max_load	multi_index/hashed_index.hpp	/^  size_type                    max_load;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::max_load_factor	multi_index/hashed_index.hpp	/^  float max_load_factor()const{return mlf;}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::max_load_factor	multi_index/hashed_index.hpp	/^  void  max_load_factor(float z){mlf=z;calculate_max_load();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(float z)
boost::multi_index::detail::hashed_index::max_size	multi_index/hashed_index.hpp	/^  size_type max_size()const{return this->final_max_size_();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::mlf	multi_index/hashed_index.hpp	/^  float                        mlf;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::modify	multi_index/hashed_index.hpp	/^  bool modify(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,Modifier mod)
boost::multi_index::detail::hashed_index::modify	multi_index/hashed_index.hpp	/^  bool modify(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
boost::multi_index::detail::hashed_index::modify_	multi_index/hashed_index.hpp	/^  bool modify_(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* x)
boost::multi_index::detail::hashed_index::modify_key	multi_index/hashed_index.hpp	/^  bool modify_key(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,Modifier mod)
boost::multi_index::detail::hashed_index::modify_key	multi_index/hashed_index.hpp	/^  bool modify_key(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
boost::multi_index::detail::hashed_index::modify_rollback_	multi_index/hashed_index.hpp	/^  bool modify_rollback_(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* x)
boost::multi_index::detail::hashed_index::node_impl_pointer	multi_index/hashed_index.hpp	/^  typedef typename node_impl_type::pointer           node_impl_pointer;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::node_impl_type	multi_index/hashed_index.hpp	/^  typedef typename node_type::impl_type              node_impl_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::node_type	multi_index/hashed_index.hpp	/^    typename super::node_type>                       node_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
boost::multi_index::detail::hashed_index::operator =	multi_index/hashed_index.hpp	/^  hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& operator=($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::hashed_index::operator =	multi_index/hashed_index.hpp	/^  hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& operator=($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( std::initializer_list<value_type> list)
boost::multi_index::detail::hashed_index::pointer	multi_index/hashed_index.hpp	/^  typedef typename allocator_type::pointer           pointer;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::prev	multi_index/hashed_index.hpp	/^  static node_impl_pointer prev(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x)
boost::multi_index::detail::hashed_index::prev_from	multi_index/hashed_index.hpp	/^  static node_impl_pointer prev_from(node_type* x,node_impl_pointer y)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x,node_impl_pointer y)
boost::multi_index::detail::hashed_index::reference	multi_index/hashed_index.hpp	/^  typedef typename allocator_type::reference         reference;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::rehash	multi_index/hashed_index.hpp	/^  void rehash(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n)
boost::multi_index::detail::hashed_index::replace	multi_index/hashed_index.hpp	/^  bool replace(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
boost::multi_index::detail::hashed_index::replace	multi_index/hashed_index.hpp	/^  bool replace(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,const value_type& x)
boost::multi_index::detail::hashed_index::replace_	multi_index/hashed_index.hpp	/^  bool replace_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
boost::multi_index::detail::hashed_index::reserve	multi_index/hashed_index.hpp	/^  void reserve(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(size_type n)
boost::multi_index::detail::hashed_index::safe_super	multi_index/hashed_index.hpp	/^    hashed_index>                             safe_super;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::save_	multi_index/hashed_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm) const
boost::multi_index::detail::hashed_index::size	multi_index/hashed_index.hpp	/^  size_type size()const{return this->final_size_();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
boost::multi_index::detail::hashed_index::size_type	multi_index/hashed_index.hpp	/^  typedef std::size_t                                size_type;      $/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::super	multi_index/hashed_index.hpp	/^  typedef typename SuperMeta::type                   super;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::swap	multi_index/hashed_index.hpp	/^  void swap(hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::hashed_index::swap_	multi_index/hashed_index.hpp	/^  void swap_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::hashed_index::swap_elements_	multi_index/hashed_index.hpp	/^  void swap_elements_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::hashed_index::tag_list	multi_index/hashed_index.hpp	/^  typedef TagList                                    tag_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::unchecked_rehash	multi_index/hashed_index.hpp	/^  void unchecked_rehash(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(size_type n)
boost::multi_index::detail::hashed_index::unlink	multi_index/hashed_index.hpp	/^  static void unlink(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x)
boost::multi_index::detail::hashed_index::unlink_next	multi_index/hashed_index.hpp	/^  static void unlink_next(node_impl_pointer x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_impl_pointer x)
boost::multi_index::detail::hashed_index::value_param_type	multi_index/hashed_index.hpp	/^  typedef typename call_traits<value_type>::param_type value_param_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
boost::multi_index::detail::hashed_index::value_type	multi_index/hashed_index.hpp	/^  typedef typename node_type::value_type             value_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
boost::multi_index::detail::hashed_index::~hashed_index	multi_index/hashed_index.hpp	/^  ~hashed_index()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
boost::multi_index::detail::hashed_index_args	multi_index/detail/hash_index_args.hpp	/^struct hashed_index_args$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::hashed_index_args::BOOST_STATIC_ASSERT	multi_index/detail/hash_index_args.hpp	/^  BOOST_STATIC_ASSERT(is_tag<tag_list_type>::value);$/;"	p	struct:boost::multi_index::detail::hashed_index_args	access:public	signature:(is_tag<tag_list_type>::value)
boost::multi_index::detail::hashed_index_args::full_form	multi_index/detail/hash_index_args.hpp	/^  typedef is_tag<Arg1> full_form;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
boost::multi_index::detail::hashed_index_args::hash_type	multi_index/detail/hash_index_args.hpp	/^  >::type                                            hash_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
boost::multi_index::detail::hashed_index_args::key_from_value_type	multi_index/detail/hash_index_args.hpp	/^    Arg1>::type                                      key_from_value_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
boost::multi_index::detail::hashed_index_args::pred_type	multi_index/detail/hash_index_args.hpp	/^  >::type                                            pred_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
boost::multi_index::detail::hashed_index_args::supplied_hash_type	multi_index/detail/hash_index_args.hpp	/^    Arg2>::type                                      supplied_hash_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
boost::multi_index::detail::hashed_index_args::supplied_pred_type	multi_index/detail/hash_index_args.hpp	/^    Arg3>::type                                      supplied_pred_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
boost::multi_index::detail::hashed_index_args::tag_list_type	multi_index/detail/hash_index_args.hpp	/^    tag< > >::type                                   tag_list_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
boost::multi_index::detail::hashed_index_iterator	multi_index/detail/hash_index_iterator.hpp	/^class hashed_index_iterator:$/;"	c	namespace:boost::multi_index::detail	inherits:forward_iterator_helper
boost::multi_index::detail::hashed_index_iterator::buckets	multi_index/detail/hash_index_iterator.hpp	/^  BucketArray* buckets;$/;"	m	class:boost::multi_index::detail::hashed_index_iterator	access:private
boost::multi_index::detail::hashed_index_iterator::get_node	multi_index/detail/hash_index_iterator.hpp	/^  Node* get_node()const{return node;}$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:() const
boost::multi_index::detail::hashed_index_iterator::hashed_index_iterator	multi_index/detail/hash_index_iterator.hpp	/^  hashed_index_iterator(){}$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:()
boost::multi_index::detail::hashed_index_iterator::hashed_index_iterator	multi_index/detail/hash_index_iterator.hpp	/^  hashed_index_iterator(Node* node_,BucketArray* buckets_):$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:(Node* node_,BucketArray* buckets_)
boost::multi_index::detail::hashed_index_iterator::load	multi_index/detail/hash_index_iterator.hpp	/^  void load(Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:(Archive& ar,const unsigned int)
boost::multi_index::detail::hashed_index_iterator::node	multi_index/detail/hash_index_iterator.hpp	/^  Node*        node;$/;"	m	class:boost::multi_index::detail::hashed_index_iterator	access:private
boost::multi_index::detail::hashed_index_iterator::node_base_type	multi_index/detail/hash_index_iterator.hpp	/^  typedef typename Node::base_type node_base_type;$/;"	t	class:boost::multi_index::detail::hashed_index_iterator	access:public
boost::multi_index::detail::hashed_index_iterator::node_type	multi_index/detail/hash_index_iterator.hpp	/^  typedef Node node_type;$/;"	t	class:boost::multi_index::detail::hashed_index_iterator	access:public
boost::multi_index::detail::hashed_index_iterator::operator *	multi_index/detail/hash_index_iterator.hpp	/^  const typename Node::value_type& operator*()const$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:() const
boost::multi_index::detail::hashed_index_iterator::operator ++	multi_index/detail/hash_index_iterator.hpp	/^  hashed_index_iterator& operator++()$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:()
boost::multi_index::detail::hashed_index_iterator::save	multi_index/detail/hash_index_iterator.hpp	/^  void save(Archive& ar,const unsigned int)const$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:(Archive& ar,const unsigned int) const
boost::multi_index::detail::hashed_index_node	multi_index/detail/hash_index_node.hpp	/^struct hashed_index_node:Super,hashed_index_node_trampoline<Super>$/;"	s	namespace:boost::multi_index::detail	inherits:Super,hashed_index_node_trampoline
boost::multi_index::detail::hashed_index_node::const_impl_pointer	multi_index/detail/hash_index_node.hpp	/^  typedef typename trampoline::const_pointer const_impl_pointer;$/;"	t	struct:boost::multi_index::detail::hashed_index_node	access:public
boost::multi_index::detail::hashed_index_node::from_impl	multi_index/detail/hash_index_node.hpp	/^  static const hashed_index_node* from_impl(const_impl_pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:(const_impl_pointer x)
boost::multi_index::detail::hashed_index_node::from_impl	multi_index/detail/hash_index_node.hpp	/^  static hashed_index_node* from_impl(impl_pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:(impl_pointer x)
boost::multi_index::detail::hashed_index_node::impl	multi_index/detail/hash_index_node.hpp	/^  const_impl_pointer impl()const$/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:() const
boost::multi_index::detail::hashed_index_node::impl	multi_index/detail/hash_index_node.hpp	/^  impl_pointer impl()$/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:()
boost::multi_index::detail::hashed_index_node::impl_pointer	multi_index/detail/hash_index_node.hpp	/^  typedef typename trampoline::pointer       impl_pointer;$/;"	t	struct:boost::multi_index::detail::hashed_index_node	access:public
boost::multi_index::detail::hashed_index_node::impl_type	multi_index/detail/hash_index_node.hpp	/^  typedef typename trampoline::impl_type     impl_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_node	access:public
boost::multi_index::detail::hashed_index_node::increment	multi_index/detail/hash_index_node.hpp	/^  static void increment($/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:( hashed_index_node*& x,impl_pointer bbegin,impl_pointer bend)
boost::multi_index::detail::hashed_index_node::trampoline	multi_index/detail/hash_index_node.hpp	/^  typedef hashed_index_node_trampoline<Super> trampoline;$/;"	t	struct:boost::multi_index::detail::hashed_index_node	access:private
boost::multi_index::detail::hashed_index_node_impl	multi_index/detail/hash_index_node.hpp	/^struct hashed_index_node_impl$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::hashed_index_node_impl::const_pointer	multi_index/detail/hash_index_node.hpp	/^  >::type::const_pointer                          const_pointer;$/;"	t	struct:boost::multi_index::detail::hashed_index_node_impl	access:public
boost::multi_index::detail::hashed_index_node_impl::increment	multi_index/detail/hash_index_node.hpp	/^  static void increment(pointer& x,pointer bbegin,pointer bend)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer& x,pointer bbegin,pointer bend)
boost::multi_index::detail::hashed_index_node_impl::link	multi_index/detail/hash_index_node.hpp	/^  static void link(pointer x,pointer pos)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer x,pointer pos)
boost::multi_index::detail::hashed_index_node_impl::next	multi_index/detail/hash_index_node.hpp	/^  pointer  next()const{return next_;}$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:() const
boost::multi_index::detail::hashed_index_node_impl::next	multi_index/detail/hash_index_node.hpp	/^  pointer& next(){return next_;}$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:()
boost::multi_index::detail::hashed_index_node_impl::next_	multi_index/detail/hash_index_node.hpp	/^  pointer next_;$/;"	m	struct:boost::multi_index::detail::hashed_index_node_impl	access:private
boost::multi_index::detail::hashed_index_node_impl::pointer	multi_index/detail/hash_index_node.hpp	/^  >::type::pointer                                pointer;$/;"	t	struct:boost::multi_index::detail::hashed_index_node_impl	access:public
boost::multi_index::detail::hashed_index_node_impl::prev	multi_index/detail/hash_index_node.hpp	/^  static pointer prev(pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer x)
boost::multi_index::detail::hashed_index_node_impl::unlink	multi_index/detail/hash_index_node.hpp	/^  static void unlink(pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer x)
boost::multi_index::detail::hashed_index_node_impl::unlink_next	multi_index/detail/hash_index_node.hpp	/^  static void unlink_next(pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer x)
boost::multi_index::detail::hashed_index_node_trampoline	multi_index/detail/hash_index_node.hpp	/^struct hashed_index_node_trampoline:$/;"	s	namespace:boost::multi_index::detail	inherits:prevent_eti::type
boost::multi_index::detail::hashed_index_node_trampoline::impl_type	multi_index/detail/hash_index_node.hpp	/^  >::type impl_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_node_trampoline	access:public
boost::multi_index::detail::hashed_non_unique_tag	multi_index/hashed_index.hpp	/^struct hashed_non_unique_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::hashed_unique_tag	multi_index/hashed_index.hpp	/^struct hashed_unique_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::header_holder	multi_index/detail/header_holder.hpp	/^struct header_holder:private noncopyable$/;"	s	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::header_holder::final	multi_index/detail/header_holder.hpp	/^  Final& final(){return *static_cast<Final*>(this);}$/;"	f	struct:boost::multi_index::detail::header_holder	access:private	signature:()
boost::multi_index::detail::header_holder::header_holder	multi_index/detail/header_holder.hpp	/^  header_holder():member(final().allocate_node()){}$/;"	f	struct:boost::multi_index::detail::header_holder	access:public	signature:()
boost::multi_index::detail::header_holder::member	multi_index/detail/header_holder.hpp	/^  NodeTypePtr member;$/;"	m	struct:boost::multi_index::detail::header_holder	access:public
boost::multi_index::detail::header_holder::~header_holder	multi_index/detail/header_holder.hpp	/^  ~header_holder(){final().deallocate_node(&*member);}$/;"	f	struct:boost::multi_index::detail::header_holder	access:public	signature:()
boost::multi_index::detail::index_applier	multi_index/detail/base_type.hpp	/^struct index_applier$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::index_applier::apply	multi_index/detail/base_type.hpp	/^  struct apply:$/;"	s	struct:boost::multi_index::detail::index_applier	inherits:msvc_index_specifier::,result_index_class	access:public
boost::multi_index::detail::index_args_default_compare	multi_index/detail/ord_index_args.hpp	/^struct index_args_default_compare$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::index_args_default_compare::type	multi_index/detail/ord_index_args.hpp	/^  typedef std::less<typename KeyFromValue::result_type> type;$/;"	t	struct:boost::multi_index::detail::index_args_default_compare	access:public
boost::multi_index::detail::index_args_default_hash	multi_index/detail/hash_index_args.hpp	/^struct index_args_default_hash$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::index_args_default_hash::type	multi_index/detail/hash_index_args.hpp	/^  typedef ::boost::hash<typename KeyFromValue::result_type> type;$/;"	t	struct:boost::multi_index::detail::index_args_default_hash	access:public
boost::multi_index::detail::index_args_default_pred	multi_index/detail/hash_index_args.hpp	/^struct index_args_default_pred$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::index_args_default_pred::type	multi_index/detail/hash_index_args.hpp	/^  typedef std::equal_to<typename KeyFromValue::result_type> type;$/;"	t	struct:boost::multi_index::detail::index_args_default_pred	access:public
boost::multi_index::detail::index_base	multi_index/detail/index_base.hpp	/^class index_base$/;"	c	namespace:boost::multi_index::detail
boost::multi_index::detail::index_base::clear_	multi_index/detail/index_base.hpp	/^  void clear_(){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:()
boost::multi_index::detail::index_base::const_iterator_type_list	multi_index/detail/index_base.hpp	/^  typedef mpl::vector0<>                      const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::copy_	multi_index/detail/index_base.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const index_base<Value,IndexSpecifierList,Allocator>&,const copy_map_type&)
boost::multi_index::detail::index_base::copy_map_type	multi_index/detail/index_base.hpp	/^    final_allocator_type>                     copy_map_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::ctor_args_list	multi_index/detail/index_base.hpp	/^  typedef tuples::null_type                   ctor_args_list;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::delete_node_	multi_index/detail/index_base.hpp	/^  void delete_node_(node_type* x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(node_type* x)
boost::multi_index::detail::index_base::erase_	multi_index/detail/index_base.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(node_type* x)
boost::multi_index::detail::index_base::final	multi_index/detail/index_base.hpp	/^  const final_type& final()const{return *static_cast<const final_type*>(this);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
boost::multi_index::detail::index_base::final	multi_index/detail/index_base.hpp	/^  final_type&       final(){return *static_cast<final_type*>(this);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:()
boost::multi_index::detail::index_base::final_allocator_type	multi_index/detail/index_base.hpp	/^      typename Allocator::value_type>::type   final_allocator_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::final_check_invariant_	multi_index/detail/index_base.hpp	/^  void final_check_invariant_()const{final().check_invariant_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
boost::multi_index::detail::index_base::final_clear_	multi_index/detail/index_base.hpp	/^  void final_clear_(){final().clear_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:()
boost::multi_index::detail::index_base::final_delete_all_nodes_	multi_index/detail/index_base.hpp	/^  void final_delete_all_nodes_(){final().delete_all_nodes_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:()
boost::multi_index::detail::index_base::final_delete_node_	multi_index/detail/index_base.hpp	/^  void final_delete_node_(final_node_type* x){final().delete_node_(x);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(final_node_type* x)
boost::multi_index::detail::index_base::final_emplace_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_emplace_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::index_base::final_emplace_hint_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_emplace_hint_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( final_node_type* position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::index_base::final_empty_	multi_index/detail/index_base.hpp	/^  bool        final_empty_()const{return final().empty_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
boost::multi_index::detail::index_base::final_erase_	multi_index/detail/index_base.hpp	/^  void final_erase_(final_node_type* x){final().erase_(x);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(final_node_type* x)
boost::multi_index::detail::index_base::final_header	multi_index/detail/index_base.hpp	/^  final_node_type* final_header()const{return final().header();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
boost::multi_index::detail::index_base::final_insert_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const value_type& x,final_node_type* position)
boost::multi_index::detail::index_base::final_insert_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_(const value_type& x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& x)
boost::multi_index::detail::index_base::final_insert_ref_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_ref_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( T& t,final_node_type* position)
boost::multi_index::detail::index_base::final_insert_ref_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_ref_(T& t)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(T& t)
boost::multi_index::detail::index_base::final_insert_rv_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_rv_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const value_type& x,final_node_type* position)
boost::multi_index::detail::index_base::final_insert_rv_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_rv_(const value_type& x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& x)
boost::multi_index::detail::index_base::final_max_size_	multi_index/detail/index_base.hpp	/^  std::size_t final_max_size_()const{return final().max_size_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
boost::multi_index::detail::index_base::final_modify_	multi_index/detail/index_base.hpp	/^  bool final_modify_(Modifier& mod,Rollback& back,final_node_type* x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(Modifier& mod,Rollback& back,final_node_type* x)
boost::multi_index::detail::index_base::final_modify_	multi_index/detail/index_base.hpp	/^  bool final_modify_(Modifier& mod,final_node_type* x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(Modifier& mod,final_node_type* x)
boost::multi_index::detail::index_base::final_node_type	multi_index/detail/index_base.hpp	/^    Value,IndexSpecifierList,Allocator>::type final_node_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::final_replace_	multi_index/detail/index_base.hpp	/^  bool final_replace_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const value_type& k,final_node_type* x)
boost::multi_index::detail::index_base::final_replace_rv_	multi_index/detail/index_base.hpp	/^  bool final_replace_rv_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const value_type& k,final_node_type* x)
boost::multi_index::detail::index_base::final_size_	multi_index/detail/index_base.hpp	/^  std::size_t final_size_()const{return final().size_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
boost::multi_index::detail::index_base::final_swap_	multi_index/detail/index_base.hpp	/^  void final_swap_(final_type& x){final().swap_(x);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(final_type& x)
boost::multi_index::detail::index_base::final_type	multi_index/detail/index_base.hpp	/^    Value,IndexSpecifierList,Allocator>       final_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::index_base	multi_index/detail/index_base.hpp	/^  explicit index_base(const ctor_args_list&,const Allocator&){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const ctor_args_list&,const Allocator&)
boost::multi_index::detail::index_base::index_base	multi_index/detail/index_base.hpp	/^  index_base($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const index_base<Value,IndexSpecifierList,Allocator>&, do_not_copy_elements_tag)
boost::multi_index::detail::index_base::index_loader_type	multi_index/detail/index_base.hpp	/^    final_allocator_type>                     index_loader_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::index_saver_type	multi_index/detail/index_base.hpp	/^    final_allocator_type>                     index_saver_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::index_type_list	multi_index/detail/index_base.hpp	/^  typedef mpl::vector0<>                      index_type_list;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type& v,node_type* x,lvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type* x,lvalue_tag)
boost::multi_index::detail::index_base::insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type& v,node_type* x,rvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type* x,rvalue_tag)
boost::multi_index::detail::index_base::insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type& v,node_type*,node_type* x,lvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type*,node_type* x,lvalue_tag)
boost::multi_index::detail::index_base::insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type& v,node_type*,node_type* x,rvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type*,node_type* x,rvalue_tag)
boost::multi_index::detail::index_base::insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type&,node_type* x,emplaced_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type&,node_type* x,emplaced_tag)
boost::multi_index::detail::index_base::insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type&,node_type*,node_type* x,emplaced_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type&,node_type*,node_type* x,emplaced_tag)
boost::multi_index::detail::index_base::invariant_	multi_index/detail/index_base.hpp	/^  bool invariant_()const{return true;}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
boost::multi_index::detail::index_base::iterator_type_list	multi_index/detail/index_base.hpp	/^  typedef mpl::vector0<>                      iterator_type_list;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::load_	multi_index/detail/index_base.hpp	/^  void load_(Archive&,const unsigned int,const index_loader_type&){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(Archive&,const unsigned int,const index_loader_type&)
boost::multi_index::detail::index_base::modify_	multi_index/detail/index_base.hpp	/^  bool modify_(node_type*){return true;}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(node_type*)
boost::multi_index::detail::index_base::modify_rollback_	multi_index/detail/index_base.hpp	/^  bool modify_rollback_(node_type*){return true;}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(node_type*)
boost::multi_index::detail::index_base::node_type	multi_index/detail/index_base.hpp	/^  typedef index_node_base<Value,Allocator>    node_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
boost::multi_index::detail::index_base::replace_	multi_index/detail/index_base.hpp	/^  bool replace_(const value_type& v,node_type* x,lvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type* x,lvalue_tag)
boost::multi_index::detail::index_base::replace_	multi_index/detail/index_base.hpp	/^  bool replace_(const value_type& v,node_type* x,rvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type* x,rvalue_tag)
boost::multi_index::detail::index_base::save_	multi_index/detail/index_base.hpp	/^  void save_(Archive&,const unsigned int,const index_saver_type&)const{}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(Archive&,const unsigned int,const index_saver_type&) const
boost::multi_index::detail::index_base::swap_	multi_index/detail/index_base.hpp	/^  void swap_(index_base<Value,IndexSpecifierList,Allocator>&){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(index_base<Value,IndexSpecifierList,Allocator>&)
boost::multi_index::detail::index_base::swap_elements_	multi_index/detail/index_base.hpp	/^  void swap_elements_(index_base<Value,IndexSpecifierList,Allocator>&){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(index_base<Value,IndexSpecifierList,Allocator>&)
boost::multi_index::detail::index_base::value_type	multi_index/detail/index_base.hpp	/^  typedef Value                               value_type;$/;"	t	class:boost::multi_index::detail::index_base	access:private
boost::multi_index::detail::index_loader	multi_index/detail/index_loader.hpp	/^class index_loader:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::index_loader::add	multi_index/detail/index_loader.hpp	/^  void add(Node* node,Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::index_loader	access:public	signature:(Node* node,Archive& ar,const unsigned int)
boost::multi_index::detail::index_loader::add_track	multi_index/detail/index_loader.hpp	/^  void add_track(Node* node,Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::index_loader	access:public	signature:(Node* node,Archive& ar,const unsigned int)
boost::multi_index::detail::index_loader::check_node	multi_index/detail/index_loader.hpp	/^  void check_node(Node* node)const$/;"	f	class:boost::multi_index::detail::index_loader	access:private	signature:(Node* node) const
boost::multi_index::detail::index_loader::entries	multi_index/detail/index_loader.hpp	/^  Node** entries()const{return &*spc.data();}$/;"	f	class:boost::multi_index::detail::index_loader	access:private	signature:() const
boost::multi_index::detail::index_loader::index_loader	multi_index/detail/index_loader.hpp	/^  index_loader(const Allocator& al,std::size_t size):$/;"	f	class:boost::multi_index::detail::index_loader	access:public	signature:(const Allocator& al,std::size_t size)
boost::multi_index::detail::index_loader::load	multi_index/detail/index_loader.hpp	/^  void load(Rearranger r,Archive& ar,const unsigned int)const$/;"	f	class:boost::multi_index::detail::index_loader	access:public	signature:(Rearranger r,Archive& ar,const unsigned int) const
boost::multi_index::detail::index_loader::load_node	multi_index/detail/index_loader.hpp	/^  FinalNode* load_node(Archive& ar)const$/;"	f	class:boost::multi_index::detail::index_loader	access:private	signature:(Archive& ar) const
boost::multi_index::detail::index_loader::n	multi_index/detail/index_loader.hpp	/^  std::size_t                 n;$/;"	m	class:boost::multi_index::detail::index_loader	access:private
boost::multi_index::detail::index_loader::size_	multi_index/detail/index_loader.hpp	/^  std::size_t                 size_;$/;"	m	class:boost::multi_index::detail::index_loader	access:private
boost::multi_index::detail::index_loader::sorted	multi_index/detail/index_loader.hpp	/^  mutable bool                sorted;$/;"	m	class:boost::multi_index::detail::index_loader	access:private
boost::multi_index::detail::index_loader::spc	multi_index/detail/index_loader.hpp	/^  auto_space<Node*,Allocator> spc;$/;"	m	class:boost::multi_index::detail::index_loader	access:private
boost::multi_index::detail::index_loader::unchecked_load_node	multi_index/detail/index_loader.hpp	/^  FinalNode* unchecked_load_node(Archive& ar)const$/;"	f	class:boost::multi_index::detail::index_loader	access:private	signature:(Archive& ar) const
boost::multi_index::detail::index_matcher	multi_index/detail/index_matcher.hpp	/^namespace index_matcher{$/;"	n	namespace:boost::multi_index::detail
boost::multi_index::detail::index_matcher::algorithm	multi_index/detail/index_matcher.hpp	/^class algorithm:private algorithm_base<Allocator>$/;"	c	namespace:boost::multi_index::detail::index_matcher	inherits:algorithm_base
boost::multi_index::detail::index_matcher::algorithm::add	multi_index/detail/index_matcher.hpp	/^  void add(Node* node)$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:public	signature:(Node* node)
boost::multi_index::detail::index_matcher::algorithm::add_node_to_algorithm	multi_index/detail/index_matcher.hpp	/^  void add_node_to_algorithm(Node* node)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:private	signature:(Node* node) const
boost::multi_index::detail::index_matcher::algorithm::algorithm	multi_index/detail/index_matcher.hpp	/^  algorithm(const Allocator& al,std::size_t size):super(al,size){}$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:public	signature:(const Allocator& al,std::size_t size)
boost::multi_index::detail::index_matcher::algorithm::execute	multi_index/detail/index_matcher.hpp	/^  void execute(IndexIterator first,IndexIterator last)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:public	signature:(IndexIterator first,IndexIterator last) const
boost::multi_index::detail::index_matcher::algorithm::get_node	multi_index/detail/index_matcher.hpp	/^  static Node* get_node(IndexIterator it)$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:private	signature:(IndexIterator it)
boost::multi_index::detail::index_matcher::algorithm::is_ordered	multi_index/detail/index_matcher.hpp	/^  bool is_ordered(Node* node)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:public	signature:(Node* node) const
boost::multi_index::detail::index_matcher::algorithm::super	multi_index/detail/index_matcher.hpp	/^  typedef algorithm_base<Allocator> super;$/;"	t	class:boost::multi_index::detail::index_matcher::algorithm	access:private
boost::multi_index::detail::index_matcher::algorithm_base	multi_index/detail/index_matcher.hpp	/^class algorithm_base:private noncopyable$/;"	c	namespace:boost::multi_index::detail::index_matcher	inherits:noncopyable
boost::multi_index::detail::index_matcher::algorithm_base::add	multi_index/detail/index_matcher.hpp	/^  void add(void* node)$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:(void* node)
boost::multi_index::detail::index_matcher::algorithm_base::add_node_to_algorithm	multi_index/detail/index_matcher.hpp	/^  void add_node_to_algorithm(void* node)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:(void* node) const
boost::multi_index::detail::index_matcher::algorithm_base::algorithm_base	multi_index/detail/index_matcher.hpp	/^  algorithm_base(const Allocator& al,std::size_t size):$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:(const Allocator& al,std::size_t size)
boost::multi_index::detail::index_matcher::algorithm_base::begin_algorithm	multi_index/detail/index_matcher.hpp	/^  void begin_algorithm()const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:() const
boost::multi_index::detail::index_matcher::algorithm_base::entries	multi_index/detail/index_matcher.hpp	/^  entry* entries()const{return &*spc.data();}$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private	signature:() const
boost::multi_index::detail::index_matcher::algorithm_base::finish_algorithm	multi_index/detail/index_matcher.hpp	/^  void finish_algorithm()const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:() const
boost::multi_index::detail::index_matcher::algorithm_base::is_ordered	multi_index/detail/index_matcher.hpp	/^  bool is_ordered(void * node)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:(void * node) const
boost::multi_index::detail::index_matcher::algorithm_base::n_	multi_index/detail/index_matcher.hpp	/^  std::size_t                 n_;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
boost::multi_index::detail::index_matcher::algorithm_base::num_piles	multi_index/detail/index_matcher.hpp	/^  mutable std::size_t         num_piles;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
boost::multi_index::detail::index_matcher::algorithm_base::size_	multi_index/detail/index_matcher.hpp	/^  std::size_t                 size_;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
boost::multi_index::detail::index_matcher::algorithm_base::sorted	multi_index/detail/index_matcher.hpp	/^  mutable bool                sorted;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
boost::multi_index::detail::index_matcher::algorithm_base::spc	multi_index/detail/index_matcher.hpp	/^  auto_space<entry,Allocator> spc;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
boost::multi_index::detail::index_matcher::entry	multi_index/detail/index_matcher.hpp	/^struct entry$/;"	s	namespace:boost::multi_index::detail::index_matcher
boost::multi_index::detail::index_matcher::entry::entry	multi_index/detail/index_matcher.hpp	/^  entry(void* node_,std::size_t pos_=0):node(node_),pos(pos_){}$/;"	f	struct:boost::multi_index::detail::index_matcher::entry	access:public	signature:(void* node_,std::size_t pos_=0)
boost::multi_index::detail::index_matcher::entry::less_by_node	multi_index/detail/index_matcher.hpp	/^  struct less_by_node$/;"	s	struct:boost::multi_index::detail::index_matcher::entry	access:public
boost::multi_index::detail::index_matcher::entry::less_by_node::operator ()	multi_index/detail/index_matcher.hpp	/^    bool operator()($/;"	f	struct:boost::multi_index::detail::index_matcher::entry::less_by_node	access:public	signature:( const entry& x,const entry& y) const
boost::multi_index::detail::index_matcher::entry::less_by_pile_top	multi_index/detail/index_matcher.hpp	/^  struct less_by_pile_top$/;"	s	struct:boost::multi_index::detail::index_matcher::entry	access:public
boost::multi_index::detail::index_matcher::entry::less_by_pile_top::operator ()	multi_index/detail/index_matcher.hpp	/^    bool operator()($/;"	f	struct:boost::multi_index::detail::index_matcher::entry::less_by_pile_top	access:public	signature:( const entry& x,const entry& y) const
boost::multi_index::detail::index_matcher::entry::node	multi_index/detail/index_matcher.hpp	/^  void*       node;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
boost::multi_index::detail::index_matcher::entry::ordered	multi_index/detail/index_matcher.hpp	/^  bool        ordered;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
boost::multi_index::detail::index_matcher::entry::pile_top	multi_index/detail/index_matcher.hpp	/^  std::size_t pile_top;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
boost::multi_index::detail::index_matcher::entry::pile_top_entry	multi_index/detail/index_matcher.hpp	/^  entry*      pile_top_entry;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
boost::multi_index::detail::index_matcher::entry::pos	multi_index/detail/index_matcher.hpp	/^  std::size_t pos;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
boost::multi_index::detail::index_matcher::entry::previous	multi_index/detail/index_matcher.hpp	/^  entry*      previous;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
boost::multi_index::detail::index_node_applier	multi_index/detail/node_type.hpp	/^struct index_node_applier$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::index_node_applier::apply	multi_index/detail/node_type.hpp	/^  struct apply:$/;"	s	struct:boost::multi_index::detail::index_node_applier	inherits:msvc_index_specifier::,result_node_class	access:public
boost::multi_index::detail::index_node_base	multi_index/detail/index_node_base.hpp	/^struct index_node_base:private pod_value_holder<Value>$/;"	s	namespace:boost::multi_index::detail	inherits:pod_value_holder
boost::multi_index::detail::index_node_base::allocator_type	multi_index/detail/index_node_base.hpp	/^  typedef Allocator       allocator_type;$/;"	t	struct:boost::multi_index::detail::index_node_base	access:public
boost::multi_index::detail::index_node_base::base_type	multi_index/detail/index_node_base.hpp	/^  typedef index_node_base base_type; \/* used for serialization purposes *\/$/;"	t	struct:boost::multi_index::detail::index_node_base	access:public
boost::multi_index::detail::index_node_base::from_value	multi_index/detail/index_node_base.hpp	/^  static index_node_base* from_value(const value_type* p)$/;"	f	struct:boost::multi_index::detail::index_node_base	access:public	signature:(const value_type* p)
boost::multi_index::detail::index_node_base::serialize	multi_index/detail/index_node_base.hpp	/^  void serialize(Archive&,const unsigned int)$/;"	f	struct:boost::multi_index::detail::index_node_base	access:private	signature:(Archive&,const unsigned int)
boost::multi_index::detail::index_node_base::value	multi_index/detail/index_node_base.hpp	/^  const value_type& value()const$/;"	f	struct:boost::multi_index::detail::index_node_base	access:public	signature:() const
boost::multi_index::detail::index_node_base::value	multi_index/detail/index_node_base.hpp	/^  value_type& value()$/;"	f	struct:boost::multi_index::detail::index_node_base	access:public	signature:()
boost::multi_index::detail::index_node_base::value_type	multi_index/detail/index_node_base.hpp	/^  typedef Value           value_type;$/;"	t	struct:boost::multi_index::detail::index_node_base	access:public
boost::multi_index::detail::index_saver	multi_index/detail/index_saver.hpp	/^class index_saver:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::index_saver::add	multi_index/detail/index_saver.hpp	/^  void add(Node* node,Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::index_saver	access:public	signature:(Node* node,Archive& ar,const unsigned int)
boost::multi_index::detail::index_saver::add_track	multi_index/detail/index_saver.hpp	/^  void add_track(Node* node,Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::index_saver	access:public	signature:(Node* node,Archive& ar,const unsigned int)
boost::multi_index::detail::index_saver::alg	multi_index/detail/index_saver.hpp	/^  index_matcher::algorithm<Node,Allocator> alg;$/;"	m	class:boost::multi_index::detail::index_saver	access:private
boost::multi_index::detail::index_saver::get_node	multi_index/detail/index_saver.hpp	/^  static Node* get_node(IndexIterator it)$/;"	f	class:boost::multi_index::detail::index_saver	access:private	signature:(IndexIterator it)
boost::multi_index::detail::index_saver::index_saver	multi_index/detail/index_saver.hpp	/^  index_saver(const Allocator& al,std::size_t size):alg(al,size){}$/;"	f	class:boost::multi_index::detail::index_saver	access:public	signature:(const Allocator& al,std::size_t size)
boost::multi_index::detail::index_saver::null_node	multi_index/detail/index_saver.hpp	/^  static Node* null_node(){return 0;}$/;"	f	class:boost::multi_index::detail::index_saver	access:private	signature:()
boost::multi_index::detail::index_saver::save	multi_index/detail/index_saver.hpp	/^  void save($/;"	f	class:boost::multi_index::detail::index_saver	access:public	signature:( IndexIterator first,IndexIterator last,Archive& ar, const unsigned int) const
boost::multi_index::detail::index_saver::save_node	multi_index/detail/index_saver.hpp	/^  static void save_node(Node* node,Archive& ar)$/;"	f	class:boost::multi_index::detail::index_saver	access:private	signature:(Node* node,Archive& ar)
boost::multi_index::detail::is_index_list	multi_index/detail/is_index_list.hpp	/^struct is_index_list$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::is_index_list::BOOST_STATIC_CONSTANT	multi_index/detail/is_index_list.hpp	/^  BOOST_STATIC_CONSTANT(bool,mpl_sequence=mpl::is_sequence<T>::value);$/;"	p	struct:boost::multi_index::detail::is_index_list	access:public	signature:(bool,mpl_sequence=mpl::is_sequence<T>::value)
boost::multi_index::detail::is_index_list::BOOST_STATIC_CONSTANT	multi_index/detail/is_index_list.hpp	/^  BOOST_STATIC_CONSTANT(bool,non_empty=!mpl::empty<T>::value);$/;"	p	struct:boost::multi_index::detail::is_index_list	access:public	signature:(bool,non_empty=!mpl::empty<T>::value)
boost::multi_index::detail::is_index_list::BOOST_STATIC_CONSTANT	multi_index/detail/is_index_list.hpp	/^  BOOST_STATIC_CONSTANT(bool,value=mpl_sequence&&non_empty);$/;"	p	struct:boost::multi_index::detail::is_index_list	access:public	signature:(bool,value=mpl_sequence&&non_empty)
boost::multi_index::detail::is_tag	multi_index/tag.hpp	/^struct is_tag$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::is_tag::BOOST_STATIC_CONSTANT	multi_index/tag.hpp	/^  BOOST_STATIC_CONSTANT(bool,value=(is_base_and_derived<tag_marker,T>::value));$/;"	p	struct:boost::multi_index::detail::is_tag	access:public	signature:(bool,value=(is_base_and_derived<tag_marker,T>::value))
boost::multi_index::detail::iter_adaptor	multi_index/detail/iter_adaptor.hpp	/^class iter_adaptor:public iter_adaptor_base<Derived,Base>::type$/;"	c	namespace:boost::multi_index::detail	inherits:iter_adaptor_base::type
boost::multi_index::detail::iter_adaptor::b	multi_index/detail/iter_adaptor.hpp	/^  Base b;$/;"	m	class:boost::multi_index::detail::iter_adaptor	access:private
boost::multi_index::detail::iter_adaptor::base_reference	multi_index/detail/iter_adaptor.hpp	/^  Base&       base_reference(){return b;}$/;"	f	class:boost::multi_index::detail::iter_adaptor	access:protected	signature:()
boost::multi_index::detail::iter_adaptor::base_reference	multi_index/detail/iter_adaptor.hpp	/^  const Base& base_reference()const{return b;}$/;"	f	class:boost::multi_index::detail::iter_adaptor	access:protected	signature:() const
boost::multi_index::detail::iter_adaptor::iter_adaptor	multi_index/detail/iter_adaptor.hpp	/^  explicit iter_adaptor(const Base& b_):b(b_){}$/;"	f	class:boost::multi_index::detail::iter_adaptor	access:protected	signature:(const Base& b_)
boost::multi_index::detail::iter_adaptor::iter_adaptor	multi_index/detail/iter_adaptor.hpp	/^  iter_adaptor(){}$/;"	f	class:boost::multi_index::detail::iter_adaptor	access:protected	signature:()
boost::multi_index::detail::iter_adaptor_access	multi_index/detail/iter_adaptor.hpp	/^class iter_adaptor_access$/;"	c	namespace:boost::multi_index::detail
boost::multi_index::detail::iter_adaptor_access::advance	multi_index/detail/iter_adaptor.hpp	/^  static void advance(Class& x,typename Class::difference_type n)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(Class& x,typename Class::difference_type n)
boost::multi_index::detail::iter_adaptor_access::decrement	multi_index/detail/iter_adaptor.hpp	/^  static void decrement(Class& x)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(Class& x)
boost::multi_index::detail::iter_adaptor_access::dereference	multi_index/detail/iter_adaptor.hpp	/^    static typename Class::reference dereference(const Class& x)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(const Class& x)
boost::multi_index::detail::iter_adaptor_access::distance_to	multi_index/detail/iter_adaptor.hpp	/^  static typename Class::difference_type distance_to($/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:( const Class& x,const Class& y)
boost::multi_index::detail::iter_adaptor_access::equal	multi_index/detail/iter_adaptor.hpp	/^  static bool equal(const Class& x,const Class& y)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(const Class& x,const Class& y)
boost::multi_index::detail::iter_adaptor_access::increment	multi_index/detail/iter_adaptor.hpp	/^  static void increment(Class& x)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(Class& x)
boost::multi_index::detail::iter_adaptor_base	multi_index/detail/iter_adaptor.hpp	/^struct iter_adaptor_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::iter_adaptor_base::selector	multi_index/detail/iter_adaptor.hpp	/^    typename Base::iterator_category>        selector;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_base	access:public
boost::multi_index::detail::iter_adaptor_base::type	multi_index/detail/iter_adaptor.hpp	/^  >::type                                    type;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_base	access:public
boost::multi_index::detail::iter_adaptor_selector	multi_index/detail/iter_adaptor.hpp	/^struct iter_adaptor_selector<std::bidirectional_iterator_tag>$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::iter_adaptor_selector	multi_index/detail/iter_adaptor.hpp	/^struct iter_adaptor_selector<std::forward_iterator_tag>$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::iter_adaptor_selector	multi_index/detail/iter_adaptor.hpp	/^struct iter_adaptor_selector<std::random_access_iterator_tag>$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::iter_adaptor_selector::apply	multi_index/detail/iter_adaptor.hpp	/^  struct apply$/;"	s	struct:boost::multi_index::detail::iter_adaptor_selector	access:public
boost::multi_index::detail::iter_adaptor_selector::apply::type	multi_index/detail/iter_adaptor.hpp	/^    typedef bidirectional_iter_adaptor_base<Derived,Base> type;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_selector::apply	access:public
boost::multi_index::detail::iter_adaptor_selector::apply::type	multi_index/detail/iter_adaptor.hpp	/^    typedef forward_iter_adaptor_base<Derived,Base> type;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_selector::apply	access:public
boost::multi_index::detail::iter_adaptor_selector::apply::type	multi_index/detail/iter_adaptor.hpp	/^    typedef random_access_iter_adaptor_base<Derived,Base> type;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_selector::apply	access:public
boost::multi_index::detail::lower_unbounded_tag	multi_index/detail/unbounded.hpp	/^struct lower_unbounded_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::lvalue_tag	multi_index/detail/index_base.hpp	/^struct lvalue_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl0<F> make_guard(F fun)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun)
boost::multi_index::detail::make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl1<F,P1> make_guard(F fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1)
boost::multi_index::detail::make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl2<F,P1,P2> make_guard(F fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2)
boost::multi_index::detail::make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl3<F,P1,P2,P3> make_guard(F fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2,P3 p3)
boost::multi_index::detail::make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl4<F,P1,P2,P3,P4> make_guard($/;"	f	namespace:boost::multi_index::detail	signature:( F fun,P1 p1,P2 p2,P3 p3,P4 p4)
boost::multi_index::detail::make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if($/;"	f	namespace:boost::multi_index::detail	signature:( F fun,P1 p1,P2 p2,P3 p3,P4 p4)
boost::multi_index::detail::make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if(F fun)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun)
boost::multi_index::detail::make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if(F fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1)
boost::multi_index::detail::make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if(F fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2)
boost::multi_index::detail::make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if(F fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2,P3 p3)
boost::multi_index::detail::make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c($/;"	f	namespace:boost::multi_index::detail	signature:( F fun,P1 p1,P2 p2,P3 p3,P4 p4)
boost::multi_index::detail::make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c(F fun)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun)
boost::multi_index::detail::make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c(F fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1)
boost::multi_index::detail::make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c(F fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2)
boost::multi_index::detail::make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c(F fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2,P3 p3)
boost::multi_index::detail::make_obj_guard	multi_index/detail/scope_guard.hpp	/^inline obj_scope_guard_impl0<Obj,MemFun> make_obj_guard(Obj& obj,MemFun mem_fun)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun)
boost::multi_index::detail::make_obj_guard	multi_index/detail/scope_guard.hpp	/^inline obj_scope_guard_impl1<Obj,MemFun,P1> make_obj_guard($/;"	f	namespace:boost::multi_index::detail	signature:( Obj& obj,MemFun mem_fun,P1 p1)
boost::multi_index::detail::make_obj_guard	multi_index/detail/scope_guard.hpp	/^make_obj_guard(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)
boost::multi_index::detail::make_obj_guard	multi_index/detail/scope_guard.hpp	/^make_obj_guard(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)
boost::multi_index::detail::make_obj_guard_if	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if( Obj& obj,MemFun mem_fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:( Obj& obj,MemFun mem_fun,P1 p1)
boost::multi_index::detail::make_obj_guard_if	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if(Obj& obj,MemFun mem_fun)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun)
boost::multi_index::detail::make_obj_guard_if	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)
boost::multi_index::detail::make_obj_guard_if	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)
boost::multi_index::detail::make_obj_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if_c(  Obj& obj,MemFun mem_fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:( Obj& obj,MemFun mem_fun,P1 p1)
boost::multi_index::detail::make_obj_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if_c(Obj& obj,MemFun mem_fun)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun)
boost::multi_index::detail::make_obj_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if_c(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)
boost::multi_index::detail::make_obj_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if_c(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)
boost::multi_index::detail::modify_key_adaptor	multi_index/detail/modify_key_adaptor.hpp	/^struct modify_key_adaptor$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::modify_key_adaptor::f	multi_index/detail/modify_key_adaptor.hpp	/^  Fun          f;$/;"	m	struct:boost::multi_index::detail::modify_key_adaptor	access:private
boost::multi_index::detail::modify_key_adaptor::kfv	multi_index/detail/modify_key_adaptor.hpp	/^  KeyFromValue kfv;$/;"	m	struct:boost::multi_index::detail::modify_key_adaptor	access:private
boost::multi_index::detail::modify_key_adaptor::modify_key_adaptor	multi_index/detail/modify_key_adaptor.hpp	/^  modify_key_adaptor(Fun f_,KeyFromValue kfv_):f(f_),kfv(kfv_){}$/;"	f	struct:boost::multi_index::detail::modify_key_adaptor	access:public	signature:(Fun f_,KeyFromValue kfv_)
boost::multi_index::detail::modify_key_adaptor::operator ()	multi_index/detail/modify_key_adaptor.hpp	/^  void operator()(Value& x)$/;"	f	struct:boost::multi_index::detail::modify_key_adaptor	access:public	signature:(Value& x)
boost::multi_index::detail::msvc_index_specifier	multi_index/detail/msvc_index_specifier.hpp	/^struct msvc_index_specifier$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::msvc_index_specifier::fake_index_type	multi_index/detail/msvc_index_specifier.hpp	/^  template<> struct fake_index_type<true>$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier	access:public
boost::multi_index::detail::msvc_index_specifier::fake_index_type	multi_index/detail/msvc_index_specifier.hpp	/^  template<bool> struct fake_index_type:IndexSpecifier{};$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier	inherits:IndexSpecifier	access:public
boost::multi_index::detail::msvc_index_specifier::fake_index_type::index_class	multi_index/detail/msvc_index_specifier.hpp	/^    struct index_class{};$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier::fake_index_type	access:public
boost::multi_index::detail::msvc_index_specifier::fake_index_type::node_class	multi_index/detail/msvc_index_specifier.hpp	/^    struct node_class{};$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier::fake_index_type	access:public
boost::multi_index::detail::msvc_index_specifier::result_index_class	multi_index/detail/msvc_index_specifier.hpp	/^  struct result_index_class:$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier	inherits:fake_index_type::,index_class	access:public
boost::multi_index::detail::msvc_index_specifier::result_node_class	multi_index/detail/msvc_index_specifier.hpp	/^  struct result_node_class:$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier	inherits:fake_index_type::,node_class	access:public
boost::multi_index::detail::multi_index_base_type	multi_index/detail/base_type.hpp	/^struct multi_index_base_type:nth_layer<0,Value,IndexSpecifierList,Allocator>$/;"	s	namespace:boost::multi_index::detail	inherits:nth_layer
boost::multi_index::detail::multi_index_base_type::BOOST_STATIC_ASSERT	multi_index/detail/base_type.hpp	/^  BOOST_STATIC_ASSERT(detail::is_index_list<IndexSpecifierList>::value);$/;"	p	struct:boost::multi_index::detail::multi_index_base_type	access:public	signature:(detail::is_index_list<IndexSpecifierList>::value)
boost::multi_index::detail::multi_index_node_type	multi_index/detail/node_type.hpp	/^struct multi_index_node_type$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::multi_index_node_type::BOOST_STATIC_ASSERT	multi_index/detail/node_type.hpp	/^  BOOST_STATIC_ASSERT(detail::is_index_list<IndexSpecifierList>::value);$/;"	p	struct:boost::multi_index::detail::multi_index_node_type	access:public	signature:(detail::is_index_list<IndexSpecifierList>::value)
boost::multi_index::detail::multi_index_node_type::type	multi_index/detail/node_type.hpp	/^  >::type type;$/;"	t	struct:boost::multi_index::detail::multi_index_node_type	access:public
boost::multi_index::detail::no_duplicate_tags	multi_index/detail/no_duplicate_tags.hpp	/^struct no_duplicate_tags$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::no_duplicate_tags::BOOST_STATIC_CONSTANT	multi_index/detail/no_duplicate_tags.hpp	/^  BOOST_STATIC_CONSTANT($/;"	p	struct:boost::multi_index::detail::no_duplicate_tags	access:public	signature:( bool,value=!(mpl::has_key<aux,duplicate_tag_mark>::value))
boost::multi_index::detail::no_duplicate_tags::aux	multi_index/detail/no_duplicate_tags.hpp	/^  >::type aux;$/;"	t	struct:boost::multi_index::detail::no_duplicate_tags	access:public
boost::multi_index::detail::no_duplicate_tags_in_index_list	multi_index/detail/no_duplicate_tags.hpp	/^struct no_duplicate_tags_in_index_list$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::no_duplicate_tags_in_index_list::BOOST_STATIC_CONSTANT	multi_index/detail/no_duplicate_tags.hpp	/^  BOOST_STATIC_CONSTANT($/;"	p	struct:boost::multi_index::detail::no_duplicate_tags_in_index_list	access:public	signature:( bool,value=!(mpl::has_key<aux,duplicate_tag_mark>::value))
boost::multi_index::detail::no_duplicate_tags_in_index_list::aux	multi_index/detail/no_duplicate_tags.hpp	/^  >::type aux;$/;"	t	struct:boost::multi_index::detail::no_duplicate_tags_in_index_list	access:public
boost::multi_index::detail::noarg	multi_index/detail/vartempl_support.hpp	/^struct noarg{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::non_const_identity_base	multi_index/identity.hpp	/^struct non_const_identity_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::non_const_identity_base::operator ()	multi_index/identity.hpp	/^  Type& operator()(Type& x)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(Type& x) const
boost::multi_index::detail::non_const_identity_base::operator ()	multi_index/identity.hpp	/^  Type& operator()(const reference_wrapper<Type>& x)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(const reference_wrapper<Type>& x) const
boost::multi_index::detail::non_const_identity_base::operator ()	multi_index/identity.hpp	/^  const Type& operator()(const Type& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(const Type& x,int=0) const
boost::multi_index::detail::non_const_identity_base::operator ()	multi_index/identity.hpp	/^  const Type& operator()(const reference_wrapper<const Type>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(const reference_wrapper<const Type>& x,int=0) const
boost::multi_index::detail::non_const_identity_base::operator ()	multi_index/identity.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::detail::non_const_identity_base::result_type	multi_index/identity.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::non_const_identity_base	access:public
boost::multi_index::detail::non_const_member_base	multi_index/member.hpp	/^struct non_const_member_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::non_const_member_base::operator ()	multi_index/member.hpp	/^  Type& operator()(Class& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(Class& x) const
boost::multi_index::detail::non_const_member_base::operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(const reference_wrapper<Class>& x) const
boost::multi_index::detail::non_const_member_base::operator ()	multi_index/member.hpp	/^  const Type& operator()(const Class& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(const Class& x,int=0) const
boost::multi_index::detail::non_const_member_base::operator ()	multi_index/member.hpp	/^  const Type& operator()(const reference_wrapper<const Class>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(const reference_wrapper<const Class>& x,int=0) const
boost::multi_index::detail::non_const_member_base::operator ()	multi_index/member.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::detail::non_const_member_base::result_type	multi_index/member.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::non_const_member_base	access:public
boost::multi_index::detail::non_const_member_offset_base	multi_index/member.hpp	/^struct non_const_member_offset_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::non_const_member_offset_base::operator ()	multi_index/member.hpp	/^  Type& operator()(Class& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(Class& x) const
boost::multi_index::detail::non_const_member_offset_base::operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(const reference_wrapper<Class>& x) const
boost::multi_index::detail::non_const_member_offset_base::operator ()	multi_index/member.hpp	/^  const Type& operator()(const Class& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(const Class& x,int=0) const
boost::multi_index::detail::non_const_member_offset_base::operator ()	multi_index/member.hpp	/^  const Type& operator()(const reference_wrapper<const Class>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(const reference_wrapper<const Class>& x,int=0) const
boost::multi_index::detail::non_const_member_offset_base::operator ()	multi_index/member.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::detail::non_const_member_offset_base::result_type	multi_index/member.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::non_const_member_offset_base	access:public
boost::multi_index::detail::non_const_ref_global_fun_base	multi_index/global_fun.hpp	/^struct non_const_ref_global_fun_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::non_const_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  Type operator()($/;"	f	struct:boost::multi_index::detail::non_const_ref_global_fun_base	access:public	signature:( const reference_wrapper< typename remove_reference<Value>::type>& x) const
boost::multi_index::detail::non_const_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  Type operator()(Value x)const$/;"	f	struct:boost::multi_index::detail::non_const_ref_global_fun_base	access:public	signature:(Value x) const
boost::multi_index::detail::non_const_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_const_ref_global_fun_base	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::detail::non_const_ref_global_fun_base::result_type	multi_index/global_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::detail::non_const_ref_global_fun_base	access:public
boost::multi_index::detail::non_ref_global_fun_base	multi_index/global_fun.hpp	/^struct non_ref_global_fun_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::non_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  Type operator()($/;"	f	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public	signature:( const reference_wrapper< typename remove_const<Value>::type>& x,int=0) const
boost::multi_index::detail::non_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  Type operator()(const Value& x)const$/;"	f	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public	signature:(const Value& x) const
boost::multi_index::detail::non_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  Type operator()(const reference_wrapper<const Value>& x)const$/;"	f	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public	signature:(const reference_wrapper<const Value>& x) const
boost::multi_index::detail::non_ref_global_fun_base::operator ()	multi_index/global_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::detail::non_ref_global_fun_base::result_type	multi_index/global_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public
boost::multi_index::detail::none_unbounded_tag	multi_index/detail/unbounded.hpp	/^struct none_unbounded_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::nth_key_from_value	multi_index/composite_key.hpp	/^struct nth_key_from_value$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::nth_key_from_value::key_extractor_tuple	multi_index/composite_key.hpp	/^  typedef typename CompositeKey::key_extractor_tuple key_extractor_tuple;$/;"	t	struct:boost::multi_index::detail::nth_key_from_value	access:public
boost::multi_index::detail::nth_layer	multi_index/detail/base_type.hpp	/^struct nth_layer$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::nth_layer::BOOST_STATIC_CONSTANT	multi_index/detail/base_type.hpp	/^  BOOST_STATIC_CONSTANT(int,length=mpl::size<IndexSpecifierList>::value);$/;"	p	struct:boost::multi_index::detail::nth_layer	access:public	signature:(int,length=mpl::size<IndexSpecifierList>::value)
boost::multi_index::detail::nth_layer::type	multi_index/detail/base_type.hpp	/^  >::type type;$/;"	t	struct:boost::multi_index::detail::nth_layer	access:public
boost::multi_index::detail::null_guard	multi_index/detail/scope_guard.hpp	/^struct null_guard : public scope_guard_impl_base$/;"	s	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::null_guard::null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1& )
boost::multi_index::detail::null_guard::null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1&, const T2& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1&, const T2& )
boost::multi_index::detail::null_guard::null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1&, const T2&, const T3& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1&, const T2&, const T3& )
boost::multi_index::detail::null_guard::null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1&, const T2&, const T3&, const T4& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1&, const T2&, const T3&, const T4& )
boost::multi_index::detail::null_guard::null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1&, const T2&, const T3&, const T4&, const T5& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1&, const T2&, const T3&, const T4&, const T5& )
boost::multi_index::detail::null_guard_return	multi_index/detail/scope_guard.hpp	/^struct null_guard_return$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::null_guard_return::type	multi_index/detail/scope_guard.hpp	/^    typedef typename boost::mpl::if_c<cond,T,null_guard>::type type;$/;"	t	struct:boost::multi_index::detail::null_guard_return	access:public
boost::multi_index::detail::obj_scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^class obj_scope_guard_impl0:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::obj_scope_guard_impl0::execute	multi_index/detail/scope_guard.hpp	/^  void execute(){(obj_.*mem_fun_)();}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl0	access:public	signature:()
boost::multi_index::detail::obj_scope_guard_impl0::mem_fun_	multi_index/detail/scope_guard.hpp	/^  MemFun mem_fun_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl0	access:protected
boost::multi_index::detail::obj_scope_guard_impl0::obj_	multi_index/detail/scope_guard.hpp	/^  Obj&   obj_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl0	access:protected
boost::multi_index::detail::obj_scope_guard_impl0::obj_scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^  obj_scope_guard_impl0(Obj& obj,MemFun mem_fun):obj_(obj),mem_fun_(mem_fun){}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl0	access:public	signature:(Obj& obj,MemFun mem_fun)
boost::multi_index::detail::obj_scope_guard_impl0::~obj_scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^  ~obj_scope_guard_impl0(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl0	access:public	signature:()
boost::multi_index::detail::obj_scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^class obj_scope_guard_impl1:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::obj_scope_guard_impl1::execute	multi_index/detail/scope_guard.hpp	/^  void execute(){(obj_.*mem_fun_)(p1_);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl1	access:public	signature:()
boost::multi_index::detail::obj_scope_guard_impl1::mem_fun_	multi_index/detail/scope_guard.hpp	/^  MemFun   mem_fun_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl1	access:protected
boost::multi_index::detail::obj_scope_guard_impl1::obj_	multi_index/detail/scope_guard.hpp	/^  Obj&     obj_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl1	access:protected
boost::multi_index::detail::obj_scope_guard_impl1::obj_scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^  obj_scope_guard_impl1(Obj& obj,MemFun mem_fun,P1 p1):$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl1	access:public	signature:(Obj& obj,MemFun mem_fun,P1 p1)
boost::multi_index::detail::obj_scope_guard_impl1::p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl1	access:protected
boost::multi_index::detail::obj_scope_guard_impl1::~obj_scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^  ~obj_scope_guard_impl1(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl1	access:public	signature:()
boost::multi_index::detail::obj_scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^class obj_scope_guard_impl2:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::obj_scope_guard_impl2::execute	multi_index/detail/scope_guard.hpp	/^  void execute(){(obj_.*mem_fun_)(p1_,p2_);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl2	access:public	signature:()
boost::multi_index::detail::obj_scope_guard_impl2::mem_fun_	multi_index/detail/scope_guard.hpp	/^  MemFun   mem_fun_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl2	access:protected
boost::multi_index::detail::obj_scope_guard_impl2::obj_	multi_index/detail/scope_guard.hpp	/^  Obj&     obj_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl2	access:protected
boost::multi_index::detail::obj_scope_guard_impl2::obj_scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^  obj_scope_guard_impl2(Obj& obj,MemFun mem_fun,P1 p1,P2 p2):$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl2	access:public	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)
boost::multi_index::detail::obj_scope_guard_impl2::p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl2	access:protected
boost::multi_index::detail::obj_scope_guard_impl2::p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl2	access:protected
boost::multi_index::detail::obj_scope_guard_impl2::~obj_scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^  ~obj_scope_guard_impl2(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl2	access:public	signature:()
boost::multi_index::detail::obj_scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^class obj_scope_guard_impl3:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::obj_scope_guard_impl3::execute	multi_index/detail/scope_guard.hpp	/^  void execute(){(obj_.*mem_fun_)(p1_,p2_,p3_);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl3	access:public	signature:()
boost::multi_index::detail::obj_scope_guard_impl3::mem_fun_	multi_index/detail/scope_guard.hpp	/^  MemFun   mem_fun_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
boost::multi_index::detail::obj_scope_guard_impl3::obj_	multi_index/detail/scope_guard.hpp	/^  Obj&     obj_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
boost::multi_index::detail::obj_scope_guard_impl3::obj_scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^  obj_scope_guard_impl3(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3):$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl3	access:public	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)
boost::multi_index::detail::obj_scope_guard_impl3::p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
boost::multi_index::detail::obj_scope_guard_impl3::p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
boost::multi_index::detail::obj_scope_guard_impl3::p3_	multi_index/detail/scope_guard.hpp	/^  const P3 p3_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
boost::multi_index::detail::obj_scope_guard_impl3::~obj_scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^  ~obj_scope_guard_impl3(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl3	access:public	signature:()
boost::multi_index::detail::operator !=	multi_index/detail/duplicates_iterator.hpp	/^bool operator!=($/;"	f	namespace:boost::multi_index::detail	signature:( const duplicates_iterator<Node,Predicate>& x, const duplicates_iterator<Node,Predicate>& y)
boost::multi_index::detail::operator !=	multi_index/ordered_index.hpp	/^bool operator!=($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator !=	multi_index/ordered_index_fwd.hpp	/^bool operator!=($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator !=	multi_index/random_access_index.hpp	/^bool operator!=($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator !=	multi_index/random_access_index_fwd.hpp	/^bool operator!=($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator !=	multi_index/sequenced_index.hpp	/^bool operator!=($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator !=	multi_index/sequenced_index_fwd.hpp	/^bool operator!=($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator -	multi_index/detail/iter_adaptor.hpp	/^operator-($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_iter_adaptor_base<Derived,Base>& x, const random_access_iter_adaptor_base<Derived,Base>& y)
boost::multi_index::detail::operator -	multi_index/detail/rnd_node_iterator.hpp	/^std::ptrdiff_t operator-($/;"	f	namespace:boost::multi_index::detail	signature:( const rnd_node_iterator<Node>& x, const rnd_node_iterator<Node>& y)
boost::multi_index::detail::operator <	multi_index/detail/iter_adaptor.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_iter_adaptor_base<Derived,Base>& x, const random_access_iter_adaptor_base<Derived,Base>& y)
boost::multi_index::detail::operator <	multi_index/detail/rnd_node_iterator.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const rnd_node_iterator<Node>& x, const rnd_node_iterator<Node>& y)
boost::multi_index::detail::operator <	multi_index/ordered_index.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator <	multi_index/ordered_index_fwd.hpp	/^bool operator<($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator <	multi_index/random_access_index.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator <	multi_index/random_access_index_fwd.hpp	/^bool operator<($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator <	multi_index/sequenced_index.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator <	multi_index/sequenced_index_fwd.hpp	/^bool operator<($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator <=	multi_index/ordered_index.hpp	/^bool operator<=($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator <=	multi_index/ordered_index_fwd.hpp	/^bool operator<=($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator <=	multi_index/random_access_index.hpp	/^bool operator<=($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator <=	multi_index/random_access_index_fwd.hpp	/^bool operator<=($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator <=	multi_index/sequenced_index.hpp	/^bool operator<=($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator <=	multi_index/sequenced_index_fwd.hpp	/^bool operator<=($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator ==	multi_index/detail/bidir_node_iterator.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const bidir_node_iterator<Node>& x, const bidir_node_iterator<Node>& y)
boost::multi_index::detail::operator ==	multi_index/detail/duplicates_iterator.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const duplicates_iterator<Node,Predicate>& x, const duplicates_iterator<Node,Predicate>& y)
boost::multi_index::detail::operator ==	multi_index/detail/hash_index_iterator.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const hashed_index_iterator<Node,BucketArray>& x, const hashed_index_iterator<Node,BucketArray>& y)
boost::multi_index::detail::operator ==	multi_index/detail/iter_adaptor.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const bidirectional_iter_adaptor_base<Derived,Base>& x, const bidirectional_iter_adaptor_base<Derived,Base>& y)
boost::multi_index::detail::operator ==	multi_index/detail/iter_adaptor.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const forward_iter_adaptor_base<Derived,Base>& x, const forward_iter_adaptor_base<Derived,Base>& y)
boost::multi_index::detail::operator ==	multi_index/detail/iter_adaptor.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_iter_adaptor_base<Derived,Base>& x, const random_access_iter_adaptor_base<Derived,Base>& y)
boost::multi_index::detail::operator ==	multi_index/detail/rnd_node_iterator.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const rnd_node_iterator<Node>& x, const rnd_node_iterator<Node>& y)
boost::multi_index::detail::operator ==	multi_index/ordered_index.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator ==	multi_index/ordered_index_fwd.hpp	/^bool operator==($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator ==	multi_index/random_access_index.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator ==	multi_index/random_access_index_fwd.hpp	/^bool operator==($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator ==	multi_index/sequenced_index.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator ==	multi_index/sequenced_index_fwd.hpp	/^bool operator==($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator >	multi_index/ordered_index.hpp	/^bool operator>($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator >	multi_index/ordered_index_fwd.hpp	/^bool operator>($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator >	multi_index/random_access_index.hpp	/^bool operator>($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator >	multi_index/random_access_index_fwd.hpp	/^bool operator>($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator >	multi_index/sequenced_index.hpp	/^bool operator>($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator >	multi_index/sequenced_index_fwd.hpp	/^bool operator>($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator >=	multi_index/ordered_index.hpp	/^bool operator>=($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator >=	multi_index/ordered_index_fwd.hpp	/^bool operator>=($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
boost::multi_index::detail::operator >=	multi_index/random_access_index.hpp	/^bool operator>=($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator >=	multi_index/random_access_index_fwd.hpp	/^bool operator>=($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator >=	multi_index/sequenced_index.hpp	/^bool operator>=($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::operator >=	multi_index/sequenced_index_fwd.hpp	/^bool operator>=($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
boost::multi_index::detail::ordered_index	multi_index/ordered_index.hpp	/^class ordered_index:$/;"	c	namespace:boost::multi_index::detail	inherits:BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDSSuperMeta::type,safe_ctr_proxy_impl
boost::multi_index::detail::ordered_index::allocator_type	multi_index/ordered_index.hpp	/^  typedef typename super::final_allocator_type       allocator_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::begin	multi_index/ordered_index.hpp	/^  const_iterator         begin()const{return make_iterator(leftmost());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::begin	multi_index/ordered_index.hpp	/^  iterator               begin(){return make_iterator(leftmost());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
boost::multi_index::detail::ordered_index::cbegin	multi_index/ordered_index.hpp	/^  const_iterator         cbegin()const{return begin();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::cend	multi_index/ordered_index.hpp	/^  const_iterator         cend()const{return end();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::check_invariant_	multi_index/ordered_index.hpp	/^  void check_invariant_()const{this->final_check_invariant_();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::clear	multi_index/ordered_index.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
boost::multi_index::detail::ordered_index::clear_	multi_index/ordered_index.hpp	/^  void clear_()$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
boost::multi_index::detail::ordered_index::comp_	multi_index/ordered_index.hpp	/^  key_compare    comp_;$/;"	m	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::const_iterator	multi_index/ordered_index.hpp	/^  typedef iterator                                   const_iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::const_iterator_type_list	multi_index/ordered_index.hpp	/^    const_iterator>::type                            const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
boost::multi_index::detail::ordered_index::const_pointer	multi_index/ordered_index.hpp	/^  typedef typename allocator_type::const_pointer     const_pointer;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::const_reference	multi_index/ordered_index.hpp	/^  typedef typename allocator_type::const_reference   const_reference;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::const_reverse_iterator	multi_index/ordered_index.hpp	/^    boost::reverse_iterator<const_iterator>          const_reverse_iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::copy_	multi_index/ordered_index.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x, const copy_map_type& map)
boost::multi_index::detail::ordered_index::copy_map_type	multi_index/ordered_index.hpp	/^  typedef typename super::copy_map_type              copy_map_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
boost::multi_index::detail::ordered_index::count	multi_index/ordered_index.hpp	/^  size_type count(const CompatibleKey& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x) const
boost::multi_index::detail::ordered_index::count	multi_index/ordered_index.hpp	/^  size_type count(const CompatibleKey& x,const CompatibleCompare& comp)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x,const CompatibleCompare& comp) const
boost::multi_index::detail::ordered_index::crbegin	multi_index/ordered_index.hpp	/^  const_reverse_iterator crbegin()const{return rbegin();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::crend	multi_index/ordered_index.hpp	/^  const_reverse_iterator crend()const{return rend();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::ctor_args	multi_index/ordered_index.hpp	/^  typedef tuple<key_from_value,key_compare>          ctor_args;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::ctor_args_list	multi_index/ordered_index.hpp	/^    typename super::ctor_args_list>                  ctor_args_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
boost::multi_index::detail::ordered_index::delete_all_nodes	multi_index/ordered_index.hpp	/^  void delete_all_nodes(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* x)
boost::multi_index::detail::ordered_index::delete_all_nodes_	multi_index/ordered_index.hpp	/^  void delete_all_nodes_()$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
boost::multi_index::detail::ordered_index::detach_iterators	multi_index/ordered_index.hpp	/^  void detach_iterators(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* x)
boost::multi_index::detail::ordered_index::difference_type	multi_index/ordered_index.hpp	/^  typedef std::ptrdiff_t                             difference_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::emplace_hint_impl	multi_index/ordered_index.hpp	/^  iterator emplace_hint_impl($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( iterator position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::ordered_index::emplace_impl	multi_index/ordered_index.hpp	/^  std::pair<iterator,bool> emplace_impl(BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::ordered_index::emplace_return_type	multi_index/ordered_index.hpp	/^  typedef std::pair<iterator,bool>                   emplace_return_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::empty	multi_index/ordered_index.hpp	/^  bool      empty()const{return this->final_empty_();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::empty_initialize	multi_index/ordered_index.hpp	/^  void empty_initialize()$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:()
boost::multi_index::detail::ordered_index::end	multi_index/ordered_index.hpp	/^  const_iterator         end()const{return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::end	multi_index/ordered_index.hpp	/^  iterator               end(){return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
boost::multi_index::detail::ordered_index::equal_range	multi_index/ordered_index.hpp	/^  std::pair<iterator,iterator> equal_range($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x) const
boost::multi_index::detail::ordered_index::equal_range	multi_index/ordered_index.hpp	/^  std::pair<iterator,iterator> equal_range($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x,const CompatibleCompare& comp) const
boost::multi_index::detail::ordered_index::erase	multi_index/ordered_index.hpp	/^  iterator erase(iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator first,iterator last)
boost::multi_index::detail::ordered_index::erase	multi_index/ordered_index.hpp	/^  iterator erase(iterator position)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position)
boost::multi_index::detail::ordered_index::erase	multi_index/ordered_index.hpp	/^  size_type erase(key_param_type x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(key_param_type x)
boost::multi_index::detail::ordered_index::erase_	multi_index/ordered_index.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* x)
boost::multi_index::detail::ordered_index::final_node_type	multi_index/ordered_index.hpp	/^  typedef typename super::final_node_type            final_node_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
boost::multi_index::detail::ordered_index::find	multi_index/ordered_index.hpp	/^  iterator find($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x,const CompatibleCompare& comp) const
boost::multi_index::detail::ordered_index::find	multi_index/ordered_index.hpp	/^  iterator find(const CompatibleKey& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x) const
boost::multi_index::detail::ordered_index::get_allocator	multi_index/ordered_index.hpp	/^  allocator_type get_allocator()const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::header	multi_index/ordered_index.hpp	/^  node_type* header()const{return this->final_header();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:() const
boost::multi_index::detail::ordered_index::hinted_link_point	multi_index/ordered_index.hpp	/^  bool hinted_link_point($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( key_param_type k,node_type* position,link_info& inf,ordered_non_unique_tag)
boost::multi_index::detail::ordered_index::hinted_link_point	multi_index/ordered_index.hpp	/^  bool hinted_link_point($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( key_param_type k,node_type* position,link_info& inf,ordered_unique_tag)
boost::multi_index::detail::ordered_index::in_place	multi_index/ordered_index.hpp	/^  bool in_place(value_param_type v,node_type* x,ordered_non_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(value_param_type v,node_type* x,ordered_non_unique_tag)
boost::multi_index::detail::ordered_index::in_place	multi_index/ordered_index.hpp	/^  bool in_place(value_param_type v,node_type* x,ordered_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(value_param_type v,node_type* x,ordered_unique_tag)
boost::multi_index::detail::ordered_index::index_loader_type	multi_index/ordered_index.hpp	/^  typedef typename super::index_loader_type          index_loader_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
boost::multi_index::detail::ordered_index::index_saver_type	multi_index/ordered_index.hpp	/^  typedef typename super::index_saver_type           index_saver_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
boost::multi_index::detail::ordered_index::index_type_list	multi_index/ordered_index.hpp	/^    ordered_index>::type                             index_type_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
boost::multi_index::detail::ordered_index::insert	multi_index/ordered_index.hpp	/^  iterator insert(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
boost::multi_index::detail::ordered_index::insert	multi_index/ordered_index.hpp	/^  iterator insert(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,const value_type& x)
boost::multi_index::detail::ordered_index::insert	multi_index/ordered_index.hpp	/^  std::pair<iterator,bool> insert(const value_type& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::ordered_index::insert	multi_index/ordered_index.hpp	/^  void insert(InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(InputIterator first,InputIterator last)
boost::multi_index::detail::ordered_index::insert	multi_index/ordered_index.hpp	/^  void insert(std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(std::initializer_list<value_type> list)
boost::multi_index::detail::ordered_index::insert_	multi_index/ordered_index.hpp	/^  node_type* insert_($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( value_param_type v,node_type* position,node_type* x,Variant variant)
boost::multi_index::detail::ordered_index::insert_	multi_index/ordered_index.hpp	/^  node_type* insert_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
boost::multi_index::detail::ordered_index::invariant_	multi_index/ordered_index.hpp	/^  bool invariant_()const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::iterator	multi_index/ordered_index.hpp	/^      bidir_node_iterator<node_type> > >             iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::iterator	multi_index/ordered_index.hpp	/^    ordered_index>                                   iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::iterator	multi_index/ordered_index.hpp	/^  typedef bidir_node_iterator<node_type>             iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::iterator_to	multi_index/ordered_index.hpp	/^  const_iterator iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const value_type& x) const
boost::multi_index::detail::ordered_index::iterator_to	multi_index/ordered_index.hpp	/^  iterator iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::ordered_index::iterator_type_list	multi_index/ordered_index.hpp	/^    iterator>::type    iterator_type_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
boost::multi_index::detail::ordered_index::key	multi_index/ordered_index.hpp	/^  key_from_value key;$/;"	m	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::key_comp	multi_index/ordered_index.hpp	/^  key_compare    key_comp()const{return comp_;}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::key_compare	multi_index/ordered_index.hpp	/^  typedef Compare                                    key_compare;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::key_extractor	multi_index/ordered_index.hpp	/^  key_from_value key_extractor()const{return key;}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::key_from_value	multi_index/ordered_index.hpp	/^  typedef KeyFromValue                               key_from_value;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::key_param_type	multi_index/ordered_index.hpp	/^    key_type>::param_type                            key_param_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::key_type	multi_index/ordered_index.hpp	/^  typedef typename KeyFromValue::result_type         key_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::leftmost	multi_index/ordered_index.hpp	/^  node_type* leftmost()const{return node_type::from_impl(header()->left());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:() const
boost::multi_index::detail::ordered_index::link_info	multi_index/ordered_index.hpp	/^  struct link_info$/;"	s	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::link_info::link_info	multi_index/ordered_index.hpp	/^    link_info():side(to_left){}$/;"	f	struct:boost::multi_index::detail::ordered_index::link_info	access:public	signature:()
boost::multi_index::detail::ordered_index::link_info::pos	multi_index/ordered_index.hpp	/^    node_impl_pointer  pos;$/;"	m	struct:boost::multi_index::detail::ordered_index::link_info	access:public
boost::multi_index::detail::ordered_index::link_info::side	multi_index/ordered_index.hpp	/^    ordered_index_side side;$/;"	m	struct:boost::multi_index::detail::ordered_index::link_info	access:public
boost::multi_index::detail::ordered_index::link_point	multi_index/ordered_index.hpp	/^  bool link_point(key_param_type k,link_info& inf,ordered_non_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(key_param_type k,link_info& inf,ordered_non_unique_tag)
boost::multi_index::detail::ordered_index::link_point	multi_index/ordered_index.hpp	/^  bool link_point(key_param_type k,link_info& inf,ordered_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(key_param_type k,link_info& inf,ordered_unique_tag)
boost::multi_index::detail::ordered_index::load_	multi_index/ordered_index.hpp	/^  void load_($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( Archive& ar,const unsigned int version,const index_loader_type& lm, ordered_non_unique_tag)
boost::multi_index::detail::ordered_index::load_	multi_index/ordered_index.hpp	/^  void load_($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( Archive& ar,const unsigned int version,const index_loader_type& lm, ordered_unique_tag)
boost::multi_index::detail::ordered_index::load_	multi_index/ordered_index.hpp	/^  void load_(Archive& ar,const unsigned int version,const index_loader_type& lm)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(Archive& ar,const unsigned int version,const index_loader_type& lm)
boost::multi_index::detail::ordered_index::lower_bound	multi_index/ordered_index.hpp	/^  iterator lower_bound($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x,const CompatibleCompare& comp) const
boost::multi_index::detail::ordered_index::lower_bound	multi_index/ordered_index.hpp	/^  iterator lower_bound(const CompatibleKey& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x) const
boost::multi_index::detail::ordered_index::lower_link_point	multi_index/ordered_index.hpp	/^  bool lower_link_point(key_param_type k,link_info& inf,ordered_non_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(key_param_type k,link_info& inf,ordered_non_unique_tag)
boost::multi_index::detail::ordered_index::lower_range	multi_index/ordered_index.hpp	/^  node_type * lower_range(node_type* top,node_type* y,LowerBounder lower)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* top,node_type* y,LowerBounder lower) const
boost::multi_index::detail::ordered_index::make_iterator	multi_index/ordered_index.hpp	/^  const_iterator make_iterator(node_type* node)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* node) const
boost::multi_index::detail::ordered_index::make_iterator	multi_index/ordered_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node);}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* node)
boost::multi_index::detail::ordered_index::make_iterator	multi_index/ordered_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node,this);}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* node)
boost::multi_index::detail::ordered_index::max_size	multi_index/ordered_index.hpp	/^  size_type max_size()const{return this->final_max_size_();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::modify	multi_index/ordered_index.hpp	/^  bool modify(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,Modifier mod)
boost::multi_index::detail::ordered_index::modify	multi_index/ordered_index.hpp	/^  bool modify(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
boost::multi_index::detail::ordered_index::modify_	multi_index/ordered_index.hpp	/^  bool modify_(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* x)
boost::multi_index::detail::ordered_index::modify_key	multi_index/ordered_index.hpp	/^  bool modify_key(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,Modifier mod)
boost::multi_index::detail::ordered_index::modify_key	multi_index/ordered_index.hpp	/^  bool modify_key(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
boost::multi_index::detail::ordered_index::modify_rollback_	multi_index/ordered_index.hpp	/^  bool modify_rollback_(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* x)
boost::multi_index::detail::ordered_index::node_impl_pointer	multi_index/ordered_index.hpp	/^  typedef typename node_impl_type::pointer           node_impl_pointer;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::node_impl_type	multi_index/ordered_index.hpp	/^  typedef typename node_type::impl_type              node_impl_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::node_type	multi_index/ordered_index.hpp	/^    typename super::node_type>                       node_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
boost::multi_index::detail::ordered_index::operator =	multi_index/ordered_index.hpp	/^  ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& operator=($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::ordered_index::operator =	multi_index/ordered_index.hpp	/^  ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& operator=($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( std::initializer_list<value_type> list)
boost::multi_index::detail::ordered_index::ordered_index	multi_index/ordered_index.hpp	/^  ordered_index($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::ordered_index::ordered_index	multi_index/ordered_index.hpp	/^  ordered_index($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x, do_not_copy_elements_tag)
boost::multi_index::detail::ordered_index::ordered_index	multi_index/ordered_index.hpp	/^  ordered_index(const ctor_args_list& args_list,const allocator_type& al):$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const ctor_args_list& args_list,const allocator_type& al)
boost::multi_index::detail::ordered_index::pointer	multi_index/ordered_index.hpp	/^  typedef typename allocator_type::pointer           pointer;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::range	multi_index/ordered_index.hpp	/^  range(LowerBounder lower,UpperBounder upper)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(LowerBounder lower,UpperBounder upper) const
boost::multi_index::detail::ordered_index::range	multi_index/ordered_index.hpp	/^  range(LowerBounder lower,UpperBounder upper,none_unbounded_tag)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(LowerBounder lower,UpperBounder upper,none_unbounded_tag) const
boost::multi_index::detail::ordered_index::range	multi_index/ordered_index.hpp	/^  range(LowerBounder lower,UpperBounder,upper_unbounded_tag)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(LowerBounder lower,UpperBounder,upper_unbounded_tag) const
boost::multi_index::detail::ordered_index::range	multi_index/ordered_index.hpp	/^  range(LowerBounder,UpperBounder upper,lower_unbounded_tag)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(LowerBounder,UpperBounder upper,lower_unbounded_tag) const
boost::multi_index::detail::ordered_index::range	multi_index/ordered_index.hpp	/^  range(LowerBounder,UpperBounder,both_unbounded_tag)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(LowerBounder,UpperBounder,both_unbounded_tag) const
boost::multi_index::detail::ordered_index::rbegin	multi_index/ordered_index.hpp	/^  const_reverse_iterator rbegin()const{return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::rbegin	multi_index/ordered_index.hpp	/^  reverse_iterator       rbegin(){return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
boost::multi_index::detail::ordered_index::rearranger	multi_index/ordered_index.hpp	/^  void rearranger(node_type* position,node_type *x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* position,node_type *x)
boost::multi_index::detail::ordered_index::reference	multi_index/ordered_index.hpp	/^  typedef typename allocator_type::reference         reference;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::rend	multi_index/ordered_index.hpp	/^  const_reverse_iterator rend()const{return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::rend	multi_index/ordered_index.hpp	/^  reverse_iterator       rend(){return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
boost::multi_index::detail::ordered_index::replace	multi_index/ordered_index.hpp	/^  bool replace(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
boost::multi_index::detail::ordered_index::replace	multi_index/ordered_index.hpp	/^  bool replace(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,const value_type& x)
boost::multi_index::detail::ordered_index::replace_	multi_index/ordered_index.hpp	/^  bool replace_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
boost::multi_index::detail::ordered_index::reverse_iterator	multi_index/ordered_index.hpp	/^    boost::reverse_iterator<iterator>                reverse_iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::rightmost	multi_index/ordered_index.hpp	/^  node_type* rightmost()const{return node_type::from_impl(header()->right());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:() const
boost::multi_index::detail::ordered_index::root	multi_index/ordered_index.hpp	/^  node_type* root()const{return node_type::from_impl(header()->parent());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:() const
boost::multi_index::detail::ordered_index::safe_super	multi_index/ordered_index.hpp	/^    ordered_index>                                   safe_super;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::safe_super	multi_index/ordered_index.hpp	/^  typedef safe_mode::safe_container<ordered_index>   safe_super;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::save_	multi_index/ordered_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm, ordered_non_unique_tag) const
boost::multi_index::detail::ordered_index::save_	multi_index/ordered_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm, ordered_unique_tag) const
boost::multi_index::detail::ordered_index::save_	multi_index/ordered_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm) const
boost::multi_index::detail::ordered_index::size	multi_index/ordered_index.hpp	/^  size_type size()const{return this->final_size_();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::size_type	multi_index/ordered_index.hpp	/^  typedef std::size_t                                size_type;      $/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::super	multi_index/ordered_index.hpp	/^  typedef typename SuperMeta::type                   super;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::swap	multi_index/ordered_index.hpp	/^  void swap(ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::ordered_index::swap_	multi_index/ordered_index.hpp	/^  void swap_(ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::ordered_index::swap_elements_	multi_index/ordered_index.hpp	/^  void swap_elements_($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
boost::multi_index::detail::ordered_index::tag_list	multi_index/ordered_index.hpp	/^  typedef TagList                                    tag_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::upper_bound	multi_index/ordered_index.hpp	/^  iterator upper_bound($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x,const CompatibleCompare& comp) const
boost::multi_index::detail::ordered_index::upper_bound	multi_index/ordered_index.hpp	/^  iterator upper_bound(const CompatibleKey& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x) const
boost::multi_index::detail::ordered_index::upper_range	multi_index/ordered_index.hpp	/^  node_type * upper_range(node_type* top,node_type* y,UpperBounder upper)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* top,node_type* y,UpperBounder upper) const
boost::multi_index::detail::ordered_index::value_comp	multi_index/ordered_index.hpp	/^  value_compare  value_comp()const{return value_compare(key,comp_);}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
boost::multi_index::detail::ordered_index::value_compare	multi_index/ordered_index.hpp	/^    value_type,KeyFromValue,Compare>                 value_compare;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::value_param_type	multi_index/ordered_index.hpp	/^    value_type>::param_type                          value_param_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
boost::multi_index::detail::ordered_index::value_type	multi_index/ordered_index.hpp	/^  typedef typename node_type::value_type             value_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
boost::multi_index::detail::ordered_index::~ordered_index	multi_index/ordered_index.hpp	/^  ~ordered_index()$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
boost::multi_index::detail::ordered_index_args	multi_index/detail/ord_index_args.hpp	/^struct ordered_index_args$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::ordered_index_args::BOOST_STATIC_ASSERT	multi_index/detail/ord_index_args.hpp	/^  BOOST_STATIC_ASSERT(is_tag<tag_list_type>::value);$/;"	p	struct:boost::multi_index::detail::ordered_index_args	access:public	signature:(is_tag<tag_list_type>::value)
boost::multi_index::detail::ordered_index_args::compare_type	multi_index/detail/ord_index_args.hpp	/^  >::type                                            compare_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
boost::multi_index::detail::ordered_index_args::full_form	multi_index/detail/ord_index_args.hpp	/^  typedef is_tag<Arg1> full_form;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
boost::multi_index::detail::ordered_index_args::key_from_value_type	multi_index/detail/ord_index_args.hpp	/^    Arg1>::type                                      key_from_value_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
boost::multi_index::detail::ordered_index_args::supplied_compare_type	multi_index/detail/ord_index_args.hpp	/^    Arg2>::type                                      supplied_compare_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
boost::multi_index::detail::ordered_index_args::tag_list_type	multi_index/detail/ord_index_args.hpp	/^    tag< > >::type                                   tag_list_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
boost::multi_index::detail::ordered_index_color	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_color{red=false,black=true};$/;"	g	namespace:boost::multi_index::detail
boost::multi_index::detail::ordered_index_equal_range	multi_index/detail/ord_index_ops.hpp	/^inline std::pair<Node*,Node*> ordered_index_equal_range($/;"	f	namespace:boost::multi_index::detail	signature:( Node* top,Node* y,const KeyFromValue& key,const CompatibleKey& x, const CompatibleCompare& comp)
boost::multi_index::detail::ordered_index_find	multi_index/detail/ord_index_ops.hpp	/^inline Node* ordered_index_find($/;"	f	namespace:boost::multi_index::detail	signature:( Node* top,Node* y,const KeyFromValue& key,const CompatibleKey& x, const CompatibleCompare& comp)
boost::multi_index::detail::ordered_index_lower_bound	multi_index/detail/ord_index_ops.hpp	/^inline Node* ordered_index_lower_bound($/;"	f	namespace:boost::multi_index::detail	signature:( Node* top,Node* y,const KeyFromValue& key,const CompatibleKey& x, const CompatibleCompare& comp)
boost::multi_index::detail::ordered_index_node	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node:Super,ordered_index_node_trampoline<Super>$/;"	s	namespace:boost::multi_index::detail	inherits:Super,ordered_index_node_trampoline
boost::multi_index::detail::ordered_index_node::color	multi_index/detail/ord_index_node.hpp	/^  impl_color_ref      color(){return trampoline::color();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
boost::multi_index::detail::ordered_index_node::color	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color color()const{return trampoline::color();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
boost::multi_index::detail::ordered_index_node::const_impl_pointer	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::const_pointer const_impl_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
boost::multi_index::detail::ordered_index_node::decrement	multi_index/detail/ord_index_node.hpp	/^  static void decrement(ordered_index_node*& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:(ordered_index_node*& x)
boost::multi_index::detail::ordered_index_node::from_impl	multi_index/detail/ord_index_node.hpp	/^  static const ordered_index_node* from_impl(const_impl_pointer x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:(const_impl_pointer x)
boost::multi_index::detail::ordered_index_node::from_impl	multi_index/detail/ord_index_node.hpp	/^  static ordered_index_node* from_impl(impl_pointer x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:(impl_pointer x)
boost::multi_index::detail::ordered_index_node::impl	multi_index/detail/ord_index_node.hpp	/^  const_impl_pointer impl()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
boost::multi_index::detail::ordered_index_node::impl	multi_index/detail/ord_index_node.hpp	/^  impl_pointer impl()$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
boost::multi_index::detail::ordered_index_node::impl_color_ref	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::color_ref     impl_color_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
boost::multi_index::detail::ordered_index_node::impl_parent_ref	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::parent_ref    impl_parent_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
boost::multi_index::detail::ordered_index_node::impl_pointer	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::pointer       impl_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
boost::multi_index::detail::ordered_index_node::impl_type	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::impl_type     impl_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
boost::multi_index::detail::ordered_index_node::increment	multi_index/detail/ord_index_node.hpp	/^  static void increment(ordered_index_node*& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:(ordered_index_node*& x)
boost::multi_index::detail::ordered_index_node::left	multi_index/detail/ord_index_node.hpp	/^  impl_pointer        left()const{return trampoline::left();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
boost::multi_index::detail::ordered_index_node::left	multi_index/detail/ord_index_node.hpp	/^  impl_pointer&       left(){return trampoline::left();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
boost::multi_index::detail::ordered_index_node::parent	multi_index/detail/ord_index_node.hpp	/^  impl_parent_ref     parent(){return trampoline::parent();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
boost::multi_index::detail::ordered_index_node::parent	multi_index/detail/ord_index_node.hpp	/^  impl_pointer        parent()const{return trampoline::parent();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
boost::multi_index::detail::ordered_index_node::right	multi_index/detail/ord_index_node.hpp	/^  impl_pointer        right()const{return trampoline::right();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
boost::multi_index::detail::ordered_index_node::right	multi_index/detail/ord_index_node.hpp	/^  impl_pointer&       right(){return trampoline::right();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
boost::multi_index::detail::ordered_index_node::trampoline	multi_index/detail/ord_index_node.hpp	/^  typedef ordered_index_node_trampoline<Super> trampoline;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:private
boost::multi_index::detail::ordered_index_node_compressed_base	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_compressed_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::ordered_index_node_compressed_base::color	multi_index/detail/ord_index_node.hpp	/^  color_ref           color(){return color_ref(&parentcolor_);}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:()
boost::multi_index::detail::ordered_index_node_compressed_base::color	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color color()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	multi_index/detail/ord_index_node.hpp	/^  struct color_ref$/;"	s	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public
boost::multi_index::detail::ordered_index_node_compressed_base::color_ref::color_ref	multi_index/detail/ord_index_node.hpp	/^    color_ref(uintptr_type* r_):r(r_){}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:public	signature:(uintptr_type* r_)
boost::multi_index::detail::ordered_index_node_compressed_base::color_ref::operator =	multi_index/detail/ord_index_node.hpp	/^    color_ref& operator=(const color_ref& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:public	signature:(const color_ref& x)
boost::multi_index::detail::ordered_index_node_compressed_base::color_ref::operator =	multi_index/detail/ord_index_node.hpp	/^    color_ref& operator=(ordered_index_color c)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:public	signature:(ordered_index_color c)
boost::multi_index::detail::ordered_index_node_compressed_base::color_ref::operator ordered_index_color	multi_index/detail/ord_index_node.hpp	/^    operator ordered_index_color()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_compressed_base::color_ref::r	multi_index/detail/ord_index_node.hpp	/^    uintptr_type* r;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:private
boost::multi_index::detail::ordered_index_node_compressed_base::const_pointer	multi_index/detail/ord_index_node.hpp	/^  typedef const ordered_index_node_impl<Allocator>* const_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public
boost::multi_index::detail::ordered_index_node_compressed_base::left	multi_index/detail/ord_index_node.hpp	/^  pointer  left()const{return left_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_compressed_base::left	multi_index/detail/ord_index_node.hpp	/^  pointer& left(){return left_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:()
boost::multi_index::detail::ordered_index_node_compressed_base::left_	multi_index/detail/ord_index_node.hpp	/^  pointer      left_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:private
boost::multi_index::detail::ordered_index_node_compressed_base::parent	multi_index/detail/ord_index_node.hpp	/^  parent_ref parent(){return parent_ref(&parentcolor_);}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:()
boost::multi_index::detail::ordered_index_node_compressed_base::parent	multi_index/detail/ord_index_node.hpp	/^  pointer    parent()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	multi_index/detail/ord_index_node.hpp	/^  struct parent_ref$/;"	s	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public
boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref::operator ->	multi_index/detail/ord_index_node.hpp	/^    pointer operator->()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref::operator =	multi_index/detail/ord_index_node.hpp	/^    parent_ref& operator=(const parent_ref& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:(const parent_ref& x)
boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref::operator =	multi_index/detail/ord_index_node.hpp	/^    parent_ref& operator=(pointer p)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:(pointer p)
boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref::operator pointer	multi_index/detail/ord_index_node.hpp	/^    operator pointer()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref::parent_ref	multi_index/detail/ord_index_node.hpp	/^    parent_ref(uintptr_type* r_):r(r_){}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:(uintptr_type* r_)
boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref::r	multi_index/detail/ord_index_node.hpp	/^    uintptr_type* r;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:private
boost::multi_index::detail::ordered_index_node_compressed_base::parentcolor_	multi_index/detail/ord_index_node.hpp	/^  uintptr_type parentcolor_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:private
boost::multi_index::detail::ordered_index_node_compressed_base::pointer	multi_index/detail/ord_index_node.hpp	/^  typedef ordered_index_node_impl<Allocator>*       pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public
boost::multi_index::detail::ordered_index_node_compressed_base::right	multi_index/detail/ord_index_node.hpp	/^  pointer  right()const{return right_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_compressed_base::right	multi_index/detail/ord_index_node.hpp	/^  pointer& right(){return right_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:()
boost::multi_index::detail::ordered_index_node_compressed_base::right_	multi_index/detail/ord_index_node.hpp	/^  pointer      right_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:private
boost::multi_index::detail::ordered_index_node_impl	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_impl:ordered_index_node_impl_base<Allocator>$/;"	s	namespace:boost::multi_index::detail	inherits:ordered_index_node_impl_base
boost::multi_index::detail::ordered_index_node_impl::black_count	multi_index/detail/ord_index_node.hpp	/^  static std::size_t black_count(pointer node,pointer root)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer node,pointer root)
boost::multi_index::detail::ordered_index_node_impl::color_ref	multi_index/detail/ord_index_node.hpp	/^  typedef typename super::color_ref               color_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:public
boost::multi_index::detail::ordered_index_node_impl::const_pointer	multi_index/detail/ord_index_node.hpp	/^  typedef typename super::const_pointer           const_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:public
boost::multi_index::detail::ordered_index_node_impl::decrement	multi_index/detail/ord_index_node.hpp	/^  static void decrement(pointer& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer& x)
boost::multi_index::detail::ordered_index_node_impl::increment	multi_index/detail/ord_index_node.hpp	/^  static void increment(pointer& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer& x)
boost::multi_index::detail::ordered_index_node_impl::link	multi_index/detail/ord_index_node.hpp	/^  static void link($/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:( pointer x,ordered_index_side side,pointer position,pointer header)
boost::multi_index::detail::ordered_index_node_impl::maximum	multi_index/detail/ord_index_node.hpp	/^  static pointer maximum(pointer x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x)
boost::multi_index::detail::ordered_index_node_impl::minimum	multi_index/detail/ord_index_node.hpp	/^  static pointer minimum(pointer x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x)
boost::multi_index::detail::ordered_index_node_impl::parent_ref	multi_index/detail/ord_index_node.hpp	/^  typedef typename super::parent_ref              parent_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:public
boost::multi_index::detail::ordered_index_node_impl::pointer	multi_index/detail/ord_index_node.hpp	/^  typedef typename super::pointer                 pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:public
boost::multi_index::detail::ordered_index_node_impl::rebalance	multi_index/detail/ord_index_node.hpp	/^  static void rebalance(pointer x,parent_ref root)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x,parent_ref root)
boost::multi_index::detail::ordered_index_node_impl::rebalance_for_erase	multi_index/detail/ord_index_node.hpp	/^  static pointer rebalance_for_erase($/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:( pointer z,parent_ref root,pointer& leftmost,pointer& rightmost)
boost::multi_index::detail::ordered_index_node_impl::restore	multi_index/detail/ord_index_node.hpp	/^  static void restore(pointer x,pointer position,pointer header)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x,pointer position,pointer header)
boost::multi_index::detail::ordered_index_node_impl::rotate_left	multi_index/detail/ord_index_node.hpp	/^  static void rotate_left(pointer x,parent_ref root)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x,parent_ref root)
boost::multi_index::detail::ordered_index_node_impl::rotate_right	multi_index/detail/ord_index_node.hpp	/^  static void rotate_right(pointer x,parent_ref root)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x,parent_ref root)
boost::multi_index::detail::ordered_index_node_impl::super	multi_index/detail/ord_index_node.hpp	/^  typedef ordered_index_node_impl_base<Allocator> super;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:private
boost::multi_index::detail::ordered_index_node_impl_base	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_impl_base:$/;"	s	namespace:boost::multi_index::detail	inherits:mpl::if_c::type
boost::multi_index::detail::ordered_index_node_std_base	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_std_base$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::ordered_index_node_std_base::color	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color  color()const{return color_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_std_base::color	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color& color(){return color_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:()
boost::multi_index::detail::ordered_index_node_std_base::color_	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color color_; $/;"	m	struct:boost::multi_index::detail::ordered_index_node_std_base	access:private
boost::multi_index::detail::ordered_index_node_std_base::color_ref	multi_index/detail/ord_index_node.hpp	/^  typedef ordered_index_color&                    color_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public
boost::multi_index::detail::ordered_index_node_std_base::const_pointer	multi_index/detail/ord_index_node.hpp	/^  >::type::const_pointer                          const_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public
boost::multi_index::detail::ordered_index_node_std_base::left	multi_index/detail/ord_index_node.hpp	/^  pointer              left()const{return left_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_std_base::left	multi_index/detail/ord_index_node.hpp	/^  pointer&             left(){return left_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:()
boost::multi_index::detail::ordered_index_node_std_base::left_	multi_index/detail/ord_index_node.hpp	/^  pointer             left_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_std_base	access:private
boost::multi_index::detail::ordered_index_node_std_base::parent	multi_index/detail/ord_index_node.hpp	/^  pointer              parent()const{return parent_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_std_base::parent	multi_index/detail/ord_index_node.hpp	/^  pointer&             parent(){return parent_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:()
boost::multi_index::detail::ordered_index_node_std_base::parent_	multi_index/detail/ord_index_node.hpp	/^  pointer             parent_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_std_base	access:private
boost::multi_index::detail::ordered_index_node_std_base::parent_ref	multi_index/detail/ord_index_node.hpp	/^  typedef pointer&                                parent_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public
boost::multi_index::detail::ordered_index_node_std_base::pointer	multi_index/detail/ord_index_node.hpp	/^  >::type::pointer                                pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public
boost::multi_index::detail::ordered_index_node_std_base::right	multi_index/detail/ord_index_node.hpp	/^  pointer              right()const{return right_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:() const
boost::multi_index::detail::ordered_index_node_std_base::right	multi_index/detail/ord_index_node.hpp	/^  pointer&             right(){return right_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:()
boost::multi_index::detail::ordered_index_node_std_base::right_	multi_index/detail/ord_index_node.hpp	/^  pointer             right_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_std_base	access:private
boost::multi_index::detail::ordered_index_node_trampoline	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_trampoline:$/;"	s	namespace:boost::multi_index::detail	inherits:prevent_eti::type
boost::multi_index::detail::ordered_index_node_trampoline::impl_type	multi_index/detail/ord_index_node.hpp	/^  >::type impl_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_trampoline	access:public
boost::multi_index::detail::ordered_index_side	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_side{to_left=false,to_right=true};$/;"	g	namespace:boost::multi_index::detail
boost::multi_index::detail::ordered_index_upper_bound	multi_index/detail/ord_index_ops.hpp	/^inline Node* ordered_index_upper_bound($/;"	f	namespace:boost::multi_index::detail	signature:( Node* top,Node* y,const KeyFromValue& key,const CompatibleKey& x, const CompatibleCompare& comp)
boost::multi_index::detail::ordered_non_unique_tag	multi_index/ordered_index.hpp	/^struct ordered_non_unique_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::ordered_unique_tag	multi_index/ordered_index.hpp	/^struct ordered_unique_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::pod_value_holder	multi_index/detail/index_node_base.hpp	/^struct pod_value_holder$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::pod_value_holder::space	multi_index/detail/index_node_base.hpp	/^  >::type                      space;$/;"	m	struct:boost::multi_index::detail::pod_value_holder	access:public
boost::multi_index::detail::prevent_eti	multi_index/detail/prevent_eti.hpp	/^struct prevent_eti$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::prevent_eti::type	multi_index/detail/prevent_eti.hpp	/^  >::type type;$/;"	t	struct:boost::multi_index::detail::prevent_eti	access:public
boost::multi_index::detail::random_access_index	multi_index/random_access_index.hpp	/^class random_access_index:$/;"	c	namespace:boost::multi_index::detail	inherits:BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDSSuperMeta::type,safe_ctr_proxy_impl
boost::multi_index::detail::random_access_index::allocator_type	multi_index/random_access_index.hpp	/^  typedef typename super::final_allocator_type     allocator_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::assign	multi_index/random_access_index.hpp	/^  void assign(InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(InputIterator first,InputIterator last)
boost::multi_index::detail::random_access_index::assign	multi_index/random_access_index.hpp	/^  void assign(size_type n,value_param_type value)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n,value_param_type value)
boost::multi_index::detail::random_access_index::assign	multi_index/random_access_index.hpp	/^  void assign(std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(std::initializer_list<value_type> list)
boost::multi_index::detail::random_access_index::assign_iter	multi_index/random_access_index.hpp	/^  void assign_iter(InputIterator first,InputIterator last,mpl::true_)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(InputIterator first,InputIterator last,mpl::true_)
boost::multi_index::detail::random_access_index::assign_iter	multi_index/random_access_index.hpp	/^  void assign_iter(size_type n,value_param_type value,mpl::false_)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(size_type n,value_param_type value,mpl::false_)
boost::multi_index::detail::random_access_index::at	multi_index/random_access_index.hpp	/^  const_reference at(size_type n)const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n) const
boost::multi_index::detail::random_access_index::back	multi_index/random_access_index.hpp	/^  const_reference back()const{return operator[](size()-1);}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::begin	multi_index/random_access_index.hpp	/^  const_iterator         begin()const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::begin	multi_index/random_access_index.hpp	/^  iterator               begin()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::capacity	multi_index/random_access_index.hpp	/^  size_type capacity()const{return ptrs.capacity();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::cbegin	multi_index/random_access_index.hpp	/^  const_iterator         cbegin()const{return begin();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::cend	multi_index/random_access_index.hpp	/^  const_iterator         cend()const{return end();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::check_invariant_	multi_index/random_access_index.hpp	/^  void check_invariant_()const{this->final_check_invariant_();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::clear	multi_index/random_access_index.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::clear_	multi_index/random_access_index.hpp	/^  void clear_()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::const_iterator	multi_index/random_access_index.hpp	/^  typedef iterator                                 const_iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::const_iterator_type_list	multi_index/random_access_index.hpp	/^    const_iterator>::type                     const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
boost::multi_index::detail::random_access_index::const_pointer	multi_index/random_access_index.hpp	/^  typedef typename allocator_type::const_pointer   const_pointer;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::const_reference	multi_index/random_access_index.hpp	/^  typedef typename allocator_type::const_reference const_reference;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::const_reverse_iterator	multi_index/random_access_index.hpp	/^    boost::reverse_iterator<const_iterator>        const_reverse_iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::copy_	multi_index/random_access_index.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( const random_access_index<SuperMeta,TagList>& x,const copy_map_type& map)
boost::multi_index::detail::random_access_index::copy_map_type	multi_index/random_access_index.hpp	/^  typedef typename super::copy_map_type       copy_map_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
boost::multi_index::detail::random_access_index::crbegin	multi_index/random_access_index.hpp	/^  const_reverse_iterator crbegin()const{return rbegin();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::crend	multi_index/random_access_index.hpp	/^  const_reverse_iterator crend()const{return rend();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::ctor_args	multi_index/random_access_index.hpp	/^  typedef tuples::null_type                        ctor_args;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::ctor_args_list	multi_index/random_access_index.hpp	/^    typename super::ctor_args_list>           ctor_args_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
boost::multi_index::detail::random_access_index::delete_all_nodes_	multi_index/random_access_index.hpp	/^  void delete_all_nodes_()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::detach_iterators	multi_index/random_access_index.hpp	/^  void detach_iterators(node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(node_type* x)
boost::multi_index::detail::random_access_index::difference_type	multi_index/random_access_index.hpp	/^  typedef std::ptrdiff_t                           difference_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::emplace_back_impl	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> emplace_back_impl($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::random_access_index::emplace_front_impl	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> emplace_front_impl($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::random_access_index::emplace_impl	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> emplace_impl($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( iterator position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::random_access_index::emplace_return_type	multi_index/random_access_index.hpp	/^  typedef std::pair<iterator,bool>            emplace_return_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
boost::multi_index::detail::random_access_index::empty	multi_index/random_access_index.hpp	/^  bool      empty()const{return this->final_empty_();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::end	multi_index/random_access_index.hpp	/^  const_iterator         end()const{return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::end	multi_index/random_access_index.hpp	/^  iterator               end(){return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::erase	multi_index/random_access_index.hpp	/^  iterator erase(iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator first,iterator last)
boost::multi_index::detail::random_access_index::erase	multi_index/random_access_index.hpp	/^  iterator erase(iterator position)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position)
boost::multi_index::detail::random_access_index::erase_	multi_index/random_access_index.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* x)
boost::multi_index::detail::random_access_index::final_node_type	multi_index/random_access_index.hpp	/^  typedef typename super::final_node_type     final_node_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
boost::multi_index::detail::random_access_index::front	multi_index/random_access_index.hpp	/^  const_reference front()const{return operator[](0);}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::get_allocator	multi_index/random_access_index.hpp	/^  allocator_type get_allocator()const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::header	multi_index/random_access_index.hpp	/^  node_type* header()const{return this->final_header();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:() const
boost::multi_index::detail::random_access_index::index_loader_type	multi_index/random_access_index.hpp	/^  typedef typename super::index_loader_type   index_loader_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
boost::multi_index::detail::random_access_index::index_saver_type	multi_index/random_access_index.hpp	/^  typedef typename super::index_saver_type    index_saver_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
boost::multi_index::detail::random_access_index::index_type_list	multi_index/random_access_index.hpp	/^    random_access_index>::type                index_type_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
boost::multi_index::detail::random_access_index::insert	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> insert(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
boost::multi_index::detail::random_access_index::insert	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> insert(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,const value_type& x)
boost::multi_index::detail::random_access_index::insert	multi_index/random_access_index.hpp	/^  void insert(iterator position,InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,InputIterator first,InputIterator last)
boost::multi_index::detail::random_access_index::insert	multi_index/random_access_index.hpp	/^  void insert(iterator position,size_type n,value_param_type x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,size_type n,value_param_type x)
boost::multi_index::detail::random_access_index::insert	multi_index/random_access_index.hpp	/^  void insert(iterator position,std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,std::initializer_list<value_type> list)
boost::multi_index::detail::random_access_index::insert_	multi_index/random_access_index.hpp	/^  node_type* insert_($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( value_param_type v,node_type* position,node_type* x,Variant variant)
boost::multi_index::detail::random_access_index::insert_	multi_index/random_access_index.hpp	/^  node_type* insert_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
boost::multi_index::detail::random_access_index::insert_iter	multi_index/random_access_index.hpp	/^  void insert_iter($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( iterator position,InputIterator first,InputIterator last,mpl::true_)
boost::multi_index::detail::random_access_index::insert_iter	multi_index/random_access_index.hpp	/^  void insert_iter($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( iterator position,size_type n,value_param_type x,mpl::false_)
boost::multi_index::detail::random_access_index::invariant_	multi_index/random_access_index.hpp	/^  bool invariant_()const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::iterator	multi_index/random_access_index.hpp	/^      rnd_node_iterator<node_type> > >             iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::iterator	multi_index/random_access_index.hpp	/^    random_access_index>                           iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::iterator	multi_index/random_access_index.hpp	/^  typedef rnd_node_iterator<node_type>             iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::iterator_to	multi_index/random_access_index.hpp	/^  const_iterator iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const value_type& x) const
boost::multi_index::detail::random_access_index::iterator_to	multi_index/random_access_index.hpp	/^  iterator iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::random_access_index::iterator_type_list	multi_index/random_access_index.hpp	/^    iterator>::type                           iterator_type_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
boost::multi_index::detail::random_access_index::load_	multi_index/random_access_index.hpp	/^  void load_($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( Archive& ar,const unsigned int version,const index_loader_type& lm)
boost::multi_index::detail::random_access_index::make_iterator	multi_index/random_access_index.hpp	/^  const_iterator make_iterator(node_type* node)const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* node) const
boost::multi_index::detail::random_access_index::make_iterator	multi_index/random_access_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node);}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* node)
boost::multi_index::detail::random_access_index::make_iterator	multi_index/random_access_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node,this);}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* node)
boost::multi_index::detail::random_access_index::max_size	multi_index/random_access_index.hpp	/^  size_type max_size()const{return this->final_max_size_();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::merge	multi_index/random_access_index.hpp	/^  void merge(random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x)
boost::multi_index::detail::random_access_index::merge	multi_index/random_access_index.hpp	/^  void merge(random_access_index<SuperMeta,TagList>& x,Compare comp)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x,Compare comp)
boost::multi_index::detail::random_access_index::modify	multi_index/random_access_index.hpp	/^  bool modify(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,Modifier mod)
boost::multi_index::detail::random_access_index::modify	multi_index/random_access_index.hpp	/^  bool modify(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
boost::multi_index::detail::random_access_index::modify_	multi_index/random_access_index.hpp	/^  bool modify_(node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* x)
boost::multi_index::detail::random_access_index::modify_rollback_	multi_index/random_access_index.hpp	/^  bool modify_rollback_(node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* x)
boost::multi_index::detail::random_access_index::node_impl_ptr_pointer	multi_index/random_access_index.hpp	/^  typedef typename ptr_array::pointer              node_impl_ptr_pointer;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
boost::multi_index::detail::random_access_index::node_impl_type	multi_index/random_access_index.hpp	/^  typedef typename node_type::impl_type            node_impl_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
boost::multi_index::detail::random_access_index::node_type	multi_index/random_access_index.hpp	/^    typename super::node_type>                     node_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
boost::multi_index::detail::random_access_index::operator =	multi_index/random_access_index.hpp	/^  random_access_index<SuperMeta,TagList>& operator=($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( const random_access_index<SuperMeta,TagList>& x)
boost::multi_index::detail::random_access_index::operator =	multi_index/random_access_index.hpp	/^  random_access_index<SuperMeta,TagList>& operator=($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( std::initializer_list<value_type> list)
boost::multi_index::detail::random_access_index::operator []	multi_index/random_access_index.hpp	/^  const_reference operator[](size_type n)const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n) const
boost::multi_index::detail::random_access_index::pointer	multi_index/random_access_index.hpp	/^  typedef typename allocator_type::pointer         pointer;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::pop_back	multi_index/random_access_index.hpp	/^  void                     pop_back(){erase(--end());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::pop_front	multi_index/random_access_index.hpp	/^  void                     pop_front(){erase(begin());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::ptr_array	multi_index/random_access_index.hpp	/^    typename super::final_allocator_type>          ptr_array;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
boost::multi_index::detail::random_access_index::ptrs	multi_index/random_access_index.hpp	/^  ptr_array ptrs;$/;"	m	class:boost::multi_index::detail::random_access_index	access:private
boost::multi_index::detail::random_access_index::push_back	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> push_back(const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::random_access_index::push_front	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> push_front(const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::random_access_index::random_access_index	multi_index/random_access_index.hpp	/^  random_access_index($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( const ctor_args_list& args_list,const allocator_type& al)
boost::multi_index::detail::random_access_index::random_access_index	multi_index/random_access_index.hpp	/^  random_access_index($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( const random_access_index<SuperMeta,TagList>& x,do_not_copy_elements_tag)
boost::multi_index::detail::random_access_index::random_access_index	multi_index/random_access_index.hpp	/^  random_access_index(const random_access_index<SuperMeta,TagList>& x):$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const random_access_index<SuperMeta,TagList>& x)
boost::multi_index::detail::random_access_index::rbegin	multi_index/random_access_index.hpp	/^  const_reverse_iterator rbegin()const{return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::rbegin	multi_index/random_access_index.hpp	/^  reverse_iterator       rbegin(){return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::rearrange	multi_index/random_access_index.hpp	/^  void rearrange(InputIterator first)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(InputIterator first)
boost::multi_index::detail::random_access_index::reference	multi_index/random_access_index.hpp	/^  typedef typename allocator_type::reference       reference;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::relocate	multi_index/random_access_index.hpp	/^  static void relocate(node_type* position,node_type* first,node_type* last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(node_type* position,node_type* first,node_type* last)
boost::multi_index::detail::random_access_index::relocate	multi_index/random_access_index.hpp	/^  static void relocate(node_type* position,node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(node_type* position,node_type* x)
boost::multi_index::detail::random_access_index::relocate	multi_index/random_access_index.hpp	/^  void relocate(iterator position,iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,iterator first,iterator last)
boost::multi_index::detail::random_access_index::relocate	multi_index/random_access_index.hpp	/^  void relocate(iterator position,iterator i)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,iterator i)
boost::multi_index::detail::random_access_index::remove	multi_index/random_access_index.hpp	/^  void remove(value_param_type value)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(value_param_type value)
boost::multi_index::detail::random_access_index::remove_if	multi_index/random_access_index.hpp	/^  void remove_if(Predicate pred)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(Predicate pred)
boost::multi_index::detail::random_access_index::rend	multi_index/random_access_index.hpp	/^  const_reverse_iterator rend()const{return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::rend	multi_index/random_access_index.hpp	/^  reverse_iterator       rend(){return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::replace	multi_index/random_access_index.hpp	/^  bool replace(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
boost::multi_index::detail::random_access_index::replace	multi_index/random_access_index.hpp	/^  bool replace(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,const value_type& x)
boost::multi_index::detail::random_access_index::replace_	multi_index/random_access_index.hpp	/^  bool replace_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
boost::multi_index::detail::random_access_index::reserve	multi_index/random_access_index.hpp	/^  void reserve(size_type n)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n)
boost::multi_index::detail::random_access_index::resize	multi_index/random_access_index.hpp	/^  void resize(size_type n)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n)
boost::multi_index::detail::random_access_index::resize	multi_index/random_access_index.hpp	/^  void resize(size_type n,value_param_type x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n,value_param_type x)
boost::multi_index::detail::random_access_index::reverse	multi_index/random_access_index.hpp	/^  void reverse()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::reverse_iterator	multi_index/random_access_index.hpp	/^    boost::reverse_iterator<iterator>              reverse_iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::safe_super	multi_index/random_access_index.hpp	/^    random_access_index>                      safe_super;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
boost::multi_index::detail::random_access_index::save_	multi_index/random_access_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm) const
boost::multi_index::detail::random_access_index::shrink_to_fit	multi_index/random_access_index.hpp	/^  void shrink_to_fit()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::size	multi_index/random_access_index.hpp	/^  size_type size()const{return this->final_size_();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
boost::multi_index::detail::random_access_index::size_type	multi_index/random_access_index.hpp	/^  typedef std::size_t                              size_type;      $/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::sort	multi_index/random_access_index.hpp	/^  void sort()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::sort	multi_index/random_access_index.hpp	/^  void sort(Compare comp)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(Compare comp)
boost::multi_index::detail::random_access_index::splice	multi_index/random_access_index.hpp	/^  void splice($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( iterator position,random_access_index<SuperMeta,TagList>& x, iterator first,iterator last)
boost::multi_index::detail::random_access_index::splice	multi_index/random_access_index.hpp	/^  void splice($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( iterator position,random_access_index<SuperMeta,TagList>& x,iterator i)
boost::multi_index::detail::random_access_index::splice	multi_index/random_access_index.hpp	/^  void splice(iterator position,random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,random_access_index<SuperMeta,TagList>& x)
boost::multi_index::detail::random_access_index::super	multi_index/random_access_index.hpp	/^  typedef typename SuperMeta::type                 super;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
boost::multi_index::detail::random_access_index::swap	multi_index/random_access_index.hpp	/^  void swap(random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x)
boost::multi_index::detail::random_access_index::swap_	multi_index/random_access_index.hpp	/^  void swap_(random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x)
boost::multi_index::detail::random_access_index::swap_elements_	multi_index/random_access_index.hpp	/^  void swap_elements_(random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x)
boost::multi_index::detail::random_access_index::tag_list	multi_index/random_access_index.hpp	/^  typedef TagList                                  tag_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::unique	multi_index/random_access_index.hpp	/^  void unique()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index::unique	multi_index/random_access_index.hpp	/^  void unique(BinaryPredicate binary_pred)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(BinaryPredicate binary_pred)
boost::multi_index::detail::random_access_index::value_param_type	multi_index/random_access_index.hpp	/^    value_type>::param_type                   value_param_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
boost::multi_index::detail::random_access_index::value_type	multi_index/random_access_index.hpp	/^  typedef typename node_type::value_type           value_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
boost::multi_index::detail::random_access_index::~random_access_index	multi_index/random_access_index.hpp	/^  ~random_access_index()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
boost::multi_index::detail::random_access_index_inplace_merge	multi_index/detail/rnd_index_ops.hpp	/^void random_access_index_inplace_merge($/;"	f	namespace:boost::multi_index::detail	signature:( const Allocator& al, random_access_index_ptr_array<Allocator>& ptrs, BOOST_DEDUCED_TYPENAME Node::impl_ptr_pointer first1,Compare comp BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
boost::multi_index::detail::random_access_index_loader	multi_index/detail/rnd_index_loader.hpp	/^class random_access_index_loader:$/;"	c	namespace:boost::multi_index::detail	inherits:random_access_index_loader_base
boost::multi_index::detail::random_access_index_loader::node_impl_pointer	multi_index/detail/rnd_index_loader.hpp	/^  typedef typename super::node_impl_pointer          node_impl_pointer;$/;"	t	class:boost::multi_index::detail::random_access_index_loader	access:private
boost::multi_index::detail::random_access_index_loader::ptr_array	multi_index/detail/rnd_index_loader.hpp	/^  typedef typename super::ptr_array                  ptr_array;$/;"	t	class:boost::multi_index::detail::random_access_index_loader	access:private
boost::multi_index::detail::random_access_index_loader::random_access_index_loader	multi_index/detail/rnd_index_loader.hpp	/^  random_access_index_loader(const Allocator& al_,ptr_array& ptrs_):$/;"	f	class:boost::multi_index::detail::random_access_index_loader	access:public	signature:(const Allocator& al_,ptr_array& ptrs_)
boost::multi_index::detail::random_access_index_loader::rearrange	multi_index/detail/rnd_index_loader.hpp	/^  void rearrange(Node* position,Node *x)$/;"	f	class:boost::multi_index::detail::random_access_index_loader	access:public	signature:(Node* position,Node *x)
boost::multi_index::detail::random_access_index_loader::super	multi_index/detail/rnd_index_loader.hpp	/^  typedef random_access_index_loader_base<Allocator> super;$/;"	t	class:boost::multi_index::detail::random_access_index_loader	access:private
boost::multi_index::detail::random_access_index_loader_base	multi_index/detail/rnd_index_loader.hpp	/^class random_access_index_loader_base:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::random_access_index_loader_base::al	multi_index/detail/rnd_index_loader.hpp	/^  Allocator                               al;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
boost::multi_index::detail::random_access_index_loader_base::header	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer                       header;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
boost::multi_index::detail::random_access_index_loader_base::next	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer& next(node_impl_pointer x)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(node_impl_pointer x) const
boost::multi_index::detail::random_access_index_loader_base::next_at	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer& next_at(std::size_t n)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(std::size_t n) const
boost::multi_index::detail::random_access_index_loader_base::node_impl_pointer	multi_index/detail/rnd_index_loader.hpp	/^  typedef typename node_impl_type::pointer          node_impl_pointer;$/;"	t	class:boost::multi_index::detail::random_access_index_loader_base	access:protected
boost::multi_index::detail::random_access_index_loader_base::node_impl_type	multi_index/detail/rnd_index_loader.hpp	/^  >::type                                           node_impl_type;$/;"	t	class:boost::multi_index::detail::random_access_index_loader_base	access:protected
boost::multi_index::detail::random_access_index_loader_base::position	multi_index/detail/rnd_index_loader.hpp	/^  std::size_t position(node_impl_pointer x)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(node_impl_pointer x) const
boost::multi_index::detail::random_access_index_loader_base::preprocess	multi_index/detail/rnd_index_loader.hpp	/^  void preprocess()$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:()
boost::multi_index::detail::random_access_index_loader_base::preprocessed	multi_index/detail/rnd_index_loader.hpp	/^  bool                                    preprocessed;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
boost::multi_index::detail::random_access_index_loader_base::prev	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer& prev(node_impl_pointer x)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(node_impl_pointer x) const
boost::multi_index::detail::random_access_index_loader_base::prev_at	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer& prev_at(std::size_t n)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(std::size_t n) const
boost::multi_index::detail::random_access_index_loader_base::prev_spc	multi_index/detail/rnd_index_loader.hpp	/^  auto_space<node_impl_pointer,Allocator> prev_spc;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
boost::multi_index::detail::random_access_index_loader_base::ptr_array	multi_index/detail/rnd_index_loader.hpp	/^  typedef random_access_index_ptr_array<Allocator>  ptr_array;$/;"	t	class:boost::multi_index::detail::random_access_index_loader_base	access:protected
boost::multi_index::detail::random_access_index_loader_base::ptrs	multi_index/detail/rnd_index_loader.hpp	/^  ptr_array&                              ptrs;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
boost::multi_index::detail::random_access_index_loader_base::random_access_index_loader_base	multi_index/detail/rnd_index_loader.hpp	/^  random_access_index_loader_base(const Allocator& al_,ptr_array& ptrs_):$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:protected	signature:(const Allocator& al_,ptr_array& ptrs_)
boost::multi_index::detail::random_access_index_loader_base::rearrange	multi_index/detail/rnd_index_loader.hpp	/^  void rearrange(node_impl_pointer position,node_impl_pointer x)$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:protected	signature:(node_impl_pointer position,node_impl_pointer x)
boost::multi_index::detail::random_access_index_loader_base::~random_access_index_loader_base	multi_index/detail/rnd_index_loader.hpp	/^  ~random_access_index_loader_base()$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:protected	signature:()
boost::multi_index::detail::random_access_index_node	multi_index/detail/rnd_index_node.hpp	/^struct random_access_index_node:$/;"	s	namespace:boost::multi_index::detail	inherits:Super,random_access_index_node_trampoline
boost::multi_index::detail::random_access_index_node::advance	multi_index/detail/rnd_index_node.hpp	/^  static void advance(random_access_index_node*& x,std::ptrdiff_t n)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(random_access_index_node*& x,std::ptrdiff_t n)
boost::multi_index::detail::random_access_index_node::const_impl_pointer	multi_index/detail/rnd_index_node.hpp	/^  typedef typename trampoline::const_pointer const_impl_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:public
boost::multi_index::detail::random_access_index_node::decrement	multi_index/detail/rnd_index_node.hpp	/^  static void decrement(random_access_index_node*& x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(random_access_index_node*& x)
boost::multi_index::detail::random_access_index_node::distance	multi_index/detail/rnd_index_node.hpp	/^  static std::ptrdiff_t distance($/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:( random_access_index_node* x,random_access_index_node* y)
boost::multi_index::detail::random_access_index_node::from_impl	multi_index/detail/rnd_index_node.hpp	/^  static const random_access_index_node* from_impl(const_impl_pointer x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(const_impl_pointer x)
boost::multi_index::detail::random_access_index_node::from_impl	multi_index/detail/rnd_index_node.hpp	/^  static random_access_index_node* from_impl(impl_pointer x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(impl_pointer x)
boost::multi_index::detail::random_access_index_node::impl	multi_index/detail/rnd_index_node.hpp	/^  const_impl_pointer impl()const$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:() const
boost::multi_index::detail::random_access_index_node::impl	multi_index/detail/rnd_index_node.hpp	/^  impl_pointer impl()$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:()
boost::multi_index::detail::random_access_index_node::impl_pointer	multi_index/detail/rnd_index_node.hpp	/^  typedef typename trampoline::pointer       impl_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:public
boost::multi_index::detail::random_access_index_node::impl_ptr_pointer	multi_index/detail/rnd_index_node.hpp	/^  typedef typename trampoline::ptr_pointer   impl_ptr_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:public
boost::multi_index::detail::random_access_index_node::impl_type	multi_index/detail/rnd_index_node.hpp	/^  typedef typename trampoline::impl_type     impl_type;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:public
boost::multi_index::detail::random_access_index_node::increment	multi_index/detail/rnd_index_node.hpp	/^  static void increment(random_access_index_node*& x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(random_access_index_node*& x)
boost::multi_index::detail::random_access_index_node::trampoline	multi_index/detail/rnd_index_node.hpp	/^  typedef random_access_index_node_trampoline<Super> trampoline;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:private
boost::multi_index::detail::random_access_index_node::up	multi_index/detail/rnd_index_node.hpp	/^  impl_ptr_pointer  up()const{return trampoline::up();}$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:() const
boost::multi_index::detail::random_access_index_node::up	multi_index/detail/rnd_index_node.hpp	/^  impl_ptr_pointer& up(){return trampoline::up();}$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:()
boost::multi_index::detail::random_access_index_node_impl	multi_index/detail/rnd_index_node.hpp	/^struct random_access_index_node_impl$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::random_access_index_node_impl::advance	multi_index/detail/rnd_index_node.hpp	/^  static void advance(pointer& x,std::ptrdiff_t n)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(pointer& x,std::ptrdiff_t n)
boost::multi_index::detail::random_access_index_node_impl::const_pointer	multi_index/detail/rnd_index_node.hpp	/^  >::type::const_pointer                          const_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node_impl	access:public
boost::multi_index::detail::random_access_index_node_impl::decrement	multi_index/detail/rnd_index_node.hpp	/^  static void decrement(pointer& x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(pointer& x)
boost::multi_index::detail::random_access_index_node_impl::distance	multi_index/detail/rnd_index_node.hpp	/^  static std::ptrdiff_t distance(pointer x,pointer y)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(pointer x,pointer y)
boost::multi_index::detail::random_access_index_node_impl::extract	multi_index/detail/rnd_index_node.hpp	/^  static void extract(ptr_pointer x,ptr_pointer pend)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(ptr_pointer x,ptr_pointer pend)
boost::multi_index::detail::random_access_index_node_impl::increment	multi_index/detail/rnd_index_node.hpp	/^  static void increment(pointer& x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(pointer& x)
boost::multi_index::detail::random_access_index_node_impl::pointer	multi_index/detail/rnd_index_node.hpp	/^  >::type::pointer                                pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node_impl	access:public
boost::multi_index::detail::random_access_index_node_impl::ptr_pointer	multi_index/detail/rnd_index_node.hpp	/^  >::type::pointer                                ptr_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node_impl	access:public
boost::multi_index::detail::random_access_index_node_impl::relocate	multi_index/detail/rnd_index_node.hpp	/^  static void relocate(ptr_pointer pos,ptr_pointer first,ptr_pointer last)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(ptr_pointer pos,ptr_pointer first,ptr_pointer last)
boost::multi_index::detail::random_access_index_node_impl::relocate	multi_index/detail/rnd_index_node.hpp	/^  static void relocate(ptr_pointer pos,ptr_pointer x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(ptr_pointer pos,ptr_pointer x)
boost::multi_index::detail::random_access_index_node_impl::reverse	multi_index/detail/rnd_index_node.hpp	/^  static void reverse(ptr_pointer pbegin,ptr_pointer pend)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(ptr_pointer pbegin,ptr_pointer pend)
boost::multi_index::detail::random_access_index_node_impl::transfer	multi_index/detail/rnd_index_node.hpp	/^  static void transfer($/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:( ptr_pointer pbegin0,ptr_pointer pend0,ptr_pointer pbegin1)
boost::multi_index::detail::random_access_index_node_impl::up	multi_index/detail/rnd_index_node.hpp	/^  ptr_pointer  up()const{return up_;}$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:() const
boost::multi_index::detail::random_access_index_node_impl::up	multi_index/detail/rnd_index_node.hpp	/^  ptr_pointer& up(){return up_;}$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:()
boost::multi_index::detail::random_access_index_node_impl::up_	multi_index/detail/rnd_index_node.hpp	/^  ptr_pointer up_;$/;"	m	struct:boost::multi_index::detail::random_access_index_node_impl	access:private
boost::multi_index::detail::random_access_index_node_trampoline	multi_index/detail/rnd_index_node.hpp	/^struct random_access_index_node_trampoline:$/;"	s	namespace:boost::multi_index::detail	inherits:prevent_eti::type
boost::multi_index::detail::random_access_index_node_trampoline::impl_type	multi_index/detail/rnd_index_node.hpp	/^  >::type impl_type;$/;"	t	struct:boost::multi_index::detail::random_access_index_node_trampoline	access:public
boost::multi_index::detail::random_access_index_ptr_array	multi_index/detail/rnd_index_ptr_array.hpp	/^class random_access_index_ptr_array:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::random_access_index_ptr_array::at	multi_index/detail/rnd_index_ptr_array.hpp	/^  pointer at(std::size_t n)const{return ptrs()+n;}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(std::size_t n) const
boost::multi_index::detail::random_access_index_ptr_array::begin	multi_index/detail/rnd_index_ptr_array.hpp	/^  pointer begin()const{return ptrs();}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:() const
boost::multi_index::detail::random_access_index_ptr_array::capacity	multi_index/detail/rnd_index_ptr_array.hpp	/^  std::size_t capacity()const{return capacity_;}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:() const
boost::multi_index::detail::random_access_index_ptr_array::capacity_	multi_index/detail/rnd_index_ptr_array.hpp	/^  std::size_t                      capacity_;$/;"	m	class:boost::multi_index::detail::random_access_index_ptr_array	access:private
boost::multi_index::detail::random_access_index_ptr_array::clear	multi_index/detail/rnd_index_ptr_array.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:()
boost::multi_index::detail::random_access_index_ptr_array::end	multi_index/detail/rnd_index_ptr_array.hpp	/^  pointer end()const{return ptrs()+size_;}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:() const
boost::multi_index::detail::random_access_index_ptr_array::erase	multi_index/detail/rnd_index_ptr_array.hpp	/^  void erase(value_type x)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(value_type x)
boost::multi_index::detail::random_access_index_ptr_array::node_impl_type	multi_index/detail/rnd_index_ptr_array.hpp	/^  >::type                                           node_impl_type;$/;"	t	class:boost::multi_index::detail::random_access_index_ptr_array	access:private
boost::multi_index::detail::random_access_index_ptr_array::pointer	multi_index/detail/rnd_index_ptr_array.hpp	/^  >::type::pointer                                  pointer;$/;"	t	class:boost::multi_index::detail::random_access_index_ptr_array	access:public
boost::multi_index::detail::random_access_index_ptr_array::ptrs	multi_index/detail/rnd_index_ptr_array.hpp	/^  pointer ptrs()const$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:private	signature:() const
boost::multi_index::detail::random_access_index_ptr_array::push_back	multi_index/detail/rnd_index_ptr_array.hpp	/^  void push_back(value_type x)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(value_type x)
boost::multi_index::detail::random_access_index_ptr_array::random_access_index_ptr_array	multi_index/detail/rnd_index_ptr_array.hpp	/^  random_access_index_ptr_array($/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:( const Allocator& al,value_type end_,std::size_t size)
boost::multi_index::detail::random_access_index_ptr_array::reserve	multi_index/detail/rnd_index_ptr_array.hpp	/^  void reserve(std::size_t c)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(std::size_t c)
boost::multi_index::detail::random_access_index_ptr_array::room_for_one	multi_index/detail/rnd_index_ptr_array.hpp	/^  void room_for_one()$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:()
boost::multi_index::detail::random_access_index_ptr_array::set_capacity	multi_index/detail/rnd_index_ptr_array.hpp	/^  void set_capacity(std::size_t c)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:private	signature:(std::size_t c)
boost::multi_index::detail::random_access_index_ptr_array::shrink_to_fit	multi_index/detail/rnd_index_ptr_array.hpp	/^  void shrink_to_fit()$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:()
boost::multi_index::detail::random_access_index_ptr_array::size	multi_index/detail/rnd_index_ptr_array.hpp	/^  std::size_t size()const{return size_;}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:() const
boost::multi_index::detail::random_access_index_ptr_array::size_	multi_index/detail/rnd_index_ptr_array.hpp	/^  std::size_t                      size_;$/;"	m	class:boost::multi_index::detail::random_access_index_ptr_array	access:private
boost::multi_index::detail::random_access_index_ptr_array::spc	multi_index/detail/rnd_index_ptr_array.hpp	/^  auto_space<value_type,Allocator> spc;$/;"	m	class:boost::multi_index::detail::random_access_index_ptr_array	access:private
boost::multi_index::detail::random_access_index_ptr_array::swap	multi_index/detail/rnd_index_ptr_array.hpp	/^  void swap(random_access_index_ptr_array& x)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(random_access_index_ptr_array& x)
boost::multi_index::detail::random_access_index_ptr_array::value_type	multi_index/detail/rnd_index_ptr_array.hpp	/^  typedef typename node_impl_type::pointer          value_type;$/;"	t	class:boost::multi_index::detail::random_access_index_ptr_array	access:public
boost::multi_index::detail::random_access_index_remove	multi_index/detail/rnd_index_ops.hpp	/^Node* random_access_index_remove($/;"	f	namespace:boost::multi_index::detail	signature:( random_access_index_ptr_array<Allocator>& ptrs,Predicate pred BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
boost::multi_index::detail::random_access_index_sort	multi_index/detail/rnd_index_ops.hpp	/^void random_access_index_sort($/;"	f	namespace:boost::multi_index::detail	signature:( const Allocator& al, random_access_index_ptr_array<Allocator>& ptrs, Compare comp BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
boost::multi_index::detail::random_access_index_sort_compare	multi_index/detail/rnd_index_ops.hpp	/^struct random_access_index_sort_compare:$/;"	s	namespace:boost::multi_index::detail	inherits:std::binary_function
boost::multi_index::detail::random_access_index_sort_compare::comp	multi_index/detail/rnd_index_ops.hpp	/^  Compare comp;$/;"	m	struct:boost::multi_index::detail::random_access_index_sort_compare	access:private
boost::multi_index::detail::random_access_index_sort_compare::operator ()	multi_index/detail/rnd_index_ops.hpp	/^  bool operator()($/;"	f	struct:boost::multi_index::detail::random_access_index_sort_compare	access:public	signature:( typename Node::impl_pointer x,typename Node::impl_pointer y) const
boost::multi_index::detail::random_access_index_sort_compare::random_access_index_sort_compare	multi_index/detail/rnd_index_ops.hpp	/^  random_access_index_sort_compare(Compare comp_=Compare()):comp(comp_){}$/;"	f	struct:boost::multi_index::detail::random_access_index_sort_compare	access:public	signature:(Compare comp_=Compare())
boost::multi_index::detail::random_access_index_unique	multi_index/detail/rnd_index_ops.hpp	/^Node* random_access_index_unique($/;"	f	namespace:boost::multi_index::detail	signature:( random_access_index_ptr_array<Allocator>& ptrs,BinaryPredicate binary_pred BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
boost::multi_index::detail::random_access_iter_adaptor_base	multi_index/detail/iter_adaptor.hpp	/^class random_access_iter_adaptor_base:$/;"	c	namespace:boost::multi_index::detail	inherits:random_access_iterator_helper
boost::multi_index::detail::random_access_iter_adaptor_base::difference_type	multi_index/detail/iter_adaptor.hpp	/^  typedef typename Base::difference_type difference_type;$/;"	t	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public
boost::multi_index::detail::random_access_iter_adaptor_base::final	multi_index/detail/iter_adaptor.hpp	/^  Derived& final(){return *static_cast<Derived*>(this);}$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:private	signature:()
boost::multi_index::detail::random_access_iter_adaptor_base::final	multi_index/detail/iter_adaptor.hpp	/^  const Derived& final()const{return *static_cast<const Derived*>(this);}$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:private	signature:() const
boost::multi_index::detail::random_access_iter_adaptor_base::operator *	multi_index/detail/iter_adaptor.hpp	/^  reference operator*()const$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:() const
boost::multi_index::detail::random_access_iter_adaptor_base::operator ++	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator++()$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:()
boost::multi_index::detail::random_access_iter_adaptor_base::operator +=	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator+=(difference_type n)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:(difference_type n)
boost::multi_index::detail::random_access_iter_adaptor_base::operator -	multi_index/detail/iter_adaptor.hpp	/^  friend difference_type operator-(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
boost::multi_index::detail::random_access_iter_adaptor_base::operator --	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator--()$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:()
boost::multi_index::detail::random_access_iter_adaptor_base::operator -=	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator-=(difference_type n)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:(difference_type n)
boost::multi_index::detail::random_access_iter_adaptor_base::operator <	multi_index/detail/iter_adaptor.hpp	/^  friend bool operator<(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
boost::multi_index::detail::random_access_iter_adaptor_base::operator ==	multi_index/detail/iter_adaptor.hpp	/^  friend bool operator==(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
boost::multi_index::detail::random_access_iter_adaptor_base::reference	multi_index/detail/iter_adaptor.hpp	/^  typedef typename Base::reference       reference;$/;"	t	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public
boost::multi_index::detail::red	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_color{red=false,black=true};$/;"	e	enum:boost::multi_index::detail::ordered_index_color
boost::multi_index::detail::rnd_node_iterator	multi_index/detail/rnd_node_iterator.hpp	/^class rnd_node_iterator:$/;"	c	namespace:boost::multi_index::detail	inherits:random_access_iterator_helper
boost::multi_index::detail::rnd_node_iterator::get_node	multi_index/detail/rnd_node_iterator.hpp	/^  Node* get_node()const{return node;}$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:() const
boost::multi_index::detail::rnd_node_iterator::load	multi_index/detail/rnd_node_iterator.hpp	/^  void load(Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(Archive& ar,const unsigned int)
boost::multi_index::detail::rnd_node_iterator::node	multi_index/detail/rnd_node_iterator.hpp	/^  Node* node;$/;"	m	class:boost::multi_index::detail::rnd_node_iterator	access:private
boost::multi_index::detail::rnd_node_iterator::node_base_type	multi_index/detail/rnd_node_iterator.hpp	/^  typedef typename Node::base_type node_base_type;$/;"	t	class:boost::multi_index::detail::rnd_node_iterator	access:public
boost::multi_index::detail::rnd_node_iterator::node_type	multi_index/detail/rnd_node_iterator.hpp	/^  typedef Node node_type;$/;"	t	class:boost::multi_index::detail::rnd_node_iterator	access:public
boost::multi_index::detail::rnd_node_iterator::operator *	multi_index/detail/rnd_node_iterator.hpp	/^  const typename Node::value_type& operator*()const$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:() const
boost::multi_index::detail::rnd_node_iterator::operator ++	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator& operator++()$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:()
boost::multi_index::detail::rnd_node_iterator::operator +=	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator& operator+=(std::ptrdiff_t n)$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(std::ptrdiff_t n)
boost::multi_index::detail::rnd_node_iterator::operator --	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator& operator--()$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:()
boost::multi_index::detail::rnd_node_iterator::operator -=	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator& operator-=(std::ptrdiff_t n)$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(std::ptrdiff_t n)
boost::multi_index::detail::rnd_node_iterator::rnd_node_iterator	multi_index/detail/rnd_node_iterator.hpp	/^  explicit rnd_node_iterator(Node* node_):node(node_){}$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(Node* node_)
boost::multi_index::detail::rnd_node_iterator::rnd_node_iterator	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator(){}$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:()
boost::multi_index::detail::rnd_node_iterator::save	multi_index/detail/rnd_node_iterator.hpp	/^  void save(Archive& ar,const unsigned int)const$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(Archive& ar,const unsigned int) const
boost::multi_index::detail::rvalue_tag	multi_index/detail/index_base.hpp	/^struct rvalue_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::safe_container_base	multi_index/detail/safe_mode.hpp	/^class safe_container_base:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
boost::multi_index::detail::safe_container_base::header	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base header;$/;"	m	class:boost::multi_index::detail::safe_container_base	access:public
boost::multi_index::detail::safe_container_base::mutex	multi_index/detail/safe_mode.hpp	/^  boost::detail::lightweight_mutex mutex;$/;"	m	class:boost::multi_index::detail::safe_container_base	access:public
boost::multi_index::detail::safe_container_base::safe_container_base	multi_index/detail/safe_mode.hpp	/^  safe_container_base(){}$/;"	f	class:boost::multi_index::detail::safe_container_base	access:public	signature:()
boost::multi_index::detail::safe_container_base::safe_mode::detach_equivalent_iterators	multi_index/detail/safe_mode.hpp	/^    void safe_mode::detach_equivalent_iterators(Iterator&);$/;"	p	class:boost::multi_index::detail::safe_container_base::safe_mode	access:friend	signature:(Iterator&)
boost::multi_index::detail::safe_container_base::swap	multi_index/detail/safe_mode.hpp	/^  void swap(safe_container_base& x)$/;"	f	class:boost::multi_index::detail::safe_container_base	access:public	signature:(safe_container_base& x)
boost::multi_index::detail::safe_container_base::~safe_container_base	multi_index/detail/safe_mode.hpp	/^  ~safe_container_base()$/;"	f	class:boost::multi_index::detail::safe_container_base	access:public	signature:()
boost::multi_index::detail::safe_ctr_proxy	multi_index/detail/safe_ctr_proxy.hpp	/^class safe_ctr_proxy:$/;"	c	namespace:boost::multi_index::detail	inherits:safe_mode::safe_container
boost::multi_index::detail::safe_ctr_proxy::begin	multi_index/detail/safe_ctr_proxy.hpp	/^  const_iterator begin()const{return begin_impl();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy	access:public	signature:() const
boost::multi_index::detail::safe_ctr_proxy::begin	multi_index/detail/safe_ctr_proxy.hpp	/^  iterator       begin(){return begin_impl();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy	access:public	signature:()
boost::multi_index::detail::safe_ctr_proxy::begin_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual const_iterator begin_impl()const=0;$/;"	p	class:boost::multi_index::detail::safe_ctr_proxy	access:protected	signature:() const
boost::multi_index::detail::safe_ctr_proxy::begin_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual iterator       begin_impl()=0;$/;"	p	class:boost::multi_index::detail::safe_ctr_proxy	access:protected	signature:()
boost::multi_index::detail::safe_ctr_proxy::const_iterator	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef iterator                                          const_iterator;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy	access:public
boost::multi_index::detail::safe_ctr_proxy::end	multi_index/detail/safe_ctr_proxy.hpp	/^  const_iterator end()const{return end_impl();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy	access:public	signature:() const
boost::multi_index::detail::safe_ctr_proxy::end	multi_index/detail/safe_ctr_proxy.hpp	/^  iterator       end(){return end_impl();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy	access:public	signature:()
boost::multi_index::detail::safe_ctr_proxy::end_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual const_iterator end_impl()const=0;$/;"	p	class:boost::multi_index::detail::safe_ctr_proxy	access:protected	signature:() const
boost::multi_index::detail::safe_ctr_proxy::end_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual iterator       end_impl()=0;$/;"	p	class:boost::multi_index::detail::safe_ctr_proxy	access:protected	signature:()
boost::multi_index::detail::safe_ctr_proxy::iterator	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef safe_mode::safe_iterator<Iterator,safe_ctr_proxy> iterator;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy	access:public
boost::multi_index::detail::safe_ctr_proxy_impl	multi_index/detail/safe_ctr_proxy.hpp	/^class safe_ctr_proxy_impl:public safe_ctr_proxy<Iterator>$/;"	c	namespace:boost::multi_index::detail	inherits:safe_ctr_proxy
boost::multi_index::detail::safe_ctr_proxy_impl::begin_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual const_iterator begin_impl()const{return container().begin();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public	signature:() const
boost::multi_index::detail::safe_ctr_proxy_impl::begin_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual iterator       begin_impl(){return container().begin();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public	signature:()
boost::multi_index::detail::safe_ctr_proxy_impl::const_iterator	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef typename super::const_iterator const_iterator;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public
boost::multi_index::detail::safe_ctr_proxy_impl::container	multi_index/detail/safe_ctr_proxy.hpp	/^  const container_type& container()const$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:private	signature:() const
boost::multi_index::detail::safe_ctr_proxy_impl::container	multi_index/detail/safe_ctr_proxy.hpp	/^  container_type& container()$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:private	signature:()
boost::multi_index::detail::safe_ctr_proxy_impl::container_type	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef Container                container_type;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:private
boost::multi_index::detail::safe_ctr_proxy_impl::end_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual const_iterator end_impl()const{return container().end();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public	signature:() const
boost::multi_index::detail::safe_ctr_proxy_impl::end_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual iterator       end_impl(){return container().end();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public	signature:()
boost::multi_index::detail::safe_ctr_proxy_impl::iterator	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef typename super::iterator       iterator;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public
boost::multi_index::detail::safe_ctr_proxy_impl::super	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef safe_ctr_proxy<Iterator> super;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:private
boost::multi_index::detail::safe_iterator_base	multi_index/detail/safe_mode.hpp	/^class safe_iterator_base$/;"	c	namespace:boost::multi_index::detail
boost::multi_index::detail::safe_iterator_base::attach	multi_index/detail/safe_mode.hpp	/^  inline void attach(safe_container_base* cont_);$/;"	p	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:(safe_container_base* cont_)
boost::multi_index::detail::safe_iterator_base::attach	multi_index/detail/safe_mode.hpp	/^void safe_iterator_base::attach(safe_container_base* cont_)$/;"	f	class:boost::multi_index::detail::safe_iterator_base	signature:(safe_container_base* cont_)
boost::multi_index::detail::safe_iterator_base::cont	multi_index/detail/safe_mode.hpp	/^  safe_container_base* cont;$/;"	m	class:boost::multi_index::detail::safe_iterator_base	access:protected
boost::multi_index::detail::safe_iterator_base::detach	multi_index/detail/safe_mode.hpp	/^  inline void detach();$/;"	p	class:boost::multi_index::detail::safe_iterator_base	access:public	signature:()
boost::multi_index::detail::safe_iterator_base::detach	multi_index/detail/safe_mode.hpp	/^void safe_iterator_base::detach()$/;"	f	class:boost::multi_index::detail::safe_iterator_base	signature:()
boost::multi_index::detail::safe_iterator_base::next	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base*  next;$/;"	m	class:boost::multi_index::detail::safe_iterator_base	access:protected
boost::multi_index::detail::safe_iterator_base::operator =	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base& operator=(const safe_iterator_base& it)$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:(const safe_iterator_base& it)
boost::multi_index::detail::safe_iterator_base::owner	multi_index/detail/safe_mode.hpp	/^  const safe_container_base* owner()const{return cont;}$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:() const
boost::multi_index::detail::safe_iterator_base::safe_iterator_base	multi_index/detail/safe_mode.hpp	/^  explicit safe_iterator_base(safe_container_base* cont_):$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:(safe_container_base* cont_)
boost::multi_index::detail::safe_iterator_base::safe_iterator_base	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base():cont(0),next(0),unchecked_(false){}$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:()
boost::multi_index::detail::safe_iterator_base::safe_iterator_base	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base(const safe_iterator_base& it):$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:(const safe_iterator_base& it)
boost::multi_index::detail::safe_iterator_base::safe_mode::detach_equivalent_iterators	multi_index/detail/safe_mode.hpp	/^    void safe_mode::detach_equivalent_iterators(Iterator&);$/;"	p	class:boost::multi_index::detail::safe_iterator_base::safe_mode	access:friend	signature:(Iterator&)
boost::multi_index::detail::safe_iterator_base::uncheck	multi_index/detail/safe_mode.hpp	/^  void uncheck()$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:public	signature:()
boost::multi_index::detail::safe_iterator_base::unchecked	multi_index/detail/safe_mode.hpp	/^  bool unchecked()const{return unchecked_;}$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:public	signature:() const
boost::multi_index::detail::safe_iterator_base::unchecked_	multi_index/detail/safe_mode.hpp	/^  bool                 unchecked_;$/;"	m	class:boost::multi_index::detail::safe_iterator_base	access:protected
boost::multi_index::detail::safe_iterator_base::valid	multi_index/detail/safe_mode.hpp	/^  bool valid()const{return cont!=0;}$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:public	signature:() const
boost::multi_index::detail::safe_iterator_base::~safe_iterator_base	multi_index/detail/safe_mode.hpp	/^  ~safe_iterator_base()$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:()
boost::multi_index::detail::scope_guard	multi_index/detail/scope_guard.hpp	/^typedef const scope_guard_impl_base& scope_guard;$/;"	t	namespace:boost::multi_index::detail
boost::multi_index::detail::scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl0:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::scope_guard_impl0::execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_();}$/;"	f	class:boost::multi_index::detail::scope_guard_impl0	access:public	signature:()
boost::multi_index::detail::scope_guard_impl0::fun_	multi_index/detail/scope_guard.hpp	/^  F fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl0	access:protected
boost::multi_index::detail::scope_guard_impl0::scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl0(F fun):fun_(fun){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl0	access:public	signature:(F fun)
boost::multi_index::detail::scope_guard_impl0::~scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl0(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl0	access:public	signature:()
boost::multi_index::detail::scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl1:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::scope_guard_impl1::execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_(p1_);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl1	access:public	signature:()
boost::multi_index::detail::scope_guard_impl1::fun_	multi_index/detail/scope_guard.hpp	/^  F        fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl1	access:protected
boost::multi_index::detail::scope_guard_impl1::p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl1	access:protected
boost::multi_index::detail::scope_guard_impl1::scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl1(F fun,P1 p1):fun_(fun),p1_(p1){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl1	access:public	signature:(F fun,P1 p1)
boost::multi_index::detail::scope_guard_impl1::~scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl1(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl1	access:public	signature:()
boost::multi_index::detail::scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl2:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::scope_guard_impl2::execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_(p1_,p2_);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl2	access:public	signature:()
boost::multi_index::detail::scope_guard_impl2::fun_	multi_index/detail/scope_guard.hpp	/^  F        fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl2	access:protected
boost::multi_index::detail::scope_guard_impl2::p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl2	access:protected
boost::multi_index::detail::scope_guard_impl2::p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl2	access:protected
boost::multi_index::detail::scope_guard_impl2::scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl2(F fun,P1 p1,P2 p2):fun_(fun),p1_(p1),p2_(p2){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl2	access:public	signature:(F fun,P1 p1,P2 p2)
boost::multi_index::detail::scope_guard_impl2::~scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl2(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl2	access:public	signature:()
boost::multi_index::detail::scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl3:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::scope_guard_impl3::execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_(p1_,p2_,p3_);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl3	access:public	signature:()
boost::multi_index::detail::scope_guard_impl3::fun_	multi_index/detail/scope_guard.hpp	/^  F        fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl3	access:protected
boost::multi_index::detail::scope_guard_impl3::p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl3	access:protected
boost::multi_index::detail::scope_guard_impl3::p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl3	access:protected
boost::multi_index::detail::scope_guard_impl3::p3_	multi_index/detail/scope_guard.hpp	/^  const P3 p3_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl3	access:protected
boost::multi_index::detail::scope_guard_impl3::scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl3(F fun,P1 p1,P2 p2,P3 p3):fun_(fun),p1_(p1),p2_(p2),p3_(p3){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl3	access:public	signature:(F fun,P1 p1,P2 p2,P3 p3)
boost::multi_index::detail::scope_guard_impl3::~scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl3(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl3	access:public	signature:()
boost::multi_index::detail::scope_guard_impl4	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl4:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
boost::multi_index::detail::scope_guard_impl4::execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_(p1_,p2_,p3_,p4_);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl4	access:public	signature:()
boost::multi_index::detail::scope_guard_impl4::fun_	multi_index/detail/scope_guard.hpp	/^  F        fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
boost::multi_index::detail::scope_guard_impl4::p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
boost::multi_index::detail::scope_guard_impl4::p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
boost::multi_index::detail::scope_guard_impl4::p3_	multi_index/detail/scope_guard.hpp	/^  const P3 p3_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
boost::multi_index::detail::scope_guard_impl4::p4_	multi_index/detail/scope_guard.hpp	/^  const P4 p4_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
boost::multi_index::detail::scope_guard_impl4::scope_guard_impl4	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl4(F fun,P1 p1,P2 p2,P3 p3,P4 p4):$/;"	f	class:boost::multi_index::detail::scope_guard_impl4	access:public	signature:(F fun,P1 p1,P2 p2,P3 p3,P4 p4)
boost::multi_index::detail::scope_guard_impl4::~scope_guard_impl4	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl4(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl4	access:public	signature:()
boost::multi_index::detail::scope_guard_impl_base	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail
boost::multi_index::detail::scope_guard_impl_base::dismiss	multi_index/detail/scope_guard.hpp	/^  void dismiss()const{dismissed_=true;}$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:public	signature:() const
boost::multi_index::detail::scope_guard_impl_base::dismissed_	multi_index/detail/scope_guard.hpp	/^  mutable bool dismissed_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl_base	access:protected
boost::multi_index::detail::scope_guard_impl_base::operator =	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl_base& operator=(const scope_guard_impl_base&);$/;"	p	class:boost::multi_index::detail::scope_guard_impl_base	access:private	signature:(const scope_guard_impl_base&)
boost::multi_index::detail::scope_guard_impl_base::safe_execute	multi_index/detail/scope_guard.hpp	/^  static void safe_execute(J& j){$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:protected	signature:(J& j)
boost::multi_index::detail::scope_guard_impl_base::scope_guard_impl_base	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl_base():dismissed_(false){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:public	signature:()
boost::multi_index::detail::scope_guard_impl_base::scope_guard_impl_base	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl_base(const scope_guard_impl_base& other):$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:protected	signature:(const scope_guard_impl_base& other)
boost::multi_index::detail::scope_guard_impl_base::touch	multi_index/detail/scope_guard.hpp	/^  void touch()const{}$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:public	signature:() const
boost::multi_index::detail::scope_guard_impl_base::~scope_guard_impl_base	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl_base(){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:protected	signature:()
boost::multi_index::detail::sequenced_index	multi_index/sequenced_index.hpp	/^class sequenced_index:$/;"	c	namespace:boost::multi_index::detail	inherits:BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDSSuperMeta::type,safe_ctr_proxy_impl
boost::multi_index::detail::sequenced_index::allocator_type	multi_index/sequenced_index.hpp	/^  typedef typename super::final_allocator_type        allocator_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::assign	multi_index/sequenced_index.hpp	/^  void assign(InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(InputIterator first,InputIterator last)
boost::multi_index::detail::sequenced_index::assign	multi_index/sequenced_index.hpp	/^  void assign(size_type n,value_param_type value)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(size_type n,value_param_type value)
boost::multi_index::detail::sequenced_index::assign	multi_index/sequenced_index.hpp	/^  void assign(std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(std::initializer_list<value_type> list)
boost::multi_index::detail::sequenced_index::assign_iter	multi_index/sequenced_index.hpp	/^  void assign_iter(InputIterator first,InputIterator last,mpl::true_)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(InputIterator first,InputIterator last,mpl::true_)
boost::multi_index::detail::sequenced_index::assign_iter	multi_index/sequenced_index.hpp	/^  void assign_iter(size_type n,value_param_type value,mpl::false_)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(size_type n,value_param_type value,mpl::false_)
boost::multi_index::detail::sequenced_index::back	multi_index/sequenced_index.hpp	/^  const_reference back()const{return *--end();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::begin	multi_index/sequenced_index.hpp	/^  const_iterator         begin()const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::begin	multi_index/sequenced_index.hpp	/^  iterator               begin()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::cbegin	multi_index/sequenced_index.hpp	/^  const_iterator         cbegin()const{return begin();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::cend	multi_index/sequenced_index.hpp	/^  const_iterator         cend()const{return end();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::check_invariant_	multi_index/sequenced_index.hpp	/^  void check_invariant_()const{this->final_check_invariant_();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::clear	multi_index/sequenced_index.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::clear_	multi_index/sequenced_index.hpp	/^  void clear_()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::const_iterator	multi_index/sequenced_index.hpp	/^  typedef iterator                                    const_iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::const_iterator_type_list	multi_index/sequenced_index.hpp	/^    const_iterator>::type                     const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
boost::multi_index::detail::sequenced_index::const_pointer	multi_index/sequenced_index.hpp	/^  typedef typename allocator_type::const_pointer      const_pointer;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::const_reference	multi_index/sequenced_index.hpp	/^  typedef typename allocator_type::const_reference    const_reference;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::const_reverse_iterator	multi_index/sequenced_index.hpp	/^    boost::reverse_iterator<const_iterator>           const_reverse_iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::copy_	multi_index/sequenced_index.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( const sequenced_index<SuperMeta,TagList>& x,const copy_map_type& map)
boost::multi_index::detail::sequenced_index::copy_map_type	multi_index/sequenced_index.hpp	/^  typedef typename super::copy_map_type       copy_map_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
boost::multi_index::detail::sequenced_index::crbegin	multi_index/sequenced_index.hpp	/^  const_reverse_iterator crbegin()const{return rbegin();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::crend	multi_index/sequenced_index.hpp	/^  const_reverse_iterator crend()const{return rend();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::ctor_args	multi_index/sequenced_index.hpp	/^  typedef tuples::null_type                           ctor_args;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::ctor_args_list	multi_index/sequenced_index.hpp	/^    typename super::ctor_args_list>           ctor_args_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
boost::multi_index::detail::sequenced_index::delete_all_nodes_	multi_index/sequenced_index.hpp	/^  void delete_all_nodes_()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::detach_iterators	multi_index/sequenced_index.hpp	/^  void detach_iterators(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* x)
boost::multi_index::detail::sequenced_index::difference_type	multi_index/sequenced_index.hpp	/^  typedef std::ptrdiff_t                              difference_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::emplace_back_impl	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> emplace_back_impl($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::sequenced_index::emplace_front_impl	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> emplace_front_impl($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::sequenced_index::emplace_impl	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> emplace_impl($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( iterator position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
boost::multi_index::detail::sequenced_index::emplace_return_type	multi_index/sequenced_index.hpp	/^  typedef std::pair<iterator,bool>                     emplace_return_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
boost::multi_index::detail::sequenced_index::empty	multi_index/sequenced_index.hpp	/^  bool      empty()const{return this->final_empty_();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::empty_initialize	multi_index/sequenced_index.hpp	/^  void empty_initialize()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:()
boost::multi_index::detail::sequenced_index::end	multi_index/sequenced_index.hpp	/^  const_iterator         end()const{return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::end	multi_index/sequenced_index.hpp	/^  iterator               end(){return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::erase	multi_index/sequenced_index.hpp	/^  iterator erase(iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator first,iterator last)
boost::multi_index::detail::sequenced_index::erase	multi_index/sequenced_index.hpp	/^  iterator erase(iterator position)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position)
boost::multi_index::detail::sequenced_index::erase_	multi_index/sequenced_index.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* x)
boost::multi_index::detail::sequenced_index::final_node_type	multi_index/sequenced_index.hpp	/^  typedef typename super::final_node_type     final_node_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
boost::multi_index::detail::sequenced_index::front	multi_index/sequenced_index.hpp	/^  const_reference front()const{return *begin();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::get_allocator	multi_index/sequenced_index.hpp	/^  allocator_type get_allocator()const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::header	multi_index/sequenced_index.hpp	/^  node_type* header()const{return this->final_header();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:() const
boost::multi_index::detail::sequenced_index::index_loader_type	multi_index/sequenced_index.hpp	/^  typedef typename super::index_loader_type   index_loader_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
boost::multi_index::detail::sequenced_index::index_saver_type	multi_index/sequenced_index.hpp	/^  typedef typename super::index_saver_type    index_saver_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
boost::multi_index::detail::sequenced_index::index_type_list	multi_index/sequenced_index.hpp	/^    sequenced_index>::type                    index_type_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
boost::multi_index::detail::sequenced_index::insert	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> insert(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
boost::multi_index::detail::sequenced_index::insert	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> insert(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,const value_type& x)
boost::multi_index::detail::sequenced_index::insert	multi_index/sequenced_index.hpp	/^  void insert(iterator position,InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,InputIterator first,InputIterator last)
boost::multi_index::detail::sequenced_index::insert	multi_index/sequenced_index.hpp	/^  void insert(iterator position,size_type n,value_param_type x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,size_type n,value_param_type x)
boost::multi_index::detail::sequenced_index::insert	multi_index/sequenced_index.hpp	/^  void insert(iterator position,std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,std::initializer_list<value_type> list)
boost::multi_index::detail::sequenced_index::insert_	multi_index/sequenced_index.hpp	/^  node_type* insert_($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( value_param_type v,node_type* position,node_type* x,Variant variant)
boost::multi_index::detail::sequenced_index::insert_	multi_index/sequenced_index.hpp	/^  node_type* insert_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
boost::multi_index::detail::sequenced_index::insert_iter	multi_index/sequenced_index.hpp	/^  void insert_iter($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( iterator position,InputIterator first,InputIterator last,mpl::true_)
boost::multi_index::detail::sequenced_index::insert_iter	multi_index/sequenced_index.hpp	/^  void insert_iter($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( iterator position,size_type n,value_param_type x,mpl::false_)
boost::multi_index::detail::sequenced_index::invariant_	multi_index/sequenced_index.hpp	/^  bool invariant_()const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::iterator	multi_index/sequenced_index.hpp	/^      bidir_node_iterator<node_type> > >              iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::iterator	multi_index/sequenced_index.hpp	/^    sequenced_index>                                  iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::iterator	multi_index/sequenced_index.hpp	/^  typedef bidir_node_iterator<node_type>              iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::iterator_to	multi_index/sequenced_index.hpp	/^  const_iterator iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const value_type& x) const
boost::multi_index::detail::sequenced_index::iterator_to	multi_index/sequenced_index.hpp	/^  iterator iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::sequenced_index::iterator_type_list	multi_index/sequenced_index.hpp	/^    iterator>::type                           iterator_type_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
boost::multi_index::detail::sequenced_index::link	multi_index/sequenced_index.hpp	/^  void link(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* x)
boost::multi_index::detail::sequenced_index::load_	multi_index/sequenced_index.hpp	/^  void load_($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( Archive& ar,const unsigned int version,const index_loader_type& lm)
boost::multi_index::detail::sequenced_index::make_iterator	multi_index/sequenced_index.hpp	/^  const_iterator make_iterator(node_type* node)const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* node) const
boost::multi_index::detail::sequenced_index::make_iterator	multi_index/sequenced_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node);}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* node)
boost::multi_index::detail::sequenced_index::make_iterator	multi_index/sequenced_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node,this);}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* node)
boost::multi_index::detail::sequenced_index::max_size	multi_index/sequenced_index.hpp	/^  size_type max_size()const{return this->final_max_size_();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::merge	multi_index/sequenced_index.hpp	/^  void merge(sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x)
boost::multi_index::detail::sequenced_index::merge	multi_index/sequenced_index.hpp	/^  void merge(sequenced_index<SuperMeta,TagList>& x,Compare comp)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x,Compare comp)
boost::multi_index::detail::sequenced_index::modify	multi_index/sequenced_index.hpp	/^  bool modify(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,Modifier mod)
boost::multi_index::detail::sequenced_index::modify	multi_index/sequenced_index.hpp	/^  bool modify(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
boost::multi_index::detail::sequenced_index::modify_	multi_index/sequenced_index.hpp	/^  bool modify_(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* x)
boost::multi_index::detail::sequenced_index::modify_rollback_	multi_index/sequenced_index.hpp	/^  bool modify_rollback_(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* x)
boost::multi_index::detail::sequenced_index::node_impl_type	multi_index/sequenced_index.hpp	/^  typedef typename node_type::impl_type               node_impl_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
boost::multi_index::detail::sequenced_index::node_type	multi_index/sequenced_index.hpp	/^    typename super::node_type>                        node_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
boost::multi_index::detail::sequenced_index::operator =	multi_index/sequenced_index.hpp	/^  sequenced_index<SuperMeta,TagList>& operator=($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( const sequenced_index<SuperMeta,TagList>& x)
boost::multi_index::detail::sequenced_index::operator =	multi_index/sequenced_index.hpp	/^  sequenced_index<SuperMeta,TagList>& operator=($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( std::initializer_list<value_type> list)
boost::multi_index::detail::sequenced_index::pointer	multi_index/sequenced_index.hpp	/^  typedef typename allocator_type::pointer            pointer;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::pop_back	multi_index/sequenced_index.hpp	/^  void                     pop_back(){erase(--end());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::pop_front	multi_index/sequenced_index.hpp	/^  void                     pop_front(){erase(begin());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::push_back	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> push_back(const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::sequenced_index::push_front	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> push_front(const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const value_type& x)
boost::multi_index::detail::sequenced_index::rbegin	multi_index/sequenced_index.hpp	/^  const_reverse_iterator rbegin()const{return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::rbegin	multi_index/sequenced_index.hpp	/^  reverse_iterator       rbegin(){return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::rearrange	multi_index/sequenced_index.hpp	/^  void rearrange(InputIterator first)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(InputIterator first)
boost::multi_index::detail::sequenced_index::rearranger	multi_index/sequenced_index.hpp	/^  void rearranger(node_type* position,node_type *x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* position,node_type *x)
boost::multi_index::detail::sequenced_index::reference	multi_index/sequenced_index.hpp	/^  typedef typename allocator_type::reference          reference;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::relink	multi_index/sequenced_index.hpp	/^  static void relink(node_type* position,node_type* first,node_type* last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* position,node_type* first,node_type* last)
boost::multi_index::detail::sequenced_index::relink	multi_index/sequenced_index.hpp	/^  static void relink(node_type* position,node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* position,node_type* x)
boost::multi_index::detail::sequenced_index::relocate	multi_index/sequenced_index.hpp	/^  void relocate(iterator position,iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,iterator first,iterator last)
boost::multi_index::detail::sequenced_index::relocate	multi_index/sequenced_index.hpp	/^  void relocate(iterator position,iterator i)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,iterator i)
boost::multi_index::detail::sequenced_index::remove	multi_index/sequenced_index.hpp	/^  void remove(value_param_type value)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(value_param_type value)
boost::multi_index::detail::sequenced_index::remove_if	multi_index/sequenced_index.hpp	/^  void remove_if(Predicate pred)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(Predicate pred)
boost::multi_index::detail::sequenced_index::rend	multi_index/sequenced_index.hpp	/^  const_reverse_iterator rend()const{return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::rend	multi_index/sequenced_index.hpp	/^  reverse_iterator       rend(){return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::replace	multi_index/sequenced_index.hpp	/^  bool replace(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
boost::multi_index::detail::sequenced_index::replace	multi_index/sequenced_index.hpp	/^  bool replace(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,const value_type& x)
boost::multi_index::detail::sequenced_index::replace_	multi_index/sequenced_index.hpp	/^  bool replace_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
boost::multi_index::detail::sequenced_index::resize	multi_index/sequenced_index.hpp	/^  void resize(size_type n)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(size_type n)
boost::multi_index::detail::sequenced_index::resize	multi_index/sequenced_index.hpp	/^  void resize(size_type n,value_param_type x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(size_type n,value_param_type x)
boost::multi_index::detail::sequenced_index::reverse	multi_index/sequenced_index.hpp	/^  void reverse()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::reverse_iterator	multi_index/sequenced_index.hpp	/^    boost::reverse_iterator<iterator>                 reverse_iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::safe_super	multi_index/sequenced_index.hpp	/^    sequenced_index>                          safe_super;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
boost::multi_index::detail::sequenced_index::save_	multi_index/sequenced_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm) const
boost::multi_index::detail::sequenced_index::sequenced_index	multi_index/sequenced_index.hpp	/^  sequenced_index($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( const sequenced_index<SuperMeta,TagList>& x,do_not_copy_elements_tag)
boost::multi_index::detail::sequenced_index::sequenced_index	multi_index/sequenced_index.hpp	/^  sequenced_index(const ctor_args_list& args_list,const allocator_type& al):$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const ctor_args_list& args_list,const allocator_type& al)
boost::multi_index::detail::sequenced_index::sequenced_index	multi_index/sequenced_index.hpp	/^  sequenced_index(const sequenced_index<SuperMeta,TagList>& x):$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const sequenced_index<SuperMeta,TagList>& x)
boost::multi_index::detail::sequenced_index::size	multi_index/sequenced_index.hpp	/^  size_type size()const{return this->final_size_();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
boost::multi_index::detail::sequenced_index::size_type	multi_index/sequenced_index.hpp	/^  typedef std::size_t                                 size_type;      $/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::sort	multi_index/sequenced_index.hpp	/^  void sort()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::sort	multi_index/sequenced_index.hpp	/^  void sort(Compare comp)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(Compare comp)
boost::multi_index::detail::sequenced_index::splice	multi_index/sequenced_index.hpp	/^  void splice($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( iterator position,sequenced_index<SuperMeta,TagList>& x, iterator first,iterator last)
boost::multi_index::detail::sequenced_index::splice	multi_index/sequenced_index.hpp	/^  void splice(iterator position,sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,sequenced_index<SuperMeta,TagList>& x)
boost::multi_index::detail::sequenced_index::splice	multi_index/sequenced_index.hpp	/^  void splice(iterator position,sequenced_index<SuperMeta,TagList>& x,iterator i)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,sequenced_index<SuperMeta,TagList>& x,iterator i)
boost::multi_index::detail::sequenced_index::super	multi_index/sequenced_index.hpp	/^  typedef typename SuperMeta::type                    super;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
boost::multi_index::detail::sequenced_index::swap	multi_index/sequenced_index.hpp	/^  void swap(sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x)
boost::multi_index::detail::sequenced_index::swap_	multi_index/sequenced_index.hpp	/^  void swap_(sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x)
boost::multi_index::detail::sequenced_index::swap_elements_	multi_index/sequenced_index.hpp	/^  void swap_elements_(sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x)
boost::multi_index::detail::sequenced_index::tag_list	multi_index/sequenced_index.hpp	/^  typedef TagList                                     tag_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::unique	multi_index/sequenced_index.hpp	/^  void unique()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index::unique	multi_index/sequenced_index.hpp	/^  void unique(BinaryPredicate binary_pred)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(BinaryPredicate binary_pred)
boost::multi_index::detail::sequenced_index::unlink	multi_index/sequenced_index.hpp	/^  static void unlink(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* x)
boost::multi_index::detail::sequenced_index::value_param_type	multi_index/sequenced_index.hpp	/^  typedef typename call_traits<value_type>::param_type value_param_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
boost::multi_index::detail::sequenced_index::value_type	multi_index/sequenced_index.hpp	/^  typedef typename node_type::value_type              value_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
boost::multi_index::detail::sequenced_index::~sequenced_index	multi_index/sequenced_index.hpp	/^  ~sequenced_index()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
boost::multi_index::detail::sequenced_index_collate	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_collate($/;"	f	namespace:boost::multi_index::detail	signature:( BOOST_DEDUCED_TYPENAME Node::impl_type* x, BOOST_DEDUCED_TYPENAME Node::impl_type* y, Compare comp BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
boost::multi_index::detail::sequenced_index_merge	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_merge(SequencedIndex& x,SequencedIndex& y,Compare comp)$/;"	f	namespace:boost::multi_index::detail	signature:(SequencedIndex& x,SequencedIndex& y,Compare comp)
boost::multi_index::detail::sequenced_index_node	multi_index/detail/seq_index_node.hpp	/^struct sequenced_index_node:Super,sequenced_index_node_trampoline<Super>$/;"	s	namespace:boost::multi_index::detail	inherits:Super,sequenced_index_node_trampoline
boost::multi_index::detail::sequenced_index_node::const_impl_pointer	multi_index/detail/seq_index_node.hpp	/^  typedef typename trampoline::const_pointer     const_impl_pointer;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node	access:public
boost::multi_index::detail::sequenced_index_node::decrement	multi_index/detail/seq_index_node.hpp	/^  static void decrement(sequenced_index_node*& x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:(sequenced_index_node*& x)
boost::multi_index::detail::sequenced_index_node::from_impl	multi_index/detail/seq_index_node.hpp	/^  static const sequenced_index_node* from_impl(const_impl_pointer x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:(const_impl_pointer x)
boost::multi_index::detail::sequenced_index_node::from_impl	multi_index/detail/seq_index_node.hpp	/^  static sequenced_index_node* from_impl(impl_pointer x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:(impl_pointer x)
boost::multi_index::detail::sequenced_index_node::impl	multi_index/detail/seq_index_node.hpp	/^  const_impl_pointer impl()const$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:() const
boost::multi_index::detail::sequenced_index_node::impl	multi_index/detail/seq_index_node.hpp	/^  impl_pointer impl()$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:()
boost::multi_index::detail::sequenced_index_node::impl_pointer	multi_index/detail/seq_index_node.hpp	/^  typedef typename trampoline::pointer           impl_pointer;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node	access:public
boost::multi_index::detail::sequenced_index_node::impl_type	multi_index/detail/seq_index_node.hpp	/^  typedef typename trampoline::impl_type         impl_type;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node	access:public
boost::multi_index::detail::sequenced_index_node::increment	multi_index/detail/seq_index_node.hpp	/^  static void increment(sequenced_index_node*& x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:(sequenced_index_node*& x)
boost::multi_index::detail::sequenced_index_node::next	multi_index/detail/seq_index_node.hpp	/^  impl_pointer  next()const{return trampoline::next();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:() const
boost::multi_index::detail::sequenced_index_node::next	multi_index/detail/seq_index_node.hpp	/^  impl_pointer& next(){return trampoline::next();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:()
boost::multi_index::detail::sequenced_index_node::prior	multi_index/detail/seq_index_node.hpp	/^  impl_pointer  prior()const{return trampoline::prior();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:() const
boost::multi_index::detail::sequenced_index_node::prior	multi_index/detail/seq_index_node.hpp	/^  impl_pointer& prior(){return trampoline::prior();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:()
boost::multi_index::detail::sequenced_index_node::trampoline	multi_index/detail/seq_index_node.hpp	/^  typedef sequenced_index_node_trampoline<Super> trampoline;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node	access:private
boost::multi_index::detail::sequenced_index_node_impl	multi_index/detail/seq_index_node.hpp	/^struct sequenced_index_node_impl$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::sequenced_index_node_impl::const_pointer	multi_index/detail/seq_index_node.hpp	/^  >::type::const_pointer                          const_pointer;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public
boost::multi_index::detail::sequenced_index_node_impl::decrement	multi_index/detail/seq_index_node.hpp	/^  static void decrement(pointer& x){x=x->prior();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer& x)
boost::multi_index::detail::sequenced_index_node_impl::increment	multi_index/detail/seq_index_node.hpp	/^  static void increment(pointer& x){x=x->next();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer& x)
boost::multi_index::detail::sequenced_index_node_impl::link	multi_index/detail/seq_index_node.hpp	/^  static void link(pointer x,pointer header)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer x,pointer header)
boost::multi_index::detail::sequenced_index_node_impl::next	multi_index/detail/seq_index_node.hpp	/^  pointer  next()const{return next_;}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:() const
boost::multi_index::detail::sequenced_index_node_impl::next	multi_index/detail/seq_index_node.hpp	/^  pointer& next(){return next_;}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:()
boost::multi_index::detail::sequenced_index_node_impl::next_	multi_index/detail/seq_index_node.hpp	/^  pointer next_;$/;"	m	struct:boost::multi_index::detail::sequenced_index_node_impl	access:private
boost::multi_index::detail::sequenced_index_node_impl::pointer	multi_index/detail/seq_index_node.hpp	/^  >::type::pointer                                pointer;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public
boost::multi_index::detail::sequenced_index_node_impl::prior	multi_index/detail/seq_index_node.hpp	/^  pointer  prior()const{return prior_;}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:() const
boost::multi_index::detail::sequenced_index_node_impl::prior	multi_index/detail/seq_index_node.hpp	/^  pointer& prior(){return prior_;}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:()
boost::multi_index::detail::sequenced_index_node_impl::prior_	multi_index/detail/seq_index_node.hpp	/^  pointer prior_;$/;"	m	struct:boost::multi_index::detail::sequenced_index_node_impl	access:private
boost::multi_index::detail::sequenced_index_node_impl::relink	multi_index/detail/seq_index_node.hpp	/^  static void relink(pointer position,pointer x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer position,pointer x)
boost::multi_index::detail::sequenced_index_node_impl::relink	multi_index/detail/seq_index_node.hpp	/^  static void relink(pointer position,pointer x,pointer y)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer position,pointer x,pointer y)
boost::multi_index::detail::sequenced_index_node_impl::reverse	multi_index/detail/seq_index_node.hpp	/^  static void reverse(pointer header)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer header)
boost::multi_index::detail::sequenced_index_node_impl::swap	multi_index/detail/seq_index_node.hpp	/^  static void swap(pointer x,pointer y)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer x,pointer y)
boost::multi_index::detail::sequenced_index_node_impl::unlink	multi_index/detail/seq_index_node.hpp	/^  static void unlink(pointer x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer x)
boost::multi_index::detail::sequenced_index_node_trampoline	multi_index/detail/seq_index_node.hpp	/^struct sequenced_index_node_trampoline:$/;"	s	namespace:boost::multi_index::detail	inherits:prevent_eti::type
boost::multi_index::detail::sequenced_index_node_trampoline::impl_type	multi_index/detail/seq_index_node.hpp	/^  >::type impl_type;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node_trampoline	access:public
boost::multi_index::detail::sequenced_index_remove	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_remove(SequencedIndex& x,Predicate pred)$/;"	f	namespace:boost::multi_index::detail	signature:(SequencedIndex& x,Predicate pred)
boost::multi_index::detail::sequenced_index_sort	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_sort(Node* header,Compare comp)$/;"	f	namespace:boost::multi_index::detail	signature:(Node* header,Compare comp)
boost::multi_index::detail::sequenced_index_unique	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_unique(SequencedIndex& x,BinaryPredicate binary_pred)$/;"	f	namespace:boost::multi_index::detail	signature:(SequencedIndex& x,BinaryPredicate binary_pred)
boost::multi_index::detail::serialization_version	multi_index/detail/serialization_version.hpp	/^struct serialization_version$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::serialization_version::load	multi_index/detail/serialization_version.hpp	/^  void load(Archive&,const unsigned int version)$/;"	f	struct:boost::multi_index::detail::serialization_version	access:private	signature:(Archive&,const unsigned int version)
boost::multi_index::detail::serialization_version::operator =	multi_index/detail/serialization_version.hpp	/^  serialization_version& operator=(unsigned int x){value=x;return *this;};$/;"	f	struct:boost::multi_index::detail::serialization_version	access:public	signature:(unsigned int x)
boost::multi_index::detail::serialization_version::operator unsigned int	multi_index/detail/serialization_version.hpp	/^  operator unsigned int()const{return value;}$/;"	f	struct:boost::multi_index::detail::serialization_version	access:public	signature:() const
boost::multi_index::detail::serialization_version::save	multi_index/detail/serialization_version.hpp	/^  void save(Archive&,const unsigned int)const{}$/;"	f	struct:boost::multi_index::detail::serialization_version	access:private	signature:(Archive&,const unsigned int) const
boost::multi_index::detail::serialization_version::serialization_version	multi_index/detail/serialization_version.hpp	/^  serialization_version():$/;"	f	struct:boost::multi_index::detail::serialization_version	access:public	signature:()
boost::multi_index::detail::serialization_version::value	multi_index/detail/serialization_version.hpp	/^  unsigned int value;$/;"	m	struct:boost::multi_index::detail::serialization_version	access:private
boost::multi_index::detail::swap	multi_index/detail/auto_space.hpp	/^void swap(auto_space<T,Allocator>& x,auto_space<T,Allocator>& y)$/;"	f	namespace:boost::multi_index::detail	signature:(auto_space<T,Allocator>& x,auto_space<T,Allocator>& y)
boost::multi_index::detail::swap	multi_index/detail/bucket_array.hpp	/^void swap(bucket_array<Allocator>& x,bucket_array<Allocator>& y)$/;"	f	namespace:boost::multi_index::detail	signature:(bucket_array<Allocator>& x,bucket_array<Allocator>& y)
boost::multi_index::detail::swap	multi_index/detail/rnd_index_ptr_array.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( random_access_index_ptr_array<Allocator>& x, random_access_index_ptr_array<Allocator>& y)
boost::multi_index::detail::swap	multi_index/hashed_index.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x, hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& y)
boost::multi_index::detail::swap	multi_index/hashed_index_fwd.hpp	/^void swap($/;"	p	namespace:boost::multi_index::detail	signature:( hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x, hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& y)
boost::multi_index::detail::swap	multi_index/ordered_index.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x, ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& y)
boost::multi_index::detail::swap	multi_index/ordered_index_fwd.hpp	/^void swap($/;"	p	namespace:boost::multi_index::detail	signature:( ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x, ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& y)
boost::multi_index::detail::swap	multi_index/random_access_index.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( random_access_index<SuperMeta,TagList>& x, random_access_index<SuperMeta,TagList>& y)
boost::multi_index::detail::swap	multi_index/random_access_index_fwd.hpp	/^void swap($/;"	p	namespace:boost::multi_index::detail	signature:( random_access_index<SuperMeta,TagList>& x, random_access_index<SuperMeta,TagList>& y)
boost::multi_index::detail::swap	multi_index/sequenced_index.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( sequenced_index<SuperMeta,TagList>& x, sequenced_index<SuperMeta,TagList>& y)
boost::multi_index::detail::swap	multi_index/sequenced_index_fwd.hpp	/^void swap($/;"	p	namespace:boost::multi_index::detail	signature:( sequenced_index<SuperMeta,TagList>& x, sequenced_index<SuperMeta,TagList>& y)
boost::multi_index::detail::tag_marker	multi_index/tag.hpp	/^struct tag_marker{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::to_left	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_side{to_left=false,to_right=true};$/;"	e	enum:boost::multi_index::detail::ordered_index_side
boost::multi_index::detail::to_right	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_side{to_left=false,to_right=true};$/;"	e	enum:boost::multi_index::detail::ordered_index_side
boost::multi_index::detail::uintptr_aux	multi_index/detail/uintptr_type.hpp	/^struct uintptr_aux$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::uintptr_aux::BOOST_STATIC_CONSTANT	multi_index/detail/uintptr_type.hpp	/^  BOOST_STATIC_CONSTANT(bool,has_uintptr_type=(index>=0));$/;"	p	struct:boost::multi_index::detail::uintptr_aux	access:public	signature:(bool,has_uintptr_type=(index>=0))
boost::multi_index::detail::uintptr_aux::BOOST_STATIC_CONSTANT	multi_index/detail/uintptr_type.hpp	/^  BOOST_STATIC_CONSTANT(int,index=$/;"	p	struct:boost::multi_index::detail::uintptr_aux	access:public	signature:(int,index= sizeof(void*)==sizeof(uintptr_candidates<0>::type)?0: sizeof(void*)==sizeof(uintptr_candidates<1>::type)?1: sizeof(void*)==sizeof(uintptr_candidates<2>::type)?2: sizeof(void*)==sizeof(uintptr_candidates<3>::type)?3: sizeof(void*)==sizeof(uintptr_candidates<4>::type)?4:-1)
boost::multi_index::detail::uintptr_aux::type	multi_index/detail/uintptr_type.hpp	/^  typedef uintptr_candidates<index>::type type;$/;"	t	struct:boost::multi_index::detail::uintptr_aux	access:public
boost::multi_index::detail::uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<-1>{typedef unsigned int           type;};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<0> {typedef unsigned int           type;};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<1> {typedef unsigned short         type;};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<2> {typedef unsigned long          type;};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<3> {typedef boost::ulong_long_type type;};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<3> {typedef unsigned int           type;};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<4> {typedef unsigned __int64       type;};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<4> {typedef unsigned int           type;};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::uintptr_candidates::type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<-1>{typedef unsigned int           type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
boost::multi_index::detail::uintptr_candidates::type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<0> {typedef unsigned int           type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
boost::multi_index::detail::uintptr_candidates::type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<1> {typedef unsigned short         type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
boost::multi_index::detail::uintptr_candidates::type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<2> {typedef unsigned long          type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
boost::multi_index::detail::uintptr_candidates::type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<3> {typedef boost::ulong_long_type type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
boost::multi_index::detail::uintptr_candidates::type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<3> {typedef unsigned int           type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
boost::multi_index::detail::uintptr_candidates::type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<4> {typedef unsigned __int64       type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
boost::multi_index::detail::uintptr_candidates::type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<4> {typedef unsigned int           type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
boost::multi_index::detail::uintptr_type	multi_index/detail/uintptr_type.hpp	/^typedef uintptr_aux::type                         uintptr_type;$/;"	t	namespace:boost::multi_index::detail
boost::multi_index::detail::unbounded_type	multi_index/detail/unbounded.hpp	/^namespace detail{struct unbounded_type{};}$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::upper_unbounded_tag	multi_index/detail/unbounded.hpp	/^struct upper_unbounded_tag{};$/;"	s	namespace:boost::multi_index::detail
boost::multi_index::detail::value_comparison	multi_index/detail/value_compare.hpp	/^struct value_comparison:std::binary_function<Value,Value,bool>$/;"	s	namespace:boost::multi_index::detail	inherits:std::binary_function
boost::multi_index::detail::value_comparison::comp	multi_index/detail/value_compare.hpp	/^  Compare      comp;$/;"	m	struct:boost::multi_index::detail::value_comparison	access:private
boost::multi_index::detail::value_comparison::key	multi_index/detail/value_compare.hpp	/^  KeyFromValue key;$/;"	m	struct:boost::multi_index::detail::value_comparison	access:private
boost::multi_index::detail::value_comparison::operator ()	multi_index/detail/value_compare.hpp	/^  bool operator()($/;"	f	struct:boost::multi_index::detail::value_comparison	access:public	signature:( typename call_traits<Value>::param_type x, typename call_traits<Value>::param_type y) const
boost::multi_index::detail::value_comparison::value_comparison	multi_index/detail/value_compare.hpp	/^  value_comparison($/;"	f	struct:boost::multi_index::detail::value_comparison	access:public	signature:( const KeyFromValue& key_=KeyFromValue(),const Compare& comp_=Compare())
boost::multi_index::global_fun	multi_index/global_fun.hpp	/^struct global_fun:$/;"	s	namespace:boost::multi_index	inherits:mpl::if_c::type
boost::multi_index::hashed_non_unique	multi_index/hashed_index.hpp	/^struct hashed_non_unique$/;"	s	namespace:boost::multi_index
boost::multi_index::hashed_non_unique::hash_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::hash_type           hash_type;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
boost::multi_index::hashed_non_unique::index_args	multi_index/hashed_index.hpp	/^    Arg1,Arg2,Arg3,Arg4>                           index_args;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
boost::multi_index::hashed_non_unique::index_class	multi_index/hashed_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::hashed_non_unique	access:public
boost::multi_index::hashed_non_unique::index_class::type	multi_index/hashed_index.hpp	/^      SuperMeta,tag_list_type,detail::hashed_non_unique_tag> type;$/;"	t	struct:boost::multi_index::hashed_non_unique::index_class	access:public
boost::multi_index::hashed_non_unique::key_from_value_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::key_from_value_type key_from_value_type;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
boost::multi_index::hashed_non_unique::node_class	multi_index/hashed_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::hashed_non_unique	access:public
boost::multi_index::hashed_non_unique::node_class::type	multi_index/hashed_index.hpp	/^    typedef detail::hashed_index_node<Super> type;$/;"	t	struct:boost::multi_index::hashed_non_unique::node_class	access:public
boost::multi_index::hashed_non_unique::pred_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::pred_type           pred_type;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
boost::multi_index::hashed_non_unique::tag_list_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::tag_list_type::type tag_list_type;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
boost::multi_index::hashed_unique	multi_index/hashed_index.hpp	/^struct hashed_unique$/;"	s	namespace:boost::multi_index
boost::multi_index::hashed_unique::hash_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::hash_type           hash_type;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
boost::multi_index::hashed_unique::index_args	multi_index/hashed_index.hpp	/^    Arg1,Arg2,Arg3,Arg4>                           index_args;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
boost::multi_index::hashed_unique::index_class	multi_index/hashed_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::hashed_unique	access:public
boost::multi_index::hashed_unique::index_class::type	multi_index/hashed_index.hpp	/^      SuperMeta,tag_list_type,detail::hashed_unique_tag> type;$/;"	t	struct:boost::multi_index::hashed_unique::index_class	access:public
boost::multi_index::hashed_unique::key_from_value_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::key_from_value_type key_from_value_type;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
boost::multi_index::hashed_unique::node_class	multi_index/hashed_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::hashed_unique	access:public
boost::multi_index::hashed_unique::node_class::type	multi_index/hashed_index.hpp	/^    typedef detail::hashed_index_node<Super> type;$/;"	t	struct:boost::multi_index::hashed_unique::node_class	access:public
boost::multi_index::hashed_unique::pred_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::pred_type           pred_type;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
boost::multi_index::hashed_unique::tag_list_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::tag_list_type::type tag_list_type;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
boost::multi_index::identity	multi_index/identity.hpp	/^struct identity:$/;"	s	namespace:boost::multi_index	inherits:mpl::if_c::type
boost::multi_index::indexed_by	multi_index/indexed_by.hpp	/^struct indexed_by:$/;"	s	namespace:boost::multi_index	inherits:mpl::vector
boost::multi_index::mem_fun	multi_index/mem_fun.hpp	/^struct mem_fun$/;"	s	namespace:boost::multi_index
boost::multi_index::mem_fun::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(Class& x)const$/;"	f	struct:boost::multi_index::mem_fun	access:public	signature:(Class& x) const
boost::multi_index::mem_fun::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::mem_fun	access:public	signature:(const reference_wrapper<Class>& x) const
boost::multi_index::mem_fun::operator ()	multi_index/mem_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::mem_fun	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::mem_fun::result_type	multi_index/mem_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::mem_fun	access:public
boost::multi_index::mem_fun_explicit	multi_index/mem_fun.hpp	/^struct mem_fun_explicit$/;"	s	namespace:boost::multi_index
boost::multi_index::mem_fun_explicit::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(Class& x)const$/;"	f	struct:boost::multi_index::mem_fun_explicit	access:public	signature:(Class& x) const
boost::multi_index::mem_fun_explicit::operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::mem_fun_explicit	access:public	signature:(const reference_wrapper<Class>& x) const
boost::multi_index::mem_fun_explicit::operator ()	multi_index/mem_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::mem_fun_explicit	access:public	signature:(const ChainedPtr& x) const
boost::multi_index::mem_fun_explicit::result_type	multi_index/mem_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::mem_fun_explicit	access:public
boost::multi_index::member	multi_index/member.hpp	/^struct member:$/;"	s	namespace:boost::multi_index	inherits:mpl::if_c::type
boost::multi_index::member_offset	multi_index/member.hpp	/^struct member_offset:$/;"	s	namespace:boost::multi_index	inherits:mpl::if_c::type
boost::multi_index::ordered_non_unique	multi_index/ordered_index.hpp	/^struct ordered_non_unique$/;"	s	namespace:boost::multi_index
boost::multi_index::ordered_non_unique::compare_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::compare_type        compare_type;$/;"	t	struct:boost::multi_index::ordered_non_unique	access:public
boost::multi_index::ordered_non_unique::index_args	multi_index/ordered_index.hpp	/^    Arg1,Arg2,Arg3>                                index_args;$/;"	t	struct:boost::multi_index::ordered_non_unique	access:public
boost::multi_index::ordered_non_unique::index_class	multi_index/ordered_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::ordered_non_unique	access:public
boost::multi_index::ordered_non_unique::index_class::type	multi_index/ordered_index.hpp	/^      SuperMeta,tag_list_type,detail::ordered_non_unique_tag> type;$/;"	t	struct:boost::multi_index::ordered_non_unique::index_class	access:public
boost::multi_index::ordered_non_unique::key_from_value_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::key_from_value_type key_from_value_type;$/;"	t	struct:boost::multi_index::ordered_non_unique	access:public
boost::multi_index::ordered_non_unique::node_class	multi_index/ordered_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::ordered_non_unique	access:public
boost::multi_index::ordered_non_unique::node_class::type	multi_index/ordered_index.hpp	/^    typedef detail::ordered_index_node<Super> type;$/;"	t	struct:boost::multi_index::ordered_non_unique::node_class	access:public
boost::multi_index::ordered_non_unique::tag_list_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::tag_list_type::type tag_list_type;$/;"	t	struct:boost::multi_index::ordered_non_unique	access:public
boost::multi_index::ordered_unique	multi_index/ordered_index.hpp	/^struct ordered_unique$/;"	s	namespace:boost::multi_index
boost::multi_index::ordered_unique::compare_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::compare_type        compare_type;$/;"	t	struct:boost::multi_index::ordered_unique	access:public
boost::multi_index::ordered_unique::index_args	multi_index/ordered_index.hpp	/^    Arg1,Arg2,Arg3>                                index_args;$/;"	t	struct:boost::multi_index::ordered_unique	access:public
boost::multi_index::ordered_unique::index_class	multi_index/ordered_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::ordered_unique	access:public
boost::multi_index::ordered_unique::index_class::type	multi_index/ordered_index.hpp	/^      SuperMeta,tag_list_type,detail::ordered_unique_tag> type;$/;"	t	struct:boost::multi_index::ordered_unique::index_class	access:public
boost::multi_index::ordered_unique::key_from_value_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::key_from_value_type key_from_value_type;$/;"	t	struct:boost::multi_index::ordered_unique	access:public
boost::multi_index::ordered_unique::node_class	multi_index/ordered_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::ordered_unique	access:public
boost::multi_index::ordered_unique::node_class::type	multi_index/ordered_index.hpp	/^    typedef detail::ordered_index_node<Super> type;$/;"	t	struct:boost::multi_index::ordered_unique::node_class	access:public
boost::multi_index::ordered_unique::tag_list_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::tag_list_type::type tag_list_type;$/;"	t	struct:boost::multi_index::ordered_unique	access:public
boost::multi_index::random_access	multi_index/random_access_index.hpp	/^struct random_access$/;"	s	namespace:boost::multi_index
boost::multi_index::random_access::BOOST_STATIC_ASSERT	multi_index/random_access_index.hpp	/^  BOOST_STATIC_ASSERT(detail::is_tag<TagList>::value);$/;"	p	struct:boost::multi_index::random_access	access:public	signature:(detail::is_tag<TagList>::value)
boost::multi_index::random_access::index_class	multi_index/random_access_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::random_access	access:public
boost::multi_index::random_access::index_class::type	multi_index/random_access_index.hpp	/^      SuperMeta,typename TagList::type>  type;$/;"	t	struct:boost::multi_index::random_access::index_class	access:public
boost::multi_index::random_access::node_class	multi_index/random_access_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::random_access	access:public
boost::multi_index::random_access::node_class::type	multi_index/random_access_index.hpp	/^    typedef detail::random_access_index_node<Super> type;$/;"	t	struct:boost::multi_index::random_access::node_class	access:public
boost::multi_index::safe_mode	multi_index/detail/safe_mode.hpp	/^namespace safe_mode{$/;"	n	namespace:boost::multi_index
boost::multi_index::safe_mode	multi_index/safe_mode_errors.hpp	/^namespace safe_mode{$/;"	n	namespace:boost::multi_index
boost::multi_index::safe_mode::check_decrementable_iterator	multi_index/detail/safe_mode.hpp	/^inline bool check_decrementable_iterator(const Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it)
boost::multi_index::safe_mode::check_dereferenceable_iterator	multi_index/detail/safe_mode.hpp	/^inline bool check_dereferenceable_iterator(const Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it)
boost::multi_index::safe_mode::check_different_container	multi_index/detail/safe_mode.hpp	/^inline bool check_different_container($/;"	f	namespace:boost::multi_index::safe_mode	signature:( const Container& cont0,const Container& cont1)
boost::multi_index::safe_mode::check_in_bounds	multi_index/detail/safe_mode.hpp	/^inline bool check_in_bounds(const Iterator& it,Difference n)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it,Difference n)
boost::multi_index::safe_mode::check_incrementable_iterator	multi_index/detail/safe_mode.hpp	/^inline bool check_incrementable_iterator(const Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it)
boost::multi_index::safe_mode::check_is_owner	multi_index/detail/safe_mode.hpp	/^inline bool check_is_owner($/;"	f	namespace:boost::multi_index::safe_mode	signature:( const Iterator& it,const typename Iterator::container_type& cont)
boost::multi_index::safe_mode::check_outside_range	multi_index/detail/safe_mode.hpp	/^inline bool check_outside_range($/;"	f	namespace:boost::multi_index::safe_mode	signature:( const Iterator& it,const Iterator& it0,const Iterator& it1)
boost::multi_index::safe_mode::check_same_owner	multi_index/detail/safe_mode.hpp	/^inline bool check_same_owner(const Iterator& it0,const Iterator& it1)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it0,const Iterator& it1)
boost::multi_index::safe_mode::check_valid_iterator	multi_index/detail/safe_mode.hpp	/^inline bool check_valid_iterator(const Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it)
boost::multi_index::safe_mode::check_valid_range	multi_index/detail/safe_mode.hpp	/^inline bool check_valid_range(const Iterator& it0,const Iterator& it1)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it0,const Iterator& it1)
boost::multi_index::safe_mode::detach_equivalent_iterators	multi_index/detail/safe_mode.hpp	/^inline void detach_equivalent_iterators(Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(Iterator& it)
boost::multi_index::safe_mode::error_code	multi_index/safe_mode_errors.hpp	/^enum error_code$/;"	g	namespace:boost::multi_index::safe_mode
boost::multi_index::safe_mode::inside_range	multi_index/safe_mode_errors.hpp	/^  inside_range,$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::safe_mode::invalid_iterator	multi_index/safe_mode_errors.hpp	/^  invalid_iterator=0,$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::safe_mode::invalid_range	multi_index/safe_mode_errors.hpp	/^  invalid_range,$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::safe_mode::not_decrementable_iterator	multi_index/safe_mode_errors.hpp	/^  not_decrementable_iterator,$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::safe_mode::not_dereferenceable_iterator	multi_index/safe_mode_errors.hpp	/^  not_dereferenceable_iterator,$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::safe_mode::not_incrementable_iterator	multi_index/safe_mode_errors.hpp	/^  not_incrementable_iterator,$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::safe_mode::not_owner	multi_index/safe_mode_errors.hpp	/^  not_owner,$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::safe_mode::not_same_owner	multi_index/safe_mode_errors.hpp	/^  not_same_owner,$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::safe_mode::out_of_bounds	multi_index/safe_mode_errors.hpp	/^  out_of_bounds,$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::safe_mode::safe_container	multi_index/detail/safe_mode.hpp	/^class safe_container:public detail::safe_container_base$/;"	c	namespace:boost::multi_index::safe_mode	inherits:detail::safe_container_base
boost::multi_index::safe_mode::safe_container::detach_dereferenceable_iterators	multi_index/detail/safe_mode.hpp	/^  void detach_dereferenceable_iterators()$/;"	f	class:boost::multi_index::safe_mode::safe_container	access:public	signature:()
boost::multi_index::safe_mode::safe_container::super	multi_index/detail/safe_mode.hpp	/^  typedef detail::safe_container_base super;$/;"	t	class:boost::multi_index::safe_mode::safe_container	access:private
boost::multi_index::safe_mode::safe_container::swap	multi_index/detail/safe_mode.hpp	/^  void swap(safe_container<Container>& x)$/;"	f	class:boost::multi_index::safe_mode::safe_container	access:public	signature:(safe_container<Container>& x)
boost::multi_index::safe_mode::safe_iterator	multi_index/detail/safe_mode.hpp	/^class safe_iterator:$/;"	c	namespace:boost::multi_index::safe_mode	inherits:detail::iter_adaptor,detail::safe_iterator_base
boost::multi_index::safe_mode::safe_iterator::advance	multi_index/detail/safe_mode.hpp	/^  void advance(difference_type n)$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(difference_type n)
boost::multi_index::safe_mode::safe_iterator::container_type	multi_index/detail/safe_mode.hpp	/^  typedef Container                                    container_type;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:public
boost::multi_index::safe_mode::safe_iterator::decrement	multi_index/detail/safe_mode.hpp	/^  void decrement()$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:()
boost::multi_index::safe_mode::safe_iterator::dereference	multi_index/detail/safe_mode.hpp	/^  reference dereference()const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:() const
boost::multi_index::safe_mode::safe_iterator::difference_type	multi_index/detail/safe_mode.hpp	/^  typedef typename Iterator::difference_type           difference_type;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:public
boost::multi_index::safe_mode::safe_iterator::distance_to	multi_index/detail/safe_mode.hpp	/^  difference_type distance_to(const safe_iterator& x)const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(const safe_iterator& x) const
boost::multi_index::safe_mode::safe_iterator::equal	multi_index/detail/safe_mode.hpp	/^  bool equal(const safe_iterator& x)const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(const safe_iterator& x) const
boost::multi_index::safe_mode::safe_iterator::get_node	multi_index/detail/safe_mode.hpp	/^  node_type* get_node()const{return this->base_reference().get_node();}$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:() const
boost::multi_index::safe_mode::safe_iterator::increment	multi_index/detail/safe_mode.hpp	/^  void increment()$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:()
boost::multi_index::safe_mode::safe_iterator::load	multi_index/detail/safe_mode.hpp	/^  void load(Archive& ar,const unsigned int version)$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(Archive& ar,const unsigned int version)
boost::multi_index::safe_mode::safe_iterator::node_type	multi_index/detail/safe_mode.hpp	/^  typedef typename Iterator::node_type node_type;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:public
boost::multi_index::safe_mode::safe_iterator::operator =	multi_index/detail/safe_mode.hpp	/^  safe_iterator& operator=(const safe_iterator& x)$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:(const safe_iterator& x)
boost::multi_index::safe_mode::safe_iterator::owner	multi_index/detail/safe_mode.hpp	/^  const container_type* owner()const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:() const
boost::multi_index::safe_mode::safe_iterator::reference	multi_index/detail/safe_mode.hpp	/^  typedef typename Iterator::reference                 reference;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:public
boost::multi_index::safe_mode::safe_iterator::safe_iterator	multi_index/detail/safe_mode.hpp	/^  explicit safe_iterator(safe_container<container_type>* cont_):$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:(safe_container<container_type>* cont_)
boost::multi_index::safe_mode::safe_iterator::safe_iterator	multi_index/detail/safe_mode.hpp	/^  safe_iterator($/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:( const T0& t0,const T1& t1,safe_container<container_type>* cont_)
boost::multi_index::safe_mode::safe_iterator::safe_iterator	multi_index/detail/safe_mode.hpp	/^  safe_iterator(){}$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:()
boost::multi_index::safe_mode::safe_iterator::safe_iterator	multi_index/detail/safe_mode.hpp	/^  safe_iterator(const T0& t0,safe_container<container_type>* cont_):$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:(const T0& t0,safe_container<container_type>* cont_)
boost::multi_index::safe_mode::safe_iterator::safe_super	multi_index/detail/safe_mode.hpp	/^  typedef detail::safe_iterator_base                   safe_super;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:private
boost::multi_index::safe_mode::safe_iterator::save	multi_index/detail/safe_mode.hpp	/^  void save(Archive& ar,const unsigned int version)const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(Archive& ar,const unsigned int version) const
boost::multi_index::safe_mode::safe_iterator::super	multi_index/detail/safe_mode.hpp	/^  typedef detail::iter_adaptor<safe_iterator,Iterator> super;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:private
boost::multi_index::safe_mode::same_container	multi_index/safe_mode_errors.hpp	/^  same_container$/;"	e	enum:boost::multi_index::safe_mode::error_code
boost::multi_index::sequenced	multi_index/sequenced_index.hpp	/^struct sequenced$/;"	s	namespace:boost::multi_index
boost::multi_index::sequenced::BOOST_STATIC_ASSERT	multi_index/sequenced_index.hpp	/^  BOOST_STATIC_ASSERT(detail::is_tag<TagList>::value);$/;"	p	struct:boost::multi_index::sequenced	access:public	signature:(detail::is_tag<TagList>::value)
boost::multi_index::sequenced::index_class	multi_index/sequenced_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::sequenced	access:public
boost::multi_index::sequenced::index_class::type	multi_index/sequenced_index.hpp	/^    typedef detail::sequenced_index<SuperMeta,typename TagList::type> type;$/;"	t	struct:boost::multi_index::sequenced::index_class	access:public
boost::multi_index::sequenced::node_class	multi_index/sequenced_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::sequenced	access:public
boost::multi_index::sequenced::node_class::type	multi_index/sequenced_index.hpp	/^    typedef detail::sequenced_index_node<Super> type;$/;"	t	struct:boost::multi_index::sequenced::node_class	access:public
boost::multi_index::tag	multi_index/tag.hpp	/^struct tag:private detail::tag_marker$/;"	s	namespace:boost::multi_index	inherits:detail::tag_marker
boost::multi_index::tag::BOOST_STATIC_ASSERT	multi_index/tag.hpp	/^  BOOST_STATIC_ASSERT(detail::no_duplicate_tags<type>::value);$/;"	p	struct:boost::multi_index::tag	access:public	signature:(detail::no_duplicate_tags<type>::value)
boost::multi_index::tag::type	multi_index/tag.hpp	/^  >::type type;$/;"	t	struct:boost::multi_index::tag	access:public
boost::serialization	multi_index/detail/bucket_array.hpp	/^namespace serialization{$/;"	n	namespace:boost
boost::serialization	multi_index/detail/index_node_base.hpp	/^namespace serialization{$/;"	n	namespace:boost
boost::serialization	multi_index/detail/serialization_version.hpp	/^namespace serialization {$/;"	n	namespace:boost
boost::serialization::load_construct_data	multi_index/detail/bucket_array.hpp	/^inline void load_construct_data($/;"	f	namespace:boost::serialization	signature:( Archive&,boost::multi_index::detail::bucket_array<Allocator>*, const unsigned int)
boost::serialization::load_construct_data	multi_index/detail/index_node_base.hpp	/^inline void load_construct_data($/;"	f	namespace:boost::serialization	signature:( Archive&,boost::multi_index::detail::index_node_base<Value,Allocator>*, const unsigned int)
boost::serialization::version	multi_index/detail/serialization_version.hpp	/^struct version<boost::multi_index::detail::serialization_version<T> >$/;"	s	namespace:boost::serialization
boost::serialization::version::BOOST_STATIC_CONSTANT	multi_index/detail/serialization_version.hpp	/^  BOOST_STATIC_CONSTANT(int,value=version<T>::value);$/;"	p	struct:boost::serialization::version	access:public	signature:(int,value=version<T>::value)
boost_foreach_is_noncopyable	multi_index/hashed_index.hpp	/^inline boost::mpl::true_* boost_foreach_is_noncopyable($/;"	f	signature:( boost::multi_index::detail::hashed_index< KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>*&, boost::foreach::tag)
boost_foreach_is_noncopyable	multi_index/ordered_index.hpp	/^inline boost::mpl::true_* boost_foreach_is_noncopyable($/;"	f	signature:( boost::multi_index::detail::ordered_index< KeyFromValue,Compare,SuperMeta,TagList,Category>*&, boost::foreach::tag)
boost_foreach_is_noncopyable	multi_index/random_access_index.hpp	/^inline boost::mpl::true_* boost_foreach_is_noncopyable($/;"	f	signature:( boost::multi_index::detail::random_access_index<SuperMeta,TagList>*&, boost::foreach::tag)
boost_foreach_is_noncopyable	multi_index/sequenced_index.hpp	/^inline boost::mpl::true_* boost_foreach_is_noncopyable($/;"	f	signature:( boost::multi_index::detail::sequenced_index<SuperMeta,TagList>*&, boost::foreach::tag)
both_unbounded_tag	multi_index/detail/unbounded.hpp	/^struct both_unbounded_tag{};$/;"	s	namespace:boost::multi_index::detail
bucket	multi_index/hashed_index.hpp	/^  size_type bucket(key_param_type k)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(key_param_type k) const
bucket_array	multi_index/detail/bucket_array.hpp	/^  bucket_array(const Allocator& al,pointer end_,std::size_t size):$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(const Allocator& al,pointer end_,std::size_t size)
bucket_array	multi_index/detail/bucket_array.hpp	/^class bucket_array:public bucket_array_base$/;"	c	namespace:boost::multi_index::detail	inherits:bucket_array_base
bucket_array_base	multi_index/detail/bucket_array.hpp	/^class bucket_array_base:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
bucket_array_type	multi_index/hashed_index.hpp	/^    typename super::final_allocator_type>            bucket_array_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
bucket_count	multi_index/hashed_index.hpp	/^  size_type bucket_count()const{return buckets.size();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
bucket_size	multi_index/hashed_index.hpp	/^  size_type bucket_size(size_type n)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
buckets	multi_index/detail/bucket_array.hpp	/^  pointer buckets()const$/;"	f	class:boost::multi_index::detail::bucket_array	access:private	signature:() const
buckets	multi_index/detail/hash_index_iterator.hpp	/^  BucketArray* buckets;$/;"	m	class:boost::multi_index::detail::hashed_index_iterator	access:private
buckets	multi_index/hashed_index.hpp	/^  bucket_array_type            buckets;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
calculate_max_load	multi_index/hashed_index.hpp	/^  void calculate_max_load()$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:()
capacity	multi_index/detail/rnd_index_ptr_array.hpp	/^  std::size_t capacity()const{return capacity_;}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:() const
capacity	multi_index/random_access_index.hpp	/^  size_type capacity()const{return ptrs.capacity();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
capacity_	multi_index/detail/rnd_index_ptr_array.hpp	/^  std::size_t                      capacity_;$/;"	m	class:boost::multi_index::detail::random_access_index_ptr_array	access:private
cbegin	multi_index/hashed_index.hpp	/^  const_iterator cbegin()const{return begin();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
cbegin	multi_index/hashed_index.hpp	/^  const_local_iterator cbegin(size_type n)const{return begin(n);}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
cbegin	multi_index/ordered_index.hpp	/^  const_iterator         cbegin()const{return begin();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
cbegin	multi_index/random_access_index.hpp	/^  const_iterator         cbegin()const{return begin();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
cbegin	multi_index/sequenced_index.hpp	/^  const_iterator         cbegin()const{return begin();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
cend	multi_index/hashed_index.hpp	/^  const_iterator cend()const{return end();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
cend	multi_index/hashed_index.hpp	/^  const_local_iterator cend(size_type n)const{return end(n);}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
cend	multi_index/ordered_index.hpp	/^  const_iterator         cend()const{return end();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
cend	multi_index/random_access_index.hpp	/^  const_iterator         cend()const{return end();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
cend	multi_index/sequenced_index.hpp	/^  const_iterator         cend()const{return end();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
check_decrementable_iterator	multi_index/detail/safe_mode.hpp	/^inline bool check_decrementable_iterator(const Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it)
check_dereferenceable_iterator	multi_index/detail/safe_mode.hpp	/^inline bool check_dereferenceable_iterator(const Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it)
check_different_container	multi_index/detail/safe_mode.hpp	/^inline bool check_different_container($/;"	f	namespace:boost::multi_index::safe_mode	signature:( const Container& cont0,const Container& cont1)
check_in_bounds	multi_index/detail/safe_mode.hpp	/^inline bool check_in_bounds(const Iterator& it,Difference n)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it,Difference n)
check_incrementable_iterator	multi_index/detail/safe_mode.hpp	/^inline bool check_incrementable_iterator(const Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it)
check_invariant_	multi_index/hashed_index.hpp	/^  void check_invariant_()const{this->final_check_invariant_();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
check_invariant_	multi_index/ordered_index.hpp	/^  void check_invariant_()const{this->final_check_invariant_();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
check_invariant_	multi_index/random_access_index.hpp	/^  void check_invariant_()const{this->final_check_invariant_();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
check_invariant_	multi_index/sequenced_index.hpp	/^  void check_invariant_()const{this->final_check_invariant_();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
check_is_owner	multi_index/detail/safe_mode.hpp	/^inline bool check_is_owner($/;"	f	namespace:boost::multi_index::safe_mode	signature:( const Iterator& it,const typename Iterator::container_type& cont)
check_node	multi_index/detail/index_loader.hpp	/^  void check_node(Node* node)const$/;"	f	class:boost::multi_index::detail::index_loader	access:private	signature:(Node* node) const
check_outside_range	multi_index/detail/safe_mode.hpp	/^inline bool check_outside_range($/;"	f	namespace:boost::multi_index::safe_mode	signature:( const Iterator& it,const Iterator& it0,const Iterator& it1)
check_same_owner	multi_index/detail/safe_mode.hpp	/^inline bool check_same_owner(const Iterator& it0,const Iterator& it1)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it0,const Iterator& it1)
check_valid_iterator	multi_index/detail/safe_mode.hpp	/^inline bool check_valid_iterator(const Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it)
check_valid_range	multi_index/detail/safe_mode.hpp	/^inline bool check_valid_range(const Iterator& it0,const Iterator& it1)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(const Iterator& it0,const Iterator& it1)
clear	multi_index/detail/bucket_array.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:()
clear	multi_index/detail/rnd_index_ptr_array.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:()
clear	multi_index/hashed_index.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
clear	multi_index/ordered_index.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
clear	multi_index/random_access_index.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
clear	multi_index/sequenced_index.hpp	/^  void clear()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
clear_	multi_index/detail/index_base.hpp	/^  void clear_(){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:()
clear_	multi_index/hashed_index.hpp	/^  void clear_()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
clear_	multi_index/ordered_index.hpp	/^  void clear_()$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
clear_	multi_index/random_access_index.hpp	/^  void clear_()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
clear_	multi_index/sequenced_index.hpp	/^  void clear_()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
clone	multi_index/detail/copy_map.hpp	/^  void clone(Node* node)$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:(Node* node)
color	multi_index/detail/ord_index_node.hpp	/^  color_ref           color(){return color_ref(&parentcolor_);}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:()
color	multi_index/detail/ord_index_node.hpp	/^  impl_color_ref      color(){return trampoline::color();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
color	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color  color()const{return color_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:() const
color	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color color()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:() const
color	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color color()const{return trampoline::color();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
color	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color& color(){return color_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:()
color_	multi_index/detail/ord_index_node.hpp	/^  ordered_index_color color_; $/;"	m	struct:boost::multi_index::detail::ordered_index_node_std_base	access:private
color_ref	multi_index/detail/ord_index_node.hpp	/^    color_ref(uintptr_type* r_):r(r_){}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:public	signature:(uintptr_type* r_)
color_ref	multi_index/detail/ord_index_node.hpp	/^  struct color_ref$/;"	s	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public
color_ref	multi_index/detail/ord_index_node.hpp	/^  typedef ordered_index_color&                    color_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public
color_ref	multi_index/detail/ord_index_node.hpp	/^  typedef typename super::color_ref               color_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:public
comp	multi_index/detail/rnd_index_ops.hpp	/^  Compare comp;$/;"	m	struct:boost::multi_index::detail::random_access_index_sort_compare	access:private
comp	multi_index/detail/value_compare.hpp	/^  Compare      comp;$/;"	m	struct:boost::multi_index::detail::value_comparison	access:private
comp_	multi_index/ordered_index.hpp	/^  key_compare    comp_;$/;"	m	class:boost::multi_index::detail::ordered_index	access:private
compare_type	multi_index/detail/ord_index_args.hpp	/^  >::type                                            compare_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
compare_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::compare_type        compare_type;$/;"	t	struct:boost::multi_index::ordered_non_unique	access:public
compare_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::compare_type        compare_type;$/;"	t	struct:boost::multi_index::ordered_unique	access:public
const_identity_base	multi_index/identity.hpp	/^struct const_identity_base$/;"	s	namespace:boost::multi_index::detail
const_impl_pointer	multi_index/detail/hash_index_node.hpp	/^  typedef typename trampoline::const_pointer const_impl_pointer;$/;"	t	struct:boost::multi_index::detail::hashed_index_node	access:public
const_impl_pointer	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::const_pointer const_impl_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
const_impl_pointer	multi_index/detail/rnd_index_node.hpp	/^  typedef typename trampoline::const_pointer const_impl_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:public
const_impl_pointer	multi_index/detail/seq_index_node.hpp	/^  typedef typename trampoline::const_pointer     const_impl_pointer;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node	access:public
const_iterator	multi_index/detail/converter.hpp	/^  static typename Index::const_iterator const_iterator($/;"	f	struct:boost::multi_index::detail::converter	access:public	signature:( const MultiIndexContainer& x,typename MultiIndexContainer::node_type* node)
const_iterator	multi_index/detail/copy_map.hpp	/^  typedef const copy_map_entry<Node>* const_iterator;$/;"	t	class:boost::multi_index::detail::copy_map	access:public
const_iterator	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef iterator                                          const_iterator;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy	access:public
const_iterator	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef typename super::const_iterator const_iterator;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public
const_iterator	multi_index/hashed_index.hpp	/^  typedef iterator                                   const_iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
const_iterator	multi_index/ordered_index.hpp	/^  typedef iterator                                   const_iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
const_iterator	multi_index/random_access_index.hpp	/^  typedef iterator                                 const_iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
const_iterator	multi_index/sequenced_index.hpp	/^  typedef iterator                                    const_iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
const_iterator_type_list	multi_index/detail/index_base.hpp	/^  typedef mpl::vector0<>                      const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
const_iterator_type_list	multi_index/hashed_index.hpp	/^    const_iterator>::type                     const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
const_iterator_type_list	multi_index/ordered_index.hpp	/^    const_iterator>::type                            const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
const_iterator_type_list	multi_index/random_access_index.hpp	/^    const_iterator>::type                     const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
const_iterator_type_list	multi_index/sequenced_index.hpp	/^    const_iterator>::type                     const_iterator_type_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
const_local_iterator	multi_index/hashed_index.hpp	/^  typedef const_iterator                             const_local_iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
const_mem_fun	multi_index/mem_fun.hpp	/^struct const_mem_fun$/;"	s	namespace:boost::multi_index
const_mem_fun_explicit	multi_index/mem_fun.hpp	/^struct const_mem_fun_explicit$/;"	s	namespace:boost::multi_index
const_member_base	multi_index/member.hpp	/^struct const_member_base$/;"	s	namespace:boost::multi_index::detail
const_member_offset_base	multi_index/member.hpp	/^struct const_member_offset_base$/;"	s	namespace:boost::multi_index::detail
const_pointer	multi_index/detail/hash_index_node.hpp	/^  >::type::const_pointer                          const_pointer;$/;"	t	struct:boost::multi_index::detail::hashed_index_node_impl	access:public
const_pointer	multi_index/detail/ord_index_node.hpp	/^  >::type::const_pointer                          const_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public
const_pointer	multi_index/detail/ord_index_node.hpp	/^  typedef const ordered_index_node_impl<Allocator>* const_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public
const_pointer	multi_index/detail/ord_index_node.hpp	/^  typedef typename super::const_pointer           const_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:public
const_pointer	multi_index/detail/rnd_index_node.hpp	/^  >::type::const_pointer                          const_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node_impl	access:public
const_pointer	multi_index/detail/seq_index_node.hpp	/^  >::type::const_pointer                          const_pointer;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public
const_pointer	multi_index/hashed_index.hpp	/^  typedef typename allocator_type::const_pointer     const_pointer;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
const_pointer	multi_index/ordered_index.hpp	/^  typedef typename allocator_type::const_pointer     const_pointer;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
const_pointer	multi_index/random_access_index.hpp	/^  typedef typename allocator_type::const_pointer   const_pointer;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
const_pointer	multi_index/sequenced_index.hpp	/^  typedef typename allocator_type::const_pointer      const_pointer;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
const_ref_global_fun_base	multi_index/global_fun.hpp	/^struct const_ref_global_fun_base$/;"	s	namespace:boost::multi_index::detail
const_reference	multi_index/hashed_index.hpp	/^  typedef typename allocator_type::const_reference   const_reference;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
const_reference	multi_index/ordered_index.hpp	/^  typedef typename allocator_type::const_reference   const_reference;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
const_reference	multi_index/random_access_index.hpp	/^  typedef typename allocator_type::const_reference const_reference;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
const_reference	multi_index/sequenced_index.hpp	/^  typedef typename allocator_type::const_reference    const_reference;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
const_reverse_iterator	multi_index/ordered_index.hpp	/^    boost::reverse_iterator<const_iterator>          const_reverse_iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
const_reverse_iterator	multi_index/random_access_index.hpp	/^    boost::reverse_iterator<const_iterator>        const_reverse_iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
const_reverse_iterator	multi_index/sequenced_index.hpp	/^    boost::reverse_iterator<const_iterator>           const_reverse_iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
cont	multi_index/detail/safe_mode.hpp	/^  safe_container_base* cont;$/;"	m	class:boost::multi_index::detail::safe_iterator_base	access:protected
container	multi_index/detail/safe_ctr_proxy.hpp	/^  const container_type& container()const$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:private	signature:() const
container	multi_index/detail/safe_ctr_proxy.hpp	/^  container_type& container()$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:private	signature:()
container_type	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef Container                container_type;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:private
container_type	multi_index/detail/safe_mode.hpp	/^  typedef Container                                    container_type;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:public
converter	multi_index/detail/converter.hpp	/^struct converter$/;"	s	namespace:boost::multi_index::detail
copy_	multi_index/detail/index_base.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const index_base<Value,IndexSpecifierList,Allocator>&,const copy_map_type&)
copy_	multi_index/hashed_index.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x, const copy_map_type& map)
copy_	multi_index/ordered_index.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x, const copy_map_type& map)
copy_	multi_index/random_access_index.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( const random_access_index<SuperMeta,TagList>& x,const copy_map_type& map)
copy_	multi_index/sequenced_index.hpp	/^  void copy_($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( const sequenced_index<SuperMeta,TagList>& x,const copy_map_type& map)
copy_map	multi_index/detail/copy_map.hpp	/^  copy_map($/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:( const Allocator& al,std::size_t size,Node* header_org,Node* header_cpy)
copy_map	multi_index/detail/copy_map.hpp	/^class copy_map:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
copy_map_entry	multi_index/detail/copy_map.hpp	/^  copy_map_entry(Node* f,Node* s):first(f),second(s){}$/;"	f	struct:boost::multi_index::detail::copy_map_entry	access:public	signature:(Node* f,Node* s)
copy_map_entry	multi_index/detail/copy_map.hpp	/^struct copy_map_entry$/;"	s	namespace:boost::multi_index::detail
copy_map_type	multi_index/detail/index_base.hpp	/^    final_allocator_type>                     copy_map_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
copy_map_type	multi_index/hashed_index.hpp	/^  typedef typename super::copy_map_type       copy_map_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
copy_map_type	multi_index/ordered_index.hpp	/^  typedef typename super::copy_map_type              copy_map_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
copy_map_type	multi_index/random_access_index.hpp	/^  typedef typename super::copy_map_type       copy_map_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
copy_map_type	multi_index/sequenced_index.hpp	/^  typedef typename super::copy_map_type       copy_map_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
count	multi_index/hashed_index.hpp	/^  size_type count($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const CompatibleKey& k, const CompatibleHash& hash,const CompatiblePred& eq) const
count	multi_index/hashed_index.hpp	/^  size_type count(const CompatibleKey& k)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const CompatibleKey& k) const
count	multi_index/ordered_index.hpp	/^  size_type count(const CompatibleKey& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x) const
count	multi_index/ordered_index.hpp	/^  size_type count(const CompatibleKey& x,const CompatibleCompare& comp)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x,const CompatibleCompare& comp) const
crbegin	multi_index/ordered_index.hpp	/^  const_reverse_iterator crbegin()const{return rbegin();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
crbegin	multi_index/random_access_index.hpp	/^  const_reverse_iterator crbegin()const{return rbegin();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
crbegin	multi_index/sequenced_index.hpp	/^  const_reverse_iterator crbegin()const{return rbegin();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
crend	multi_index/ordered_index.hpp	/^  const_reverse_iterator crend()const{return rend();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
crend	multi_index/random_access_index.hpp	/^  const_reverse_iterator crend()const{return rend();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
crend	multi_index/sequenced_index.hpp	/^  const_reverse_iterator crend()const{return rend();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
ctor_args	multi_index/hashed_index.hpp	/^    key_from_value,hasher,key_equal>                 ctor_args;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
ctor_args	multi_index/ordered_index.hpp	/^  typedef tuple<key_from_value,key_compare>          ctor_args;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
ctor_args	multi_index/random_access_index.hpp	/^  typedef tuples::null_type                        ctor_args;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
ctor_args	multi_index/sequenced_index.hpp	/^  typedef tuples::null_type                           ctor_args;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
ctor_args_list	multi_index/detail/index_base.hpp	/^  typedef tuples::null_type                   ctor_args_list;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
ctor_args_list	multi_index/hashed_index.hpp	/^    typename super::ctor_args_list>           ctor_args_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
ctor_args_list	multi_index/ordered_index.hpp	/^    typename super::ctor_args_list>                  ctor_args_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
ctor_args_list	multi_index/random_access_index.hpp	/^    typename super::ctor_args_list>           ctor_args_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
ctor_args_list	multi_index/sequenced_index.hpp	/^    typename super::ctor_args_list>           ctor_args_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
data	multi_index/detail/auto_space.hpp	/^  pointer data()const{return data_;}$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:() const
data_	multi_index/detail/auto_space.hpp	/^  pointer                                       data_;$/;"	m	struct:boost::multi_index::detail::auto_space	access:private
deallocate	multi_index/detail/copy_map.hpp	/^  void deallocate(Node* node)$/;"	f	class:boost::multi_index::detail::copy_map	access:private	signature:(Node* node)
decrement	multi_index/detail/iter_adaptor.hpp	/^  static void decrement(Class& x)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(Class& x)
decrement	multi_index/detail/ord_index_node.hpp	/^  static void decrement(ordered_index_node*& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:(ordered_index_node*& x)
decrement	multi_index/detail/ord_index_node.hpp	/^  static void decrement(pointer& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer& x)
decrement	multi_index/detail/rnd_index_node.hpp	/^  static void decrement(pointer& x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(pointer& x)
decrement	multi_index/detail/rnd_index_node.hpp	/^  static void decrement(random_access_index_node*& x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(random_access_index_node*& x)
decrement	multi_index/detail/safe_mode.hpp	/^  void decrement()$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:()
decrement	multi_index/detail/seq_index_node.hpp	/^  static void decrement(pointer& x){x=x->prior();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer& x)
decrement	multi_index/detail/seq_index_node.hpp	/^  static void decrement(sequenced_index_node*& x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:(sequenced_index_node*& x)
delete_all_nodes	multi_index/ordered_index.hpp	/^  void delete_all_nodes(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* x)
delete_all_nodes_	multi_index/hashed_index.hpp	/^  void delete_all_nodes_()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
delete_all_nodes_	multi_index/ordered_index.hpp	/^  void delete_all_nodes_()$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
delete_all_nodes_	multi_index/random_access_index.hpp	/^  void delete_all_nodes_()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
delete_all_nodes_	multi_index/sequenced_index.hpp	/^  void delete_all_nodes_()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
delete_node_	multi_index/detail/index_base.hpp	/^  void delete_node_(node_type* x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(node_type* x)
dereference	multi_index/detail/iter_adaptor.hpp	/^    static typename Class::reference dereference(const Class& x)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(const Class& x)
dereference	multi_index/detail/safe_mode.hpp	/^  reference dereference()const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:() const
detach	multi_index/detail/safe_mode.hpp	/^  inline void detach();$/;"	p	class:boost::multi_index::detail::safe_iterator_base	access:public	signature:()
detach	multi_index/detail/safe_mode.hpp	/^void safe_iterator_base::detach()$/;"	f	class:boost::multi_index::detail::safe_iterator_base	signature:()
detach_dereferenceable_iterators	multi_index/detail/safe_mode.hpp	/^  void detach_dereferenceable_iterators()$/;"	f	class:boost::multi_index::safe_mode::safe_container	access:public	signature:()
detach_equivalent_iterators	multi_index/detail/safe_mode.hpp	/^    void safe_mode::detach_equivalent_iterators(Iterator&);$/;"	p	class:boost::multi_index::detail::safe_container_base::safe_mode	access:friend	signature:(Iterator&)
detach_equivalent_iterators	multi_index/detail/safe_mode.hpp	/^    void safe_mode::detach_equivalent_iterators(Iterator&);$/;"	p	class:boost::multi_index::detail::safe_iterator_base::safe_mode	access:friend	signature:(Iterator&)
detach_equivalent_iterators	multi_index/detail/safe_mode.hpp	/^inline void detach_equivalent_iterators(Iterator& it)$/;"	f	namespace:boost::multi_index::safe_mode	signature:(Iterator& it)
detach_iterators	multi_index/hashed_index.hpp	/^  void detach_iterators(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x)
detach_iterators	multi_index/ordered_index.hpp	/^  void detach_iterators(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* x)
detach_iterators	multi_index/random_access_index.hpp	/^  void detach_iterators(node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(node_type* x)
detach_iterators	multi_index/sequenced_index.hpp	/^  void detach_iterators(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* x)
detail	multi_index/composite_key.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/adl_swap.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/archive_constructed.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/auto_space.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/base_type.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/bidir_node_iterator.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/bucket_array.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/converter.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/copy_map.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/do_not_copy_elements_tag.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/duplicates_iterator.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/has_tag.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/hash_index_args.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/hash_index_iterator.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/hash_index_node.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/header_holder.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/index_base.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/index_loader.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/index_matcher.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/index_node_base.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/index_saver.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/is_index_list.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/iter_adaptor.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/modify_key_adaptor.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/msvc_index_specifier.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/no_duplicate_tags.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/node_type.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/ord_index_args.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/ord_index_node.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/ord_index_ops.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/prevent_eti.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/rnd_index_loader.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/rnd_index_node.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/rnd_index_ops.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/rnd_index_ptr_array.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/rnd_node_iterator.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/safe_ctr_proxy.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/safe_mode.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/scope_guard.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/seq_index_node.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/seq_index_ops.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/serialization_version.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/uintptr_type.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/unbounded.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/unbounded.hpp	/^namespace detail{struct unbounded_type{};}$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/value_compare.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/vartempl_support.hpp	/^namespace boost{namespace multi_index{namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/detail/vartempl_support.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/global_fun.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/hashed_index.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/hashed_index_fwd.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/identity.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/member.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/ordered_index.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/ordered_index_fwd.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/random_access_index.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/random_access_index_fwd.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/sequenced_index.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/sequenced_index_fwd.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
detail	multi_index/tag.hpp	/^namespace detail{$/;"	n	namespace:boost::multi_index
difference_type	multi_index/detail/duplicates_iterator.hpp	/^  typedef std::ptrdiff_t                   difference_type;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
difference_type	multi_index/detail/iter_adaptor.hpp	/^  typedef typename Base::difference_type difference_type;$/;"	t	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public
difference_type	multi_index/detail/safe_mode.hpp	/^  typedef typename Iterator::difference_type           difference_type;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:public
difference_type	multi_index/hashed_index.hpp	/^  typedef std::ptrdiff_t                             difference_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
difference_type	multi_index/ordered_index.hpp	/^  typedef std::ptrdiff_t                             difference_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
difference_type	multi_index/random_access_index.hpp	/^  typedef std::ptrdiff_t                           difference_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
difference_type	multi_index/sequenced_index.hpp	/^  typedef std::ptrdiff_t                              difference_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
dismiss	multi_index/detail/scope_guard.hpp	/^  void dismiss()const{dismissed_=true;}$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:public	signature:() const
dismissed_	multi_index/detail/scope_guard.hpp	/^  mutable bool dismissed_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl_base	access:protected
distance	multi_index/detail/rnd_index_node.hpp	/^  static std::ptrdiff_t distance($/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:( random_access_index_node* x,random_access_index_node* y)
distance	multi_index/detail/rnd_index_node.hpp	/^  static std::ptrdiff_t distance(pointer x,pointer y)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(pointer x,pointer y)
distance_to	multi_index/detail/iter_adaptor.hpp	/^  static typename Class::difference_type distance_to($/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:( const Class& x,const Class& y)
distance_to	multi_index/detail/safe_mode.hpp	/^  difference_type distance_to(const safe_iterator& x)const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(const safe_iterator& x) const
do_not_copy_elements_tag	multi_index/detail/do_not_copy_elements_tag.hpp	/^struct do_not_copy_elements_tag{};$/;"	s	namespace:boost::multi_index::detail
duplicate_tag_list_marker	multi_index/detail/no_duplicate_tags.hpp	/^struct duplicate_tag_list_marker$/;"	s	namespace:boost::multi_index::detail
duplicate_tag_mark	multi_index/detail/no_duplicate_tags.hpp	/^struct duplicate_tag_mark{};$/;"	s	namespace:boost::multi_index::detail
duplicate_tag_marker	multi_index/detail/no_duplicate_tags.hpp	/^struct duplicate_tag_marker$/;"	s	namespace:boost::multi_index::detail
duplicates_iterator	multi_index/detail/duplicates_iterator.hpp	/^  duplicates_iterator(Node* end_,Predicate pred_):$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:(Node* end_,Predicate pred_)
duplicates_iterator	multi_index/detail/duplicates_iterator.hpp	/^  duplicates_iterator(Node* node_,Node* end_,Predicate pred_):$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:(Node* node_,Node* end_,Predicate pred_)
duplicates_iterator	multi_index/detail/duplicates_iterator.hpp	/^class duplicates_iterator$/;"	c	namespace:boost::multi_index::detail
emplace_back_impl	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> emplace_back_impl($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_back_impl	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> emplace_back_impl($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_front_impl	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> emplace_front_impl($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_front_impl	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> emplace_front_impl($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_hint_impl	multi_index/hashed_index.hpp	/^  iterator emplace_hint_impl($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( iterator position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_hint_impl	multi_index/ordered_index.hpp	/^  iterator emplace_hint_impl($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( iterator position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_impl	multi_index/hashed_index.hpp	/^  std::pair<iterator,bool> emplace_impl(BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_impl	multi_index/ordered_index.hpp	/^  std::pair<iterator,bool> emplace_impl(BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_impl	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> emplace_impl($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( iterator position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_impl	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> emplace_impl($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( iterator position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
emplace_return_type	multi_index/hashed_index.hpp	/^  typedef std::pair<iterator,bool>                     emplace_return_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
emplace_return_type	multi_index/ordered_index.hpp	/^  typedef std::pair<iterator,bool>                   emplace_return_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
emplace_return_type	multi_index/random_access_index.hpp	/^  typedef std::pair<iterator,bool>            emplace_return_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
emplace_return_type	multi_index/sequenced_index.hpp	/^  typedef std::pair<iterator,bool>                     emplace_return_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
emplaced_tag	multi_index/detail/index_base.hpp	/^struct emplaced_tag{};$/;"	s	namespace:boost::multi_index::detail
empty	multi_index/hashed_index.hpp	/^  bool      empty()const{return this->final_empty_();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
empty	multi_index/ordered_index.hpp	/^  bool      empty()const{return this->final_empty_();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
empty	multi_index/random_access_index.hpp	/^  bool      empty()const{return this->final_empty_();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
empty	multi_index/sequenced_index.hpp	/^  bool      empty()const{return this->final_empty_();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
empty_initialize	multi_index/ordered_index.hpp	/^  void empty_initialize()$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:()
empty_initialize	multi_index/sequenced_index.hpp	/^  void empty_initialize()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:()
end	multi_index/detail/bucket_array.hpp	/^  pointer end()const{return buckets()+size_;}$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:() const
end	multi_index/detail/copy_map.hpp	/^  const_iterator end()const{return &*(spc.data()+n);}$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:() const
end	multi_index/detail/duplicates_iterator.hpp	/^  Node*     end;$/;"	m	class:boost::multi_index::detail::duplicates_iterator	access:private
end	multi_index/detail/rnd_index_ptr_array.hpp	/^  pointer end()const{return ptrs()+size_;}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:() const
end	multi_index/detail/safe_ctr_proxy.hpp	/^  const_iterator end()const{return end_impl();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy	access:public	signature:() const
end	multi_index/detail/safe_ctr_proxy.hpp	/^  iterator       end(){return end_impl();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy	access:public	signature:()
end	multi_index/hashed_index.hpp	/^  const_iterator end()const{return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
end	multi_index/hashed_index.hpp	/^  const_local_iterator end(size_type n)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n) const
end	multi_index/hashed_index.hpp	/^  iterator       end(){return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
end	multi_index/hashed_index.hpp	/^  local_iterator end(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n)
end	multi_index/ordered_index.hpp	/^  const_iterator         end()const{return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
end	multi_index/ordered_index.hpp	/^  iterator               end(){return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
end	multi_index/random_access_index.hpp	/^  const_iterator         end()const{return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
end	multi_index/random_access_index.hpp	/^  iterator               end(){return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
end	multi_index/sequenced_index.hpp	/^  const_iterator         end()const{return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
end	multi_index/sequenced_index.hpp	/^  iterator               end(){return make_iterator(header());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
end_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual const_iterator end_impl()const=0;$/;"	p	class:boost::multi_index::detail::safe_ctr_proxy	access:protected	signature:() const
end_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual const_iterator end_impl()const{return container().end();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public	signature:() const
end_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual iterator       end_impl()=0;$/;"	p	class:boost::multi_index::detail::safe_ctr_proxy	access:protected	signature:()
end_impl	multi_index/detail/safe_ctr_proxy.hpp	/^  virtual iterator       end_impl(){return container().end();}$/;"	f	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public	signature:()
entries	multi_index/detail/index_loader.hpp	/^  Node** entries()const{return &*spc.data();}$/;"	f	class:boost::multi_index::detail::index_loader	access:private	signature:() const
entries	multi_index/detail/index_matcher.hpp	/^  entry* entries()const{return &*spc.data();}$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private	signature:() const
entry	multi_index/detail/index_matcher.hpp	/^  entry(void* node_,std::size_t pos_=0):node(node_),pos(pos_){}$/;"	f	struct:boost::multi_index::detail::index_matcher::entry	access:public	signature:(void* node_,std::size_t pos_=0)
entry	multi_index/detail/index_matcher.hpp	/^struct entry$/;"	s	namespace:boost::multi_index::detail::index_matcher
eq_	multi_index/hashed_index.hpp	/^  key_equal                    eq_;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
equal	multi_index/detail/iter_adaptor.hpp	/^  static bool equal(const Class& x,const Class& y)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(const Class& x,const Class& y)
equal	multi_index/detail/safe_mode.hpp	/^  bool equal(const safe_iterator& x)const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(const safe_iterator& x) const
equal_range	multi_index/hashed_index.hpp	/^  std::pair<iterator,iterator> equal_range($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const CompatibleKey& k, const CompatibleHash& hash,const CompatiblePred& eq) const
equal_range	multi_index/hashed_index.hpp	/^  std::pair<iterator,iterator> equal_range(const CompatibleKey& k)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const CompatibleKey& k) const
equal_range	multi_index/ordered_index.hpp	/^  std::pair<iterator,iterator> equal_range($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x) const
equal_range	multi_index/ordered_index.hpp	/^  std::pair<iterator,iterator> equal_range($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x,const CompatibleCompare& comp) const
erase	multi_index/detail/rnd_index_ptr_array.hpp	/^  void erase(value_type x)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(value_type x)
erase	multi_index/hashed_index.hpp	/^  iterator erase(iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator first,iterator last)
erase	multi_index/hashed_index.hpp	/^  iterator erase(iterator position)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position)
erase	multi_index/hashed_index.hpp	/^  size_type erase(key_param_type k)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(key_param_type k)
erase	multi_index/ordered_index.hpp	/^  iterator erase(iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator first,iterator last)
erase	multi_index/ordered_index.hpp	/^  iterator erase(iterator position)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position)
erase	multi_index/ordered_index.hpp	/^  size_type erase(key_param_type x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(key_param_type x)
erase	multi_index/random_access_index.hpp	/^  iterator erase(iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator first,iterator last)
erase	multi_index/random_access_index.hpp	/^  iterator erase(iterator position)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position)
erase	multi_index/sequenced_index.hpp	/^  iterator erase(iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator first,iterator last)
erase	multi_index/sequenced_index.hpp	/^  iterator erase(iterator position)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position)
erase_	multi_index/detail/index_base.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(node_type* x)
erase_	multi_index/hashed_index.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* x)
erase_	multi_index/ordered_index.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* x)
erase_	multi_index/random_access_index.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* x)
erase_	multi_index/sequenced_index.hpp	/^  void erase_(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* x)
error_code	multi_index/safe_mode_errors.hpp	/^enum error_code$/;"	g	namespace:boost::multi_index::safe_mode
execute	multi_index/detail/index_matcher.hpp	/^  void execute(IndexIterator first,IndexIterator last)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:public	signature:(IndexIterator first,IndexIterator last) const
execute	multi_index/detail/scope_guard.hpp	/^  void execute(){(obj_.*mem_fun_)();}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl0	access:public	signature:()
execute	multi_index/detail/scope_guard.hpp	/^  void execute(){(obj_.*mem_fun_)(p1_);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl1	access:public	signature:()
execute	multi_index/detail/scope_guard.hpp	/^  void execute(){(obj_.*mem_fun_)(p1_,p2_);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl2	access:public	signature:()
execute	multi_index/detail/scope_guard.hpp	/^  void execute(){(obj_.*mem_fun_)(p1_,p2_,p3_);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl3	access:public	signature:()
execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_();}$/;"	f	class:boost::multi_index::detail::scope_guard_impl0	access:public	signature:()
execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_(p1_);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl1	access:public	signature:()
execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_(p1_,p2_);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl2	access:public	signature:()
execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_(p1_,p2_,p3_);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl3	access:public	signature:()
execute	multi_index/detail/scope_guard.hpp	/^  void execute(){fun_(p1_,p2_,p3_,p4_);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl4	access:public	signature:()
extract	multi_index/detail/rnd_index_node.hpp	/^  static void extract(ptr_pointer x,ptr_pointer pend)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(ptr_pointer x,ptr_pointer pend)
f	multi_index/detail/modify_key_adaptor.hpp	/^  Fun          f;$/;"	m	struct:boost::multi_index::detail::modify_key_adaptor	access:private
fake_index_type	multi_index/detail/msvc_index_specifier.hpp	/^  template<> struct fake_index_type<true>$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier	access:public
fake_index_type	multi_index/detail/msvc_index_specifier.hpp	/^  template<bool> struct fake_index_type:IndexSpecifier{};$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier	inherits:IndexSpecifier	access:public
final	multi_index/detail/header_holder.hpp	/^  Final& final(){return *static_cast<Final*>(this);}$/;"	f	struct:boost::multi_index::detail::header_holder	access:private	signature:()
final	multi_index/detail/index_base.hpp	/^  const final_type& final()const{return *static_cast<const final_type*>(this);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
final	multi_index/detail/index_base.hpp	/^  final_type&       final(){return *static_cast<final_type*>(this);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:()
final	multi_index/detail/iter_adaptor.hpp	/^  Derived& final(){return *static_cast<Derived*>(this);}$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:private	signature:()
final	multi_index/detail/iter_adaptor.hpp	/^  Derived& final(){return *static_cast<Derived*>(this);}$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:private	signature:()
final	multi_index/detail/iter_adaptor.hpp	/^  Derived& final(){return *static_cast<Derived*>(this);}$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:private	signature:()
final	multi_index/detail/iter_adaptor.hpp	/^  const Derived& final()const{return *static_cast<const Derived*>(this);}$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:private	signature:() const
final	multi_index/detail/iter_adaptor.hpp	/^  const Derived& final()const{return *static_cast<const Derived*>(this);}$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:private	signature:() const
final	multi_index/detail/iter_adaptor.hpp	/^  const Derived& final()const{return *static_cast<const Derived*>(this);}$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:private	signature:() const
final_allocator_type	multi_index/detail/index_base.hpp	/^      typename Allocator::value_type>::type   final_allocator_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
final_check_invariant_	multi_index/detail/index_base.hpp	/^  void final_check_invariant_()const{final().check_invariant_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
final_clear_	multi_index/detail/index_base.hpp	/^  void final_clear_(){final().clear_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:()
final_delete_all_nodes_	multi_index/detail/index_base.hpp	/^  void final_delete_all_nodes_(){final().delete_all_nodes_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:()
final_delete_node_	multi_index/detail/index_base.hpp	/^  void final_delete_node_(final_node_type* x){final().delete_node_(x);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(final_node_type* x)
final_emplace_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_emplace_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
final_emplace_hint_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_emplace_hint_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( final_node_type* position,BOOST_MULTI_INDEX_FUNCTION_PARAM_PACK)
final_empty_	multi_index/detail/index_base.hpp	/^  bool        final_empty_()const{return final().empty_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
final_erase_	multi_index/detail/index_base.hpp	/^  void final_erase_(final_node_type* x){final().erase_(x);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(final_node_type* x)
final_header	multi_index/detail/index_base.hpp	/^  final_node_type* final_header()const{return final().header();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
final_insert_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const value_type& x,final_node_type* position)
final_insert_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_(const value_type& x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& x)
final_insert_ref_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_ref_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( T& t,final_node_type* position)
final_insert_ref_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_ref_(T& t)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(T& t)
final_insert_rv_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_rv_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const value_type& x,final_node_type* position)
final_insert_rv_	multi_index/detail/index_base.hpp	/^  std::pair<final_node_type*,bool> final_insert_rv_(const value_type& x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& x)
final_max_size_	multi_index/detail/index_base.hpp	/^  std::size_t final_max_size_()const{return final().max_size_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
final_modify_	multi_index/detail/index_base.hpp	/^  bool final_modify_(Modifier& mod,Rollback& back,final_node_type* x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(Modifier& mod,Rollback& back,final_node_type* x)
final_modify_	multi_index/detail/index_base.hpp	/^  bool final_modify_(Modifier& mod,final_node_type* x)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(Modifier& mod,final_node_type* x)
final_node_type	multi_index/detail/index_base.hpp	/^    Value,IndexSpecifierList,Allocator>::type final_node_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
final_node_type	multi_index/hashed_index.hpp	/^  typedef typename super::final_node_type     final_node_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
final_node_type	multi_index/ordered_index.hpp	/^  typedef typename super::final_node_type            final_node_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
final_node_type	multi_index/random_access_index.hpp	/^  typedef typename super::final_node_type     final_node_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
final_node_type	multi_index/sequenced_index.hpp	/^  typedef typename super::final_node_type     final_node_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
final_replace_	multi_index/detail/index_base.hpp	/^  bool final_replace_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const value_type& k,final_node_type* x)
final_replace_rv_	multi_index/detail/index_base.hpp	/^  bool final_replace_rv_($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const value_type& k,final_node_type* x)
final_size_	multi_index/detail/index_base.hpp	/^  std::size_t final_size_()const{return final().size_();}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
final_swap_	multi_index/detail/index_base.hpp	/^  void final_swap_(final_type& x){final().swap_(x);}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(final_type& x)
final_type	multi_index/detail/index_base.hpp	/^    Value,IndexSpecifierList,Allocator>       final_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
find	multi_index/detail/copy_map.hpp	/^  Node* find(Node* node)const$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:(Node* node) const
find	multi_index/hashed_index.hpp	/^  iterator find($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const CompatibleKey& k, const CompatibleHash& hash,const CompatiblePred& eq) const
find	multi_index/hashed_index.hpp	/^  iterator find(const CompatibleKey& k)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const CompatibleKey& k) const
find	multi_index/ordered_index.hpp	/^  iterator find($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x,const CompatibleCompare& comp) const
find	multi_index/ordered_index.hpp	/^  iterator find(const CompatibleKey& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x) const
find_bucket	multi_index/hashed_index.hpp	/^  std::size_t find_bucket(value_param_type v)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(value_param_type v) const
finish_algorithm	multi_index/detail/index_matcher.hpp	/^  void finish_algorithm()const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:() const
first	multi_index/detail/copy_map.hpp	/^  Node* first;$/;"	m	struct:boost::multi_index::detail::copy_map_entry	access:public
first_bucket	multi_index/hashed_index.hpp	/^  std::size_t                  first_bucket;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
first_nonempty	multi_index/detail/bucket_array.hpp	/^  std::size_t first_nonempty(std::size_t n)const$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(std::size_t n) const
forward_iter_adaptor_base	multi_index/detail/iter_adaptor.hpp	/^class forward_iter_adaptor_base:$/;"	c	namespace:boost::multi_index::detail	inherits:forward_iterator_helper
from_impl	multi_index/detail/hash_index_node.hpp	/^  static const hashed_index_node* from_impl(const_impl_pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:(const_impl_pointer x)
from_impl	multi_index/detail/hash_index_node.hpp	/^  static hashed_index_node* from_impl(impl_pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:(impl_pointer x)
from_impl	multi_index/detail/ord_index_node.hpp	/^  static const ordered_index_node* from_impl(const_impl_pointer x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:(const_impl_pointer x)
from_impl	multi_index/detail/ord_index_node.hpp	/^  static ordered_index_node* from_impl(impl_pointer x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:(impl_pointer x)
from_impl	multi_index/detail/rnd_index_node.hpp	/^  static const random_access_index_node* from_impl(const_impl_pointer x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(const_impl_pointer x)
from_impl	multi_index/detail/rnd_index_node.hpp	/^  static random_access_index_node* from_impl(impl_pointer x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(impl_pointer x)
from_impl	multi_index/detail/seq_index_node.hpp	/^  static const sequenced_index_node* from_impl(const_impl_pointer x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:(const_impl_pointer x)
from_impl	multi_index/detail/seq_index_node.hpp	/^  static sequenced_index_node* from_impl(impl_pointer x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:(impl_pointer x)
from_value	multi_index/detail/index_node_base.hpp	/^  static index_node_base* from_value(const value_type* p)$/;"	f	struct:boost::multi_index::detail::index_node_base	access:public	signature:(const value_type* p)
front	multi_index/random_access_index.hpp	/^  const_reference front()const{return operator[](0);}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
front	multi_index/sequenced_index.hpp	/^  const_reference front()const{return *begin();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
full_form	multi_index/detail/hash_index_args.hpp	/^  typedef is_tag<Arg1> full_form;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
full_form	multi_index/detail/ord_index_args.hpp	/^  typedef is_tag<Arg1> full_form;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
fun_	multi_index/detail/scope_guard.hpp	/^  F        fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl1	access:protected
fun_	multi_index/detail/scope_guard.hpp	/^  F        fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl2	access:protected
fun_	multi_index/detail/scope_guard.hpp	/^  F        fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl3	access:protected
fun_	multi_index/detail/scope_guard.hpp	/^  F        fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
fun_	multi_index/detail/scope_guard.hpp	/^  F fun_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl0	access:protected
get	multi_index/detail/archive_constructed.hpp	/^  T& get(){return *static_cast<T*>(static_cast<void*>(&space));}$/;"	f	struct:boost::multi_index::detail::archive_constructed	access:public	signature:()
get_allocator	multi_index/detail/auto_space.hpp	/^  Allocator get_allocator()const{return al_;}$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:() const
get_allocator	multi_index/hashed_index.hpp	/^  allocator_type get_allocator()const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
get_allocator	multi_index/ordered_index.hpp	/^  allocator_type get_allocator()const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
get_allocator	multi_index/random_access_index.hpp	/^  allocator_type get_allocator()const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
get_allocator	multi_index/sequenced_index.hpp	/^  allocator_type get_allocator()const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
get_node	multi_index/detail/bidir_node_iterator.hpp	/^  Node* get_node()const{return node;}$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:() const
get_node	multi_index/detail/duplicates_iterator.hpp	/^  Node* get_node()const{return node;}$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:() const
get_node	multi_index/detail/hash_index_iterator.hpp	/^  Node* get_node()const{return node;}$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:() const
get_node	multi_index/detail/index_matcher.hpp	/^  static Node* get_node(IndexIterator it)$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:private	signature:(IndexIterator it)
get_node	multi_index/detail/index_saver.hpp	/^  static Node* get_node(IndexIterator it)$/;"	f	class:boost::multi_index::detail::index_saver	access:private	signature:(IndexIterator it)
get_node	multi_index/detail/rnd_node_iterator.hpp	/^  Node* get_node()const{return node;}$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:() const
get_node	multi_index/detail/safe_mode.hpp	/^  node_type* get_node()const{return this->base_reference().get_node();}$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:() const
global_fun	multi_index/global_fun.hpp	/^struct global_fun:$/;"	s	namespace:boost::multi_index	inherits:mpl::if_c::type
has_tag	multi_index/detail/has_tag.hpp	/^struct has_tag$/;"	s	namespace:boost::multi_index::detail
has_uintptr_type	multi_index/detail/uintptr_type.hpp	/^typedef mpl::bool_<uintptr_aux::has_uintptr_type> has_uintptr_type;$/;"	t	namespace:boost::multi_index::detail
hash_	multi_index/hashed_index.hpp	/^  hasher                       hash_;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
hash_function	multi_index/hashed_index.hpp	/^  hasher         hash_function()const{return hash_;}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
hash_type	multi_index/detail/hash_index_args.hpp	/^  >::type                                            hash_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
hash_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::hash_type           hash_type;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
hash_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::hash_type           hash_type;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
hashed_index	multi_index/hashed_index.hpp	/^  hashed_index($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
hashed_index	multi_index/hashed_index.hpp	/^  hashed_index($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x, do_not_copy_elements_tag)
hashed_index	multi_index/hashed_index.hpp	/^  hashed_index(const ctor_args_list& args_list,const allocator_type& al):$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const ctor_args_list& args_list,const allocator_type& al)
hashed_index	multi_index/hashed_index.hpp	/^class hashed_index:$/;"	c	namespace:boost::multi_index::detail	inherits:BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDSSuperMeta::type,safe_ctr_proxy_impl
hashed_index_args	multi_index/detail/hash_index_args.hpp	/^struct hashed_index_args$/;"	s	namespace:boost::multi_index::detail
hashed_index_iterator	multi_index/detail/hash_index_iterator.hpp	/^  hashed_index_iterator(){}$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:()
hashed_index_iterator	multi_index/detail/hash_index_iterator.hpp	/^  hashed_index_iterator(Node* node_,BucketArray* buckets_):$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:(Node* node_,BucketArray* buckets_)
hashed_index_iterator	multi_index/detail/hash_index_iterator.hpp	/^class hashed_index_iterator:$/;"	c	namespace:boost::multi_index::detail	inherits:forward_iterator_helper
hashed_index_node	multi_index/detail/hash_index_node.hpp	/^struct hashed_index_node:Super,hashed_index_node_trampoline<Super>$/;"	s	namespace:boost::multi_index::detail	inherits:Super,hashed_index_node_trampoline
hashed_index_node_impl	multi_index/detail/hash_index_node.hpp	/^struct hashed_index_node_impl$/;"	s	namespace:boost::multi_index::detail
hashed_index_node_trampoline	multi_index/detail/hash_index_node.hpp	/^struct hashed_index_node_trampoline:$/;"	s	namespace:boost::multi_index::detail	inherits:prevent_eti::type
hashed_non_unique	multi_index/hashed_index.hpp	/^struct hashed_non_unique$/;"	s	namespace:boost::multi_index
hashed_non_unique_tag	multi_index/hashed_index.hpp	/^struct hashed_non_unique_tag{};$/;"	s	namespace:boost::multi_index::detail
hashed_unique	multi_index/hashed_index.hpp	/^struct hashed_unique$/;"	s	namespace:boost::multi_index
hashed_unique_tag	multi_index/hashed_index.hpp	/^struct hashed_unique_tag{};$/;"	s	namespace:boost::multi_index::detail
hasher	multi_index/hashed_index.hpp	/^  typedef Hash                                       hasher;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
header	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer                       header;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
header	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base header;$/;"	m	class:boost::multi_index::detail::safe_container_base	access:public
header	multi_index/hashed_index.hpp	/^  node_type* header()const{return this->final_header();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:() const
header	multi_index/ordered_index.hpp	/^  node_type* header()const{return this->final_header();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:() const
header	multi_index/random_access_index.hpp	/^  node_type* header()const{return this->final_header();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:() const
header	multi_index/sequenced_index.hpp	/^  node_type* header()const{return this->final_header();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:() const
header_cpy_	multi_index/detail/copy_map.hpp	/^  Node*                                           header_cpy_;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
header_holder	multi_index/detail/header_holder.hpp	/^  header_holder():member(final().allocate_node()){}$/;"	f	struct:boost::multi_index::detail::header_holder	access:public	signature:()
header_holder	multi_index/detail/header_holder.hpp	/^struct header_holder:private noncopyable$/;"	s	namespace:boost::multi_index::detail	inherits:noncopyable
header_org_	multi_index/detail/copy_map.hpp	/^  Node*                                           header_org_;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
hinted_link_point	multi_index/ordered_index.hpp	/^  bool hinted_link_point($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( key_param_type k,node_type* position,link_info& inf,ordered_non_unique_tag)
hinted_link_point	multi_index/ordered_index.hpp	/^  bool hinted_link_point($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( key_param_type k,node_type* position,link_info& inf,ordered_unique_tag)
identity	multi_index/identity.hpp	/^struct identity:$/;"	s	namespace:boost::multi_index	inherits:mpl::if_c::type
impl	multi_index/detail/hash_index_node.hpp	/^  const_impl_pointer impl()const$/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:() const
impl	multi_index/detail/hash_index_node.hpp	/^  impl_pointer impl()$/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:()
impl	multi_index/detail/ord_index_node.hpp	/^  const_impl_pointer impl()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
impl	multi_index/detail/ord_index_node.hpp	/^  impl_pointer impl()$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
impl	multi_index/detail/rnd_index_node.hpp	/^  const_impl_pointer impl()const$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:() const
impl	multi_index/detail/rnd_index_node.hpp	/^  impl_pointer impl()$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:()
impl	multi_index/detail/seq_index_node.hpp	/^  const_impl_pointer impl()const$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:() const
impl	multi_index/detail/seq_index_node.hpp	/^  impl_pointer impl()$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:()
impl_color_ref	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::color_ref     impl_color_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
impl_parent_ref	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::parent_ref    impl_parent_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
impl_pointer	multi_index/detail/hash_index_node.hpp	/^  typedef typename trampoline::pointer       impl_pointer;$/;"	t	struct:boost::multi_index::detail::hashed_index_node	access:public
impl_pointer	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::pointer       impl_pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
impl_pointer	multi_index/detail/rnd_index_node.hpp	/^  typedef typename trampoline::pointer       impl_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:public
impl_pointer	multi_index/detail/seq_index_node.hpp	/^  typedef typename trampoline::pointer           impl_pointer;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node	access:public
impl_ptr_pointer	multi_index/detail/rnd_index_node.hpp	/^  typedef typename trampoline::ptr_pointer   impl_ptr_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:public
impl_type	multi_index/detail/hash_index_node.hpp	/^  >::type impl_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_node_trampoline	access:public
impl_type	multi_index/detail/hash_index_node.hpp	/^  typedef typename trampoline::impl_type     impl_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_node	access:public
impl_type	multi_index/detail/ord_index_node.hpp	/^  >::type impl_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_trampoline	access:public
impl_type	multi_index/detail/ord_index_node.hpp	/^  typedef typename trampoline::impl_type     impl_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:public
impl_type	multi_index/detail/rnd_index_node.hpp	/^  >::type impl_type;$/;"	t	struct:boost::multi_index::detail::random_access_index_node_trampoline	access:public
impl_type	multi_index/detail/rnd_index_node.hpp	/^  typedef typename trampoline::impl_type     impl_type;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:public
impl_type	multi_index/detail/seq_index_node.hpp	/^  >::type impl_type;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node_trampoline	access:public
impl_type	multi_index/detail/seq_index_node.hpp	/^  typedef typename trampoline::impl_type         impl_type;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node	access:public
in_place	multi_index/hashed_index.hpp	/^  bool in_place($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( node_impl_pointer x,key_param_type k,std::size_t buc, hashed_non_unique_tag) const
in_place	multi_index/hashed_index.hpp	/^  bool in_place($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( node_impl_pointer x,key_param_type k,std::size_t buc, hashed_unique_tag) const
in_place	multi_index/ordered_index.hpp	/^  bool in_place(value_param_type v,node_type* x,ordered_non_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(value_param_type v,node_type* x,ordered_non_unique_tag)
in_place	multi_index/ordered_index.hpp	/^  bool in_place(value_param_type v,node_type* x,ordered_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(value_param_type v,node_type* x,ordered_unique_tag)
increment	multi_index/detail/hash_index_node.hpp	/^  static void increment($/;"	f	struct:boost::multi_index::detail::hashed_index_node	access:public	signature:( hashed_index_node*& x,impl_pointer bbegin,impl_pointer bend)
increment	multi_index/detail/hash_index_node.hpp	/^  static void increment(pointer& x,pointer bbegin,pointer bend)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer& x,pointer bbegin,pointer bend)
increment	multi_index/detail/iter_adaptor.hpp	/^  static void increment(Class& x)$/;"	f	class:boost::multi_index::detail::iter_adaptor_access	access:public	signature:(Class& x)
increment	multi_index/detail/ord_index_node.hpp	/^  static void increment(ordered_index_node*& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:(ordered_index_node*& x)
increment	multi_index/detail/ord_index_node.hpp	/^  static void increment(pointer& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer& x)
increment	multi_index/detail/rnd_index_node.hpp	/^  static void increment(pointer& x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(pointer& x)
increment	multi_index/detail/rnd_index_node.hpp	/^  static void increment(random_access_index_node*& x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:(random_access_index_node*& x)
increment	multi_index/detail/safe_mode.hpp	/^  void increment()$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:()
increment	multi_index/detail/seq_index_node.hpp	/^  static void increment(pointer& x){x=x->next();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer& x)
increment	multi_index/detail/seq_index_node.hpp	/^  static void increment(sequenced_index_node*& x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:(sequenced_index_node*& x)
index	multi_index/detail/converter.hpp	/^  static Index&       index(MultiIndexContainer& x){return x;}$/;"	f	struct:boost::multi_index::detail::converter	access:public	signature:(MultiIndexContainer& x)
index	multi_index/detail/converter.hpp	/^  static const Index& index(const MultiIndexContainer& x){return x;}$/;"	f	struct:boost::multi_index::detail::converter	access:public	signature:(const MultiIndexContainer& x)
index_applier	multi_index/detail/base_type.hpp	/^struct index_applier$/;"	s	namespace:boost::multi_index::detail
index_args	multi_index/hashed_index.hpp	/^    Arg1,Arg2,Arg3,Arg4>                           index_args;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
index_args	multi_index/hashed_index.hpp	/^    Arg1,Arg2,Arg3,Arg4>                           index_args;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
index_args	multi_index/ordered_index.hpp	/^    Arg1,Arg2,Arg3>                                index_args;$/;"	t	struct:boost::multi_index::ordered_non_unique	access:public
index_args	multi_index/ordered_index.hpp	/^    Arg1,Arg2,Arg3>                                index_args;$/;"	t	struct:boost::multi_index::ordered_unique	access:public
index_args_default_compare	multi_index/detail/ord_index_args.hpp	/^struct index_args_default_compare$/;"	s	namespace:boost::multi_index::detail
index_args_default_hash	multi_index/detail/hash_index_args.hpp	/^struct index_args_default_hash$/;"	s	namespace:boost::multi_index::detail
index_args_default_pred	multi_index/detail/hash_index_args.hpp	/^struct index_args_default_pred$/;"	s	namespace:boost::multi_index::detail
index_base	multi_index/detail/index_base.hpp	/^  explicit index_base(const ctor_args_list&,const Allocator&){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const ctor_args_list&,const Allocator&)
index_base	multi_index/detail/index_base.hpp	/^  index_base($/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:( const index_base<Value,IndexSpecifierList,Allocator>&, do_not_copy_elements_tag)
index_base	multi_index/detail/index_base.hpp	/^class index_base$/;"	c	namespace:boost::multi_index::detail
index_class	multi_index/detail/msvc_index_specifier.hpp	/^    struct index_class{};$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier::fake_index_type	access:public
index_class	multi_index/hashed_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::hashed_non_unique	access:public
index_class	multi_index/hashed_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::hashed_unique	access:public
index_class	multi_index/ordered_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::ordered_non_unique	access:public
index_class	multi_index/ordered_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::ordered_unique	access:public
index_class	multi_index/random_access_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::random_access	access:public
index_class	multi_index/sequenced_index.hpp	/^  struct index_class$/;"	s	struct:boost::multi_index::sequenced	access:public
index_loader	multi_index/detail/index_loader.hpp	/^  index_loader(const Allocator& al,std::size_t size):$/;"	f	class:boost::multi_index::detail::index_loader	access:public	signature:(const Allocator& al,std::size_t size)
index_loader	multi_index/detail/index_loader.hpp	/^class index_loader:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
index_loader_type	multi_index/detail/index_base.hpp	/^    final_allocator_type>                     index_loader_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
index_loader_type	multi_index/hashed_index.hpp	/^  typedef typename super::index_loader_type   index_loader_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
index_loader_type	multi_index/ordered_index.hpp	/^  typedef typename super::index_loader_type          index_loader_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
index_loader_type	multi_index/random_access_index.hpp	/^  typedef typename super::index_loader_type   index_loader_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
index_loader_type	multi_index/sequenced_index.hpp	/^  typedef typename super::index_loader_type   index_loader_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
index_matcher	multi_index/detail/index_matcher.hpp	/^namespace index_matcher{$/;"	n	namespace:boost::multi_index::detail
index_node_applier	multi_index/detail/node_type.hpp	/^struct index_node_applier$/;"	s	namespace:boost::multi_index::detail
index_node_base	multi_index/detail/index_node_base.hpp	/^struct index_node_base:private pod_value_holder<Value>$/;"	s	namespace:boost::multi_index::detail	inherits:pod_value_holder
index_saver	multi_index/detail/index_saver.hpp	/^  index_saver(const Allocator& al,std::size_t size):alg(al,size){}$/;"	f	class:boost::multi_index::detail::index_saver	access:public	signature:(const Allocator& al,std::size_t size)
index_saver	multi_index/detail/index_saver.hpp	/^class index_saver:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
index_saver_type	multi_index/detail/index_base.hpp	/^    final_allocator_type>                     index_saver_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
index_saver_type	multi_index/hashed_index.hpp	/^  typedef typename super::index_saver_type    index_saver_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
index_saver_type	multi_index/ordered_index.hpp	/^  typedef typename super::index_saver_type           index_saver_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
index_saver_type	multi_index/random_access_index.hpp	/^  typedef typename super::index_saver_type    index_saver_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
index_saver_type	multi_index/sequenced_index.hpp	/^  typedef typename super::index_saver_type    index_saver_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
index_type_list	multi_index/detail/index_base.hpp	/^  typedef mpl::vector0<>                      index_type_list;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
index_type_list	multi_index/hashed_index.hpp	/^    hashed_index>::type                       index_type_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
index_type_list	multi_index/ordered_index.hpp	/^    ordered_index>::type                             index_type_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
index_type_list	multi_index/random_access_index.hpp	/^    random_access_index>::type                index_type_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
index_type_list	multi_index/sequenced_index.hpp	/^    sequenced_index>::type                    index_type_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
indexed_by	multi_index/indexed_by.hpp	/^struct indexed_by:$/;"	s	namespace:boost::multi_index	inherits:mpl::vector
insert	multi_index/hashed_index.hpp	/^  iterator insert(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
insert	multi_index/hashed_index.hpp	/^  iterator insert(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,const value_type& x)
insert	multi_index/hashed_index.hpp	/^  std::pair<iterator,bool> insert(const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x)
insert	multi_index/hashed_index.hpp	/^  void insert(InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(InputIterator first,InputIterator last)
insert	multi_index/hashed_index.hpp	/^  void insert(std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(std::initializer_list<value_type> list)
insert	multi_index/ordered_index.hpp	/^  iterator insert(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
insert	multi_index/ordered_index.hpp	/^  iterator insert(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,const value_type& x)
insert	multi_index/ordered_index.hpp	/^  std::pair<iterator,bool> insert(const value_type& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const value_type& x)
insert	multi_index/ordered_index.hpp	/^  void insert(InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(InputIterator first,InputIterator last)
insert	multi_index/ordered_index.hpp	/^  void insert(std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(std::initializer_list<value_type> list)
insert	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> insert(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
insert	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> insert(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,const value_type& x)
insert	multi_index/random_access_index.hpp	/^  void insert(iterator position,InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,InputIterator first,InputIterator last)
insert	multi_index/random_access_index.hpp	/^  void insert(iterator position,size_type n,value_param_type x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,size_type n,value_param_type x)
insert	multi_index/random_access_index.hpp	/^  void insert(iterator position,std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,std::initializer_list<value_type> list)
insert	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> insert(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
insert	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> insert(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,const value_type& x)
insert	multi_index/sequenced_index.hpp	/^  void insert(iterator position,InputIterator first,InputIterator last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,InputIterator first,InputIterator last)
insert	multi_index/sequenced_index.hpp	/^  void insert(iterator position,size_type n,value_param_type x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,size_type n,value_param_type x)
insert	multi_index/sequenced_index.hpp	/^  void insert(iterator position,std::initializer_list<value_type> list)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,std::initializer_list<value_type> list)
insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type& v,node_type* x,lvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type* x,lvalue_tag)
insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type& v,node_type* x,rvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type* x,rvalue_tag)
insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type& v,node_type*,node_type* x,lvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type*,node_type* x,lvalue_tag)
insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type& v,node_type*,node_type* x,rvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type*,node_type* x,rvalue_tag)
insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type&,node_type* x,emplaced_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type&,node_type* x,emplaced_tag)
insert_	multi_index/detail/index_base.hpp	/^  node_type* insert_(const value_type&,node_type*,node_type* x,emplaced_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type&,node_type*,node_type* x,emplaced_tag)
insert_	multi_index/hashed_index.hpp	/^  node_type* insert_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( value_param_type v,node_type* position,node_type* x,Variant variant)
insert_	multi_index/hashed_index.hpp	/^  node_type* insert_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
insert_	multi_index/ordered_index.hpp	/^  node_type* insert_($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( value_param_type v,node_type* position,node_type* x,Variant variant)
insert_	multi_index/ordered_index.hpp	/^  node_type* insert_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
insert_	multi_index/random_access_index.hpp	/^  node_type* insert_($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( value_param_type v,node_type* position,node_type* x,Variant variant)
insert_	multi_index/random_access_index.hpp	/^  node_type* insert_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
insert_	multi_index/sequenced_index.hpp	/^  node_type* insert_($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( value_param_type v,node_type* position,node_type* x,Variant variant)
insert_	multi_index/sequenced_index.hpp	/^  node_type* insert_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
insert_iter	multi_index/random_access_index.hpp	/^  void insert_iter($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( iterator position,InputIterator first,InputIterator last,mpl::true_)
insert_iter	multi_index/random_access_index.hpp	/^  void insert_iter($/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:( iterator position,size_type n,value_param_type x,mpl::false_)
insert_iter	multi_index/sequenced_index.hpp	/^  void insert_iter($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( iterator position,InputIterator first,InputIterator last,mpl::true_)
insert_iter	multi_index/sequenced_index.hpp	/^  void insert_iter($/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:( iterator position,size_type n,value_param_type x,mpl::false_)
inside_range	multi_index/safe_mode_errors.hpp	/^  inside_range,$/;"	e	enum:boost::multi_index::safe_mode::error_code
invalid_iterator	multi_index/safe_mode_errors.hpp	/^  invalid_iterator=0,$/;"	e	enum:boost::multi_index::safe_mode::error_code
invalid_range	multi_index/safe_mode_errors.hpp	/^  invalid_range,$/;"	e	enum:boost::multi_index::safe_mode::error_code
invariant_	multi_index/detail/index_base.hpp	/^  bool invariant_()const{return true;}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:() const
invariant_	multi_index/hashed_index.hpp	/^  bool invariant_()const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
invariant_	multi_index/ordered_index.hpp	/^  bool invariant_()const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
invariant_	multi_index/random_access_index.hpp	/^  bool invariant_()const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
invariant_	multi_index/sequenced_index.hpp	/^  bool invariant_()const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
is_index_list	multi_index/detail/is_index_list.hpp	/^struct is_index_list$/;"	s	namespace:boost::multi_index::detail
is_ordered	multi_index/detail/index_matcher.hpp	/^  bool is_ordered(Node* node)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm	access:public	signature:(Node* node) const
is_ordered	multi_index/detail/index_matcher.hpp	/^  bool is_ordered(void * node)const$/;"	f	class:boost::multi_index::detail::index_matcher::algorithm_base	access:protected	signature:(void * node) const
is_tag	multi_index/tag.hpp	/^struct is_tag$/;"	s	namespace:boost::multi_index::detail
iter_adaptor	multi_index/detail/iter_adaptor.hpp	/^  explicit iter_adaptor(const Base& b_):b(b_){}$/;"	f	class:boost::multi_index::detail::iter_adaptor	access:protected	signature:(const Base& b_)
iter_adaptor	multi_index/detail/iter_adaptor.hpp	/^  iter_adaptor(){}$/;"	f	class:boost::multi_index::detail::iter_adaptor	access:protected	signature:()
iter_adaptor	multi_index/detail/iter_adaptor.hpp	/^class iter_adaptor:public iter_adaptor_base<Derived,Base>::type$/;"	c	namespace:boost::multi_index::detail	inherits:iter_adaptor_base::type
iter_adaptor_access	multi_index/detail/iter_adaptor.hpp	/^class iter_adaptor_access$/;"	c	namespace:boost::multi_index::detail
iter_adaptor_base	multi_index/detail/iter_adaptor.hpp	/^struct iter_adaptor_base$/;"	s	namespace:boost::multi_index::detail
iter_adaptor_selector	multi_index/detail/iter_adaptor.hpp	/^struct iter_adaptor_selector<std::bidirectional_iterator_tag>$/;"	s	namespace:boost::multi_index::detail
iter_adaptor_selector	multi_index/detail/iter_adaptor.hpp	/^struct iter_adaptor_selector<std::forward_iterator_tag>$/;"	s	namespace:boost::multi_index::detail
iter_adaptor_selector	multi_index/detail/iter_adaptor.hpp	/^struct iter_adaptor_selector<std::random_access_iterator_tag>$/;"	s	namespace:boost::multi_index::detail
iterator	multi_index/detail/converter.hpp	/^  static typename Index::iterator iterator($/;"	f	struct:boost::multi_index::detail::converter	access:public	signature:( MultiIndexContainer& x,typename MultiIndexContainer::node_type* node)
iterator	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef safe_mode::safe_iterator<Iterator,safe_ctr_proxy> iterator;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy	access:public
iterator	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef typename super::iterator       iterator;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:public
iterator	multi_index/hashed_index.hpp	/^        node_type,bucket_array_type> > >             iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
iterator	multi_index/hashed_index.hpp	/^    hashed_index>                                    iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
iterator	multi_index/hashed_index.hpp	/^    node_type,bucket_array_type>                     iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
iterator	multi_index/ordered_index.hpp	/^      bidir_node_iterator<node_type> > >             iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
iterator	multi_index/ordered_index.hpp	/^    ordered_index>                                   iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
iterator	multi_index/ordered_index.hpp	/^  typedef bidir_node_iterator<node_type>             iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
iterator	multi_index/random_access_index.hpp	/^      rnd_node_iterator<node_type> > >             iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
iterator	multi_index/random_access_index.hpp	/^    random_access_index>                           iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
iterator	multi_index/random_access_index.hpp	/^  typedef rnd_node_iterator<node_type>             iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
iterator	multi_index/sequenced_index.hpp	/^      bidir_node_iterator<node_type> > >              iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
iterator	multi_index/sequenced_index.hpp	/^    sequenced_index>                                  iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
iterator	multi_index/sequenced_index.hpp	/^  typedef bidir_node_iterator<node_type>              iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
iterator_category	multi_index/detail/duplicates_iterator.hpp	/^  typedef std::forward_iterator_tag        iterator_category;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
iterator_to	multi_index/hashed_index.hpp	/^  const_iterator iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x) const
iterator_to	multi_index/hashed_index.hpp	/^  iterator iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x)
iterator_to	multi_index/ordered_index.hpp	/^  const_iterator iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const value_type& x) const
iterator_to	multi_index/ordered_index.hpp	/^  iterator iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const value_type& x)
iterator_to	multi_index/random_access_index.hpp	/^  const_iterator iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const value_type& x) const
iterator_to	multi_index/random_access_index.hpp	/^  iterator iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const value_type& x)
iterator_to	multi_index/sequenced_index.hpp	/^  const_iterator iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const value_type& x) const
iterator_to	multi_index/sequenced_index.hpp	/^  iterator iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const value_type& x)
iterator_type_list	multi_index/detail/index_base.hpp	/^  typedef mpl::vector0<>                      iterator_type_list;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
iterator_type_list	multi_index/hashed_index.hpp	/^    iterator>::type                           iterator_type_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
iterator_type_list	multi_index/ordered_index.hpp	/^    iterator>::type    iterator_type_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
iterator_type_list	multi_index/random_access_index.hpp	/^    iterator>::type                           iterator_type_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
iterator_type_list	multi_index/sequenced_index.hpp	/^    iterator>::type                           iterator_type_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
key	multi_index/detail/value_compare.hpp	/^  KeyFromValue key;$/;"	m	struct:boost::multi_index::detail::value_comparison	access:private
key	multi_index/hashed_index.hpp	/^  key_from_value               key;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
key	multi_index/ordered_index.hpp	/^  key_from_value key;$/;"	m	class:boost::multi_index::detail::ordered_index	access:private
key_comp	multi_index/ordered_index.hpp	/^  key_compare    key_comp()const{return comp_;}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
key_compare	multi_index/ordered_index.hpp	/^  typedef Compare                                    key_compare;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
key_eq	multi_index/hashed_index.hpp	/^  key_equal      key_eq()const{return eq_;}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
key_equal	multi_index/hashed_index.hpp	/^  typedef Pred                                       key_equal;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
key_extractor	multi_index/hashed_index.hpp	/^  key_from_value key_extractor()const{return key;}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
key_extractor	multi_index/ordered_index.hpp	/^  key_from_value key_extractor()const{return key;}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
key_extractor_tuple	multi_index/composite_key.hpp	/^  typedef typename CompositeKey::key_extractor_tuple key_extractor_tuple;$/;"	t	struct:boost::multi_index::detail::nth_key_from_value	access:public
key_from_value	multi_index/hashed_index.hpp	/^  typedef KeyFromValue                               key_from_value;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
key_from_value	multi_index/ordered_index.hpp	/^  typedef KeyFromValue                               key_from_value;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
key_from_value_type	multi_index/detail/hash_index_args.hpp	/^    Arg1>::type                                      key_from_value_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
key_from_value_type	multi_index/detail/ord_index_args.hpp	/^    Arg1>::type                                      key_from_value_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
key_from_value_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::key_from_value_type key_from_value_type;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
key_from_value_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::key_from_value_type key_from_value_type;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
key_from_value_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::key_from_value_type key_from_value_type;$/;"	t	struct:boost::multi_index::ordered_non_unique	access:public
key_from_value_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::key_from_value_type key_from_value_type;$/;"	t	struct:boost::multi_index::ordered_unique	access:public
key_param_type	multi_index/hashed_index.hpp	/^    key_type>::param_type                              key_param_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
key_param_type	multi_index/ordered_index.hpp	/^    key_type>::param_type                            key_param_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
key_type	multi_index/hashed_index.hpp	/^  typedef typename KeyFromValue::result_type         key_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
key_type	multi_index/ordered_index.hpp	/^  typedef typename KeyFromValue::result_type         key_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
kfv	multi_index/detail/modify_key_adaptor.hpp	/^  KeyFromValue kfv;$/;"	m	struct:boost::multi_index::detail::modify_key_adaptor	access:private
left	multi_index/detail/ord_index_node.hpp	/^  impl_pointer        left()const{return trampoline::left();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
left	multi_index/detail/ord_index_node.hpp	/^  impl_pointer&       left(){return trampoline::left();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
left	multi_index/detail/ord_index_node.hpp	/^  pointer              left()const{return left_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:() const
left	multi_index/detail/ord_index_node.hpp	/^  pointer  left()const{return left_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:() const
left	multi_index/detail/ord_index_node.hpp	/^  pointer&             left(){return left_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:()
left	multi_index/detail/ord_index_node.hpp	/^  pointer& left(){return left_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:()
left_	multi_index/detail/ord_index_node.hpp	/^  pointer             left_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_std_base	access:private
left_	multi_index/detail/ord_index_node.hpp	/^  pointer      left_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:private
leftmost	multi_index/ordered_index.hpp	/^  node_type* leftmost()const{return node_type::from_impl(header()->left());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:() const
less_by_node	multi_index/detail/index_matcher.hpp	/^  struct less_by_node$/;"	s	struct:boost::multi_index::detail::index_matcher::entry	access:public
less_by_pile_top	multi_index/detail/index_matcher.hpp	/^  struct less_by_pile_top$/;"	s	struct:boost::multi_index::detail::index_matcher::entry	access:public
link	multi_index/detail/hash_index_node.hpp	/^  static void link(pointer x,pointer pos)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer x,pointer pos)
link	multi_index/detail/ord_index_node.hpp	/^  static void link($/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:( pointer x,ordered_index_side side,pointer position,pointer header)
link	multi_index/detail/seq_index_node.hpp	/^  static void link(pointer x,pointer header)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer x,pointer header)
link	multi_index/hashed_index.hpp	/^  static void link(node_impl_pointer x,node_impl_pointer pos)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_impl_pointer x,node_impl_pointer pos)
link	multi_index/hashed_index.hpp	/^  static void link(node_type* x,node_impl_pointer pos)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x,node_impl_pointer pos)
link	multi_index/sequenced_index.hpp	/^  void link(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* x)
link_info	multi_index/ordered_index.hpp	/^    link_info():side(to_left){}$/;"	f	struct:boost::multi_index::detail::ordered_index::link_info	access:public	signature:()
link_info	multi_index/ordered_index.hpp	/^  struct link_info$/;"	s	class:boost::multi_index::detail::ordered_index	access:private
link_point	multi_index/hashed_index.hpp	/^  bool link_point($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( value_param_type v,node_impl_pointer& pos,hashed_non_unique_tag)
link_point	multi_index/hashed_index.hpp	/^  bool link_point($/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:( value_param_type v,node_impl_pointer& pos,hashed_unique_tag)
link_point	multi_index/ordered_index.hpp	/^  bool link_point(key_param_type k,link_info& inf,ordered_non_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(key_param_type k,link_info& inf,ordered_non_unique_tag)
link_point	multi_index/ordered_index.hpp	/^  bool link_point(key_param_type k,link_info& inf,ordered_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(key_param_type k,link_info& inf,ordered_unique_tag)
load	multi_index/detail/bidir_node_iterator.hpp	/^  void load(Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:(Archive& ar,const unsigned int)
load	multi_index/detail/hash_index_iterator.hpp	/^  void load(Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:(Archive& ar,const unsigned int)
load	multi_index/detail/index_loader.hpp	/^  void load(Rearranger r,Archive& ar,const unsigned int)const$/;"	f	class:boost::multi_index::detail::index_loader	access:public	signature:(Rearranger r,Archive& ar,const unsigned int) const
load	multi_index/detail/rnd_node_iterator.hpp	/^  void load(Archive& ar,const unsigned int)$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(Archive& ar,const unsigned int)
load	multi_index/detail/safe_mode.hpp	/^  void load(Archive& ar,const unsigned int version)$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(Archive& ar,const unsigned int version)
load	multi_index/detail/serialization_version.hpp	/^  void load(Archive&,const unsigned int version)$/;"	f	struct:boost::multi_index::detail::serialization_version	access:private	signature:(Archive&,const unsigned int version)
load_	multi_index/detail/index_base.hpp	/^  void load_(Archive&,const unsigned int,const index_loader_type&){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(Archive&,const unsigned int,const index_loader_type&)
load_	multi_index/hashed_index.hpp	/^  void load_(Archive& ar,const unsigned int version,const index_loader_type& lm)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(Archive& ar,const unsigned int version,const index_loader_type& lm)
load_	multi_index/ordered_index.hpp	/^  void load_($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( Archive& ar,const unsigned int version,const index_loader_type& lm, ordered_non_unique_tag)
load_	multi_index/ordered_index.hpp	/^  void load_($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( Archive& ar,const unsigned int version,const index_loader_type& lm, ordered_unique_tag)
load_	multi_index/ordered_index.hpp	/^  void load_(Archive& ar,const unsigned int version,const index_loader_type& lm)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(Archive& ar,const unsigned int version,const index_loader_type& lm)
load_	multi_index/random_access_index.hpp	/^  void load_($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( Archive& ar,const unsigned int version,const index_loader_type& lm)
load_	multi_index/sequenced_index.hpp	/^  void load_($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( Archive& ar,const unsigned int version,const index_loader_type& lm)
load_construct_data	multi_index/detail/bucket_array.hpp	/^inline void load_construct_data($/;"	f	namespace:boost::serialization	signature:( Archive&,boost::multi_index::detail::bucket_array<Allocator>*, const unsigned int)
load_construct_data	multi_index/detail/index_node_base.hpp	/^inline void load_construct_data($/;"	f	namespace:boost::serialization	signature:( Archive&,boost::multi_index::detail::index_node_base<Value,Allocator>*, const unsigned int)
load_factor	multi_index/hashed_index.hpp	/^  float load_factor()const{return static_cast<float>(size())\/bucket_count();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
load_node	multi_index/detail/index_loader.hpp	/^  FinalNode* load_node(Archive& ar)const$/;"	f	class:boost::multi_index::detail::index_loader	access:private	signature:(Archive& ar) const
local_iterator	multi_index/hashed_index.hpp	/^  typedef iterator                                   local_iterator;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
local_iterator_to	multi_index/hashed_index.hpp	/^  const_local_iterator local_iterator_to(const value_type& x)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x) const
local_iterator_to	multi_index/hashed_index.hpp	/^  local_iterator local_iterator_to(const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(const value_type& x)
lower_bound	multi_index/ordered_index.hpp	/^  iterator lower_bound($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x,const CompatibleCompare& comp) const
lower_bound	multi_index/ordered_index.hpp	/^  iterator lower_bound(const CompatibleKey& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x) const
lower_link_point	multi_index/ordered_index.hpp	/^  bool lower_link_point(key_param_type k,link_info& inf,ordered_non_unique_tag)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(key_param_type k,link_info& inf,ordered_non_unique_tag)
lower_range	multi_index/ordered_index.hpp	/^  node_type * lower_range(node_type* top,node_type* y,LowerBounder lower)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* top,node_type* y,LowerBounder lower) const
lower_unbounded_tag	multi_index/detail/unbounded.hpp	/^struct lower_unbounded_tag{};$/;"	s	namespace:boost::multi_index::detail
lvalue_tag	multi_index/detail/index_base.hpp	/^struct lvalue_tag{};$/;"	s	namespace:boost::multi_index::detail
make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl0<F> make_guard(F fun)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun)
make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl1<F,P1> make_guard(F fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1)
make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl2<F,P1,P2> make_guard(F fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2)
make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl3<F,P1,P2,P3> make_guard(F fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2,P3 p3)
make_guard	multi_index/detail/scope_guard.hpp	/^inline scope_guard_impl4<F,P1,P2,P3,P4> make_guard($/;"	f	namespace:boost::multi_index::detail	signature:( F fun,P1 p1,P2 p2,P3 p3,P4 p4)
make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if($/;"	f	namespace:boost::multi_index::detail	signature:( F fun,P1 p1,P2 p2,P3 p3,P4 p4)
make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if(F fun)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun)
make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if(F fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1)
make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if(F fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2)
make_guard_if	multi_index/detail/scope_guard.hpp	/^make_guard_if(F fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2,P3 p3)
make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c($/;"	f	namespace:boost::multi_index::detail	signature:( F fun,P1 p1,P2 p2,P3 p3,P4 p4)
make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c(F fun)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun)
make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c(F fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1)
make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c(F fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2)
make_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_guard_if_c(F fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(F fun,P1 p1,P2 p2,P3 p3)
make_iterator	multi_index/hashed_index.hpp	/^  const_iterator make_iterator(node_type* node)const$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* node) const
make_iterator	multi_index/hashed_index.hpp	/^  iterator make_iterator(node_type* node)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* node)
make_iterator	multi_index/ordered_index.hpp	/^  const_iterator make_iterator(node_type* node)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* node) const
make_iterator	multi_index/ordered_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node);}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* node)
make_iterator	multi_index/ordered_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node,this);}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* node)
make_iterator	multi_index/random_access_index.hpp	/^  const_iterator make_iterator(node_type* node)const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* node) const
make_iterator	multi_index/random_access_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node);}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* node)
make_iterator	multi_index/random_access_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node,this);}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* node)
make_iterator	multi_index/sequenced_index.hpp	/^  const_iterator make_iterator(node_type* node)const$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* node) const
make_iterator	multi_index/sequenced_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node);}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* node)
make_iterator	multi_index/sequenced_index.hpp	/^  iterator       make_iterator(node_type* node){return iterator(node,this);}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* node)
make_obj_guard	multi_index/detail/scope_guard.hpp	/^inline obj_scope_guard_impl0<Obj,MemFun> make_obj_guard(Obj& obj,MemFun mem_fun)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun)
make_obj_guard	multi_index/detail/scope_guard.hpp	/^inline obj_scope_guard_impl1<Obj,MemFun,P1> make_obj_guard($/;"	f	namespace:boost::multi_index::detail	signature:( Obj& obj,MemFun mem_fun,P1 p1)
make_obj_guard	multi_index/detail/scope_guard.hpp	/^make_obj_guard(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)
make_obj_guard	multi_index/detail/scope_guard.hpp	/^make_obj_guard(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)
make_obj_guard_if	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if( Obj& obj,MemFun mem_fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:( Obj& obj,MemFun mem_fun,P1 p1)
make_obj_guard_if	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if(Obj& obj,MemFun mem_fun)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun)
make_obj_guard_if	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)
make_obj_guard_if	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)
make_obj_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if_c(  Obj& obj,MemFun mem_fun,P1 p1)$/;"	f	namespace:boost::multi_index::detail	signature:( Obj& obj,MemFun mem_fun,P1 p1)
make_obj_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if_c(Obj& obj,MemFun mem_fun)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun)
make_obj_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if_c(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)
make_obj_guard_if_c	multi_index/detail/scope_guard.hpp	/^make_obj_guard_if_c(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)$/;"	f	namespace:boost::multi_index::detail	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)
max_bucket_count	multi_index/hashed_index.hpp	/^  size_type max_bucket_count()const{return static_cast<size_type>(-1);}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
max_load	multi_index/hashed_index.hpp	/^  size_type                    max_load;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
max_load_factor	multi_index/hashed_index.hpp	/^  float max_load_factor()const{return mlf;}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
max_load_factor	multi_index/hashed_index.hpp	/^  void  max_load_factor(float z){mlf=z;calculate_max_load();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(float z)
max_size	multi_index/hashed_index.hpp	/^  size_type max_size()const{return this->final_max_size_();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
max_size	multi_index/ordered_index.hpp	/^  size_type max_size()const{return this->final_max_size_();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
max_size	multi_index/random_access_index.hpp	/^  size_type max_size()const{return this->final_max_size_();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
max_size	multi_index/sequenced_index.hpp	/^  size_type max_size()const{return this->final_max_size_();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
maximum	multi_index/detail/ord_index_node.hpp	/^  static pointer maximum(pointer x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x)
mem_fun	multi_index/mem_fun.hpp	/^struct mem_fun$/;"	s	namespace:boost::multi_index
mem_fun_	multi_index/detail/scope_guard.hpp	/^  MemFun   mem_fun_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl1	access:protected
mem_fun_	multi_index/detail/scope_guard.hpp	/^  MemFun   mem_fun_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl2	access:protected
mem_fun_	multi_index/detail/scope_guard.hpp	/^  MemFun   mem_fun_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
mem_fun_	multi_index/detail/scope_guard.hpp	/^  MemFun mem_fun_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl0	access:protected
mem_fun_explicit	multi_index/mem_fun.hpp	/^struct mem_fun_explicit$/;"	s	namespace:boost::multi_index
member	multi_index/detail/header_holder.hpp	/^  NodeTypePtr member;$/;"	m	struct:boost::multi_index::detail::header_holder	access:public
member	multi_index/member.hpp	/^struct member:$/;"	s	namespace:boost::multi_index	inherits:mpl::if_c::type
member_offset	multi_index/member.hpp	/^struct member_offset:$/;"	s	namespace:boost::multi_index	inherits:mpl::if_c::type
merge	multi_index/random_access_index.hpp	/^  void merge(random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x)
merge	multi_index/random_access_index.hpp	/^  void merge(random_access_index<SuperMeta,TagList>& x,Compare comp)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x,Compare comp)
merge	multi_index/sequenced_index.hpp	/^  void merge(sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x)
merge	multi_index/sequenced_index.hpp	/^  void merge(sequenced_index<SuperMeta,TagList>& x,Compare comp)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x,Compare comp)
minimum	multi_index/detail/ord_index_node.hpp	/^  static pointer minimum(pointer x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x)
mlf	multi_index/hashed_index.hpp	/^  float                        mlf;$/;"	m	class:boost::multi_index::detail::hashed_index	access:private
modify	multi_index/hashed_index.hpp	/^  bool modify(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,Modifier mod)
modify	multi_index/hashed_index.hpp	/^  bool modify(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
modify	multi_index/ordered_index.hpp	/^  bool modify(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,Modifier mod)
modify	multi_index/ordered_index.hpp	/^  bool modify(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
modify	multi_index/random_access_index.hpp	/^  bool modify(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,Modifier mod)
modify	multi_index/random_access_index.hpp	/^  bool modify(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
modify	multi_index/sequenced_index.hpp	/^  bool modify(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,Modifier mod)
modify	multi_index/sequenced_index.hpp	/^  bool modify(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
modify_	multi_index/detail/index_base.hpp	/^  bool modify_(node_type*){return true;}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(node_type*)
modify_	multi_index/hashed_index.hpp	/^  bool modify_(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* x)
modify_	multi_index/ordered_index.hpp	/^  bool modify_(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* x)
modify_	multi_index/random_access_index.hpp	/^  bool modify_(node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* x)
modify_	multi_index/sequenced_index.hpp	/^  bool modify_(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* x)
modify_key	multi_index/hashed_index.hpp	/^  bool modify_key(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,Modifier mod)
modify_key	multi_index/hashed_index.hpp	/^  bool modify_key(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
modify_key	multi_index/ordered_index.hpp	/^  bool modify_key(iterator position,Modifier mod)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,Modifier mod)
modify_key	multi_index/ordered_index.hpp	/^  bool modify_key(iterator position,Modifier mod,Rollback back)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,Modifier mod,Rollback back)
modify_key_adaptor	multi_index/detail/modify_key_adaptor.hpp	/^  modify_key_adaptor(Fun f_,KeyFromValue kfv_):f(f_),kfv(kfv_){}$/;"	f	struct:boost::multi_index::detail::modify_key_adaptor	access:public	signature:(Fun f_,KeyFromValue kfv_)
modify_key_adaptor	multi_index/detail/modify_key_adaptor.hpp	/^struct modify_key_adaptor$/;"	s	namespace:boost::multi_index::detail
modify_rollback_	multi_index/detail/index_base.hpp	/^  bool modify_rollback_(node_type*){return true;}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(node_type*)
modify_rollback_	multi_index/hashed_index.hpp	/^  bool modify_rollback_(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(node_type* x)
modify_rollback_	multi_index/ordered_index.hpp	/^  bool modify_rollback_(node_type* x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(node_type* x)
modify_rollback_	multi_index/random_access_index.hpp	/^  bool modify_rollback_(node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(node_type* x)
modify_rollback_	multi_index/sequenced_index.hpp	/^  bool modify_rollback_(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(node_type* x)
msvc_index_specifier	multi_index/detail/msvc_index_specifier.hpp	/^struct msvc_index_specifier$/;"	s	namespace:boost::multi_index::detail
multi_index	multi_index/composite_key.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/adl_swap.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/archive_constructed.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/auto_space.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/base_type.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/bidir_node_iterator.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/bucket_array.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/converter.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/copy_map.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/do_not_copy_elements_tag.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/duplicates_iterator.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/has_tag.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/hash_index_args.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/hash_index_iterator.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/hash_index_node.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/header_holder.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/index_base.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/index_loader.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/index_matcher.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/index_node_base.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/index_saver.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/is_index_list.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/iter_adaptor.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/modify_key_adaptor.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/msvc_index_specifier.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/no_duplicate_tags.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/node_type.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/ord_index_args.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/ord_index_node.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/ord_index_ops.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/prevent_eti.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/rnd_index_loader.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/rnd_index_node.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/rnd_index_ops.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/rnd_index_ptr_array.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/rnd_node_iterator.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/safe_ctr_proxy.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/safe_mode.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/scope_guard.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/seq_index_node.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/seq_index_ops.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/serialization_version.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/uintptr_type.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/unbounded.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/value_compare.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/detail/vartempl_support.hpp	/^namespace boost{namespace multi_index{namespace detail{$/;"	n	namespace:boost
multi_index	multi_index/detail/vartempl_support.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/global_fun.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/hashed_index.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/hashed_index_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/identity.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/identity_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/indexed_by.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/mem_fun.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/member.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/ordered_index.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/ordered_index_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/random_access_index.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/random_access_index_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/safe_mode_errors.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/sequenced_index.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/sequenced_index_fwd.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index	multi_index/tag.hpp	/^namespace multi_index{$/;"	n	namespace:boost
multi_index_base_type	multi_index/detail/base_type.hpp	/^struct multi_index_base_type:nth_layer<0,Value,IndexSpecifierList,Allocator>$/;"	s	namespace:boost::multi_index::detail	inherits:nth_layer
multi_index_node_type	multi_index/detail/node_type.hpp	/^struct multi_index_node_type$/;"	s	namespace:boost::multi_index::detail
mutex	multi_index/detail/safe_mode.hpp	/^  boost::detail::lightweight_mutex mutex;$/;"	m	class:boost::multi_index::detail::safe_container_base	access:public
n	multi_index/detail/copy_map.hpp	/^  std::size_t                                     n;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
n	multi_index/detail/index_loader.hpp	/^  std::size_t                 n;$/;"	m	class:boost::multi_index::detail::index_loader	access:private
n_	multi_index/detail/auto_space.hpp	/^  std::size_t                                   n_;$/;"	m	struct:boost::multi_index::detail::auto_space	access:private
n_	multi_index/detail/index_matcher.hpp	/^  std::size_t                 n_;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
next	multi_index/detail/hash_index_node.hpp	/^  pointer  next()const{return next_;}$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:() const
next	multi_index/detail/hash_index_node.hpp	/^  pointer& next(){return next_;}$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:()
next	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer& next(node_impl_pointer x)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(node_impl_pointer x) const
next	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base*  next;$/;"	m	class:boost::multi_index::detail::safe_iterator_base	access:protected
next	multi_index/detail/seq_index_node.hpp	/^  impl_pointer  next()const{return trampoline::next();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:() const
next	multi_index/detail/seq_index_node.hpp	/^  impl_pointer& next(){return trampoline::next();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:()
next	multi_index/detail/seq_index_node.hpp	/^  pointer  next()const{return next_;}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:() const
next	multi_index/detail/seq_index_node.hpp	/^  pointer& next(){return next_;}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:()
next_	multi_index/detail/hash_index_node.hpp	/^  pointer next_;$/;"	m	struct:boost::multi_index::detail::hashed_index_node_impl	access:private
next_	multi_index/detail/seq_index_node.hpp	/^  pointer next_;$/;"	m	struct:boost::multi_index::detail::sequenced_index_node_impl	access:private
next_at	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer& next_at(std::size_t n)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(std::size_t n) const
next_prime	multi_index/detail/bucket_array.hpp	/^  inline static std::size_t next_prime(std::size_t n)$/;"	f	class:boost::multi_index::detail::bucket_array_base	access:protected	signature:(std::size_t n)
no_duplicate_tags	multi_index/detail/no_duplicate_tags.hpp	/^struct no_duplicate_tags$/;"	s	namespace:boost::multi_index::detail
no_duplicate_tags_in_index_list	multi_index/detail/no_duplicate_tags.hpp	/^struct no_duplicate_tags_in_index_list$/;"	s	namespace:boost::multi_index::detail
noarg	multi_index/detail/vartempl_support.hpp	/^struct noarg{};$/;"	s	namespace:boost::multi_index::detail
node	multi_index/detail/bidir_node_iterator.hpp	/^  Node* node;$/;"	m	class:boost::multi_index::detail::bidir_node_iterator	access:private
node	multi_index/detail/duplicates_iterator.hpp	/^  Node*     node;$/;"	m	class:boost::multi_index::detail::duplicates_iterator	access:private
node	multi_index/detail/hash_index_iterator.hpp	/^  Node*        node;$/;"	m	class:boost::multi_index::detail::hashed_index_iterator	access:private
node	multi_index/detail/index_matcher.hpp	/^  void*       node;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
node	multi_index/detail/rnd_node_iterator.hpp	/^  Node* node;$/;"	m	class:boost::multi_index::detail::rnd_node_iterator	access:private
node_base_type	multi_index/detail/bidir_node_iterator.hpp	/^  typedef typename Node::base_type node_base_type;$/;"	t	class:boost::multi_index::detail::bidir_node_iterator	access:public
node_base_type	multi_index/detail/hash_index_iterator.hpp	/^  typedef typename Node::base_type node_base_type;$/;"	t	class:boost::multi_index::detail::hashed_index_iterator	access:public
node_base_type	multi_index/detail/rnd_node_iterator.hpp	/^  typedef typename Node::base_type node_base_type;$/;"	t	class:boost::multi_index::detail::rnd_node_iterator	access:public
node_class	multi_index/detail/msvc_index_specifier.hpp	/^    struct node_class{};$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier::fake_index_type	access:public
node_class	multi_index/hashed_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::hashed_non_unique	access:public
node_class	multi_index/hashed_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::hashed_unique	access:public
node_class	multi_index/ordered_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::ordered_non_unique	access:public
node_class	multi_index/ordered_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::ordered_unique	access:public
node_class	multi_index/random_access_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::random_access	access:public
node_class	multi_index/sequenced_index.hpp	/^  struct node_class$/;"	s	struct:boost::multi_index::sequenced	access:public
node_impl_pointer	multi_index/detail/rnd_index_loader.hpp	/^  typedef typename node_impl_type::pointer          node_impl_pointer;$/;"	t	class:boost::multi_index::detail::random_access_index_loader_base	access:protected
node_impl_pointer	multi_index/detail/rnd_index_loader.hpp	/^  typedef typename super::node_impl_pointer          node_impl_pointer;$/;"	t	class:boost::multi_index::detail::random_access_index_loader	access:private
node_impl_pointer	multi_index/hashed_index.hpp	/^  typedef typename node_impl_type::pointer           node_impl_pointer;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
node_impl_pointer	multi_index/ordered_index.hpp	/^  typedef typename node_impl_type::pointer           node_impl_pointer;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
node_impl_ptr_pointer	multi_index/random_access_index.hpp	/^  typedef typename ptr_array::pointer              node_impl_ptr_pointer;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
node_impl_type	multi_index/detail/bucket_array.hpp	/^  >::type                                           node_impl_type;$/;"	t	class:boost::multi_index::detail::bucket_array	access:private
node_impl_type	multi_index/detail/rnd_index_loader.hpp	/^  >::type                                           node_impl_type;$/;"	t	class:boost::multi_index::detail::random_access_index_loader_base	access:protected
node_impl_type	multi_index/detail/rnd_index_ptr_array.hpp	/^  >::type                                           node_impl_type;$/;"	t	class:boost::multi_index::detail::random_access_index_ptr_array	access:private
node_impl_type	multi_index/hashed_index.hpp	/^  typedef typename node_type::impl_type              node_impl_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
node_impl_type	multi_index/ordered_index.hpp	/^  typedef typename node_type::impl_type              node_impl_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
node_impl_type	multi_index/random_access_index.hpp	/^  typedef typename node_type::impl_type            node_impl_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
node_impl_type	multi_index/sequenced_index.hpp	/^  typedef typename node_type::impl_type               node_impl_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
node_type	multi_index/detail/bidir_node_iterator.hpp	/^  typedef Node node_type;$/;"	t	class:boost::multi_index::detail::bidir_node_iterator	access:public
node_type	multi_index/detail/hash_index_iterator.hpp	/^  typedef Node node_type;$/;"	t	class:boost::multi_index::detail::hashed_index_iterator	access:public
node_type	multi_index/detail/index_base.hpp	/^  typedef index_node_base<Value,Allocator>    node_type;$/;"	t	class:boost::multi_index::detail::index_base	access:protected
node_type	multi_index/detail/rnd_node_iterator.hpp	/^  typedef Node node_type;$/;"	t	class:boost::multi_index::detail::rnd_node_iterator	access:public
node_type	multi_index/detail/safe_mode.hpp	/^  typedef typename Iterator::node_type node_type;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:public
node_type	multi_index/hashed_index.hpp	/^    typename super::node_type>                       node_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:protected
node_type	multi_index/ordered_index.hpp	/^    typename super::node_type>                       node_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:protected
node_type	multi_index/random_access_index.hpp	/^    typename super::node_type>                     node_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:protected
node_type	multi_index/sequenced_index.hpp	/^    typename super::node_type>                        node_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:protected
non_const_identity_base	multi_index/identity.hpp	/^struct non_const_identity_base$/;"	s	namespace:boost::multi_index::detail
non_const_member_base	multi_index/member.hpp	/^struct non_const_member_base$/;"	s	namespace:boost::multi_index::detail
non_const_member_offset_base	multi_index/member.hpp	/^struct non_const_member_offset_base$/;"	s	namespace:boost::multi_index::detail
non_const_ref_global_fun_base	multi_index/global_fun.hpp	/^struct non_const_ref_global_fun_base$/;"	s	namespace:boost::multi_index::detail
non_ref_global_fun_base	multi_index/global_fun.hpp	/^struct non_ref_global_fun_base$/;"	s	namespace:boost::multi_index::detail
none_unbounded_tag	multi_index/detail/unbounded.hpp	/^struct none_unbounded_tag{};$/;"	s	namespace:boost::multi_index::detail
not_decrementable_iterator	multi_index/safe_mode_errors.hpp	/^  not_decrementable_iterator,$/;"	e	enum:boost::multi_index::safe_mode::error_code
not_dereferenceable_iterator	multi_index/safe_mode_errors.hpp	/^  not_dereferenceable_iterator,$/;"	e	enum:boost::multi_index::safe_mode::error_code
not_incrementable_iterator	multi_index/safe_mode_errors.hpp	/^  not_incrementable_iterator,$/;"	e	enum:boost::multi_index::safe_mode::error_code
not_owner	multi_index/safe_mode_errors.hpp	/^  not_owner,$/;"	e	enum:boost::multi_index::safe_mode::error_code
not_same_owner	multi_index/safe_mode_errors.hpp	/^  not_same_owner,$/;"	e	enum:boost::multi_index::safe_mode::error_code
nth_key_from_value	multi_index/composite_key.hpp	/^struct nth_key_from_value$/;"	s	namespace:boost::multi_index::detail
nth_layer	multi_index/detail/base_type.hpp	/^struct nth_layer$/;"	s	namespace:boost::multi_index::detail
null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1& )
null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1&, const T2& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1&, const T2& )
null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1&, const T2&, const T3& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1&, const T2&, const T3& )
null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1&, const T2&, const T3&, const T4& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1&, const T2&, const T3&, const T4& )
null_guard	multi_index/detail/scope_guard.hpp	/^    null_guard( const T1&, const T2&, const T3&, const T4&, const T5& )$/;"	f	struct:boost::multi_index::detail::null_guard	access:public	signature:( const T1&, const T2&, const T3&, const T4&, const T5& )
null_guard	multi_index/detail/scope_guard.hpp	/^struct null_guard : public scope_guard_impl_base$/;"	s	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
null_guard_return	multi_index/detail/scope_guard.hpp	/^struct null_guard_return$/;"	s	namespace:boost::multi_index::detail
null_node	multi_index/detail/index_saver.hpp	/^  static Node* null_node(){return 0;}$/;"	f	class:boost::multi_index::detail::index_saver	access:private	signature:()
num_piles	multi_index/detail/index_matcher.hpp	/^  mutable std::size_t         num_piles;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
obj_	multi_index/detail/scope_guard.hpp	/^  Obj&     obj_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl1	access:protected
obj_	multi_index/detail/scope_guard.hpp	/^  Obj&     obj_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl2	access:protected
obj_	multi_index/detail/scope_guard.hpp	/^  Obj&     obj_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
obj_	multi_index/detail/scope_guard.hpp	/^  Obj&   obj_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl0	access:protected
obj_scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^  obj_scope_guard_impl0(Obj& obj,MemFun mem_fun):obj_(obj),mem_fun_(mem_fun){}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl0	access:public	signature:(Obj& obj,MemFun mem_fun)
obj_scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^class obj_scope_guard_impl0:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
obj_scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^  obj_scope_guard_impl1(Obj& obj,MemFun mem_fun,P1 p1):$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl1	access:public	signature:(Obj& obj,MemFun mem_fun,P1 p1)
obj_scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^class obj_scope_guard_impl1:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
obj_scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^  obj_scope_guard_impl2(Obj& obj,MemFun mem_fun,P1 p1,P2 p2):$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl2	access:public	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)
obj_scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^class obj_scope_guard_impl2:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
obj_scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^  obj_scope_guard_impl3(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3):$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl3	access:public	signature:(Obj& obj,MemFun mem_fun,P1 p1,P2 p2,P3 p3)
obj_scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^class obj_scope_guard_impl3:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
operator !=	multi_index/detail/duplicates_iterator.hpp	/^bool operator!=($/;"	f	namespace:boost::multi_index::detail	signature:( const duplicates_iterator<Node,Predicate>& x, const duplicates_iterator<Node,Predicate>& y)
operator !=	multi_index/ordered_index.hpp	/^bool operator!=($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator !=	multi_index/ordered_index_fwd.hpp	/^bool operator!=($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator !=	multi_index/random_access_index.hpp	/^bool operator!=($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator !=	multi_index/random_access_index_fwd.hpp	/^bool operator!=($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator !=	multi_index/sequenced_index.hpp	/^bool operator!=($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator !=	multi_index/sequenced_index_fwd.hpp	/^bool operator!=($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator ()	multi_index/detail/index_matcher.hpp	/^    bool operator()($/;"	f	struct:boost::multi_index::detail::index_matcher::entry::less_by_node	access:public	signature:( const entry& x,const entry& y) const
operator ()	multi_index/detail/index_matcher.hpp	/^    bool operator()($/;"	f	struct:boost::multi_index::detail::index_matcher::entry::less_by_pile_top	access:public	signature:( const entry& x,const entry& y) const
operator ()	multi_index/detail/modify_key_adaptor.hpp	/^  void operator()(Value& x)$/;"	f	struct:boost::multi_index::detail::modify_key_adaptor	access:public	signature:(Value& x)
operator ()	multi_index/detail/rnd_index_ops.hpp	/^  bool operator()($/;"	f	struct:boost::multi_index::detail::random_access_index_sort_compare	access:public	signature:( typename Node::impl_pointer x,typename Node::impl_pointer y) const
operator ()	multi_index/detail/value_compare.hpp	/^  bool operator()($/;"	f	struct:boost::multi_index::detail::value_comparison	access:public	signature:( typename call_traits<Value>::param_type x, typename call_traits<Value>::param_type y) const
operator ()	multi_index/global_fun.hpp	/^  Type operator()($/;"	f	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public	signature:( const reference_wrapper< typename remove_const< typename remove_reference<Value>::type>::type>& x,int=0) const
operator ()	multi_index/global_fun.hpp	/^  Type operator()($/;"	f	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public	signature:( const reference_wrapper< typename remove_reference<Value>::type>& x) const
operator ()	multi_index/global_fun.hpp	/^  Type operator()($/;"	f	struct:boost::multi_index::detail::non_const_ref_global_fun_base	access:public	signature:( const reference_wrapper< typename remove_reference<Value>::type>& x) const
operator ()	multi_index/global_fun.hpp	/^  Type operator()($/;"	f	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public	signature:( const reference_wrapper< typename remove_const<Value>::type>& x,int=0) const
operator ()	multi_index/global_fun.hpp	/^  Type operator()(Value x)const$/;"	f	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public	signature:(Value x) const
operator ()	multi_index/global_fun.hpp	/^  Type operator()(Value x)const$/;"	f	struct:boost::multi_index::detail::non_const_ref_global_fun_base	access:public	signature:(Value x) const
operator ()	multi_index/global_fun.hpp	/^  Type operator()(const Value& x)const$/;"	f	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public	signature:(const Value& x) const
operator ()	multi_index/global_fun.hpp	/^  Type operator()(const reference_wrapper<const Value>& x)const$/;"	f	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public	signature:(const reference_wrapper<const Value>& x) const
operator ()	multi_index/global_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/global_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_const_ref_global_fun_base	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/global_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/identity.hpp	/^  Type& operator()($/;"	f	struct:boost::multi_index::detail::const_identity_base	access:public	signature:( const reference_wrapper<typename remove_const<Type>::type>& x,int=0) const
operator ()	multi_index/identity.hpp	/^  Type& operator()(Type& x)const$/;"	f	struct:boost::multi_index::detail::const_identity_base	access:public	signature:(Type& x) const
operator ()	multi_index/identity.hpp	/^  Type& operator()(Type& x)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(Type& x) const
operator ()	multi_index/identity.hpp	/^  Type& operator()(const reference_wrapper<Type>& x)const$/;"	f	struct:boost::multi_index::detail::const_identity_base	access:public	signature:(const reference_wrapper<Type>& x) const
operator ()	multi_index/identity.hpp	/^  Type& operator()(const reference_wrapper<Type>& x)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(const reference_wrapper<Type>& x) const
operator ()	multi_index/identity.hpp	/^  const Type& operator()(const Type& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(const Type& x,int=0) const
operator ()	multi_index/identity.hpp	/^  const Type& operator()(const reference_wrapper<const Type>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(const reference_wrapper<const Type>& x,int=0) const
operator ()	multi_index/identity.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::const_identity_base	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/identity.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_const_identity_base	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(Class& x)const$/;"	f	struct:boost::multi_index::mem_fun	access:public	signature:(Class& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(Class& x)const$/;"	f	struct:boost::multi_index::mem_fun_explicit	access:public	signature:(Class& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const Class& x)const$/;"	f	struct:boost::multi_index::const_mem_fun	access:public	signature:(const Class& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const Class& x)const$/;"	f	struct:boost::multi_index::const_mem_fun_explicit	access:public	signature:(const Class& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::const_mem_fun	access:public	signature:(const reference_wrapper<Class>& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::const_mem_fun_explicit	access:public	signature:(const reference_wrapper<Class>& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::mem_fun	access:public	signature:(const reference_wrapper<Class>& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::mem_fun_explicit	access:public	signature:(const reference_wrapper<Class>& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<const Class>& x)const$/;"	f	struct:boost::multi_index::const_mem_fun	access:public	signature:(const reference_wrapper<const Class>& x) const
operator ()	multi_index/mem_fun.hpp	/^  Type operator()(const reference_wrapper<const Class>& x)const$/;"	f	struct:boost::multi_index::const_mem_fun_explicit	access:public	signature:(const reference_wrapper<const Class>& x) const
operator ()	multi_index/mem_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::const_mem_fun	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/mem_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::const_mem_fun_explicit	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/mem_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::mem_fun	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/mem_fun.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::mem_fun_explicit	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/member.hpp	/^  Type& operator()(Class& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(Class& x) const
operator ()	multi_index/member.hpp	/^  Type& operator()(Class& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(Class& x) const
operator ()	multi_index/member.hpp	/^  Type& operator()(const Class& x)const$/;"	f	struct:boost::multi_index::detail::const_member_base	access:public	signature:(const Class& x) const
operator ()	multi_index/member.hpp	/^  Type& operator()(const Class& x)const$/;"	f	struct:boost::multi_index::detail::const_member_offset_base	access:public	signature:(const Class& x) const
operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(const reference_wrapper<Class>& x) const
operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<Class>& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(const reference_wrapper<Class>& x) const
operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<Class>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::const_member_base	access:public	signature:(const reference_wrapper<Class>& x,int=0) const
operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<Class>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::const_member_offset_base	access:public	signature:(const reference_wrapper<Class>& x,int=0) const
operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<const Class>& x)const$/;"	f	struct:boost::multi_index::detail::const_member_base	access:public	signature:(const reference_wrapper<const Class>& x) const
operator ()	multi_index/member.hpp	/^  Type& operator()(const reference_wrapper<const Class>& x)const$/;"	f	struct:boost::multi_index::detail::const_member_offset_base	access:public	signature:(const reference_wrapper<const Class>& x) const
operator ()	multi_index/member.hpp	/^  const Type& operator()(const Class& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(const Class& x,int=0) const
operator ()	multi_index/member.hpp	/^  const Type& operator()(const Class& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(const Class& x,int=0) const
operator ()	multi_index/member.hpp	/^  const Type& operator()(const reference_wrapper<const Class>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(const reference_wrapper<const Class>& x,int=0) const
operator ()	multi_index/member.hpp	/^  const Type& operator()(const reference_wrapper<const Class>& x,int=0)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(const reference_wrapper<const Class>& x,int=0) const
operator ()	multi_index/member.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::const_member_base	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/member.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::const_member_offset_base	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/member.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_base	access:public	signature:(const ChainedPtr& x) const
operator ()	multi_index/member.hpp	/^  operator()(const ChainedPtr& x)const$/;"	f	struct:boost::multi_index::detail::non_const_member_offset_base	access:public	signature:(const ChainedPtr& x) const
operator *	multi_index/detail/bidir_node_iterator.hpp	/^  const typename Node::value_type& operator*()const$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:() const
operator *	multi_index/detail/duplicates_iterator.hpp	/^  reference operator*()const$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:() const
operator *	multi_index/detail/hash_index_iterator.hpp	/^  const typename Node::value_type& operator*()const$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:() const
operator *	multi_index/detail/iter_adaptor.hpp	/^  reference operator*()const$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:public	signature:() const
operator *	multi_index/detail/iter_adaptor.hpp	/^  reference operator*()const$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:public	signature:() const
operator *	multi_index/detail/iter_adaptor.hpp	/^  reference operator*()const$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:() const
operator *	multi_index/detail/rnd_node_iterator.hpp	/^  const typename Node::value_type& operator*()const$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:() const
operator ++	multi_index/detail/bidir_node_iterator.hpp	/^  bidir_node_iterator& operator++()$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:()
operator ++	multi_index/detail/duplicates_iterator.hpp	/^  duplicates_iterator operator++(int)$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:(int)
operator ++	multi_index/detail/duplicates_iterator.hpp	/^  duplicates_iterator& operator++()$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:()
operator ++	multi_index/detail/hash_index_iterator.hpp	/^  hashed_index_iterator& operator++()$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:()
operator ++	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator++()$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:public	signature:()
operator ++	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator++()$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:public	signature:()
operator ++	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator++()$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:()
operator ++	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator& operator++()$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:()
operator +=	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator+=(difference_type n)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:(difference_type n)
operator +=	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator& operator+=(std::ptrdiff_t n)$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(std::ptrdiff_t n)
operator -	multi_index/detail/iter_adaptor.hpp	/^  friend difference_type operator-(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
operator -	multi_index/detail/iter_adaptor.hpp	/^operator-($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_iter_adaptor_base<Derived,Base>& x, const random_access_iter_adaptor_base<Derived,Base>& y)
operator -	multi_index/detail/rnd_node_iterator.hpp	/^std::ptrdiff_t operator-($/;"	f	namespace:boost::multi_index::detail	signature:( const rnd_node_iterator<Node>& x, const rnd_node_iterator<Node>& y)
operator --	multi_index/detail/bidir_node_iterator.hpp	/^  bidir_node_iterator& operator--()$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:()
operator --	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator--()$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:public	signature:()
operator --	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator--()$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:()
operator --	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator& operator--()$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:()
operator -=	multi_index/detail/iter_adaptor.hpp	/^  Derived& operator-=(difference_type n)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public	signature:(difference_type n)
operator -=	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator& operator-=(std::ptrdiff_t n)$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(std::ptrdiff_t n)
operator ->	multi_index/detail/duplicates_iterator.hpp	/^  pointer operator->()const$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:public	signature:() const
operator ->	multi_index/detail/ord_index_node.hpp	/^    pointer operator->()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:() const
operator <	multi_index/detail/copy_map.hpp	/^  bool operator<(const copy_map_entry<Node>& x)const$/;"	f	struct:boost::multi_index::detail::copy_map_entry	access:public	signature:(const copy_map_entry<Node>& x) const
operator <	multi_index/detail/iter_adaptor.hpp	/^  friend bool operator<(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
operator <	multi_index/detail/iter_adaptor.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_iter_adaptor_base<Derived,Base>& x, const random_access_iter_adaptor_base<Derived,Base>& y)
operator <	multi_index/detail/rnd_node_iterator.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const rnd_node_iterator<Node>& x, const rnd_node_iterator<Node>& y)
operator <	multi_index/ordered_index.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator <	multi_index/ordered_index_fwd.hpp	/^bool operator<($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator <	multi_index/random_access_index.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator <	multi_index/random_access_index_fwd.hpp	/^bool operator<($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator <	multi_index/sequenced_index.hpp	/^bool operator<($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator <	multi_index/sequenced_index_fwd.hpp	/^bool operator<($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator <=	multi_index/ordered_index.hpp	/^bool operator<=($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator <=	multi_index/ordered_index_fwd.hpp	/^bool operator<=($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator <=	multi_index/random_access_index.hpp	/^bool operator<=($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator <=	multi_index/random_access_index_fwd.hpp	/^bool operator<=($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator <=	multi_index/sequenced_index.hpp	/^bool operator<=($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator <=	multi_index/sequenced_index_fwd.hpp	/^bool operator<=($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator =	multi_index/detail/ord_index_node.hpp	/^    color_ref& operator=(const color_ref& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:public	signature:(const color_ref& x)
operator =	multi_index/detail/ord_index_node.hpp	/^    color_ref& operator=(ordered_index_color c)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:public	signature:(ordered_index_color c)
operator =	multi_index/detail/ord_index_node.hpp	/^    parent_ref& operator=(const parent_ref& x)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:(const parent_ref& x)
operator =	multi_index/detail/ord_index_node.hpp	/^    parent_ref& operator=(pointer p)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:(pointer p)
operator =	multi_index/detail/safe_mode.hpp	/^  safe_iterator& operator=(const safe_iterator& x)$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:(const safe_iterator& x)
operator =	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base& operator=(const safe_iterator_base& it)$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:(const safe_iterator_base& it)
operator =	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl_base& operator=(const scope_guard_impl_base&);$/;"	p	class:boost::multi_index::detail::scope_guard_impl_base	access:private	signature:(const scope_guard_impl_base&)
operator =	multi_index/detail/serialization_version.hpp	/^  serialization_version& operator=(unsigned int x){value=x;return *this;};$/;"	f	struct:boost::multi_index::detail::serialization_version	access:public	signature:(unsigned int x)
operator =	multi_index/hashed_index.hpp	/^  hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& operator=($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( const hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
operator =	multi_index/hashed_index.hpp	/^  hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& operator=($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( std::initializer_list<value_type> list)
operator =	multi_index/ordered_index.hpp	/^  ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& operator=($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
operator =	multi_index/ordered_index.hpp	/^  ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& operator=($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( std::initializer_list<value_type> list)
operator =	multi_index/random_access_index.hpp	/^  random_access_index<SuperMeta,TagList>& operator=($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( const random_access_index<SuperMeta,TagList>& x)
operator =	multi_index/random_access_index.hpp	/^  random_access_index<SuperMeta,TagList>& operator=($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( std::initializer_list<value_type> list)
operator =	multi_index/sequenced_index.hpp	/^  sequenced_index<SuperMeta,TagList>& operator=($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( const sequenced_index<SuperMeta,TagList>& x)
operator =	multi_index/sequenced_index.hpp	/^  sequenced_index<SuperMeta,TagList>& operator=($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( std::initializer_list<value_type> list)
operator ==	multi_index/detail/bidir_node_iterator.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const bidir_node_iterator<Node>& x, const bidir_node_iterator<Node>& y)
operator ==	multi_index/detail/duplicates_iterator.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const duplicates_iterator<Node,Predicate>& x, const duplicates_iterator<Node,Predicate>& y)
operator ==	multi_index/detail/hash_index_iterator.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const hashed_index_iterator<Node,BucketArray>& x, const hashed_index_iterator<Node,BucketArray>& y)
operator ==	multi_index/detail/iter_adaptor.hpp	/^  friend bool operator==(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
operator ==	multi_index/detail/iter_adaptor.hpp	/^  friend bool operator==(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::forward_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
operator ==	multi_index/detail/iter_adaptor.hpp	/^  friend bool operator==(const Derived& x,const Derived& y)$/;"	f	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:friend	signature:(const Derived& x,const Derived& y)
operator ==	multi_index/detail/iter_adaptor.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const bidirectional_iter_adaptor_base<Derived,Base>& x, const bidirectional_iter_adaptor_base<Derived,Base>& y)
operator ==	multi_index/detail/iter_adaptor.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const forward_iter_adaptor_base<Derived,Base>& x, const forward_iter_adaptor_base<Derived,Base>& y)
operator ==	multi_index/detail/iter_adaptor.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_iter_adaptor_base<Derived,Base>& x, const random_access_iter_adaptor_base<Derived,Base>& y)
operator ==	multi_index/detail/rnd_node_iterator.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const rnd_node_iterator<Node>& x, const rnd_node_iterator<Node>& y)
operator ==	multi_index/ordered_index.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator ==	multi_index/ordered_index_fwd.hpp	/^bool operator==($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator ==	multi_index/random_access_index.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator ==	multi_index/random_access_index_fwd.hpp	/^bool operator==($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator ==	multi_index/sequenced_index.hpp	/^bool operator==($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator ==	multi_index/sequenced_index_fwd.hpp	/^bool operator==($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator >	multi_index/ordered_index.hpp	/^bool operator>($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator >	multi_index/ordered_index_fwd.hpp	/^bool operator>($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator >	multi_index/random_access_index.hpp	/^bool operator>($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator >	multi_index/random_access_index_fwd.hpp	/^bool operator>($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator >	multi_index/sequenced_index.hpp	/^bool operator>($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator >	multi_index/sequenced_index_fwd.hpp	/^bool operator>($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator >=	multi_index/ordered_index.hpp	/^bool operator>=($/;"	f	namespace:boost::multi_index::detail	signature:( const ordered_index<KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index<KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator >=	multi_index/ordered_index_fwd.hpp	/^bool operator>=($/;"	p	namespace:boost::multi_index::detail	signature:( const ordered_index< KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1>& x, const ordered_index< KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2>& y)
operator >=	multi_index/random_access_index.hpp	/^bool operator>=($/;"	f	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator >=	multi_index/random_access_index_fwd.hpp	/^bool operator>=($/;"	p	namespace:boost::multi_index::detail	signature:( const random_access_index<SuperMeta1,TagList1>& x, const random_access_index<SuperMeta2,TagList2>& y)
operator >=	multi_index/sequenced_index.hpp	/^bool operator>=($/;"	f	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator >=	multi_index/sequenced_index_fwd.hpp	/^bool operator>=($/;"	p	namespace:boost::multi_index::detail	signature:( const sequenced_index<SuperMeta1,TagList1>& x, const sequenced_index<SuperMeta2,TagList2>& y)
operator []	multi_index/random_access_index.hpp	/^  const_reference operator[](size_type n)const$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n) const
operator ordered_index_color	multi_index/detail/ord_index_node.hpp	/^    operator ordered_index_color()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:public	signature:() const
operator pointer	multi_index/detail/ord_index_node.hpp	/^    operator pointer()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:() const
operator unsigned int	multi_index/detail/serialization_version.hpp	/^  operator unsigned int()const{return value;}$/;"	f	struct:boost::multi_index::detail::serialization_version	access:public	signature:() const
ordered	multi_index/detail/index_matcher.hpp	/^  bool        ordered;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
ordered_index	multi_index/ordered_index.hpp	/^  ordered_index($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
ordered_index	multi_index/ordered_index.hpp	/^  ordered_index($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x, do_not_copy_elements_tag)
ordered_index	multi_index/ordered_index.hpp	/^  ordered_index(const ctor_args_list& args_list,const allocator_type& al):$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const ctor_args_list& args_list,const allocator_type& al)
ordered_index	multi_index/ordered_index.hpp	/^class ordered_index:$/;"	c	namespace:boost::multi_index::detail	inherits:BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDSSuperMeta::type,safe_ctr_proxy_impl
ordered_index_args	multi_index/detail/ord_index_args.hpp	/^struct ordered_index_args$/;"	s	namespace:boost::multi_index::detail
ordered_index_color	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_color{red=false,black=true};$/;"	g	namespace:boost::multi_index::detail
ordered_index_equal_range	multi_index/detail/ord_index_ops.hpp	/^inline std::pair<Node*,Node*> ordered_index_equal_range($/;"	f	namespace:boost::multi_index::detail	signature:( Node* top,Node* y,const KeyFromValue& key,const CompatibleKey& x, const CompatibleCompare& comp)
ordered_index_find	multi_index/detail/ord_index_ops.hpp	/^inline Node* ordered_index_find($/;"	f	namespace:boost::multi_index::detail	signature:( Node* top,Node* y,const KeyFromValue& key,const CompatibleKey& x, const CompatibleCompare& comp)
ordered_index_lower_bound	multi_index/detail/ord_index_ops.hpp	/^inline Node* ordered_index_lower_bound($/;"	f	namespace:boost::multi_index::detail	signature:( Node* top,Node* y,const KeyFromValue& key,const CompatibleKey& x, const CompatibleCompare& comp)
ordered_index_node	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node:Super,ordered_index_node_trampoline<Super>$/;"	s	namespace:boost::multi_index::detail	inherits:Super,ordered_index_node_trampoline
ordered_index_node_compressed_base	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_compressed_base$/;"	s	namespace:boost::multi_index::detail
ordered_index_node_impl	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_impl:ordered_index_node_impl_base<Allocator>$/;"	s	namespace:boost::multi_index::detail	inherits:ordered_index_node_impl_base
ordered_index_node_impl_base	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_impl_base:$/;"	s	namespace:boost::multi_index::detail	inherits:mpl::if_c::type
ordered_index_node_std_base	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_std_base$/;"	s	namespace:boost::multi_index::detail
ordered_index_node_trampoline	multi_index/detail/ord_index_node.hpp	/^struct ordered_index_node_trampoline:$/;"	s	namespace:boost::multi_index::detail	inherits:prevent_eti::type
ordered_index_side	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_side{to_left=false,to_right=true};$/;"	g	namespace:boost::multi_index::detail
ordered_index_upper_bound	multi_index/detail/ord_index_ops.hpp	/^inline Node* ordered_index_upper_bound($/;"	f	namespace:boost::multi_index::detail	signature:( Node* top,Node* y,const KeyFromValue& key,const CompatibleKey& x, const CompatibleCompare& comp)
ordered_non_unique	multi_index/ordered_index.hpp	/^struct ordered_non_unique$/;"	s	namespace:boost::multi_index
ordered_non_unique_tag	multi_index/ordered_index.hpp	/^struct ordered_non_unique_tag{};$/;"	s	namespace:boost::multi_index::detail
ordered_unique	multi_index/ordered_index.hpp	/^struct ordered_unique$/;"	s	namespace:boost::multi_index
ordered_unique_tag	multi_index/ordered_index.hpp	/^struct ordered_unique_tag{};$/;"	s	namespace:boost::multi_index::detail
out_of_bounds	multi_index/safe_mode_errors.hpp	/^  out_of_bounds,$/;"	e	enum:boost::multi_index::safe_mode::error_code
owner	multi_index/detail/safe_mode.hpp	/^  const container_type* owner()const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:() const
owner	multi_index/detail/safe_mode.hpp	/^  const safe_container_base* owner()const{return cont;}$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:() const
p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl1	access:protected
p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl2	access:protected
p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl1	access:protected
p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl2	access:protected
p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl3	access:protected
p1_	multi_index/detail/scope_guard.hpp	/^  const P1 p1_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl2	access:protected
p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl2	access:protected
p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl3	access:protected
p2_	multi_index/detail/scope_guard.hpp	/^  const P2 p2_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
p3_	multi_index/detail/scope_guard.hpp	/^  const P3 p3_;$/;"	m	class:boost::multi_index::detail::obj_scope_guard_impl3	access:protected
p3_	multi_index/detail/scope_guard.hpp	/^  const P3 p3_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl3	access:protected
p3_	multi_index/detail/scope_guard.hpp	/^  const P3 p3_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
p4_	multi_index/detail/scope_guard.hpp	/^  const P4 p4_;$/;"	m	class:boost::multi_index::detail::scope_guard_impl4	access:protected
parent	multi_index/detail/ord_index_node.hpp	/^  impl_parent_ref     parent(){return trampoline::parent();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
parent	multi_index/detail/ord_index_node.hpp	/^  impl_pointer        parent()const{return trampoline::parent();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
parent	multi_index/detail/ord_index_node.hpp	/^  parent_ref parent(){return parent_ref(&parentcolor_);}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:()
parent	multi_index/detail/ord_index_node.hpp	/^  pointer              parent()const{return parent_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:() const
parent	multi_index/detail/ord_index_node.hpp	/^  pointer    parent()const$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:() const
parent	multi_index/detail/ord_index_node.hpp	/^  pointer&             parent(){return parent_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:()
parent_	multi_index/detail/ord_index_node.hpp	/^  pointer             parent_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_std_base	access:private
parent_ref	multi_index/detail/ord_index_node.hpp	/^    parent_ref(uintptr_type* r_):r(r_){}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:public	signature:(uintptr_type* r_)
parent_ref	multi_index/detail/ord_index_node.hpp	/^  struct parent_ref$/;"	s	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public
parent_ref	multi_index/detail/ord_index_node.hpp	/^  typedef pointer&                                parent_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public
parent_ref	multi_index/detail/ord_index_node.hpp	/^  typedef typename super::parent_ref              parent_ref;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:public
parentcolor_	multi_index/detail/ord_index_node.hpp	/^  uintptr_type parentcolor_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:private
pile_top	multi_index/detail/index_matcher.hpp	/^  std::size_t pile_top;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
pile_top_entry	multi_index/detail/index_matcher.hpp	/^  entry*      pile_top_entry;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
pod_value_holder	multi_index/detail/index_node_base.hpp	/^struct pod_value_holder$/;"	s	namespace:boost::multi_index::detail
pointer	multi_index/detail/auto_space.hpp	/^  >::type::pointer pointer;$/;"	t	struct:boost::multi_index::detail::auto_space	access:public
pointer	multi_index/detail/bucket_array.hpp	/^  typedef typename node_impl_type::pointer          pointer;$/;"	t	class:boost::multi_index::detail::bucket_array	access:public
pointer	multi_index/detail/duplicates_iterator.hpp	/^  typedef const typename Node::value_type* pointer;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
pointer	multi_index/detail/hash_index_node.hpp	/^  >::type::pointer                                pointer;$/;"	t	struct:boost::multi_index::detail::hashed_index_node_impl	access:public
pointer	multi_index/detail/ord_index_node.hpp	/^  >::type::pointer                                pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public
pointer	multi_index/detail/ord_index_node.hpp	/^  typedef ordered_index_node_impl<Allocator>*       pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public
pointer	multi_index/detail/ord_index_node.hpp	/^  typedef typename super::pointer                 pointer;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:public
pointer	multi_index/detail/rnd_index_node.hpp	/^  >::type::pointer                                pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node_impl	access:public
pointer	multi_index/detail/rnd_index_ptr_array.hpp	/^  >::type::pointer                                  pointer;$/;"	t	class:boost::multi_index::detail::random_access_index_ptr_array	access:public
pointer	multi_index/detail/seq_index_node.hpp	/^  >::type::pointer                                pointer;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public
pointer	multi_index/hashed_index.hpp	/^  typedef typename allocator_type::pointer           pointer;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
pointer	multi_index/ordered_index.hpp	/^  typedef typename allocator_type::pointer           pointer;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
pointer	multi_index/random_access_index.hpp	/^  typedef typename allocator_type::pointer         pointer;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
pointer	multi_index/sequenced_index.hpp	/^  typedef typename allocator_type::pointer            pointer;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
pop_back	multi_index/random_access_index.hpp	/^  void                     pop_back(){erase(--end());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
pop_back	multi_index/sequenced_index.hpp	/^  void                     pop_back(){erase(--end());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
pop_front	multi_index/random_access_index.hpp	/^  void                     pop_front(){erase(begin());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
pop_front	multi_index/sequenced_index.hpp	/^  void                     pop_front(){erase(begin());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
pos	multi_index/detail/index_matcher.hpp	/^  std::size_t pos;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
pos	multi_index/ordered_index.hpp	/^    node_impl_pointer  pos;$/;"	m	struct:boost::multi_index::detail::ordered_index::link_info	access:public
position	multi_index/detail/bucket_array.hpp	/^  std::size_t position(std::size_t hash)const$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(std::size_t hash) const
position	multi_index/detail/rnd_index_loader.hpp	/^  std::size_t position(node_impl_pointer x)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(node_impl_pointer x) const
pred	multi_index/detail/duplicates_iterator.hpp	/^  Predicate pred;$/;"	m	class:boost::multi_index::detail::duplicates_iterator	access:private
pred_type	multi_index/detail/hash_index_args.hpp	/^  >::type                                            pred_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
pred_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::pred_type           pred_type;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
pred_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::pred_type           pred_type;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
preprocess	multi_index/detail/rnd_index_loader.hpp	/^  void preprocess()$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:()
preprocessed	multi_index/detail/rnd_index_loader.hpp	/^  bool                                    preprocessed;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
prev	multi_index/detail/hash_index_node.hpp	/^  static pointer prev(pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer x)
prev	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer& prev(node_impl_pointer x)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(node_impl_pointer x) const
prev	multi_index/hashed_index.hpp	/^  static node_impl_pointer prev(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x)
prev_at	multi_index/detail/rnd_index_loader.hpp	/^  node_impl_pointer& prev_at(std::size_t n)const$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:private	signature:(std::size_t n) const
prev_from	multi_index/hashed_index.hpp	/^  static node_impl_pointer prev_from(node_type* x,node_impl_pointer y)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x,node_impl_pointer y)
prev_spc	multi_index/detail/rnd_index_loader.hpp	/^  auto_space<node_impl_pointer,Allocator> prev_spc;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
prevent_eti	multi_index/detail/prevent_eti.hpp	/^struct prevent_eti$/;"	s	namespace:boost::multi_index::detail
previous	multi_index/detail/index_matcher.hpp	/^  entry*      previous;$/;"	m	struct:boost::multi_index::detail::index_matcher::entry	access:public
prior	multi_index/detail/seq_index_node.hpp	/^  impl_pointer  prior()const{return trampoline::prior();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:() const
prior	multi_index/detail/seq_index_node.hpp	/^  impl_pointer& prior(){return trampoline::prior();}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node	access:public	signature:()
prior	multi_index/detail/seq_index_node.hpp	/^  pointer  prior()const{return prior_;}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:() const
prior	multi_index/detail/seq_index_node.hpp	/^  pointer& prior(){return prior_;}$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:()
prior_	multi_index/detail/seq_index_node.hpp	/^  pointer prior_;$/;"	m	struct:boost::multi_index::detail::sequenced_index_node_impl	access:private
ptr_array	multi_index/detail/rnd_index_loader.hpp	/^  typedef random_access_index_ptr_array<Allocator>  ptr_array;$/;"	t	class:boost::multi_index::detail::random_access_index_loader_base	access:protected
ptr_array	multi_index/detail/rnd_index_loader.hpp	/^  typedef typename super::ptr_array                  ptr_array;$/;"	t	class:boost::multi_index::detail::random_access_index_loader	access:private
ptr_array	multi_index/random_access_index.hpp	/^    typename super::final_allocator_type>          ptr_array;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
ptr_pointer	multi_index/detail/rnd_index_node.hpp	/^  >::type::pointer                                ptr_pointer;$/;"	t	struct:boost::multi_index::detail::random_access_index_node_impl	access:public
ptrs	multi_index/detail/rnd_index_loader.hpp	/^  ptr_array&                              ptrs;$/;"	m	class:boost::multi_index::detail::random_access_index_loader_base	access:private
ptrs	multi_index/detail/rnd_index_ptr_array.hpp	/^  pointer ptrs()const$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:private	signature:() const
ptrs	multi_index/random_access_index.hpp	/^  ptr_array ptrs;$/;"	m	class:boost::multi_index::detail::random_access_index	access:private
push_back	multi_index/detail/rnd_index_ptr_array.hpp	/^  void push_back(value_type x)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(value_type x)
push_back	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> push_back(const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const value_type& x)
push_back	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> push_back(const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const value_type& x)
push_front	multi_index/random_access_index.hpp	/^  std::pair<iterator,bool> push_front(const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const value_type& x)
push_front	multi_index/sequenced_index.hpp	/^  std::pair<iterator,bool> push_front(const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const value_type& x)
r	multi_index/detail/ord_index_node.hpp	/^    uintptr_type* r;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base::color_ref	access:private
r	multi_index/detail/ord_index_node.hpp	/^    uintptr_type* r;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base::parent_ref	access:private
random_access	multi_index/random_access_index.hpp	/^struct random_access$/;"	s	namespace:boost::multi_index
random_access_index	multi_index/random_access_index.hpp	/^  random_access_index($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( const ctor_args_list& args_list,const allocator_type& al)
random_access_index	multi_index/random_access_index.hpp	/^  random_access_index($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( const random_access_index<SuperMeta,TagList>& x,do_not_copy_elements_tag)
random_access_index	multi_index/random_access_index.hpp	/^  random_access_index(const random_access_index<SuperMeta,TagList>& x):$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(const random_access_index<SuperMeta,TagList>& x)
random_access_index	multi_index/random_access_index.hpp	/^class random_access_index:$/;"	c	namespace:boost::multi_index::detail	inherits:BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDSSuperMeta::type,safe_ctr_proxy_impl
random_access_index_inplace_merge	multi_index/detail/rnd_index_ops.hpp	/^void random_access_index_inplace_merge($/;"	f	namespace:boost::multi_index::detail	signature:( const Allocator& al, random_access_index_ptr_array<Allocator>& ptrs, BOOST_DEDUCED_TYPENAME Node::impl_ptr_pointer first1,Compare comp BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
random_access_index_loader	multi_index/detail/rnd_index_loader.hpp	/^  random_access_index_loader(const Allocator& al_,ptr_array& ptrs_):$/;"	f	class:boost::multi_index::detail::random_access_index_loader	access:public	signature:(const Allocator& al_,ptr_array& ptrs_)
random_access_index_loader	multi_index/detail/rnd_index_loader.hpp	/^class random_access_index_loader:$/;"	c	namespace:boost::multi_index::detail	inherits:random_access_index_loader_base
random_access_index_loader_base	multi_index/detail/rnd_index_loader.hpp	/^  random_access_index_loader_base(const Allocator& al_,ptr_array& ptrs_):$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:protected	signature:(const Allocator& al_,ptr_array& ptrs_)
random_access_index_loader_base	multi_index/detail/rnd_index_loader.hpp	/^class random_access_index_loader_base:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
random_access_index_node	multi_index/detail/rnd_index_node.hpp	/^struct random_access_index_node:$/;"	s	namespace:boost::multi_index::detail	inherits:Super,random_access_index_node_trampoline
random_access_index_node_impl	multi_index/detail/rnd_index_node.hpp	/^struct random_access_index_node_impl$/;"	s	namespace:boost::multi_index::detail
random_access_index_node_trampoline	multi_index/detail/rnd_index_node.hpp	/^struct random_access_index_node_trampoline:$/;"	s	namespace:boost::multi_index::detail	inherits:prevent_eti::type
random_access_index_ptr_array	multi_index/detail/rnd_index_ptr_array.hpp	/^  random_access_index_ptr_array($/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:( const Allocator& al,value_type end_,std::size_t size)
random_access_index_ptr_array	multi_index/detail/rnd_index_ptr_array.hpp	/^class random_access_index_ptr_array:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
random_access_index_remove	multi_index/detail/rnd_index_ops.hpp	/^Node* random_access_index_remove($/;"	f	namespace:boost::multi_index::detail	signature:( random_access_index_ptr_array<Allocator>& ptrs,Predicate pred BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
random_access_index_sort	multi_index/detail/rnd_index_ops.hpp	/^void random_access_index_sort($/;"	f	namespace:boost::multi_index::detail	signature:( const Allocator& al, random_access_index_ptr_array<Allocator>& ptrs, Compare comp BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
random_access_index_sort_compare	multi_index/detail/rnd_index_ops.hpp	/^  random_access_index_sort_compare(Compare comp_=Compare()):comp(comp_){}$/;"	f	struct:boost::multi_index::detail::random_access_index_sort_compare	access:public	signature:(Compare comp_=Compare())
random_access_index_sort_compare	multi_index/detail/rnd_index_ops.hpp	/^struct random_access_index_sort_compare:$/;"	s	namespace:boost::multi_index::detail	inherits:std::binary_function
random_access_index_unique	multi_index/detail/rnd_index_ops.hpp	/^Node* random_access_index_unique($/;"	f	namespace:boost::multi_index::detail	signature:( random_access_index_ptr_array<Allocator>& ptrs,BinaryPredicate binary_pred BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
random_access_iter_adaptor_base	multi_index/detail/iter_adaptor.hpp	/^class random_access_iter_adaptor_base:$/;"	c	namespace:boost::multi_index::detail	inherits:random_access_iterator_helper
range	multi_index/ordered_index.hpp	/^  range(LowerBounder lower,UpperBounder upper)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(LowerBounder lower,UpperBounder upper) const
range	multi_index/ordered_index.hpp	/^  range(LowerBounder lower,UpperBounder upper,none_unbounded_tag)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(LowerBounder lower,UpperBounder upper,none_unbounded_tag) const
range	multi_index/ordered_index.hpp	/^  range(LowerBounder lower,UpperBounder,upper_unbounded_tag)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(LowerBounder lower,UpperBounder,upper_unbounded_tag) const
range	multi_index/ordered_index.hpp	/^  range(LowerBounder,UpperBounder upper,lower_unbounded_tag)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(LowerBounder,UpperBounder upper,lower_unbounded_tag) const
range	multi_index/ordered_index.hpp	/^  range(LowerBounder,UpperBounder,both_unbounded_tag)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(LowerBounder,UpperBounder,both_unbounded_tag) const
rbegin	multi_index/ordered_index.hpp	/^  const_reverse_iterator rbegin()const{return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
rbegin	multi_index/ordered_index.hpp	/^  reverse_iterator       rbegin(){return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
rbegin	multi_index/random_access_index.hpp	/^  const_reverse_iterator rbegin()const{return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
rbegin	multi_index/random_access_index.hpp	/^  reverse_iterator       rbegin(){return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
rbegin	multi_index/sequenced_index.hpp	/^  const_reverse_iterator rbegin()const{return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
rbegin	multi_index/sequenced_index.hpp	/^  reverse_iterator       rbegin(){return make_reverse_iterator(end());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
rearrange	multi_index/detail/rnd_index_loader.hpp	/^  void rearrange(Node* position,Node *x)$/;"	f	class:boost::multi_index::detail::random_access_index_loader	access:public	signature:(Node* position,Node *x)
rearrange	multi_index/detail/rnd_index_loader.hpp	/^  void rearrange(node_impl_pointer position,node_impl_pointer x)$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:protected	signature:(node_impl_pointer position,node_impl_pointer x)
rearrange	multi_index/random_access_index.hpp	/^  void rearrange(InputIterator first)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(InputIterator first)
rearrange	multi_index/sequenced_index.hpp	/^  void rearrange(InputIterator first)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(InputIterator first)
rearranger	multi_index/ordered_index.hpp	/^  void rearranger(node_type* position,node_type *x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* position,node_type *x)
rearranger	multi_index/sequenced_index.hpp	/^  void rearranger(node_type* position,node_type *x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* position,node_type *x)
rebalance	multi_index/detail/ord_index_node.hpp	/^  static void rebalance(pointer x,parent_ref root)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x,parent_ref root)
rebalance_for_erase	multi_index/detail/ord_index_node.hpp	/^  static pointer rebalance_for_erase($/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:( pointer z,parent_ref root,pointer& leftmost,pointer& rightmost)
red	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_color{red=false,black=true};$/;"	e	enum:boost::multi_index::detail::ordered_index_color
reference	multi_index/detail/duplicates_iterator.hpp	/^  typedef const typename Node::value_type& reference;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
reference	multi_index/detail/iter_adaptor.hpp	/^  typedef typename Base::reference       reference;$/;"	t	class:boost::multi_index::detail::random_access_iter_adaptor_base	access:public
reference	multi_index/detail/iter_adaptor.hpp	/^  typedef typename Base::reference reference;$/;"	t	class:boost::multi_index::detail::bidirectional_iter_adaptor_base	access:public
reference	multi_index/detail/iter_adaptor.hpp	/^  typedef typename Base::reference reference;$/;"	t	class:boost::multi_index::detail::forward_iter_adaptor_base	access:public
reference	multi_index/detail/safe_mode.hpp	/^  typedef typename Iterator::reference                 reference;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:public
reference	multi_index/hashed_index.hpp	/^  typedef typename allocator_type::reference         reference;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
reference	multi_index/ordered_index.hpp	/^  typedef typename allocator_type::reference         reference;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
reference	multi_index/random_access_index.hpp	/^  typedef typename allocator_type::reference       reference;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
reference	multi_index/sequenced_index.hpp	/^  typedef typename allocator_type::reference          reference;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
rehash	multi_index/hashed_index.hpp	/^  void rehash(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(size_type n)
release	multi_index/detail/copy_map.hpp	/^  void release()$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:()
released	multi_index/detail/copy_map.hpp	/^  bool                                            released;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
relink	multi_index/detail/seq_index_node.hpp	/^  static void relink(pointer position,pointer x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer position,pointer x)
relink	multi_index/detail/seq_index_node.hpp	/^  static void relink(pointer position,pointer x,pointer y)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer position,pointer x,pointer y)
relink	multi_index/sequenced_index.hpp	/^  static void relink(node_type* position,node_type* first,node_type* last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* position,node_type* first,node_type* last)
relink	multi_index/sequenced_index.hpp	/^  static void relink(node_type* position,node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* position,node_type* x)
relocate	multi_index/detail/rnd_index_node.hpp	/^  static void relocate(ptr_pointer pos,ptr_pointer first,ptr_pointer last)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(ptr_pointer pos,ptr_pointer first,ptr_pointer last)
relocate	multi_index/detail/rnd_index_node.hpp	/^  static void relocate(ptr_pointer pos,ptr_pointer x)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(ptr_pointer pos,ptr_pointer x)
relocate	multi_index/random_access_index.hpp	/^  static void relocate(node_type* position,node_type* first,node_type* last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(node_type* position,node_type* first,node_type* last)
relocate	multi_index/random_access_index.hpp	/^  static void relocate(node_type* position,node_type* x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:private	signature:(node_type* position,node_type* x)
relocate	multi_index/random_access_index.hpp	/^  void relocate(iterator position,iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,iterator first,iterator last)
relocate	multi_index/random_access_index.hpp	/^  void relocate(iterator position,iterator i)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,iterator i)
relocate	multi_index/sequenced_index.hpp	/^  void relocate(iterator position,iterator first,iterator last)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,iterator first,iterator last)
relocate	multi_index/sequenced_index.hpp	/^  void relocate(iterator position,iterator i)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,iterator i)
remove	multi_index/random_access_index.hpp	/^  void remove(value_param_type value)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(value_param_type value)
remove	multi_index/sequenced_index.hpp	/^  void remove(value_param_type value)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(value_param_type value)
remove_if	multi_index/random_access_index.hpp	/^  void remove_if(Predicate pred)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(Predicate pred)
remove_if	multi_index/sequenced_index.hpp	/^  void remove_if(Predicate pred)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(Predicate pred)
rend	multi_index/ordered_index.hpp	/^  const_reverse_iterator rend()const{return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
rend	multi_index/ordered_index.hpp	/^  reverse_iterator       rend(){return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
rend	multi_index/random_access_index.hpp	/^  const_reverse_iterator rend()const{return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
rend	multi_index/random_access_index.hpp	/^  reverse_iterator       rend(){return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
rend	multi_index/sequenced_index.hpp	/^  const_reverse_iterator rend()const{return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
rend	multi_index/sequenced_index.hpp	/^  reverse_iterator       rend(){return make_reverse_iterator(begin());}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
replace	multi_index/hashed_index.hpp	/^  bool replace(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
replace	multi_index/hashed_index.hpp	/^  bool replace(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(iterator position,const value_type& x)
replace	multi_index/ordered_index.hpp	/^  bool replace(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
replace	multi_index/ordered_index.hpp	/^  bool replace(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(iterator position,const value_type& x)
replace	multi_index/random_access_index.hpp	/^  bool replace(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
replace	multi_index/random_access_index.hpp	/^  bool replace(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,const value_type& x)
replace	multi_index/sequenced_index.hpp	/^  bool replace(iterator position,BOOST_RV_REF(value_type) x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,BOOST_RV_REF(value_type) x)
replace	multi_index/sequenced_index.hpp	/^  bool replace(iterator position,const value_type& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,const value_type& x)
replace_	multi_index/detail/index_base.hpp	/^  bool replace_(const value_type& v,node_type* x,lvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type* x,lvalue_tag)
replace_	multi_index/detail/index_base.hpp	/^  bool replace_(const value_type& v,node_type* x,rvalue_tag)$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(const value_type& v,node_type* x,rvalue_tag)
replace_	multi_index/hashed_index.hpp	/^  bool replace_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
replace_	multi_index/ordered_index.hpp	/^  bool replace_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
replace_	multi_index/random_access_index.hpp	/^  bool replace_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
replace_	multi_index/sequenced_index.hpp	/^  bool replace_(value_param_type v,node_type* x,Variant variant)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(value_param_type v,node_type* x,Variant variant)
reserve	multi_index/detail/rnd_index_ptr_array.hpp	/^  void reserve(std::size_t c)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(std::size_t c)
reserve	multi_index/hashed_index.hpp	/^  void reserve(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(size_type n)
reserve	multi_index/random_access_index.hpp	/^  void reserve(size_type n)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n)
resize	multi_index/random_access_index.hpp	/^  void resize(size_type n)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n)
resize	multi_index/random_access_index.hpp	/^  void resize(size_type n,value_param_type x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(size_type n,value_param_type x)
resize	multi_index/sequenced_index.hpp	/^  void resize(size_type n)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(size_type n)
resize	multi_index/sequenced_index.hpp	/^  void resize(size_type n,value_param_type x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(size_type n,value_param_type x)
restore	multi_index/detail/ord_index_node.hpp	/^  static void restore(pointer x,pointer position,pointer header)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x,pointer position,pointer header)
result_index_class	multi_index/detail/msvc_index_specifier.hpp	/^  struct result_index_class:$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier	inherits:fake_index_type::,index_class	access:public
result_node_class	multi_index/detail/msvc_index_specifier.hpp	/^  struct result_node_class:$/;"	s	struct:boost::multi_index::detail::msvc_index_specifier	inherits:fake_index_type::,node_class	access:public
result_type	multi_index/global_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::detail::const_ref_global_fun_base	access:public
result_type	multi_index/global_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::detail::non_const_ref_global_fun_base	access:public
result_type	multi_index/global_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::detail::non_ref_global_fun_base	access:public
result_type	multi_index/identity.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::const_identity_base	access:public
result_type	multi_index/identity.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::non_const_identity_base	access:public
result_type	multi_index/mem_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::const_mem_fun	access:public
result_type	multi_index/mem_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::const_mem_fun_explicit	access:public
result_type	multi_index/mem_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::mem_fun	access:public
result_type	multi_index/mem_fun.hpp	/^  typedef typename remove_reference<Type>::type result_type;$/;"	t	struct:boost::multi_index::mem_fun_explicit	access:public
result_type	multi_index/member.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::const_member_base	access:public
result_type	multi_index/member.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::const_member_offset_base	access:public
result_type	multi_index/member.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::non_const_member_base	access:public
result_type	multi_index/member.hpp	/^  typedef Type result_type;$/;"	t	struct:boost::multi_index::detail::non_const_member_offset_base	access:public
reverse	multi_index/detail/rnd_index_node.hpp	/^  static void reverse(ptr_pointer pbegin,ptr_pointer pend)$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:(ptr_pointer pbegin,ptr_pointer pend)
reverse	multi_index/detail/seq_index_node.hpp	/^  static void reverse(pointer header)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer header)
reverse	multi_index/random_access_index.hpp	/^  void reverse()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
reverse	multi_index/sequenced_index.hpp	/^  void reverse()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
reverse_iterator	multi_index/ordered_index.hpp	/^    boost::reverse_iterator<iterator>                reverse_iterator;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
reverse_iterator	multi_index/random_access_index.hpp	/^    boost::reverse_iterator<iterator>              reverse_iterator;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
reverse_iterator	multi_index/sequenced_index.hpp	/^    boost::reverse_iterator<iterator>                 reverse_iterator;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
right	multi_index/detail/ord_index_node.hpp	/^  impl_pointer        right()const{return trampoline::right();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:() const
right	multi_index/detail/ord_index_node.hpp	/^  impl_pointer&       right(){return trampoline::right();}$/;"	f	struct:boost::multi_index::detail::ordered_index_node	access:public	signature:()
right	multi_index/detail/ord_index_node.hpp	/^  pointer              right()const{return right_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:() const
right	multi_index/detail/ord_index_node.hpp	/^  pointer  right()const{return right_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:() const
right	multi_index/detail/ord_index_node.hpp	/^  pointer&             right(){return right_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_std_base	access:public	signature:()
right	multi_index/detail/ord_index_node.hpp	/^  pointer& right(){return right_;}$/;"	f	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:public	signature:()
right_	multi_index/detail/ord_index_node.hpp	/^  pointer             right_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_std_base	access:private
right_	multi_index/detail/ord_index_node.hpp	/^  pointer      right_;$/;"	m	struct:boost::multi_index::detail::ordered_index_node_compressed_base	access:private
rightmost	multi_index/ordered_index.hpp	/^  node_type* rightmost()const{return node_type::from_impl(header()->right());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:() const
rnd_node_iterator	multi_index/detail/rnd_node_iterator.hpp	/^  explicit rnd_node_iterator(Node* node_):node(node_){}$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(Node* node_)
rnd_node_iterator	multi_index/detail/rnd_node_iterator.hpp	/^  rnd_node_iterator(){}$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:()
rnd_node_iterator	multi_index/detail/rnd_node_iterator.hpp	/^class rnd_node_iterator:$/;"	c	namespace:boost::multi_index::detail	inherits:random_access_iterator_helper
room_for_one	multi_index/detail/rnd_index_ptr_array.hpp	/^  void room_for_one()$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:()
root	multi_index/ordered_index.hpp	/^  node_type* root()const{return node_type::from_impl(header()->parent());}$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:() const
rotate_left	multi_index/detail/ord_index_node.hpp	/^  static void rotate_left(pointer x,parent_ref root)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x,parent_ref root)
rotate_right	multi_index/detail/ord_index_node.hpp	/^  static void rotate_right(pointer x,parent_ref root)$/;"	f	struct:boost::multi_index::detail::ordered_index_node_impl	access:public	signature:(pointer x,parent_ref root)
rvalue_tag	multi_index/detail/index_base.hpp	/^struct rvalue_tag{};$/;"	s	namespace:boost::multi_index::detail
safe_container	multi_index/detail/safe_mode.hpp	/^class safe_container:public detail::safe_container_base$/;"	c	namespace:boost::multi_index::safe_mode	inherits:detail::safe_container_base
safe_container_base	multi_index/detail/safe_mode.hpp	/^  safe_container_base(){}$/;"	f	class:boost::multi_index::detail::safe_container_base	access:public	signature:()
safe_container_base	multi_index/detail/safe_mode.hpp	/^class safe_container_base:private noncopyable$/;"	c	namespace:boost::multi_index::detail	inherits:noncopyable
safe_ctr_proxy	multi_index/detail/safe_ctr_proxy.hpp	/^class safe_ctr_proxy:$/;"	c	namespace:boost::multi_index::detail	inherits:safe_mode::safe_container
safe_ctr_proxy_impl	multi_index/detail/safe_ctr_proxy.hpp	/^class safe_ctr_proxy_impl:public safe_ctr_proxy<Iterator>$/;"	c	namespace:boost::multi_index::detail	inherits:safe_ctr_proxy
safe_execute	multi_index/detail/scope_guard.hpp	/^  static void safe_execute(J& j){$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:protected	signature:(J& j)
safe_iterator	multi_index/detail/safe_mode.hpp	/^  explicit safe_iterator(safe_container<container_type>* cont_):$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:(safe_container<container_type>* cont_)
safe_iterator	multi_index/detail/safe_mode.hpp	/^  safe_iterator($/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:( const T0& t0,const T1& t1,safe_container<container_type>* cont_)
safe_iterator	multi_index/detail/safe_mode.hpp	/^  safe_iterator(){}$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:()
safe_iterator	multi_index/detail/safe_mode.hpp	/^  safe_iterator(const T0& t0,safe_container<container_type>* cont_):$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:public	signature:(const T0& t0,safe_container<container_type>* cont_)
safe_iterator	multi_index/detail/safe_mode.hpp	/^class safe_iterator:$/;"	c	namespace:boost::multi_index::safe_mode	inherits:detail::iter_adaptor,detail::safe_iterator_base
safe_iterator_base	multi_index/detail/safe_mode.hpp	/^  explicit safe_iterator_base(safe_container_base* cont_):$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:(safe_container_base* cont_)
safe_iterator_base	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base():cont(0),next(0),unchecked_(false){}$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:()
safe_iterator_base	multi_index/detail/safe_mode.hpp	/^  safe_iterator_base(const safe_iterator_base& it):$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:(const safe_iterator_base& it)
safe_iterator_base	multi_index/detail/safe_mode.hpp	/^class safe_iterator_base$/;"	c	namespace:boost::multi_index::detail
safe_mode	multi_index/detail/safe_mode.hpp	/^namespace safe_mode{$/;"	n	namespace:boost::multi_index
safe_mode	multi_index/safe_mode_errors.hpp	/^namespace safe_mode{$/;"	n	namespace:boost::multi_index
safe_super	multi_index/detail/safe_mode.hpp	/^  typedef detail::safe_iterator_base                   safe_super;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:private
safe_super	multi_index/hashed_index.hpp	/^    hashed_index>                             safe_super;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
safe_super	multi_index/ordered_index.hpp	/^    ordered_index>                                   safe_super;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
safe_super	multi_index/ordered_index.hpp	/^  typedef safe_mode::safe_container<ordered_index>   safe_super;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
safe_super	multi_index/random_access_index.hpp	/^    random_access_index>                      safe_super;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
safe_super	multi_index/sequenced_index.hpp	/^    sequenced_index>                          safe_super;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
same_container	multi_index/safe_mode_errors.hpp	/^  same_container$/;"	e	enum:boost::multi_index::safe_mode::error_code
save	multi_index/detail/bidir_node_iterator.hpp	/^  void save(Archive& ar,const unsigned int)const$/;"	f	class:boost::multi_index::detail::bidir_node_iterator	access:public	signature:(Archive& ar,const unsigned int) const
save	multi_index/detail/hash_index_iterator.hpp	/^  void save(Archive& ar,const unsigned int)const$/;"	f	class:boost::multi_index::detail::hashed_index_iterator	access:public	signature:(Archive& ar,const unsigned int) const
save	multi_index/detail/index_saver.hpp	/^  void save($/;"	f	class:boost::multi_index::detail::index_saver	access:public	signature:( IndexIterator first,IndexIterator last,Archive& ar, const unsigned int) const
save	multi_index/detail/rnd_node_iterator.hpp	/^  void save(Archive& ar,const unsigned int)const$/;"	f	class:boost::multi_index::detail::rnd_node_iterator	access:public	signature:(Archive& ar,const unsigned int) const
save	multi_index/detail/safe_mode.hpp	/^  void save(Archive& ar,const unsigned int version)const$/;"	f	class:boost::multi_index::safe_mode::safe_iterator	access:private	signature:(Archive& ar,const unsigned int version) const
save	multi_index/detail/serialization_version.hpp	/^  void save(Archive&,const unsigned int)const{}$/;"	f	struct:boost::multi_index::detail::serialization_version	access:private	signature:(Archive&,const unsigned int) const
save_	multi_index/detail/index_base.hpp	/^  void save_(Archive&,const unsigned int,const index_saver_type&)const{}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(Archive&,const unsigned int,const index_saver_type&) const
save_	multi_index/hashed_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm) const
save_	multi_index/ordered_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm, ordered_non_unique_tag) const
save_	multi_index/ordered_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm, ordered_unique_tag) const
save_	multi_index/ordered_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm) const
save_	multi_index/random_access_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm) const
save_	multi_index/sequenced_index.hpp	/^  void save_($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( Archive& ar,const unsigned int version,const index_saver_type& sm) const
save_node	multi_index/detail/index_saver.hpp	/^  static void save_node(Node* node,Archive& ar)$/;"	f	class:boost::multi_index::detail::index_saver	access:private	signature:(Node* node,Archive& ar)
scope_guard	multi_index/detail/scope_guard.hpp	/^typedef const scope_guard_impl_base& scope_guard;$/;"	t	namespace:boost::multi_index::detail
scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl0(F fun):fun_(fun){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl0	access:public	signature:(F fun)
scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl0:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl1(F fun,P1 p1):fun_(fun),p1_(p1){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl1	access:public	signature:(F fun,P1 p1)
scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl1:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl2(F fun,P1 p1,P2 p2):fun_(fun),p1_(p1),p2_(p2){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl2	access:public	signature:(F fun,P1 p1,P2 p2)
scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl2:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl3(F fun,P1 p1,P2 p2,P3 p3):fun_(fun),p1_(p1),p2_(p2),p3_(p3){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl3	access:public	signature:(F fun,P1 p1,P2 p2,P3 p3)
scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl3:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
scope_guard_impl4	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl4(F fun,P1 p1,P2 p2,P3 p3,P4 p4):$/;"	f	class:boost::multi_index::detail::scope_guard_impl4	access:public	signature:(F fun,P1 p1,P2 p2,P3 p3,P4 p4)
scope_guard_impl4	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl4:public scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail	inherits:scope_guard_impl_base
scope_guard_impl_base	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl_base():dismissed_(false){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:public	signature:()
scope_guard_impl_base	multi_index/detail/scope_guard.hpp	/^  scope_guard_impl_base(const scope_guard_impl_base& other):$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:protected	signature:(const scope_guard_impl_base& other)
scope_guard_impl_base	multi_index/detail/scope_guard.hpp	/^class scope_guard_impl_base$/;"	c	namespace:boost::multi_index::detail
second	multi_index/detail/copy_map.hpp	/^  Node* second;$/;"	m	struct:boost::multi_index::detail::copy_map_entry	access:public
selector	multi_index/detail/iter_adaptor.hpp	/^    typename Base::iterator_category>        selector;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_base	access:public
sequenced	multi_index/sequenced_index.hpp	/^struct sequenced$/;"	s	namespace:boost::multi_index
sequenced_index	multi_index/sequenced_index.hpp	/^  sequenced_index($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( const sequenced_index<SuperMeta,TagList>& x,do_not_copy_elements_tag)
sequenced_index	multi_index/sequenced_index.hpp	/^  sequenced_index(const ctor_args_list& args_list,const allocator_type& al):$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const ctor_args_list& args_list,const allocator_type& al)
sequenced_index	multi_index/sequenced_index.hpp	/^  sequenced_index(const sequenced_index<SuperMeta,TagList>& x):$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(const sequenced_index<SuperMeta,TagList>& x)
sequenced_index	multi_index/sequenced_index.hpp	/^class sequenced_index:$/;"	c	namespace:boost::multi_index::detail	inherits:BOOST_MULTI_INDEX_PROTECTED_IF_MEMBER_TEMPLATE_FRIENDSSuperMeta::type,safe_ctr_proxy_impl
sequenced_index_collate	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_collate($/;"	f	namespace:boost::multi_index::detail	signature:( BOOST_DEDUCED_TYPENAME Node::impl_type* x, BOOST_DEDUCED_TYPENAME Node::impl_type* y, Compare comp BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(Node))
sequenced_index_merge	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_merge(SequencedIndex& x,SequencedIndex& y,Compare comp)$/;"	f	namespace:boost::multi_index::detail	signature:(SequencedIndex& x,SequencedIndex& y,Compare comp)
sequenced_index_node	multi_index/detail/seq_index_node.hpp	/^struct sequenced_index_node:Super,sequenced_index_node_trampoline<Super>$/;"	s	namespace:boost::multi_index::detail	inherits:Super,sequenced_index_node_trampoline
sequenced_index_node_impl	multi_index/detail/seq_index_node.hpp	/^struct sequenced_index_node_impl$/;"	s	namespace:boost::multi_index::detail
sequenced_index_node_trampoline	multi_index/detail/seq_index_node.hpp	/^struct sequenced_index_node_trampoline:$/;"	s	namespace:boost::multi_index::detail	inherits:prevent_eti::type
sequenced_index_remove	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_remove(SequencedIndex& x,Predicate pred)$/;"	f	namespace:boost::multi_index::detail	signature:(SequencedIndex& x,Predicate pred)
sequenced_index_sort	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_sort(Node* header,Compare comp)$/;"	f	namespace:boost::multi_index::detail	signature:(Node* header,Compare comp)
sequenced_index_unique	multi_index/detail/seq_index_ops.hpp	/^void sequenced_index_unique(SequencedIndex& x,BinaryPredicate binary_pred)$/;"	f	namespace:boost::multi_index::detail	signature:(SequencedIndex& x,BinaryPredicate binary_pred)
serialization	multi_index/detail/bucket_array.hpp	/^namespace serialization{$/;"	n	namespace:boost
serialization	multi_index/detail/index_node_base.hpp	/^namespace serialization{$/;"	n	namespace:boost
serialization	multi_index/detail/serialization_version.hpp	/^namespace serialization {$/;"	n	namespace:boost
serialization_version	multi_index/detail/serialization_version.hpp	/^  serialization_version():$/;"	f	struct:boost::multi_index::detail::serialization_version	access:public	signature:()
serialization_version	multi_index/detail/serialization_version.hpp	/^struct serialization_version$/;"	s	namespace:boost::multi_index::detail
serialize	multi_index/detail/bucket_array.hpp	/^  void serialize(Archive&,const unsigned int)$/;"	f	class:boost::multi_index::detail::bucket_array	access:private	signature:(Archive&,const unsigned int)
serialize	multi_index/detail/index_node_base.hpp	/^  void serialize(Archive&,const unsigned int)$/;"	f	struct:boost::multi_index::detail::index_node_base	access:private	signature:(Archive&,const unsigned int)
set_capacity	multi_index/detail/rnd_index_ptr_array.hpp	/^  void set_capacity(std::size_t c)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:private	signature:(std::size_t c)
shrink_to_fit	multi_index/detail/rnd_index_ptr_array.hpp	/^  void shrink_to_fit()$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:()
shrink_to_fit	multi_index/random_access_index.hpp	/^  void shrink_to_fit()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
side	multi_index/ordered_index.hpp	/^    ordered_index_side side;$/;"	m	struct:boost::multi_index::detail::ordered_index::link_info	access:public
size	multi_index/detail/bucket_array.hpp	/^  std::size_t size()const$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:() const
size	multi_index/detail/rnd_index_ptr_array.hpp	/^  std::size_t size()const{return size_;}$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:() const
size	multi_index/hashed_index.hpp	/^  size_type size()const{return this->final_size_();}$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:() const
size	multi_index/ordered_index.hpp	/^  size_type size()const{return this->final_size_();}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
size	multi_index/random_access_index.hpp	/^  size_type size()const{return this->final_size_();}$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:() const
size	multi_index/sequenced_index.hpp	/^  size_type size()const{return this->final_size_();}$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:() const
size_	multi_index/detail/bucket_array.hpp	/^  std::size_t                          size_;$/;"	m	class:boost::multi_index::detail::bucket_array	access:private
size_	multi_index/detail/copy_map.hpp	/^  std::size_t                                     size_;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
size_	multi_index/detail/index_loader.hpp	/^  std::size_t                 size_;$/;"	m	class:boost::multi_index::detail::index_loader	access:private
size_	multi_index/detail/index_matcher.hpp	/^  std::size_t                 size_;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
size_	multi_index/detail/rnd_index_ptr_array.hpp	/^  std::size_t                      size_;$/;"	m	class:boost::multi_index::detail::random_access_index_ptr_array	access:private
size_type	multi_index/hashed_index.hpp	/^  typedef std::size_t                                size_type;      $/;"	t	class:boost::multi_index::detail::hashed_index	access:public
size_type	multi_index/ordered_index.hpp	/^  typedef std::size_t                                size_type;      $/;"	t	class:boost::multi_index::detail::ordered_index	access:public
size_type	multi_index/random_access_index.hpp	/^  typedef std::size_t                              size_type;      $/;"	t	class:boost::multi_index::detail::random_access_index	access:public
size_type	multi_index/sequenced_index.hpp	/^  typedef std::size_t                                 size_type;      $/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
sort	multi_index/random_access_index.hpp	/^  void sort()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
sort	multi_index/random_access_index.hpp	/^  void sort(Compare comp)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(Compare comp)
sort	multi_index/sequenced_index.hpp	/^  void sort()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
sort	multi_index/sequenced_index.hpp	/^  void sort(Compare comp)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(Compare comp)
sorted	multi_index/detail/index_loader.hpp	/^  mutable bool                sorted;$/;"	m	class:boost::multi_index::detail::index_loader	access:private
sorted	multi_index/detail/index_matcher.hpp	/^  mutable bool                sorted;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
space	multi_index/detail/archive_constructed.hpp	/^  typename aligned_storage<sizeof(T),alignment_of<T>::value>::type space;$/;"	m	struct:boost::multi_index::detail::archive_constructed	access:private
space	multi_index/detail/index_node_base.hpp	/^  >::type                      space;$/;"	m	struct:boost::multi_index::detail::pod_value_holder	access:public
spc	multi_index/detail/bucket_array.hpp	/^  auto_space<node_impl_type,Allocator> spc;$/;"	m	class:boost::multi_index::detail::bucket_array	access:private
spc	multi_index/detail/copy_map.hpp	/^  auto_space<copy_map_entry<Node>,Allocator>      spc;$/;"	m	class:boost::multi_index::detail::copy_map	access:private
spc	multi_index/detail/index_loader.hpp	/^  auto_space<Node*,Allocator> spc;$/;"	m	class:boost::multi_index::detail::index_loader	access:private
spc	multi_index/detail/index_matcher.hpp	/^  auto_space<entry,Allocator> spc;$/;"	m	class:boost::multi_index::detail::index_matcher::algorithm_base	access:private
spc	multi_index/detail/rnd_index_ptr_array.hpp	/^  auto_space<value_type,Allocator> spc;$/;"	m	class:boost::multi_index::detail::random_access_index_ptr_array	access:private
splice	multi_index/random_access_index.hpp	/^  void splice($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( iterator position,random_access_index<SuperMeta,TagList>& x, iterator first,iterator last)
splice	multi_index/random_access_index.hpp	/^  void splice($/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:( iterator position,random_access_index<SuperMeta,TagList>& x,iterator i)
splice	multi_index/random_access_index.hpp	/^  void splice(iterator position,random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(iterator position,random_access_index<SuperMeta,TagList>& x)
splice	multi_index/sequenced_index.hpp	/^  void splice($/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:( iterator position,sequenced_index<SuperMeta,TagList>& x, iterator first,iterator last)
splice	multi_index/sequenced_index.hpp	/^  void splice(iterator position,sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,sequenced_index<SuperMeta,TagList>& x)
splice	multi_index/sequenced_index.hpp	/^  void splice(iterator position,sequenced_index<SuperMeta,TagList>& x,iterator i)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(iterator position,sequenced_index<SuperMeta,TagList>& x,iterator i)
super	multi_index/detail/index_matcher.hpp	/^  typedef algorithm_base<Allocator> super;$/;"	t	class:boost::multi_index::detail::index_matcher::algorithm	access:private
super	multi_index/detail/ord_index_node.hpp	/^  typedef ordered_index_node_impl_base<Allocator> super;$/;"	t	struct:boost::multi_index::detail::ordered_index_node_impl	access:private
super	multi_index/detail/rnd_index_loader.hpp	/^  typedef random_access_index_loader_base<Allocator> super;$/;"	t	class:boost::multi_index::detail::random_access_index_loader	access:private
super	multi_index/detail/safe_ctr_proxy.hpp	/^  typedef safe_ctr_proxy<Iterator> super;$/;"	t	class:boost::multi_index::detail::safe_ctr_proxy_impl	access:private
super	multi_index/detail/safe_mode.hpp	/^  typedef detail::iter_adaptor<safe_iterator,Iterator> super;$/;"	t	class:boost::multi_index::safe_mode::safe_iterator	access:private
super	multi_index/detail/safe_mode.hpp	/^  typedef detail::safe_container_base super;$/;"	t	class:boost::multi_index::safe_mode::safe_container	access:private
super	multi_index/hashed_index.hpp	/^  typedef typename SuperMeta::type                   super;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
super	multi_index/ordered_index.hpp	/^  typedef typename SuperMeta::type                   super;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
super	multi_index/random_access_index.hpp	/^  typedef typename SuperMeta::type                 super;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
super	multi_index/sequenced_index.hpp	/^  typedef typename SuperMeta::type                    super;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
supplied_compare_type	multi_index/detail/ord_index_args.hpp	/^    Arg2>::type                                      supplied_compare_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
supplied_hash_type	multi_index/detail/hash_index_args.hpp	/^    Arg2>::type                                      supplied_hash_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
supplied_pred_type	multi_index/detail/hash_index_args.hpp	/^    Arg3>::type                                      supplied_pred_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
swap	multi_index/detail/auto_space.hpp	/^  void swap(auto_space& x)$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:(auto_space& x)
swap	multi_index/detail/auto_space.hpp	/^void swap(auto_space<T,Allocator>& x,auto_space<T,Allocator>& y)$/;"	f	namespace:boost::multi_index::detail	signature:(auto_space<T,Allocator>& x,auto_space<T,Allocator>& y)
swap	multi_index/detail/bucket_array.hpp	/^  void swap(bucket_array& x)$/;"	f	class:boost::multi_index::detail::bucket_array	access:public	signature:(bucket_array& x)
swap	multi_index/detail/bucket_array.hpp	/^void swap(bucket_array<Allocator>& x,bucket_array<Allocator>& y)$/;"	f	namespace:boost::multi_index::detail	signature:(bucket_array<Allocator>& x,bucket_array<Allocator>& y)
swap	multi_index/detail/rnd_index_ptr_array.hpp	/^  void swap(random_access_index_ptr_array& x)$/;"	f	class:boost::multi_index::detail::random_access_index_ptr_array	access:public	signature:(random_access_index_ptr_array& x)
swap	multi_index/detail/rnd_index_ptr_array.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( random_access_index_ptr_array<Allocator>& x, random_access_index_ptr_array<Allocator>& y)
swap	multi_index/detail/safe_mode.hpp	/^  void swap(safe_container<Container>& x)$/;"	f	class:boost::multi_index::safe_mode::safe_container	access:public	signature:(safe_container<Container>& x)
swap	multi_index/detail/safe_mode.hpp	/^  void swap(safe_container_base& x)$/;"	f	class:boost::multi_index::detail::safe_container_base	access:public	signature:(safe_container_base& x)
swap	multi_index/detail/seq_index_node.hpp	/^  static void swap(pointer x,pointer y)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer x,pointer y)
swap	multi_index/hashed_index.hpp	/^  void swap(hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:(hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
swap	multi_index/hashed_index.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x, hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& y)
swap	multi_index/hashed_index_fwd.hpp	/^void swap($/;"	p	namespace:boost::multi_index::detail	signature:( hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x, hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& y)
swap	multi_index/ordered_index.hpp	/^  void swap(ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
swap	multi_index/ordered_index.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x, ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& y)
swap	multi_index/ordered_index_fwd.hpp	/^void swap($/;"	p	namespace:boost::multi_index::detail	signature:( ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x, ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& y)
swap	multi_index/random_access_index.hpp	/^  void swap(random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x)
swap	multi_index/random_access_index.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( random_access_index<SuperMeta,TagList>& x, random_access_index<SuperMeta,TagList>& y)
swap	multi_index/random_access_index_fwd.hpp	/^void swap($/;"	p	namespace:boost::multi_index::detail	signature:( random_access_index<SuperMeta,TagList>& x, random_access_index<SuperMeta,TagList>& y)
swap	multi_index/sequenced_index.hpp	/^  void swap(sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x)
swap	multi_index/sequenced_index.hpp	/^void swap($/;"	f	namespace:boost::multi_index::detail	signature:( sequenced_index<SuperMeta,TagList>& x, sequenced_index<SuperMeta,TagList>& y)
swap	multi_index/sequenced_index_fwd.hpp	/^void swap($/;"	p	namespace:boost::multi_index::detail	signature:( sequenced_index<SuperMeta,TagList>& x, sequenced_index<SuperMeta,TagList>& y)
swap_	multi_index/detail/index_base.hpp	/^  void swap_(index_base<Value,IndexSpecifierList,Allocator>&){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(index_base<Value,IndexSpecifierList,Allocator>&)
swap_	multi_index/hashed_index.hpp	/^  void swap_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
swap_	multi_index/ordered_index.hpp	/^  void swap_(ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
swap_	multi_index/random_access_index.hpp	/^  void swap_(random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x)
swap_	multi_index/sequenced_index.hpp	/^  void swap_(sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x)
swap_elements_	multi_index/detail/index_base.hpp	/^  void swap_elements_(index_base<Value,IndexSpecifierList,Allocator>&){}$/;"	f	class:boost::multi_index::detail::index_base	access:protected	signature:(index_base<Value,IndexSpecifierList,Allocator>&)
swap_elements_	multi_index/hashed_index.hpp	/^  void swap_elements_($/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:( hashed_index<KeyFromValue,Hash,Pred,SuperMeta,TagList,Category>& x)
swap_elements_	multi_index/ordered_index.hpp	/^  void swap_elements_($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( ordered_index<KeyFromValue,Compare,SuperMeta,TagList,Category>& x)
swap_elements_	multi_index/random_access_index.hpp	/^  void swap_elements_(random_access_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(random_access_index<SuperMeta,TagList>& x)
swap_elements_	multi_index/sequenced_index.hpp	/^  void swap_elements_(sequenced_index<SuperMeta,TagList>& x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(sequenced_index<SuperMeta,TagList>& x)
sync	multi_index/detail/duplicates_iterator.hpp	/^  void sync()$/;"	f	class:boost::multi_index::detail::duplicates_iterator	access:private	signature:()
tag	multi_index/tag.hpp	/^struct tag:private detail::tag_marker$/;"	s	namespace:boost::multi_index	inherits:detail::tag_marker
tag_list	multi_index/hashed_index.hpp	/^  typedef TagList                                    tag_list;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
tag_list	multi_index/ordered_index.hpp	/^  typedef TagList                                    tag_list;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
tag_list	multi_index/random_access_index.hpp	/^  typedef TagList                                  tag_list;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
tag_list	multi_index/sequenced_index.hpp	/^  typedef TagList                                     tag_list;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
tag_list_type	multi_index/detail/hash_index_args.hpp	/^    tag< > >::type                                   tag_list_type;$/;"	t	struct:boost::multi_index::detail::hashed_index_args	access:public
tag_list_type	multi_index/detail/ord_index_args.hpp	/^    tag< > >::type                                   tag_list_type;$/;"	t	struct:boost::multi_index::detail::ordered_index_args	access:public
tag_list_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::tag_list_type::type tag_list_type;$/;"	t	struct:boost::multi_index::hashed_non_unique	access:public
tag_list_type	multi_index/hashed_index.hpp	/^  typedef typename index_args::tag_list_type::type tag_list_type;$/;"	t	struct:boost::multi_index::hashed_unique	access:public
tag_list_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::tag_list_type::type tag_list_type;$/;"	t	struct:boost::multi_index::ordered_non_unique	access:public
tag_list_type	multi_index/ordered_index.hpp	/^  typedef typename index_args::tag_list_type::type tag_list_type;$/;"	t	struct:boost::multi_index::ordered_unique	access:public
tag_marker	multi_index/tag.hpp	/^struct tag_marker{};$/;"	s	namespace:boost::multi_index::detail
to_left	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_side{to_left=false,to_right=true};$/;"	e	enum:boost::multi_index::detail::ordered_index_side
to_right	multi_index/detail/ord_index_node.hpp	/^enum ordered_index_side{to_left=false,to_right=true};$/;"	e	enum:boost::multi_index::detail::ordered_index_side
touch	multi_index/detail/scope_guard.hpp	/^  void touch()const{}$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:public	signature:() const
trampoline	multi_index/detail/hash_index_node.hpp	/^  typedef hashed_index_node_trampoline<Super> trampoline;$/;"	t	struct:boost::multi_index::detail::hashed_index_node	access:private
trampoline	multi_index/detail/ord_index_node.hpp	/^  typedef ordered_index_node_trampoline<Super> trampoline;$/;"	t	struct:boost::multi_index::detail::ordered_index_node	access:private
trampoline	multi_index/detail/rnd_index_node.hpp	/^  typedef random_access_index_node_trampoline<Super> trampoline;$/;"	t	struct:boost::multi_index::detail::random_access_index_node	access:private
trampoline	multi_index/detail/seq_index_node.hpp	/^  typedef sequenced_index_node_trampoline<Super> trampoline;$/;"	t	struct:boost::multi_index::detail::sequenced_index_node	access:private
transfer	multi_index/detail/rnd_index_node.hpp	/^  static void transfer($/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:( ptr_pointer pbegin0,ptr_pointer pend0,ptr_pointer pbegin1)
type	multi_index/detail/base_type.hpp	/^  >::type type;$/;"	t	struct:boost::multi_index::detail::nth_layer	access:public
type	multi_index/detail/hash_index_args.hpp	/^  typedef ::boost::hash<typename KeyFromValue::result_type> type;$/;"	t	struct:boost::multi_index::detail::index_args_default_hash	access:public
type	multi_index/detail/hash_index_args.hpp	/^  typedef std::equal_to<typename KeyFromValue::result_type> type;$/;"	t	struct:boost::multi_index::detail::index_args_default_pred	access:public
type	multi_index/detail/iter_adaptor.hpp	/^    typedef bidirectional_iter_adaptor_base<Derived,Base> type;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_selector::apply	access:public
type	multi_index/detail/iter_adaptor.hpp	/^    typedef forward_iter_adaptor_base<Derived,Base> type;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_selector::apply	access:public
type	multi_index/detail/iter_adaptor.hpp	/^    typedef random_access_iter_adaptor_base<Derived,Base> type;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_selector::apply	access:public
type	multi_index/detail/iter_adaptor.hpp	/^  >::type                                    type;$/;"	t	struct:boost::multi_index::detail::iter_adaptor_base	access:public
type	multi_index/detail/no_duplicate_tags.hpp	/^    > type;$/;"	t	struct:boost::multi_index::detail::duplicate_tag_marker::apply	access:public
type	multi_index/detail/node_type.hpp	/^  >::type type;$/;"	t	struct:boost::multi_index::detail::multi_index_node_type	access:public
type	multi_index/detail/ord_index_args.hpp	/^  typedef std::less<typename KeyFromValue::result_type> type;$/;"	t	struct:boost::multi_index::detail::index_args_default_compare	access:public
type	multi_index/detail/prevent_eti.hpp	/^  >::type type;$/;"	t	struct:boost::multi_index::detail::prevent_eti	access:public
type	multi_index/detail/scope_guard.hpp	/^    typedef typename boost::mpl::if_c<cond,T,null_guard>::type type;$/;"	t	struct:boost::multi_index::detail::null_guard_return	access:public
type	multi_index/detail/uintptr_type.hpp	/^  typedef uintptr_candidates<index>::type type;$/;"	t	struct:boost::multi_index::detail::uintptr_aux	access:public
type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<-1>{typedef unsigned int           type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<0> {typedef unsigned int           type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<1> {typedef unsigned short         type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<2> {typedef unsigned long          type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<3> {typedef boost::ulong_long_type type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<3> {typedef unsigned int           type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<4> {typedef unsigned __int64       type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
type	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<4> {typedef unsigned int           type;};$/;"	t	struct:boost::multi_index::detail::uintptr_candidates	access:public
type	multi_index/hashed_index.hpp	/^      SuperMeta,tag_list_type,detail::hashed_non_unique_tag> type;$/;"	t	struct:boost::multi_index::hashed_non_unique::index_class	access:public
type	multi_index/hashed_index.hpp	/^      SuperMeta,tag_list_type,detail::hashed_unique_tag> type;$/;"	t	struct:boost::multi_index::hashed_unique::index_class	access:public
type	multi_index/hashed_index.hpp	/^    typedef detail::hashed_index_node<Super> type;$/;"	t	struct:boost::multi_index::hashed_non_unique::node_class	access:public
type	multi_index/hashed_index.hpp	/^    typedef detail::hashed_index_node<Super> type;$/;"	t	struct:boost::multi_index::hashed_unique::node_class	access:public
type	multi_index/ordered_index.hpp	/^      SuperMeta,tag_list_type,detail::ordered_non_unique_tag> type;$/;"	t	struct:boost::multi_index::ordered_non_unique::index_class	access:public
type	multi_index/ordered_index.hpp	/^      SuperMeta,tag_list_type,detail::ordered_unique_tag> type;$/;"	t	struct:boost::multi_index::ordered_unique::index_class	access:public
type	multi_index/ordered_index.hpp	/^    typedef detail::ordered_index_node<Super> type;$/;"	t	struct:boost::multi_index::ordered_non_unique::node_class	access:public
type	multi_index/ordered_index.hpp	/^    typedef detail::ordered_index_node<Super> type;$/;"	t	struct:boost::multi_index::ordered_unique::node_class	access:public
type	multi_index/random_access_index.hpp	/^      SuperMeta,typename TagList::type>  type;$/;"	t	struct:boost::multi_index::random_access::index_class	access:public
type	multi_index/random_access_index.hpp	/^    typedef detail::random_access_index_node<Super> type;$/;"	t	struct:boost::multi_index::random_access::node_class	access:public
type	multi_index/sequenced_index.hpp	/^    typedef detail::sequenced_index<SuperMeta,typename TagList::type> type;$/;"	t	struct:boost::multi_index::sequenced::index_class	access:public
type	multi_index/sequenced_index.hpp	/^    typedef detail::sequenced_index_node<Super> type;$/;"	t	struct:boost::multi_index::sequenced::node_class	access:public
type	multi_index/tag.hpp	/^  >::type type;$/;"	t	struct:boost::multi_index::tag	access:public
uintptr_aux	multi_index/detail/uintptr_type.hpp	/^struct uintptr_aux$/;"	s	namespace:boost::multi_index::detail
uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<-1>{typedef unsigned int           type;};$/;"	s	namespace:boost::multi_index::detail
uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<0> {typedef unsigned int           type;};$/;"	s	namespace:boost::multi_index::detail
uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<1> {typedef unsigned short         type;};$/;"	s	namespace:boost::multi_index::detail
uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<2> {typedef unsigned long          type;};$/;"	s	namespace:boost::multi_index::detail
uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<3> {typedef boost::ulong_long_type type;};$/;"	s	namespace:boost::multi_index::detail
uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<3> {typedef unsigned int           type;};$/;"	s	namespace:boost::multi_index::detail
uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<4> {typedef unsigned __int64       type;};$/;"	s	namespace:boost::multi_index::detail
uintptr_candidates	multi_index/detail/uintptr_type.hpp	/^template<>struct uintptr_candidates<4> {typedef unsigned int           type;};$/;"	s	namespace:boost::multi_index::detail
uintptr_type	multi_index/detail/uintptr_type.hpp	/^typedef uintptr_aux::type                         uintptr_type;$/;"	t	namespace:boost::multi_index::detail
unbounded	multi_index/detail/unbounded.hpp	/^static detail::unbounded_type& unbounded=unbounded_obj;$/;"	m	namespace:boost::multi_index::__anon1
unbounded_obj	multi_index/detail/unbounded.hpp	/^static detail::unbounded_type  unbounded_obj=detail::unbounded_type();$/;"	m	namespace:boost::multi_index::__anon1
unbounded_type	multi_index/detail/unbounded.hpp	/^namespace detail{struct unbounded_type{};}$/;"	s	namespace:boost::multi_index::detail
uncheck	multi_index/detail/safe_mode.hpp	/^  void uncheck()$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:public	signature:()
unchecked	multi_index/detail/safe_mode.hpp	/^  bool unchecked()const{return unchecked_;}$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:public	signature:() const
unchecked_	multi_index/detail/safe_mode.hpp	/^  bool                 unchecked_;$/;"	m	class:boost::multi_index::detail::safe_iterator_base	access:protected
unchecked_load_node	multi_index/detail/index_loader.hpp	/^  FinalNode* unchecked_load_node(Archive& ar)const$/;"	f	class:boost::multi_index::detail::index_loader	access:private	signature:(Archive& ar) const
unchecked_rehash	multi_index/hashed_index.hpp	/^  void unchecked_rehash(size_type n)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(size_type n)
unique	multi_index/random_access_index.hpp	/^  void unique()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
unique	multi_index/random_access_index.hpp	/^  void unique(BinaryPredicate binary_pred)$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:(BinaryPredicate binary_pred)
unique	multi_index/sequenced_index.hpp	/^  void unique()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
unique	multi_index/sequenced_index.hpp	/^  void unique(BinaryPredicate binary_pred)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:(BinaryPredicate binary_pred)
unlink	multi_index/detail/hash_index_node.hpp	/^  static void unlink(pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer x)
unlink	multi_index/detail/seq_index_node.hpp	/^  static void unlink(pointer x)$/;"	f	struct:boost::multi_index::detail::sequenced_index_node_impl	access:public	signature:(pointer x)
unlink	multi_index/hashed_index.hpp	/^  static void unlink(node_type* x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_type* x)
unlink	multi_index/sequenced_index.hpp	/^  static void unlink(node_type* x)$/;"	f	class:boost::multi_index::detail::sequenced_index	access:private	signature:(node_type* x)
unlink_next	multi_index/detail/hash_index_node.hpp	/^  static void unlink_next(pointer x)$/;"	f	struct:boost::multi_index::detail::hashed_index_node_impl	access:public	signature:(pointer x)
unlink_next	multi_index/hashed_index.hpp	/^  static void unlink_next(node_impl_pointer x)$/;"	f	class:boost::multi_index::detail::hashed_index	access:private	signature:(node_impl_pointer x)
up	multi_index/detail/rnd_index_node.hpp	/^  impl_ptr_pointer  up()const{return trampoline::up();}$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:() const
up	multi_index/detail/rnd_index_node.hpp	/^  impl_ptr_pointer& up(){return trampoline::up();}$/;"	f	struct:boost::multi_index::detail::random_access_index_node	access:public	signature:()
up	multi_index/detail/rnd_index_node.hpp	/^  ptr_pointer  up()const{return up_;}$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:() const
up	multi_index/detail/rnd_index_node.hpp	/^  ptr_pointer& up(){return up_;}$/;"	f	struct:boost::multi_index::detail::random_access_index_node_impl	access:public	signature:()
up_	multi_index/detail/rnd_index_node.hpp	/^  ptr_pointer up_;$/;"	m	struct:boost::multi_index::detail::random_access_index_node_impl	access:private
upper_bound	multi_index/ordered_index.hpp	/^  iterator upper_bound($/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:( const CompatibleKey& x,const CompatibleCompare& comp) const
upper_bound	multi_index/ordered_index.hpp	/^  iterator upper_bound(const CompatibleKey& x)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:(const CompatibleKey& x) const
upper_range	multi_index/ordered_index.hpp	/^  node_type * upper_range(node_type* top,node_type* y,UpperBounder upper)const$/;"	f	class:boost::multi_index::detail::ordered_index	access:private	signature:(node_type* top,node_type* y,UpperBounder upper) const
upper_unbounded_tag	multi_index/detail/unbounded.hpp	/^struct upper_unbounded_tag{};$/;"	s	namespace:boost::multi_index::detail
valid	multi_index/detail/safe_mode.hpp	/^  bool valid()const{return cont!=0;}$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:public	signature:() const
value	multi_index/detail/index_node_base.hpp	/^  const value_type& value()const$/;"	f	struct:boost::multi_index::detail::index_node_base	access:public	signature:() const
value	multi_index/detail/index_node_base.hpp	/^  value_type& value()$/;"	f	struct:boost::multi_index::detail::index_node_base	access:public	signature:()
value	multi_index/detail/serialization_version.hpp	/^  unsigned int value;$/;"	m	struct:boost::multi_index::detail::serialization_version	access:private
value_comp	multi_index/ordered_index.hpp	/^  value_compare  value_comp()const{return value_compare(key,comp_);}$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:() const
value_compare	multi_index/ordered_index.hpp	/^    value_type,KeyFromValue,Compare>                 value_compare;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
value_comparison	multi_index/detail/value_compare.hpp	/^  value_comparison($/;"	f	struct:boost::multi_index::detail::value_comparison	access:public	signature:( const KeyFromValue& key_=KeyFromValue(),const Compare& comp_=Compare())
value_comparison	multi_index/detail/value_compare.hpp	/^struct value_comparison:std::binary_function<Value,Value,bool>$/;"	s	namespace:boost::multi_index::detail	inherits:std::binary_function
value_param_type	multi_index/hashed_index.hpp	/^  typedef typename call_traits<value_type>::param_type value_param_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:private
value_param_type	multi_index/ordered_index.hpp	/^    value_type>::param_type                          value_param_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:private
value_param_type	multi_index/random_access_index.hpp	/^    value_type>::param_type                   value_param_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:private
value_param_type	multi_index/sequenced_index.hpp	/^  typedef typename call_traits<value_type>::param_type value_param_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:private
value_type	multi_index/detail/duplicates_iterator.hpp	/^  typedef typename Node::value_type        value_type;$/;"	t	class:boost::multi_index::detail::duplicates_iterator	access:public
value_type	multi_index/detail/index_base.hpp	/^  typedef Value                               value_type;$/;"	t	class:boost::multi_index::detail::index_base	access:private
value_type	multi_index/detail/index_node_base.hpp	/^  typedef Value           value_type;$/;"	t	struct:boost::multi_index::detail::index_node_base	access:public
value_type	multi_index/detail/rnd_index_ptr_array.hpp	/^  typedef typename node_impl_type::pointer          value_type;$/;"	t	class:boost::multi_index::detail::random_access_index_ptr_array	access:public
value_type	multi_index/hashed_index.hpp	/^  typedef typename node_type::value_type             value_type;$/;"	t	class:boost::multi_index::detail::hashed_index	access:public
value_type	multi_index/ordered_index.hpp	/^  typedef typename node_type::value_type             value_type;$/;"	t	class:boost::multi_index::detail::ordered_index	access:public
value_type	multi_index/random_access_index.hpp	/^  typedef typename node_type::value_type           value_type;$/;"	t	class:boost::multi_index::detail::random_access_index	access:public
value_type	multi_index/sequenced_index.hpp	/^  typedef typename node_type::value_type              value_type;$/;"	t	class:boost::multi_index::detail::sequenced_index	access:public
version	multi_index/detail/serialization_version.hpp	/^struct version<boost::multi_index::detail::serialization_version<T> >$/;"	s	namespace:boost::serialization
~archive_constructed	multi_index/detail/archive_constructed.hpp	/^  ~archive_constructed()$/;"	f	struct:boost::multi_index::detail::archive_constructed	access:public	signature:()
~auto_space	multi_index/detail/auto_space.hpp	/^  ~auto_space()$/;"	f	struct:boost::multi_index::detail::auto_space	access:public	signature:()
~copy_map	multi_index/detail/copy_map.hpp	/^  ~copy_map()$/;"	f	class:boost::multi_index::detail::copy_map	access:public	signature:()
~hashed_index	multi_index/hashed_index.hpp	/^  ~hashed_index()$/;"	f	class:boost::multi_index::detail::hashed_index	access:public	signature:()
~header_holder	multi_index/detail/header_holder.hpp	/^  ~header_holder(){final().deallocate_node(&*member);}$/;"	f	struct:boost::multi_index::detail::header_holder	access:public	signature:()
~obj_scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^  ~obj_scope_guard_impl0(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl0	access:public	signature:()
~obj_scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^  ~obj_scope_guard_impl1(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl1	access:public	signature:()
~obj_scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^  ~obj_scope_guard_impl2(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl2	access:public	signature:()
~obj_scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^  ~obj_scope_guard_impl3(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::obj_scope_guard_impl3	access:public	signature:()
~ordered_index	multi_index/ordered_index.hpp	/^  ~ordered_index()$/;"	f	class:boost::multi_index::detail::ordered_index	access:public	signature:()
~random_access_index	multi_index/random_access_index.hpp	/^  ~random_access_index()$/;"	f	class:boost::multi_index::detail::random_access_index	access:public	signature:()
~random_access_index_loader_base	multi_index/detail/rnd_index_loader.hpp	/^  ~random_access_index_loader_base()$/;"	f	class:boost::multi_index::detail::random_access_index_loader_base	access:protected	signature:()
~safe_container_base	multi_index/detail/safe_mode.hpp	/^  ~safe_container_base()$/;"	f	class:boost::multi_index::detail::safe_container_base	access:public	signature:()
~safe_iterator_base	multi_index/detail/safe_mode.hpp	/^  ~safe_iterator_base()$/;"	f	class:boost::multi_index::detail::safe_iterator_base	access:protected	signature:()
~scope_guard_impl0	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl0(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl0	access:public	signature:()
~scope_guard_impl1	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl1(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl1	access:public	signature:()
~scope_guard_impl2	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl2(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl2	access:public	signature:()
~scope_guard_impl3	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl3(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl3	access:public	signature:()
~scope_guard_impl4	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl4(){scope_guard_impl_base::safe_execute(*this);}$/;"	f	class:boost::multi_index::detail::scope_guard_impl4	access:public	signature:()
~scope_guard_impl_base	multi_index/detail/scope_guard.hpp	/^  ~scope_guard_impl_base(){}$/;"	f	class:boost::multi_index::detail::scope_guard_impl_base	access:protected	signature:()
~sequenced_index	multi_index/sequenced_index.hpp	/^  ~sequenced_index()$/;"	f	class:boost::multi_index::detail::sequenced_index	access:public	signature:()
