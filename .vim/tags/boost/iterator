!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANY_CONVERSION_EATER_DWA20031117_HPP	iterator/detail/any_conversion_eater.hpp	5;"	d
BOOST_ARG_DEPENDENT_TYPENAME	iterator/detail/config_def.hpp	120;"	d
BOOST_ARG_DEPENDENT_TYPENAME	iterator/detail/config_def.hpp	122;"	d
BOOST_ARG_DEPENDENT_TYPENAME	iterator/detail/config_undef.hpp	17;"	d
BOOST_CONCEPT_USAGE	iterator/iterator_concepts.hpp	/^      BOOST_CONCEPT_USAGE(WritableIterator)$/;"	f	struct:boost_concepts::WritableIterator	access:public	signature:(WritableIterator)
BOOST_ENABLE_IF_23022003THW_HPP	iterator/detail/enable_if.hpp	8;"	d
BOOST_FILTER_ITERATOR_23022003THW_HPP	iterator/filter_iterator.hpp	8;"	d
BOOST_FUNCTION_INPUT_ITERATOR	iterator/function_input_iterator.hpp	10;"	d
BOOST_INDIRECT_ITERATOR_23022003THW_HPP	iterator/indirect_iterator.hpp	8;"	d
BOOST_INTEROPERABLE_23022003THW_HPP	iterator/interoperable.hpp	8;"	d
BOOST_ITERATOR_ADAPTOR_23022003THW_HPP	iterator/iterator_adaptor.hpp	8;"	d
BOOST_ITERATOR_ADAPTOR_ASSERT_TRAVERSAL	iterator/iterator_adaptor.hpp	324;"	d
BOOST_ITERATOR_ADAPTOR_ASSERT_TRAVERSAL	iterator/iterator_adaptor.hpp	355;"	d
BOOST_ITERATOR_ARCHETYPES_HPP	iterator/iterator_archetypes.hpp	7;"	d
BOOST_ITERATOR_CATEGORIES_HPP	iterator/iterator_categories.hpp	7;"	d
BOOST_ITERATOR_CATEGORY	iterator/iterator_traits.hpp	/^struct BOOST_ITERATOR_CATEGORY$/;"	s	namespace:boost
BOOST_ITERATOR_CATEGORY	iterator/iterator_traits.hpp	/^struct BOOST_ITERATOR_CATEGORY<int>$/;"	s	namespace:boost
BOOST_ITERATOR_CATEGORY	iterator/iterator_traits.hpp	21;"	d
BOOST_ITERATOR_CONCEPTS_HPP	iterator/iterator_concepts.hpp	7;"	d
BOOST_ITERATOR_CONFIG_DEF	iterator/detail/config_def.hpp	22;"	d
BOOST_ITERATOR_CONFIG_DEF	iterator/detail/config_undef.hpp	22;"	d
BOOST_ITERATOR_CONVERTIBLE	iterator/iterator_facade.hpp	805;"	d
BOOST_ITERATOR_CONVERTIBLE	iterator/iterator_facade.hpp	807;"	d
BOOST_ITERATOR_FACADE_23022003THW_HPP	iterator/iterator_facade.hpp	8;"	d
BOOST_ITERATOR_FACADE_INTEROP	iterator/iterator_facade.hpp	810;"	d
BOOST_ITERATOR_FACADE_INTEROP	iterator/iterator_facade.hpp	848;"	d
BOOST_ITERATOR_FACADE_INTEROP_HEAD	iterator/iterator_facade.hpp	432;"	d
BOOST_ITERATOR_FACADE_INTEROP_HEAD	iterator/iterator_facade.hpp	849;"	d
BOOST_ITERATOR_FACADE_NEEDS_ITERATOR_BASE	iterator/iterator_facade.hpp	125;"	d
BOOST_ITERATOR_FACADE_NEEDS_ITERATOR_BASE	iterator/iterator_facade.hpp	597;"	d
BOOST_ITERATOR_FACADE_PLUS	iterator/iterator_facade.hpp	851;"	d
BOOST_ITERATOR_FACADE_PLUS	iterator/iterator_facade.hpp	867;"	d
BOOST_ITERATOR_FACADE_PLUS_HEAD	iterator/iterator_facade.hpp	456;"	d
BOOST_ITERATOR_FACADE_PLUS_HEAD	iterator/iterator_facade.hpp	868;"	d
BOOST_ITERATOR_FACADE_RELATION	iterator/iterator_facade.hpp	824;"	d
BOOST_ITERATOR_FACADE_RELATION	iterator/iterator_facade.hpp	839;"	d
BOOST_ITERATOR_REF_CONSTNESS_KILLS_WRITABILITY	iterator/detail/config_def.hpp	45;"	d
BOOST_LVALUE_PRESERVER	iterator/is_lvalue_iterator.hpp	36;"	d
BOOST_LVALUE_PRESERVER	iterator/is_lvalue_iterator.hpp	77;"	d
BOOST_MPL_ASSERT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT((is_iterator_category<Category>));$/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:(is_iterator_category<Category>)
BOOST_MPL_ASSERT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT((is_iterator_traversal<Traversal>));$/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:(is_iterator_traversal<Traversal>)
BOOST_MPL_ASSERT_NOT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT_NOT(($/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:( is_convertible< typename iterator_category_to_traversal<Category>::type , Traversal >)
BOOST_MPL_ASSERT_NOT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT_NOT((is_iterator_category<Traversal>));$/;"	p	struct:boost::detail::facade_iterator_category_impl	access:public	signature:(is_iterator_category<Traversal>)
BOOST_MPL_ASSERT_NOT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT_NOT((is_iterator_category<Traversal>));$/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:(is_iterator_category<Traversal>)
BOOST_MPL_ASSERT_NOT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT_NOT((is_iterator_traversal<Category>));$/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:(is_iterator_traversal<Category>)
BOOST_NEW_ITERATOR_TESTS_HPP	iterator/new_iterator_tests.hpp	2;"	d
BOOST_NO_IS_CONVERTIBLE	iterator/detail/config_def.hpp	88;"	d
BOOST_NO_IS_CONVERTIBLE	iterator/detail/config_undef.hpp	14;"	d
BOOST_NO_IS_CONVERTIBLE_TEMPLATE	iterator/detail/config_def.hpp	94;"	d
BOOST_NO_IS_CONVERTIBLE_TEMPLATE	iterator/detail/config_undef.hpp	15;"	d
BOOST_NO_LVALUE_RETURN_DETECTION	iterator/detail/config_def.hpp	55;"	d
BOOST_NO_LVALUE_RETURN_DETECTION	iterator/detail/config_undef.hpp	18;"	d
BOOST_NO_ONE_WAY_ITERATOR_INTEROP	iterator/detail/config_def.hpp	134;"	d
BOOST_NO_ONE_WAY_ITERATOR_INTEROP	iterator/detail/config_undef.hpp	19;"	d
BOOST_NO_STRICT_ITERATOR_INTEROPERABILITY	iterator/detail/config_def.hpp	116;"	d
BOOST_NO_STRICT_ITERATOR_INTEROPERABILITY	iterator/detail/config_undef.hpp	16;"	d
BOOST_PERMUTATION_ITERATOR_HPP	iterator/permutation_iterator.hpp	9;"	d
BOOST_READABLE_PRESERVER	iterator/is_readable_iterator.hpp	46;"	d
BOOST_REVERSE_ITERATOR_23022003THW_HPP	iterator/reverse_iterator.hpp	8;"	d
BOOST_STATIC_ASSERT	iterator/counting_iterator.hpp	/^      BOOST_STATIC_ASSERT(::boost::is_integral<char>::value);$/;"	p	struct:boost::detail::is_numeric_impl	access:public	signature:(::boost::is_integral<char>::value)
BOOST_STATIC_ASSERT	iterator/counting_iterator.hpp	/^  BOOST_STATIC_ASSERT(is_numeric<int>::value);$/;"	p	namespace:boost::detail	signature:(is_numeric<int>::value)
BOOST_STATIC_ASSERT	iterator/detail/minimum_category.hpp	/^        BOOST_STATIC_ASSERT((is_same<T1,T2>::value));$/;"	p	struct:boost::detail::minimum_category_impl::apply	access:public	signature:(is_same<T1,T2>::value)
BOOST_STATIC_ASSERT	iterator/iterator_archetypes.hpp	/^        BOOST_STATIC_ASSERT((!is_const<Value>::value));$/;"	p	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:(!is_const<Value>::value)
BOOST_STATIC_CONSTANT	iterator/counting_iterator.hpp	/^      BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::is_numeric_impl	access:public	signature:( bool, value = ( boost::is_convertible<int,T>::value && boost::is_convertible<T,int>::value ))
BOOST_STATIC_CONSTANT	iterator/counting_iterator.hpp	/^      BOOST_STATIC_CONSTANT(bool, value = std::numeric_limits<T>::is_specialized);$/;"	p	struct:boost::detail::is_numeric_impl	access:public	signature:(bool, value = std::numeric_limits<T>::is_specialized)
BOOST_STATIC_CONSTANT	iterator/counting_iterator.hpp	/^    BOOST_STATIC_CONSTANT(bool, value = ::boost::is_arithmetic<T>::value);$/;"	p	struct:boost::detail::is_numeric_impl	access:public	signature:(bool, value = ::boost::is_arithmetic<T>::value)
BOOST_STATIC_CONSTANT	iterator/is_lvalue_iterator.hpp	/^          BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::is_lvalue_iterator_impl::rebind	access:public	signature:( bool , value = ( sizeof( is_lvalue_iterator_impl<Value>::tester( BOOST_LVALUE_PRESERVER(*x), 0 ) ) == 1 ) )
BOOST_STATIC_CONSTANT	iterator/is_readable_iterator.hpp	/^          BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::is_readable_iterator_impl::rebind	access:public	signature:( bool , value = ( sizeof( is_readable_iterator_impl<Value>::tester(*x, 1) ) == 1 ) )
BOOST_STATIC_CONSTANT	iterator/iterator_facade.hpp	/^        BOOST_STATIC_CONSTANT(bool, value = sizeof(helper(r)) == 1);$/;"	p	struct:boost::detail::is_non_proxy_reference_impl	access:public	signature:(bool, value = sizeof(helper(r)) == 1)
BOOST_TRANSFORM_ITERATOR_23022003THW_HPP	iterator/transform_iterator.hpp	8;"	d
BOOST_TUPLE_ALGO	iterator/zip_iterator.hpp	195;"	d
BOOST_TUPLE_ALGO	iterator/zip_iterator.hpp	199;"	d
BOOST_TUPLE_ALGO_DISPATCH	iterator/zip_iterator.hpp	194;"	d
BOOST_TUPLE_ALGO_RECURSE	iterator/zip_iterator.hpp	197;"	d
BOOST_TUPLE_ALGO_RECURSE	iterator/zip_iterator.hpp	201;"	d
BOOST_TUPLE_ALGO_TERMINATOR	iterator/zip_iterator.hpp	196;"	d
BOOST_TUPLE_ALGO_TERMINATOR	iterator/zip_iterator.hpp	200;"	d
BOOST_ZIP_ITERATOR_TMB_07_13_2003_HPP_	iterator/zip_iterator.hpp	7;"	d
BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(BidirectionalTraversal,(Iterator))$/;"	f	namespace:boost_concepts	signature:(BidirectionalTraversal,(Iterator))
BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(ForwardTraversal,(Iterator))$/;"	f	namespace:boost_concepts	signature:(ForwardTraversal,(Iterator))
BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(IncrementableIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(IncrementableIterator,(Iterator))
BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(InteroperableIterator,(Iterator)(ConstIterator))$/;"	f	namespace:boost_concepts	signature:(InteroperableIterator,(Iterator)(ConstIterator))
BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(LvalueIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(LvalueIterator,(Iterator))
BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(RandomAccessTraversal,(Iterator))$/;"	f	namespace:boost_concepts	signature:(RandomAccessTraversal,(Iterator))
BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(ReadableIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(ReadableIterator,(Iterator))
BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(SinglePassIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(SinglePassIterator,(Iterator))
BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(SwappableIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(SwappableIterator,(Iterator))
COUNTING_ITERATOR_DWA200348_HPP	iterator/counting_iterator.hpp	6;"	d
FACADE_ITERATOR_CATEGORY_DWA20031118_HPP	iterator/detail/facade_iterator_category.hpp	5;"	d
IS_LVALUE_ITERATOR_DWA2003112_HPP	iterator/is_lvalue_iterator.hpp	5;"	d
IS_READABLE_ITERATOR_DWA2003112_HPP	iterator/is_readable_iterator.hpp	5;"	d
ITERATOR_TRAITS_DWA200347_HPP	iterator/iterator_traits.hpp	6;"	d
MINIMUM_CATEGORY_DWA20031119_HPP	iterator/detail/minimum_category.hpp	5;"	d
WritableIterator	iterator/iterator_concepts.hpp	/^  struct WritableIterator$/;"	s	namespace:boost_concepts	inherits:boost::CopyConstructible
WritableIteratorConcept	iterator/iterator_concepts.hpp	/^  struct WritableIteratorConcept : WritableIterator<Iterator,ValueType> {};$/;"	s	namespace:boost_concepts	inherits:WritableIterator
access	iterator/iterator_archetypes.hpp	/^      typedef iterator_access_archetype<Value, AccessCategory> access;$/;"	t	struct:boost::detail::iterator_archetype_base	access:public
advance	iterator/iterator_adaptor.hpp	/^      void advance(typename super_t::difference_type n)$/;"	f	class:boost::iterator_adaptor	access:private	signature:(typename super_t::difference_type n)
advance	iterator/iterator_facade.hpp	/^      static void advance(Facade& f, typename Facade::difference_type n)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade& f, typename Facade::difference_type n)
advance	iterator/reverse_iterator.hpp	/^      void advance(typename super_t::difference_type n)$/;"	f	class:boost::reverse_iterator	access:private	signature:(typename super_t::difference_type n)
advance	iterator/zip_iterator.hpp	/^    void advance(typename super_t::difference_type n)$/;"	f	class:boost::zip_iterator	access:private	signature:(typename super_t::difference_type n)
advance_iterator	iterator/zip_iterator.hpp	/^      advance_iterator(DiffType step) : m_step(step) {}$/;"	f	class:boost::detail::advance_iterator	access:public	signature:(DiffType step)
advance_iterator	iterator/zip_iterator.hpp	/^    class advance_iterator$/;"	c	namespace:boost::detail
always_bool2	iterator/iterator_facade.hpp	/^    struct always_bool2$/;"	s	namespace:boost::detail
and_with_two_args	iterator/zip_iterator.hpp	/^      struct and_with_two_args$/;"	s	namespace:boost::detail	inherits:mpl::and_
and_with_two_args	iterator/zip_iterator.hpp	/^      struct and_with_two_args<mpl::_1,mpl::_2>$/;"	s	namespace:boost::detail
any_conversion_eater	iterator/detail/any_conversion_eater.hpp	/^    any_conversion_eater(T const&);$/;"	p	struct:boost::detail::any_conversion_eater	access:public	signature:(T const&)
any_conversion_eater	iterator/detail/any_conversion_eater.hpp	/^struct any_conversion_eater$/;"	s	namespace:boost::detail
apply	iterator/detail/minimum_category.hpp	/^    struct apply : minimum_category<T1,T2>$/;"	s	struct:boost::detail::minimum_category	inherits:minimum_category	access:public
apply	iterator/detail/minimum_category.hpp	/^    template <class T1, class T2> struct apply$/;"	s	struct:boost::detail::minimum_category_impl	access:public
apply	iterator/detail/minimum_category.hpp	/^    template <class T1, class T2> struct apply$/;"	s	struct:boost::detail::minimum_category_impl	inherits:error_not_related_by_convertibility	access:public
apply	iterator/iterator_categories.hpp	/^    struct apply : iterator_traversal<T>$/;"	s	struct:boost::iterator_traversal	inherits:iterator_traversal	access:public
apply	iterator/iterator_facade.hpp	/^        static result_type apply(Reference const & x)$/;"	f	struct:boost::detail::operator_arrow_dispatch	access:public	signature:(Reference const & x)
apply	iterator/iterator_facade.hpp	/^        static result_type apply(T& x)$/;"	f	struct:boost::detail::operator_arrow_dispatch	access:public	signature:(T& x)
apply	iterator/iterator_facade.hpp	/^        struct apply$/;"	s	struct:boost::detail::always_bool2	access:public
apply	iterator/iterator_facade.hpp	/^        struct apply$/;"	s	struct:boost::detail::choose_difference_type	inherits:iterator_difference	access:public
apply	iterator/zip_iterator.hpp	/^          struct apply : mpl::and_<A1,A2>$/;"	s	struct:boost::detail::and_with_two_args	inherits:mpl::and_	access:public
apply	iterator/zip_iterator.hpp	/^        struct apply : iterator_reference<T> {};$/;"	s	struct:boost::detail::iterator_reference	inherits:iterator_reference	access:public
apply	iterator/zip_iterator.hpp	/^      struct apply$/;"	s	struct:boost::detail::dereference_iterator	access:public
archetype	iterator/iterator_archetypes.hpp	/^          archetype() $/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:()
archetype	iterator/iterator_archetypes.hpp	/^          explicit archetype(ctor_arg arg)$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(ctor_arg arg)
archetype	iterator/iterator_archetypes.hpp	/^          explicit archetype(ctor_arg) {}$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(ctor_arg)
archetype	iterator/iterator_archetypes.hpp	/^      struct archetype$/;"	s	struct:boost::detail::traversal_archetype_impl	access:public
archetype	iterator/iterator_archetypes.hpp	/^      struct archetype$/;"	s	struct:boost::detail::traversal_archetype_impl	inherits:equality_comparable,traversal_archetype_	access:public
archetype	iterator/iterator_archetypes.hpp	/^      struct archetype$/;"	s	struct:boost::detail::traversal_archetype_impl	inherits:traversal_archetype_	access:public
archetype	iterator/iterator_archetypes.hpp	/^    struct archetype$/;"	s	struct:boost::iterator_access_archetype_impl	access:public
archetype	iterator/iterator_archetypes.hpp	/^    struct archetype$/;"	s	struct:boost::iterator_access_archetype_impl	inherits:iterator_access_archetype	access:public
arrow_proxy	iterator/iterator_archetypes.hpp	/^  struct arrow_proxy$/;"	s	namespace:boost::detail
assign_proxy	iterator/iterator_archetypes.hpp	/^  struct assign_proxy$/;"	s	namespace:boost::detail
associated_types	iterator/iterator_facade.hpp	/^      > associated_types;$/;"	t	class:boost::iterator_facade	access:private
base	iterator/detail/enable_if.hpp	/^      struct base$/;"	s	struct:boost::iterators::enabled	access:public
base	iterator/iterator_adaptor.hpp	/^      Base const& base() const$/;"	f	class:boost::iterator_adaptor	access:public	signature:() const
base	iterator/iterator_archetypes.hpp	/^      base;$/;"	t	struct:boost::detail::traversal_archetype_	access:public
base	iterator/iterator_archetypes.hpp	/^    > base;$/;"	t	struct:boost::iterator_archetype	access:public
base	iterator/iterator_facade.hpp	/^        base;$/;"	t	struct:boost::detail::iterator_facade_types	access:public
base_reference	iterator/iterator_adaptor.hpp	/^      Base const& base_reference() const$/;"	f	class:boost::iterator_adaptor	access:protected	signature:() const
base_reference	iterator/iterator_adaptor.hpp	/^      Base& base_reference()$/;"	f	class:boost::iterator_adaptor	access:protected	signature:()
base_type	iterator/function_input_iterator.hpp	/^        >::type base_type;$/;"	t	class:boost::function_input_iterator	access:private
base_type	iterator/iterator_adaptor.hpp	/^      typedef Base base_type;$/;"	t	class:boost::iterator_adaptor	access:public
bidirectional_readable_iterator_test	iterator/new_iterator_tests.hpp	/^void bidirectional_readable_iterator_test(Iterator i, T v1, T v2)$/;"	f	namespace:boost	signature:(Iterator i, T v1, T v2)
bidirectional_traversal_tag	iterator/iterator_categories.hpp	/^struct bidirectional_traversal_tag$/;"	s	namespace:boost	inherits:forward_traversal_tag
bogus	iterator/iterator_archetypes.hpp	/^          struct bogus { }; \/\/ This use to be void, but that causes trouble for iterator_facade. Need more research. -JGS$/;"	s	struct:boost::detail::traversal_archetype_impl::archetype	access:public
boost	iterator/counting_iterator.hpp	/^namespace boost {$/;"	n
boost	iterator/detail/any_conversion_eater.hpp	/^namespace boost { namespace detail {$/;"	n
boost	iterator/detail/enable_if.hpp	/^namespace boost$/;"	n
boost	iterator/detail/facade_iterator_category.hpp	/^namespace boost { namespace detail  {$/;"	n
boost	iterator/detail/facade_iterator_category.hpp	/^namespace boost { struct use_default; }$/;"	n
boost	iterator/detail/minimum_category.hpp	/^namespace boost { namespace detail { $/;"	n
boost	iterator/filter_iterator.hpp	/^namespace boost$/;"	n
boost	iterator/function_input_iterator.hpp	/^namespace boost {$/;"	n
boost	iterator/indirect_iterator.hpp	/^namespace boost$/;"	n
boost	iterator/interoperable.hpp	/^namespace boost$/;"	n
boost	iterator/is_lvalue_iterator.hpp	/^namespace boost {$/;"	n
boost	iterator/is_readable_iterator.hpp	/^namespace boost {$/;"	n
boost	iterator/iterator_adaptor.hpp	/^namespace boost$/;"	n
boost	iterator/iterator_archetypes.hpp	/^namespace boost {$/;"	n
boost	iterator/iterator_categories.hpp	/^namespace boost {$/;"	n
boost	iterator/iterator_facade.hpp	/^namespace boost$/;"	n
boost	iterator/iterator_traits.hpp	/^namespace boost { $/;"	n
boost	iterator/new_iterator_tests.hpp	/^namespace boost {$/;"	n
boost	iterator/permutation_iterator.hpp	/^namespace boost$/;"	n
boost	iterator/reverse_iterator.hpp	/^namespace boost$/;"	n
boost	iterator/transform_iterator.hpp	/^namespace boost$/;"	n
boost	iterator/zip_iterator.hpp	/^namespace boost {$/;"	n
boost::BOOST_ITERATOR_CATEGORY	iterator/iterator_traits.hpp	/^struct BOOST_ITERATOR_CATEGORY$/;"	s	namespace:boost
boost::BOOST_ITERATOR_CATEGORY	iterator/iterator_traits.hpp	/^struct BOOST_ITERATOR_CATEGORY<int>$/;"	s	namespace:boost
boost::BOOST_ITERATOR_CATEGORY::type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::iterator_category type;$/;"	t	struct:boost::BOOST_ITERATOR_CATEGORY	access:public
boost::BOOST_ITERATOR_CATEGORY::type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::BOOST_ITERATOR_CATEGORY	access:public
boost::bidirectional_readable_iterator_test	iterator/new_iterator_tests.hpp	/^void bidirectional_readable_iterator_test(Iterator i, T v1, T v2)$/;"	f	namespace:boost	signature:(Iterator i, T v1, T v2)
boost::bidirectional_traversal_tag	iterator/iterator_categories.hpp	/^struct bidirectional_traversal_tag$/;"	s	namespace:boost	inherits:forward_traversal_tag
boost::constant_lvalue_iterator_test	iterator/new_iterator_tests.hpp	/^void constant_lvalue_iterator_test(Iterator i, T v1)$/;"	f	namespace:boost	signature:(Iterator i, T v1)
boost::counting_iterator	iterator/counting_iterator.hpp	/^class counting_iterator$/;"	c	namespace:boost	inherits:detail::counting_iterator_base::type
boost::counting_iterator::counting_iterator	iterator/counting_iterator.hpp	/^    counting_iterator() { }$/;"	f	class:boost::counting_iterator	access:public	signature:()
boost::counting_iterator::counting_iterator	iterator/counting_iterator.hpp	/^    counting_iterator(Incrementable x)$/;"	f	class:boost::counting_iterator	access:public	signature:(Incrementable x)
boost::counting_iterator::counting_iterator	iterator/counting_iterator.hpp	/^    counting_iterator(counting_iterator const& rhs) : super_t(rhs.base()) {}$/;"	f	class:boost::counting_iterator	access:public	signature:(counting_iterator const& rhs)
boost::counting_iterator::dereference	iterator/counting_iterator.hpp	/^    typename super_t::reference dereference() const$/;"	f	class:boost::counting_iterator	access:private	signature:() const
boost::counting_iterator::difference_type	iterator/counting_iterator.hpp	/^    typedef typename super_t::difference_type difference_type;$/;"	t	class:boost::counting_iterator	access:public
boost::counting_iterator::distance_to	iterator/counting_iterator.hpp	/^    distance_to(counting_iterator<OtherIncrementable, CategoryOrTraversal, Difference> const& y) const$/;"	f	class:boost::counting_iterator	access:private	signature:(counting_iterator<OtherIncrementable, CategoryOrTraversal, Difference> const& y) const
boost::counting_iterator::super_t	iterator/counting_iterator.hpp	/^    >::type super_t;$/;"	t	class:boost::counting_iterator	access:private
boost::detail	iterator/counting_iterator.hpp	/^namespace detail$/;"	n	namespace:boost
boost::detail	iterator/detail/any_conversion_eater.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
boost::detail	iterator/detail/facade_iterator_category.hpp	/^namespace boost { namespace detail  {$/;"	n	namespace:boost
boost::detail	iterator/detail/minimum_category.hpp	/^namespace boost { namespace detail { $/;"	n	namespace:boost
boost::detail	iterator/filter_iterator.hpp	/^  namespace detail$/;"	n	namespace:boost
boost::detail	iterator/indirect_iterator.hpp	/^  namespace detail$/;"	n	namespace:boost
boost::detail	iterator/is_lvalue_iterator.hpp	/^namespace detail$/;"	n	namespace:boost
boost::detail	iterator/is_readable_iterator.hpp	/^namespace detail$/;"	n	namespace:boost
boost::detail	iterator/iterator_adaptor.hpp	/^  namespace detail$/;"	n	namespace:boost
boost::detail	iterator/iterator_archetypes.hpp	/^namespace detail$/;"	n	namespace:boost
boost::detail	iterator/iterator_categories.hpp	/^namespace detail$/;"	n	namespace:boost
boost::detail	iterator/iterator_facade.hpp	/^  namespace detail$/;"	n	namespace:boost
boost::detail	iterator/transform_iterator.hpp	/^  namespace detail $/;"	n	namespace:boost
boost::detail	iterator/zip_iterator.hpp	/^  namespace detail$/;"	n	namespace:boost
boost::detail::BOOST_STATIC_ASSERT	iterator/counting_iterator.hpp	/^  BOOST_STATIC_ASSERT(is_numeric<int>::value);$/;"	p	namespace:boost::detail	signature:(is_numeric<int>::value)
boost::detail::advance_iterator	iterator/zip_iterator.hpp	/^    class advance_iterator$/;"	c	namespace:boost::detail
boost::detail::advance_iterator::advance_iterator	iterator/zip_iterator.hpp	/^      advance_iterator(DiffType step) : m_step(step) {}$/;"	f	class:boost::detail::advance_iterator	access:public	signature:(DiffType step)
boost::detail::advance_iterator::m_step	iterator/zip_iterator.hpp	/^      DiffType m_step;$/;"	m	class:boost::detail::advance_iterator	access:private
boost::detail::advance_iterator::operator ()	iterator/zip_iterator.hpp	/^      void operator()(Iterator& it) const$/;"	f	class:boost::detail::advance_iterator	access:public	signature:(Iterator& it) const
boost::detail::always_bool2	iterator/iterator_facade.hpp	/^    struct always_bool2$/;"	s	namespace:boost::detail
boost::detail::always_bool2::apply	iterator/iterator_facade.hpp	/^        struct apply$/;"	s	struct:boost::detail::always_bool2	access:public
boost::detail::always_bool2::apply::type	iterator/iterator_facade.hpp	/^            typedef bool type;$/;"	t	struct:boost::detail::always_bool2::apply	access:public
boost::detail::and_with_two_args	iterator/zip_iterator.hpp	/^      struct and_with_two_args$/;"	s	namespace:boost::detail	inherits:mpl::and_
boost::detail::and_with_two_args	iterator/zip_iterator.hpp	/^      struct and_with_two_args<mpl::_1,mpl::_2>$/;"	s	namespace:boost::detail
boost::detail::and_with_two_args::apply	iterator/zip_iterator.hpp	/^          struct apply : mpl::and_<A1,A2>$/;"	s	struct:boost::detail::and_with_two_args	inherits:mpl::and_	access:public
boost::detail::any_conversion_eater	iterator/detail/any_conversion_eater.hpp	/^struct any_conversion_eater$/;"	s	namespace:boost::detail
boost::detail::any_conversion_eater::any_conversion_eater	iterator/detail/any_conversion_eater.hpp	/^    any_conversion_eater(T const&);$/;"	p	struct:boost::detail::any_conversion_eater	access:public	signature:(T const&)
boost::detail::arrow_proxy	iterator/iterator_archetypes.hpp	/^  struct arrow_proxy$/;"	s	namespace:boost::detail
boost::detail::arrow_proxy::operator ->	iterator/iterator_archetypes.hpp	/^      T const* operator->() const { return 0; }$/;"	f	struct:boost::detail::arrow_proxy	access:public	signature:() const
boost::detail::assign_proxy	iterator/iterator_archetypes.hpp	/^  struct assign_proxy$/;"	s	namespace:boost::detail
boost::detail::assign_proxy::operator =	iterator/iterator_archetypes.hpp	/^      assign_proxy& operator=(T) { return *this; }$/;"	f	struct:boost::detail::assign_proxy	access:public	signature:(T)
boost::detail::choose_difference_type	iterator/iterator_facade.hpp	/^    struct choose_difference_type$/;"	s	namespace:boost::detail
boost::detail::choose_difference_type::apply	iterator/iterator_facade.hpp	/^        struct apply$/;"	s	struct:boost::detail::choose_difference_type	inherits:iterator_difference	access:public
boost::detail::convertible_type	iterator/iterator_archetypes.hpp	/^  struct convertible_type$/;"	s	namespace:boost::detail	inherits:mpl::if_
boost::detail::counting_iterator_base	iterator/counting_iterator.hpp	/^  struct counting_iterator_base$/;"	s	namespace:boost::detail
boost::detail::counting_iterator_base::difference	iterator/counting_iterator.hpp	/^      >::type difference;$/;"	t	struct:boost::detail::counting_iterator_base	access:public
boost::detail::counting_iterator_base::traversal	iterator/counting_iterator.hpp	/^      >::type traversal;$/;"	t	struct:boost::detail::counting_iterator_base	access:public
boost::detail::counting_iterator_base::type	iterator/counting_iterator.hpp	/^      > type;$/;"	t	struct:boost::detail::counting_iterator_base	access:public
boost::detail::ctor_arg	iterator/iterator_archetypes.hpp	/^  struct ctor_arg {};$/;"	s	namespace:boost::detail
boost::detail::decrement_iterator	iterator/zip_iterator.hpp	/^    struct decrement_iterator$/;"	s	namespace:boost::detail
boost::detail::decrement_iterator::operator ()	iterator/zip_iterator.hpp	/^      void operator()(Iterator& it)$/;"	f	struct:boost::detail::decrement_iterator	access:public	signature:(Iterator& it)
boost::detail::dereference_iterator	iterator/zip_iterator.hpp	/^    struct dereference_iterator$/;"	s	namespace:boost::detail
boost::detail::dereference_iterator::apply	iterator/zip_iterator.hpp	/^      struct apply$/;"	s	struct:boost::detail::dereference_iterator	access:public
boost::detail::dereference_iterator::apply::type	iterator/zip_iterator.hpp	/^        type;$/;"	t	struct:boost::detail::dereference_iterator::apply	access:public
boost::detail::dereference_iterator::operator ()	iterator/zip_iterator.hpp	/^        typename apply<Iterator>::type operator()(Iterator const& it)$/;"	f	struct:boost::detail::dereference_iterator	access:public	signature:(Iterator const& it)
boost::detail::enable_if_interoperable	iterator/iterator_facade.hpp	/^    struct enable_if_interoperable$/;"	s	namespace:boost::detail
boost::detail::enable_if_interoperable::type	iterator/iterator_facade.hpp	/^        >::type type;$/;"	t	struct:boost::detail::enable_if_interoperable	access:public
boost::detail::facade_iterator_category	iterator/detail/facade_iterator_category.hpp	/^struct facade_iterator_category$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
boost::detail::facade_iterator_category_impl	iterator/detail/facade_iterator_category.hpp	/^struct facade_iterator_category_impl$/;"	s	namespace:boost::detail
boost::detail::facade_iterator_category_impl::BOOST_MPL_ASSERT_NOT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT_NOT((is_iterator_category<Traversal>));$/;"	p	struct:boost::detail::facade_iterator_category_impl	access:public	signature:(is_iterator_category<Traversal>)
boost::detail::facade_iterator_category_impl::category	iterator/detail/facade_iterator_category.hpp	/^    >::type category;$/;"	t	struct:boost::detail::facade_iterator_category_impl	access:public
boost::detail::facade_iterator_category_impl::type	iterator/detail/facade_iterator_category.hpp	/^    >::type type;$/;"	t	struct:boost::detail::facade_iterator_category_impl	access:public
boost::detail::filter_iterator_base	iterator/filter_iterator.hpp	/^    struct filter_iterator_base$/;"	s	namespace:boost::detail
boost::detail::filter_iterator_base::type	iterator/filter_iterator.hpp	/^        > type;$/;"	t	struct:boost::detail::filter_iterator_base	access:public
boost::detail::ia_dflt_help	iterator/iterator_adaptor.hpp	/^    struct ia_dflt_help$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
boost::detail::increment_iterator	iterator/zip_iterator.hpp	/^    struct increment_iterator$/;"	s	namespace:boost::detail
boost::detail::increment_iterator::operator ()	iterator/zip_iterator.hpp	/^      void operator()(Iterator& it)$/;"	f	struct:boost::detail::increment_iterator	access:public	signature:(Iterator& it)
boost::detail::indirect_base	iterator/indirect_iterator.hpp	/^    struct indirect_base$/;"	s	namespace:boost::detail
boost::detail::indirect_base	iterator/indirect_iterator.hpp	/^    struct indirect_base<int, int, int, int, int> {};$/;"	s	namespace:boost::detail
boost::detail::indirect_base::dereferenceable	iterator/indirect_iterator.hpp	/^        typedef typename iterator_traits<Iter>::value_type dereferenceable;$/;"	t	struct:boost::detail::indirect_base	access:public
boost::detail::indirect_base::type	iterator/indirect_iterator.hpp	/^        > type;$/;"	t	struct:boost::detail::indirect_base	access:public
boost::detail::input_output_iterator_tag	iterator/detail/facade_iterator_category.hpp	/^struct input_output_iterator_tag$/;"	s	namespace:boost::detail	inherits:std::input_iterator_tag
boost::detail::input_output_iterator_tag::operator std::output_iterator_tag	iterator/detail/facade_iterator_category.hpp	/^    operator std::output_iterator_tag() const$/;"	f	struct:boost::detail::input_output_iterator_tag	access:public	signature:() const
boost::detail::is_iterator_category	iterator/detail/facade_iterator_category.hpp	/^struct is_iterator_category$/;"	s	namespace:boost::detail	inherits:mpl::or_
boost::detail::is_iterator_traversal	iterator/detail/facade_iterator_category.hpp	/^struct is_iterator_traversal$/;"	s	namespace:boost::detail	inherits:is_convertible
boost::detail::is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl$/;"	s	namespace:boost::detail
boost::detail::is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl<const void>$/;"	s	namespace:boost::detail
boost::detail::is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl<const volatile void>$/;"	s	namespace:boost::detail
boost::detail::is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl<void>$/;"	s	namespace:boost::detail
boost::detail::is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl<volatile void>$/;"	s	namespace:boost::detail
boost::detail::is_lvalue_iterator_impl::conversion_eater	iterator/is_lvalue_iterator.hpp	/^      struct conversion_eater$/;"	s	struct:boost::detail::is_lvalue_iterator_impl	access:public
boost::detail::is_lvalue_iterator_impl::conversion_eater::conversion_eater	iterator/is_lvalue_iterator.hpp	/^          conversion_eater(Value&);$/;"	p	struct:boost::detail::is_lvalue_iterator_impl::conversion_eater	access:public	signature:(Value&)
boost::detail::is_lvalue_iterator_impl::rebind	iterator/is_lvalue_iterator.hpp	/^      struct rebind : boost::mpl::false_$/;"	s	struct:boost::detail::is_lvalue_iterator_impl	inherits:boost::mpl::false_	access:public
boost::detail::is_lvalue_iterator_impl::rebind	iterator/is_lvalue_iterator.hpp	/^      struct rebind$/;"	s	struct:boost::detail::is_lvalue_iterator_impl	access:public
boost::detail::is_lvalue_iterator_impl::rebind::BOOST_STATIC_CONSTANT	iterator/is_lvalue_iterator.hpp	/^          BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::is_lvalue_iterator_impl::rebind	access:public	signature:( bool , value = ( sizeof( is_lvalue_iterator_impl<Value>::tester( BOOST_LVALUE_PRESERVER(*x), 0 ) ) == 1 ) )
boost::detail::is_lvalue_iterator_impl::rebind::x	iterator/is_lvalue_iterator.hpp	/^          static It& x;$/;"	m	struct:boost::detail::is_lvalue_iterator_impl::rebind	access:public
boost::detail::is_lvalue_iterator_impl::tester	iterator/is_lvalue_iterator.hpp	/^      static char (& tester(any_conversion_eater, ...) )[2];$/;"	p	struct:boost::detail::is_lvalue_iterator_impl	access:public	signature:(any_conversion_eater, ...)
boost::detail::is_lvalue_iterator_impl::tester	iterator/is_lvalue_iterator.hpp	/^      static char tester(conversion_eater, int);$/;"	p	struct:boost::detail::is_lvalue_iterator_impl	access:public	signature:(conversion_eater, int)
boost::detail::is_non_const_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_non_const_lvalue_iterator_impl$/;"	s	namespace:boost::detail	inherits:is_lvalue_iterator_impl::,rebind
boost::detail::is_non_proxy_reference	iterator/iterator_facade.hpp	/^    struct is_non_proxy_reference$/;"	s	namespace:boost::detail	inherits:is_convertible
boost::detail::is_non_proxy_reference	iterator/iterator_facade.hpp	/^    struct is_non_proxy_reference$/;"	s	namespace:boost::detail	inherits:mpl::bool_
boost::detail::is_non_proxy_reference_impl	iterator/iterator_facade.hpp	/^    struct is_non_proxy_reference_impl$/;"	s	namespace:boost::detail
boost::detail::is_non_proxy_reference_impl::BOOST_STATIC_CONSTANT	iterator/iterator_facade.hpp	/^        BOOST_STATIC_CONSTANT(bool, value = sizeof(helper(r)) == 1);$/;"	p	struct:boost::detail::is_non_proxy_reference_impl	access:public	signature:(bool, value = sizeof(helper(r)) == 1)
boost::detail::is_non_proxy_reference_impl::helper	iterator/iterator_facade.hpp	/^        >::type& helper(R const&);$/;"	p	struct:boost::detail::is_non_proxy_reference_impl	access:public	signature:(R const&)
boost::detail::is_non_proxy_reference_impl::r	iterator/iterator_facade.hpp	/^        static Reference r;$/;"	m	struct:boost::detail::is_non_proxy_reference_impl	access:public
boost::detail::is_numeric	iterator/counting_iterator.hpp	/^  struct is_numeric$/;"	s	namespace:boost::detail	inherits:mpl::bool_
boost::detail::is_numeric	iterator/counting_iterator.hpp	/^  struct is_numeric< ::boost::long_long_type>$/;"	s	namespace:boost::detail	inherits:mpl::true_
boost::detail::is_numeric	iterator/counting_iterator.hpp	/^  struct is_numeric< ::boost::ulong_long_type>$/;"	s	namespace:boost::detail	inherits:mpl::true_
boost::detail::is_numeric	iterator/counting_iterator.hpp	/^  struct is_numeric<wchar_t>$/;"	s	namespace:boost::detail	inherits:mpl::true_
boost::detail::is_numeric_impl	iterator/counting_iterator.hpp	/^  struct is_numeric_impl$/;"	s	namespace:boost::detail
boost::detail::is_numeric_impl::BOOST_STATIC_ASSERT	iterator/counting_iterator.hpp	/^      BOOST_STATIC_ASSERT(::boost::is_integral<char>::value);$/;"	p	struct:boost::detail::is_numeric_impl	access:public	signature:(::boost::is_integral<char>::value)
boost::detail::is_numeric_impl::BOOST_STATIC_CONSTANT	iterator/counting_iterator.hpp	/^      BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::is_numeric_impl	access:public	signature:( bool, value = ( boost::is_convertible<int,T>::value && boost::is_convertible<T,int>::value ))
boost::detail::is_numeric_impl::BOOST_STATIC_CONSTANT	iterator/counting_iterator.hpp	/^      BOOST_STATIC_CONSTANT(bool, value = std::numeric_limits<T>::is_specialized);$/;"	p	struct:boost::detail::is_numeric_impl	access:public	signature:(bool, value = std::numeric_limits<T>::is_specialized)
boost::detail::is_numeric_impl::BOOST_STATIC_CONSTANT	iterator/counting_iterator.hpp	/^    BOOST_STATIC_CONSTANT(bool, value = ::boost::is_arithmetic<T>::value);$/;"	p	struct:boost::detail::is_numeric_impl	access:public	signature:(bool, value = ::boost::is_arithmetic<T>::value)
boost::detail::is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl$/;"	s	namespace:boost::detail
boost::detail::is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl<const void>$/;"	s	namespace:boost::detail
boost::detail::is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl<const volatile void>$/;"	s	namespace:boost::detail
boost::detail::is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl<void>$/;"	s	namespace:boost::detail
boost::detail::is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl<volatile void>$/;"	s	namespace:boost::detail
boost::detail::is_readable_iterator_impl2	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl2$/;"	s	namespace:boost::detail	inherits:is_readable_iterator_impl::,rebind
boost::detail::is_readable_iterator_impl::rebind	iterator/is_readable_iterator.hpp	/^      struct rebind : boost::mpl::false_$/;"	s	struct:boost::detail::is_readable_iterator_impl	inherits:boost::mpl::false_	access:public
boost::detail::is_readable_iterator_impl::rebind	iterator/is_readable_iterator.hpp	/^      struct rebind$/;"	s	struct:boost::detail::is_readable_iterator_impl	access:public
boost::detail::is_readable_iterator_impl::rebind::BOOST_STATIC_CONSTANT	iterator/is_readable_iterator.hpp	/^          BOOST_STATIC_CONSTANT($/;"	p	struct:boost::detail::is_readable_iterator_impl::rebind	access:public	signature:( bool , value = ( sizeof( is_readable_iterator_impl<Value>::tester(*x, 1) ) == 1 ) )
boost::detail::is_readable_iterator_impl::rebind::x	iterator/is_readable_iterator.hpp	/^          static It& x;$/;"	m	struct:boost::detail::is_readable_iterator_impl::rebind	access:public
boost::detail::is_readable_iterator_impl::tester	iterator/is_readable_iterator.hpp	/^      static char (& tester(any_conversion_eater, ...) )[2];$/;"	p	struct:boost::detail::is_readable_iterator_impl	access:public	signature:(any_conversion_eater, ...)
boost::detail::is_readable_iterator_impl::tester	iterator/is_readable_iterator.hpp	/^      static char tester(Value&, int);$/;"	p	struct:boost::detail::is_readable_iterator_impl	access:public	signature:(Value&, int)
boost::detail::is_readable_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_readable_lvalue_iterator_impl$/;"	s	namespace:boost::detail	inherits:is_lvalue_iterator_impl::,rebind
boost::detail::iterator_adaptor_assert_traversal	iterator/iterator_adaptor.hpp	/^    inline void iterator_adaptor_assert_traversal ()$/;"	f	namespace:boost::detail	signature:()
boost::detail::iterator_adaptor_base	iterator/iterator_adaptor.hpp	/^    struct iterator_adaptor_base$/;"	s	namespace:boost::detail
boost::detail::iterator_adaptor_base::type	iterator/iterator_adaptor.hpp	/^        type;$/;"	t	struct:boost::detail::iterator_adaptor_base	access:public
boost::detail::iterator_archetype_base	iterator/iterator_archetypes.hpp	/^  struct iterator_archetype_base$/;"	s	namespace:boost::detail	inherits:iterator_access_archetype,traversal_archetype_base
boost::detail::iterator_archetype_base::access	iterator/iterator_archetypes.hpp	/^      typedef iterator_access_archetype<Value, AccessCategory> access;$/;"	t	struct:boost::detail::iterator_archetype_base	access:public
boost::detail::iterator_archetype_base::iterator_category	iterator/iterator_archetypes.hpp	/^      >::type iterator_category;$/;"	t	struct:boost::detail::iterator_archetype_base	access:public
boost::detail::iterator_archetype_base::workaround_iterator_base	iterator/iterator_archetypes.hpp	/^      > workaround_iterator_base;$/;"	t	struct:boost::detail::iterator_archetype_base	access:public
boost::detail::iterator_category_with_traversal	iterator/detail/facade_iterator_category.hpp	/^struct iterator_category_with_traversal$/;"	s	namespace:boost::detail	inherits:Category,Traversal
boost::detail::iterator_category_with_traversal::BOOST_MPL_ASSERT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT((is_iterator_category<Category>));$/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:(is_iterator_category<Category>)
boost::detail::iterator_category_with_traversal::BOOST_MPL_ASSERT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT((is_iterator_traversal<Traversal>));$/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:(is_iterator_traversal<Traversal>)
boost::detail::iterator_category_with_traversal::BOOST_MPL_ASSERT_NOT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT_NOT(($/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:( is_convertible< typename iterator_category_to_traversal<Category>::type , Traversal >)
boost::detail::iterator_category_with_traversal::BOOST_MPL_ASSERT_NOT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT_NOT((is_iterator_category<Traversal>));$/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:(is_iterator_category<Traversal>)
boost::detail::iterator_category_with_traversal::BOOST_MPL_ASSERT_NOT	iterator/detail/facade_iterator_category.hpp	/^    BOOST_MPL_ASSERT_NOT((is_iterator_traversal<Category>));$/;"	p	struct:boost::detail::iterator_category_with_traversal	access:public	signature:(is_iterator_traversal<Category>)
boost::detail::iterator_distance	iterator/counting_iterator.hpp	/^  struct iterator_distance$/;"	s	namespace:boost::detail
boost::detail::iterator_distance::distance	iterator/counting_iterator.hpp	/^      static Difference distance(Incrementable1 x, Incrementable2 y)$/;"	f	struct:boost::detail::iterator_distance	access:public	signature:(Incrementable1 x, Incrementable2 y)
boost::detail::iterator_facade_default_category	iterator/detail/facade_iterator_category.hpp	/^struct iterator_facade_default_category$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
boost::detail::iterator_facade_types	iterator/iterator_facade.hpp	/^    struct iterator_facade_types$/;"	s	namespace:boost::detail
boost::detail::iterator_facade_types::base	iterator/iterator_facade.hpp	/^        base;$/;"	t	struct:boost::detail::iterator_facade_types	access:public
boost::detail::iterator_facade_types::iterator_category	iterator/iterator_facade.hpp	/^        >::type iterator_category;$/;"	t	struct:boost::detail::iterator_facade_types	access:public
boost::detail::iterator_facade_types::pointer	iterator/iterator_facade.hpp	/^        >::type pointer;$/;"	t	struct:boost::detail::iterator_facade_types	access:public
boost::detail::iterator_facade_types::value_type	iterator/iterator_facade.hpp	/^        typedef typename remove_const<ValueParam>::type value_type;$/;"	t	struct:boost::detail::iterator_facade_types	access:public
boost::detail::iterator_reference	iterator/zip_iterator.hpp	/^    struct iterator_reference$/;"	s	namespace:boost::detail
boost::detail::iterator_reference	iterator/zip_iterator.hpp	/^    struct iterator_reference<mpl::_1>$/;"	s	namespace:boost::detail
boost::detail::iterator_reference::apply	iterator/zip_iterator.hpp	/^        struct apply : iterator_reference<T> {};$/;"	s	struct:boost::detail::iterator_reference	inherits:iterator_reference	access:public
boost::detail::iterator_reference::type	iterator/zip_iterator.hpp	/^        typedef typename iterator_traits<Iterator>::reference type;$/;"	t	struct:boost::detail::iterator_reference	access:public
boost::detail::iterator_writability_disabled	iterator/detail/facade_iterator_category.hpp	/^struct iterator_writability_disabled$/;"	s	namespace:boost::detail	inherits:mpl::or_
boost::detail::lvalue_preserver	iterator/is_lvalue_iterator.hpp	/^  T& lvalue_preserver(T&, int);$/;"	p	namespace:boost::detail	signature:(T&, int)
boost::detail::lvalue_preserver	iterator/is_lvalue_iterator.hpp	/^  not_an_lvalue lvalue_preserver(U const&, ...);$/;"	p	namespace:boost::detail	signature:(U const&, ...)
boost::detail::make_operator_brackets_result	iterator/iterator_facade.hpp	/^    operator_brackets_proxy<Iterator> make_operator_brackets_result(Iterator const& iter, mpl::true_)$/;"	f	namespace:boost::detail	signature:(Iterator const& iter, mpl::true_)
boost::detail::make_operator_brackets_result	iterator/iterator_facade.hpp	/^    typename Iterator::value_type make_operator_brackets_result(Iterator const& iter, mpl::false_)$/;"	f	namespace:boost::detail	signature:(Iterator const& iter, mpl::false_)
boost::detail::minimum_category	iterator/detail/minimum_category.hpp	/^struct minimum_category$/;"	s	namespace:boost::detail
boost::detail::minimum_category	iterator/detail/minimum_category.hpp	/^struct minimum_category<int,int>$/;"	s	namespace:boost::detail
boost::detail::minimum_category	iterator/detail/minimum_category.hpp	/^struct minimum_category<mpl::_1,mpl::_2>$/;"	s	namespace:boost::detail
boost::detail::minimum_category::apply	iterator/detail/minimum_category.hpp	/^    struct apply : minimum_category<T1,T2>$/;"	s	struct:boost::detail::minimum_category	inherits:minimum_category	access:public
boost::detail::minimum_category::inner	iterator/detail/minimum_category.hpp	/^    typedef typename outer::template apply<T1,T2> inner;$/;"	t	struct:boost::detail::minimum_category	access:public
boost::detail::minimum_category::outer	iterator/detail/minimum_category.hpp	/^    > outer;$/;"	t	struct:boost::detail::minimum_category	access:public
boost::detail::minimum_category::type	iterator/detail/minimum_category.hpp	/^    typedef int type;$/;"	t	struct:boost::detail::minimum_category	access:public
boost::detail::minimum_category::type	iterator/detail/minimum_category.hpp	/^    typedef typename inner::type type;$/;"	t	struct:boost::detail::minimum_category	access:public
boost::detail::minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl$/;"	s	namespace:boost::detail
boost::detail::minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl<false,false>$/;"	s	namespace:boost::detail
boost::detail::minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl<false,true>$/;"	s	namespace:boost::detail
boost::detail::minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl<true,false>$/;"	s	namespace:boost::detail
boost::detail::minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl<true,true>$/;"	s	namespace:boost::detail
boost::detail::minimum_category_impl::apply	iterator/detail/minimum_category.hpp	/^    template <class T1, class T2> struct apply$/;"	s	struct:boost::detail::minimum_category_impl	access:public
boost::detail::minimum_category_impl::apply	iterator/detail/minimum_category.hpp	/^    template <class T1, class T2> struct apply$/;"	s	struct:boost::detail::minimum_category_impl	inherits:error_not_related_by_convertibility	access:public
boost::detail::minimum_category_impl::apply::BOOST_STATIC_ASSERT	iterator/detail/minimum_category.hpp	/^        BOOST_STATIC_ASSERT((is_same<T1,T2>::value));$/;"	p	struct:boost::detail::minimum_category_impl::apply	access:public	signature:(is_same<T1,T2>::value)
boost::detail::minimum_category_impl::apply::type	iterator/detail/minimum_category.hpp	/^        typedef T1 type;$/;"	t	struct:boost::detail::minimum_category_impl::apply	access:public
boost::detail::minimum_category_impl::apply::type	iterator/detail/minimum_category.hpp	/^        typedef T2 type;$/;"	t	struct:boost::detail::minimum_category_impl::apply	access:public
boost::detail::minimum_category_impl::type	iterator/detail/minimum_category.hpp	/^    typedef void type;$/;"	t	struct:boost::detail::minimum_category_impl	access:public
boost::detail::minimum_traversal_category_in_iterator_tuple	iterator/zip_iterator.hpp	/^      struct minimum_traversal_category_in_iterator_tuple<int>$/;"	s	namespace:boost::detail
boost::detail::minimum_traversal_category_in_iterator_tuple	iterator/zip_iterator.hpp	/^    struct minimum_traversal_category_in_iterator_tuple$/;"	s	namespace:boost::detail
boost::detail::minimum_traversal_category_in_iterator_tuple::tuple_of_traversal_tags	iterator/zip_iterator.hpp	/^      >::type tuple_of_traversal_tags;$/;"	t	struct:boost::detail::minimum_traversal_category_in_iterator_tuple	access:public
boost::detail::minimum_traversal_category_in_iterator_tuple::type	iterator/zip_iterator.hpp	/^          typedef int type;$/;"	t	struct:boost::detail::minimum_traversal_category_in_iterator_tuple	access:public
boost::detail::minimum_traversal_category_in_iterator_tuple::type	iterator/zip_iterator.hpp	/^      >::type type;$/;"	t	struct:boost::detail::minimum_traversal_category_in_iterator_tuple	access:public
boost::detail::no_operator_brackets	iterator/iterator_archetypes.hpp	/^  struct no_operator_brackets {};$/;"	s	namespace:boost::detail
boost::detail::not_an_lvalue	iterator/is_lvalue_iterator.hpp	/^  struct not_an_lvalue {};$/;"	s	namespace:boost::detail
boost::detail::number_distance	iterator/counting_iterator.hpp	/^  struct number_distance$/;"	s	namespace:boost::detail
boost::detail::number_distance::distance	iterator/counting_iterator.hpp	/^      static Difference distance(Incrementable1 x, Incrementable2 y)$/;"	f	struct:boost::detail::number_distance	access:public	signature:(Incrementable1 x, Incrementable2 y)
boost::detail::numeric_difference	iterator/counting_iterator.hpp	/^  struct numeric_difference$/;"	s	namespace:boost::detail
boost::detail::numeric_difference::type	iterator/counting_iterator.hpp	/^      typedef typename boost::detail::numeric_traits<T>::difference_type type;$/;"	t	struct:boost::detail::numeric_difference	access:public
boost::detail::old_category_to_traversal	iterator/iterator_categories.hpp	/^  struct old_category_to_traversal$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
boost::detail::old_category_to_traversal	iterator/iterator_categories.hpp	/^  struct old_category_to_traversal<int>$/;"	s	namespace:boost::detail
boost::detail::old_category_to_traversal::type	iterator/iterator_categories.hpp	/^      typedef int type;$/;"	t	struct:boost::detail::old_category_to_traversal	access:public
boost::detail::operator !=	iterator/iterator_archetypes.hpp	/^  bool operator!=(traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&, traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&)
boost::detail::operator +	iterator/iterator_archetypes.hpp	/^  Derived& operator+(std::ptrdiff_t,$/;"	f	namespace:boost::detail	signature:(std::ptrdiff_t, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
boost::detail::operator +	iterator/iterator_archetypes.hpp	/^  Derived& operator+(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, std::ptrdiff_t)
boost::detail::operator -	iterator/iterator_archetypes.hpp	/^  Derived& operator-(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, std::ptrdiff_t)
boost::detail::operator -	iterator/iterator_archetypes.hpp	/^  std::ptrdiff_t operator-(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
boost::detail::operator <	iterator/iterator_archetypes.hpp	/^  bool operator<(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
boost::detail::operator <=	iterator/iterator_archetypes.hpp	/^  bool operator<=(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
boost::detail::operator ==	iterator/iterator_archetypes.hpp	/^  bool operator==(traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&, traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&)
boost::detail::operator >	iterator/iterator_archetypes.hpp	/^  bool operator>(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
boost::detail::operator >=	iterator/iterator_archetypes.hpp	/^  bool operator>=(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
boost::detail::operator_arrow_dispatch	iterator/iterator_facade.hpp	/^    struct operator_arrow_dispatch \/\/ proxy references$/;"	s	namespace:boost::detail
boost::detail::operator_arrow_dispatch	iterator/iterator_facade.hpp	/^    struct operator_arrow_dispatch<T&, Pointer> \/\/ "real" references$/;"	s	namespace:boost::detail
boost::detail::operator_arrow_dispatch	iterator/iterator_facade.hpp	/^    struct operator_arrow_dispatch<int, int>$/;"	s	namespace:boost::detail
boost::detail::operator_arrow_dispatch::apply	iterator/iterator_facade.hpp	/^        static result_type apply(Reference const & x)$/;"	f	struct:boost::detail::operator_arrow_dispatch	access:public	signature:(Reference const & x)
boost::detail::operator_arrow_dispatch::apply	iterator/iterator_facade.hpp	/^        static result_type apply(T& x)$/;"	f	struct:boost::detail::operator_arrow_dispatch	access:public	signature:(T& x)
boost::detail::operator_arrow_dispatch::proxy	iterator/iterator_facade.hpp	/^        struct proxy$/;"	s	struct:boost::detail::operator_arrow_dispatch	access:public
boost::detail::operator_arrow_dispatch::proxy::m_ref	iterator/iterator_facade.hpp	/^            Reference m_ref;$/;"	m	struct:boost::detail::operator_arrow_dispatch::proxy	access:public
boost::detail::operator_arrow_dispatch::proxy::operator ->	iterator/iterator_facade.hpp	/^            Reference* operator->() { return boost::addressof(m_ref); }$/;"	f	struct:boost::detail::operator_arrow_dispatch::proxy	access:public	signature:()
boost::detail::operator_arrow_dispatch::proxy::operator Reference*	iterator/iterator_facade.hpp	/^            operator Reference*() { return boost::addressof(m_ref); }$/;"	f	struct:boost::detail::operator_arrow_dispatch::proxy	access:public	signature:()
boost::detail::operator_arrow_dispatch::proxy::proxy	iterator/iterator_facade.hpp	/^            explicit proxy(Reference const & x) : m_ref(x) {}$/;"	f	struct:boost::detail::operator_arrow_dispatch::proxy	access:public	signature:(Reference const & x)
boost::detail::operator_arrow_dispatch::result_type	iterator/iterator_facade.hpp	/^        typedef Pointer result_type;$/;"	t	struct:boost::detail::operator_arrow_dispatch	access:public
boost::detail::operator_arrow_dispatch::result_type	iterator/iterator_facade.hpp	/^        typedef int result_type;$/;"	t	struct:boost::detail::operator_arrow_dispatch	access:public
boost::detail::operator_arrow_dispatch::result_type	iterator/iterator_facade.hpp	/^        typedef proxy result_type;$/;"	t	struct:boost::detail::operator_arrow_dispatch	access:public
boost::detail::operator_brackets	iterator/iterator_archetypes.hpp	/^  struct operator_brackets$/;"	s	namespace:boost::detail	inherits:mpl::aux::msvc_eti_base::type
boost::detail::operator_brackets_proxy	iterator/iterator_facade.hpp	/^    class operator_brackets_proxy$/;"	c	namespace:boost::detail
boost::detail::operator_brackets_proxy::m_iter	iterator/iterator_facade.hpp	/^        Iterator m_iter;$/;"	m	class:boost::detail::operator_brackets_proxy	access:private
boost::detail::operator_brackets_proxy::operator =	iterator/iterator_facade.hpp	/^        operator_brackets_proxy& operator=(value_type const& val)$/;"	f	class:boost::detail::operator_brackets_proxy	access:public	signature:(value_type const& val)
boost::detail::operator_brackets_proxy::operator reference	iterator/iterator_facade.hpp	/^        operator reference() const$/;"	f	class:boost::detail::operator_brackets_proxy	access:public	signature:() const
boost::detail::operator_brackets_proxy::operator_brackets_proxy	iterator/iterator_facade.hpp	/^        operator_brackets_proxy(Iterator const& iter)$/;"	f	class:boost::detail::operator_brackets_proxy	access:public	signature:(Iterator const& iter)
boost::detail::operator_brackets_proxy::reference	iterator/iterator_facade.hpp	/^        typedef typename Iterator::reference  reference;$/;"	t	class:boost::detail::operator_brackets_proxy	access:private
boost::detail::operator_brackets_proxy::value_type	iterator/iterator_facade.hpp	/^        typedef typename Iterator::value_type value_type;$/;"	t	class:boost::detail::operator_brackets_proxy	access:private
boost::detail::operator_brackets_result	iterator/iterator_facade.hpp	/^    struct operator_brackets_result$/;"	s	namespace:boost::detail
boost::detail::operator_brackets_result::type	iterator/iterator_facade.hpp	/^        >::type type;$/;"	t	struct:boost::detail::operator_brackets_result	access:public
boost::detail::postfix_increment_proxy	iterator/iterator_facade.hpp	/^    class postfix_increment_proxy$/;"	c	namespace:boost::detail
boost::detail::postfix_increment_proxy::operator *	iterator/iterator_facade.hpp	/^        operator*() const$/;"	f	class:boost::detail::postfix_increment_proxy	access:public	signature:() const
boost::detail::postfix_increment_proxy::postfix_increment_proxy	iterator/iterator_facade.hpp	/^        explicit postfix_increment_proxy(Iterator const& x)$/;"	f	class:boost::detail::postfix_increment_proxy	access:public	signature:(Iterator const& x)
boost::detail::postfix_increment_proxy::stored_value	iterator/iterator_facade.hpp	/^        mutable value_type stored_value;$/;"	m	class:boost::detail::postfix_increment_proxy	access:private
boost::detail::postfix_increment_proxy::value_type	iterator/iterator_facade.hpp	/^        typedef typename iterator_value<Iterator>::type value_type;$/;"	t	class:boost::detail::postfix_increment_proxy	access:private
boost::detail::postfix_increment_result	iterator/iterator_facade.hpp	/^    struct postfix_increment_result$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
boost::detail::pure_traversal_tag	iterator/iterator_categories.hpp	/^  struct pure_traversal_tag$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
boost::detail::pure_traversal_tag	iterator/iterator_categories.hpp	/^  struct pure_traversal_tag<int>$/;"	s	namespace:boost::detail
boost::detail::pure_traversal_tag::type	iterator/iterator_categories.hpp	/^      typedef int type;$/;"	t	struct:boost::detail::pure_traversal_tag	access:public
boost::detail::read_proxy	iterator/iterator_archetypes.hpp	/^  struct read_proxy$/;"	s	namespace:boost::detail
boost::detail::read_proxy::operator T	iterator/iterator_archetypes.hpp	/^      operator T() { return static_object<T>::get(); }$/;"	f	struct:boost::detail::read_proxy	access:public	signature:()
boost::detail::read_write_proxy	iterator/iterator_archetypes.hpp	/^  struct read_write_proxy$/;"	s	namespace:boost::detail	inherits:read_proxy
boost::detail::read_write_proxy::operator =	iterator/iterator_archetypes.hpp	/^      read_write_proxy& operator=(T) { return *this; }$/;"	f	struct:boost::detail::read_write_proxy	access:public	signature:(T)
boost::detail::readable_operator_brackets	iterator/iterator_archetypes.hpp	/^  struct readable_operator_brackets$/;"	s	namespace:boost::detail
boost::detail::readable_operator_brackets::operator []	iterator/iterator_archetypes.hpp	/^      read_proxy<ValueType> operator[](std::ptrdiff_t n) const { return read_proxy<ValueType>(); }$/;"	f	struct:boost::detail::readable_operator_brackets	access:public	signature:(std::ptrdiff_t n) const
boost::detail::transform_iterator_base	iterator/transform_iterator.hpp	/^    struct transform_iterator_base$/;"	s	namespace:boost::detail
boost::detail::transform_iterator_base::cv_value_type	iterator/transform_iterator.hpp	/^        >::type cv_value_type;$/;"	t	struct:boost::detail::transform_iterator_base	access:private
boost::detail::transform_iterator_base::reference	iterator/transform_iterator.hpp	/^        >::type reference;$/;"	t	struct:boost::detail::transform_iterator_base	access:private
boost::detail::transform_iterator_base::type	iterator/transform_iterator.hpp	/^        > type;$/;"	t	struct:boost::detail::transform_iterator_base	access:public
boost::detail::traversal_archetype_	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_$/;"	s	namespace:boost::detail	inherits:mpl::aux::msvc_eti_base::type
boost::detail::traversal_archetype_::base	iterator/iterator_archetypes.hpp	/^      base;$/;"	t	struct:boost::detail::traversal_archetype_	access:public
boost::detail::traversal_archetype_::traversal_archetype_	iterator/iterator_archetypes.hpp	/^      traversal_archetype_() {}$/;"	f	struct:boost::detail::traversal_archetype_	access:public	signature:()
boost::detail::traversal_archetype_::traversal_archetype_	iterator/iterator_archetypes.hpp	/^      traversal_archetype_(ctor_arg arg)$/;"	f	struct:boost::detail::traversal_archetype_	access:public	signature:(ctor_arg arg)
boost::detail::traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl$/;"	s	namespace:boost::detail
boost::detail::traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<bidirectional_traversal_tag>$/;"	s	namespace:boost::detail
boost::detail::traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<forward_traversal_tag>$/;"	s	namespace:boost::detail
boost::detail::traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<incrementable_traversal_tag>$/;"	s	namespace:boost::detail
boost::detail::traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<random_access_traversal_tag>$/;"	s	namespace:boost::detail
boost::detail::traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<single_pass_traversal_tag>$/;"	s	namespace:boost::detail
boost::detail::traversal_archetype_impl::archetype	iterator/iterator_archetypes.hpp	/^      struct archetype$/;"	s	struct:boost::detail::traversal_archetype_impl	access:public
boost::detail::traversal_archetype_impl::archetype	iterator/iterator_archetypes.hpp	/^      struct archetype$/;"	s	struct:boost::detail::traversal_archetype_impl	inherits:equality_comparable,traversal_archetype_	access:public
boost::detail::traversal_archetype_impl::archetype	iterator/iterator_archetypes.hpp	/^      struct archetype$/;"	s	struct:boost::detail::traversal_archetype_impl	inherits:traversal_archetype_	access:public
boost::detail::traversal_archetype_impl::archetype::archetype	iterator/iterator_archetypes.hpp	/^          archetype() $/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:()
boost::detail::traversal_archetype_impl::archetype::archetype	iterator/iterator_archetypes.hpp	/^          explicit archetype(ctor_arg arg)$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(ctor_arg arg)
boost::detail::traversal_archetype_impl::archetype::archetype	iterator/iterator_archetypes.hpp	/^          explicit archetype(ctor_arg) {}$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(ctor_arg)
boost::detail::traversal_archetype_impl::archetype::bogus	iterator/iterator_archetypes.hpp	/^          struct bogus { }; \/\/ This use to be void, but that causes trouble for iterator_facade. Need more research. -JGS$/;"	s	struct:boost::detail::traversal_archetype_impl::archetype	access:public
boost::detail::traversal_archetype_impl::archetype::difference_type	iterator/iterator_archetypes.hpp	/^          typedef bogus difference_type;$/;"	t	struct:boost::detail::traversal_archetype_impl::archetype	access:public
boost::detail::traversal_archetype_impl::archetype::difference_type	iterator/iterator_archetypes.hpp	/^          typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::detail::traversal_archetype_impl::archetype	access:public
boost::detail::traversal_archetype_impl::archetype::operator ++	iterator/iterator_archetypes.hpp	/^          Derived  operator++(int) const { return (Derived&)static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(int) const
boost::detail::traversal_archetype_impl::archetype::operator ++	iterator/iterator_archetypes.hpp	/^          Derived& operator++() { return (Derived&)static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:()
boost::detail::traversal_archetype_impl::archetype::operator +=	iterator/iterator_archetypes.hpp	/^          Derived& operator+=(std::ptrdiff_t) { return static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(std::ptrdiff_t)
boost::detail::traversal_archetype_impl::archetype::operator --	iterator/iterator_archetypes.hpp	/^          Derived  operator--(int) const { return static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(int) const
boost::detail::traversal_archetype_impl::archetype::operator --	iterator/iterator_archetypes.hpp	/^          Derived& operator--() { return static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:()
boost::detail::traversal_archetype_impl::archetype::operator -=	iterator/iterator_archetypes.hpp	/^          Derived& operator-=(std::ptrdiff_t) { return static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(std::ptrdiff_t)
boost::detail::tuple_impl_specific	iterator/zip_iterator.hpp	/^    namespace tuple_impl_specific$/;"	n	namespace:boost::detail
boost::detail::tuple_impl_specific::tuple_equal	iterator/zip_iterator.hpp	/^        bool tuple_equal($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( Tuple1 const& t1, Tuple2 const& t2 )
boost::detail::tuple_impl_specific::tuple_equal	iterator/zip_iterator.hpp	/^      inline bool tuple_equal(tuples::null_type, tuples::null_type)$/;"	f	namespace:boost::detail::tuple_impl_specific	signature:(tuples::null_type, tuples::null_type)
boost::detail::tuple_impl_specific::tuple_for_each	iterator/zip_iterator.hpp	/^      Fun BOOST_TUPLE_ALGO(tuple_for_each)($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( Tuple& t , Fun f BOOST_TUPLE_ALGO_RECURSE)
boost::detail::tuple_impl_specific::tuple_for_each	iterator/zip_iterator.hpp	/^      Fun BOOST_TUPLE_ALGO(tuple_for_each)($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( tuples::null_type , Fun f BOOST_TUPLE_ALGO_TERMINATOR )
boost::detail::tuple_impl_specific::tuple_for_each	iterator/zip_iterator.hpp	/^      tuple_for_each($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( Tuple& t, Fun f )
boost::detail::tuple_impl_specific::tuple_meta_accumulate	iterator/zip_iterator.hpp	/^      struct tuple_meta_accumulate$/;"	s	namespace:boost::detail::tuple_impl_specific	inherits:mpl::eval_if
boost::detail::tuple_impl_specific::tuple_meta_accumulate_impl	iterator/zip_iterator.hpp	/^      struct tuple_meta_accumulate_impl$/;"	s	namespace:boost::detail::tuple_impl_specific
boost::detail::tuple_impl_specific::tuple_meta_accumulate_impl::type	iterator/zip_iterator.hpp	/^         >::type type;$/;"	t	struct:boost::detail::tuple_impl_specific::tuple_meta_accumulate_impl	access:public
boost::detail::tuple_impl_specific::tuple_meta_transform	iterator/zip_iterator.hpp	/^      struct tuple_meta_transform$/;"	s	namespace:boost::detail::tuple_impl_specific	inherits:mpl::eval_if
boost::detail::tuple_impl_specific::tuple_meta_transform_impl	iterator/zip_iterator.hpp	/^      struct tuple_meta_transform_impl$/;"	s	namespace:boost::detail::tuple_impl_specific
boost::detail::tuple_impl_specific::tuple_meta_transform_impl::type	iterator/zip_iterator.hpp	/^          > type;$/;"	t	struct:boost::detail::tuple_impl_specific::tuple_meta_transform_impl	access:public
boost::detail::tuple_impl_specific::tuple_transform	iterator/zip_iterator.hpp	/^      BOOST_TUPLE_ALGO(tuple_transform)($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( const Tuple& t, Fun f BOOST_TUPLE_ALGO_RECURSE )
boost::detail::tuple_impl_specific::tuple_transform	iterator/zip_iterator.hpp	/^      tuple_transform($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( const Tuple& t, Fun f )
boost::detail::tuple_impl_specific::tuple_transform	iterator/zip_iterator.hpp	/^      tuples::null_type BOOST_TUPLE_ALGO(tuple_transform)$/;"	f	namespace:boost::detail::tuple_impl_specific	signature:(tuples::null_type const&, Fun BOOST_TUPLE_ALGO_TERMINATOR)
boost::detail::tuple_of_references	iterator/zip_iterator.hpp	/^    struct tuple_of_references$/;"	s	namespace:boost::detail	inherits:tuple_impl_specific::tuple_meta_transform
boost::detail::use_operator_brackets_proxy	iterator/iterator_facade.hpp	/^    struct use_operator_brackets_proxy$/;"	s	namespace:boost::detail	inherits:mpl::not_
boost::detail::writable_operator_brackets	iterator/iterator_archetypes.hpp	/^  struct writable_operator_brackets$/;"	s	namespace:boost::detail
boost::detail::writable_operator_brackets::operator []	iterator/iterator_archetypes.hpp	/^      read_write_proxy<ValueType> operator[](std::ptrdiff_t n) const { return read_write_proxy<ValueType>(); }$/;"	f	struct:boost::detail::writable_operator_brackets	access:public	signature:(std::ptrdiff_t n) const
boost::detail::writable_postfix_increment_proxy	iterator/iterator_facade.hpp	/^    class writable_postfix_increment_proxy$/;"	c	namespace:boost::detail
boost::detail::writable_postfix_increment_proxy::operator *	iterator/iterator_facade.hpp	/^        operator*() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
boost::detail::writable_postfix_increment_proxy::operator =	iterator/iterator_facade.hpp	/^        T const& operator=(T const& x) const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(T const& x) const
boost::detail::writable_postfix_increment_proxy::operator =	iterator/iterator_facade.hpp	/^        T& operator=(T& x) const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(T& x) const
boost::detail::writable_postfix_increment_proxy::operator Iterator const&	iterator/iterator_facade.hpp	/^        operator Iterator const&() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
boost::detail::writable_postfix_increment_proxy::operator value_type&	iterator/iterator_facade.hpp	/^        operator value_type&() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
boost::detail::writable_postfix_increment_proxy::stored_iterator	iterator/iterator_facade.hpp	/^        Iterator stored_iterator;$/;"	m	class:boost::detail::writable_postfix_increment_proxy	access:private
boost::detail::writable_postfix_increment_proxy::stored_value	iterator/iterator_facade.hpp	/^        mutable value_type stored_value;$/;"	m	class:boost::detail::writable_postfix_increment_proxy	access:private
boost::detail::writable_postfix_increment_proxy::value_type	iterator/iterator_facade.hpp	/^        typedef typename iterator_value<Iterator>::type value_type;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:private
boost::detail::writable_postfix_increment_proxy::writable_postfix_increment_proxy	iterator/iterator_facade.hpp	/^        explicit writable_postfix_increment_proxy(Iterator const& x)$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(Iterator const& x)
boost::detail::zip_iterator_base	iterator/zip_iterator.hpp	/^    struct zip_iterator_base$/;"	s	namespace:boost::detail
boost::detail::zip_iterator_base	iterator/zip_iterator.hpp	/^    struct zip_iterator_base<int>$/;"	s	namespace:boost::detail
boost::detail::zip_iterator_base::difference_type	iterator/zip_iterator.hpp	/^            >::difference_type difference_type;$/;"	t	struct:boost::detail::zip_iterator_base	access:private
boost::detail::zip_iterator_base::reference	iterator/zip_iterator.hpp	/^        detail::tuple_of_references<IteratorTuple>::type reference;$/;"	t	struct:boost::detail::zip_iterator_base	access:private
boost::detail::zip_iterator_base::traversal_category	iterator/zip_iterator.hpp	/^        >::type traversal_category;$/;"	t	struct:boost::detail::zip_iterator_base	access:private
boost::detail::zip_iterator_base::type	iterator/zip_iterator.hpp	/^        > type;$/;"	t	struct:boost::detail::zip_iterator_base	access:public
boost::detail::zip_iterator_base::type	iterator/zip_iterator.hpp	/^        typedef int type;$/;"	t	struct:boost::detail::zip_iterator_base	access:public
boost::detail::zip_iterator_base::value_type	iterator/zip_iterator.hpp	/^        typedef reference value_type;$/;"	t	struct:boost::detail::zip_iterator_base	access:private
boost::enable_if_convertible	iterator/iterator_adaptor.hpp	/^  struct enable_if_convertible$/;"	s	namespace:boost
boost::enable_if_convertible::type	iterator/iterator_adaptor.hpp	/^     >::type type;$/;"	t	struct:boost::enable_if_convertible	access:public
boost::filter_iterator	iterator/filter_iterator.hpp	/^  class filter_iterator$/;"	c	namespace:boost	inherits:detail::filter_iterator_base::type
boost::filter_iterator::decrement	iterator/filter_iterator.hpp	/^      void decrement()$/;"	f	class:boost::filter_iterator	access:private	signature:()
boost::filter_iterator::end	iterator/filter_iterator.hpp	/^      Iterator end() const { return m_end; }$/;"	f	class:boost::filter_iterator	access:public	signature:() const
boost::filter_iterator::filter_iterator	iterator/filter_iterator.hpp	/^      filter_iterator($/;"	f	class:boost::filter_iterator	access:public	signature:( filter_iterator<Predicate, OtherIterator> const& t , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0 )
boost::filter_iterator::filter_iterator	iterator/filter_iterator.hpp	/^      filter_iterator() { }$/;"	f	class:boost::filter_iterator	access:public	signature:()
boost::filter_iterator::filter_iterator	iterator/filter_iterator.hpp	/^      filter_iterator(Iterator x, Iterator end_ = Iterator())$/;"	f	class:boost::filter_iterator	access:public	signature:(Iterator x, Iterator end_ = Iterator())
boost::filter_iterator::filter_iterator	iterator/filter_iterator.hpp	/^      filter_iterator(Predicate f, Iterator x, Iterator end_ = Iterator())$/;"	f	class:boost::filter_iterator	access:public	signature:(Predicate f, Iterator x, Iterator end_ = Iterator())
boost::filter_iterator::increment	iterator/filter_iterator.hpp	/^      void increment()$/;"	f	class:boost::filter_iterator	access:private	signature:()
boost::filter_iterator::m_end	iterator/filter_iterator.hpp	/^      Iterator m_end;$/;"	m	class:boost::filter_iterator	access:private
boost::filter_iterator::m_predicate	iterator/filter_iterator.hpp	/^      Predicate m_predicate;$/;"	m	class:boost::filter_iterator	access:private
boost::filter_iterator::predicate	iterator/filter_iterator.hpp	/^      Predicate predicate() const { return m_predicate; }$/;"	f	class:boost::filter_iterator	access:public	signature:() const
boost::filter_iterator::satisfy_predicate	iterator/filter_iterator.hpp	/^      void satisfy_predicate()$/;"	f	class:boost::filter_iterator	access:private	signature:()
boost::filter_iterator::super_t	iterator/filter_iterator.hpp	/^      >::type super_t;$/;"	t	class:boost::filter_iterator	access:private
boost::forward_readable_iterator_test	iterator/new_iterator_tests.hpp	/^void forward_readable_iterator_test(Iterator i, Iterator j, T val1, T val2)$/;"	f	namespace:boost	signature:(Iterator i, Iterator j, T val1, T val2)
boost::forward_swappable_iterator_test	iterator/new_iterator_tests.hpp	/^void forward_swappable_iterator_test(Iterator i, Iterator j, T val1, T val2)$/;"	f	namespace:boost	signature:(Iterator i, Iterator j, T val1, T val2)
boost::forward_traversal_tag	iterator/iterator_categories.hpp	/^struct forward_traversal_tag$/;"	s	namespace:boost	inherits:single_pass_traversal_tag
boost::function_input_iterator	iterator/function_input_iterator.hpp	/^    class function_input_iterator $/;"	c	namespace:boost	inherits:mpl::if_::type
boost::function_input_iterator::base_type	iterator/function_input_iterator.hpp	/^        >::type base_type;$/;"	t	class:boost::function_input_iterator	access:private
boost::function_input_iterator::function_input_iterator	iterator/function_input_iterator.hpp	/^        function_input_iterator(Function & f, Input i)$/;"	f	class:boost::function_input_iterator	access:public	signature:(Function & f, Input i)
boost::impl	iterator/function_input_iterator.hpp	/^    namespace impl {$/;"	n	namespace:boost
boost::impl::function_input_iterator	iterator/function_input_iterator.hpp	/^        class function_input_iterator$/;"	c	namespace:boost::impl	inherits:iterator_facade
boost::impl::function_input_iterator::Function::dereference	iterator/function_input_iterator.hpp	/^                dereference() const {$/;"	f	class:boost::impl::function_input_iterator::Function	access:public	signature:() const
boost::impl::function_input_iterator::equal	iterator/function_input_iterator.hpp	/^            bool equal(function_input_iterator const & other) const {$/;"	f	class:boost::impl::function_input_iterator	access:public	signature:(function_input_iterator const & other) const
boost::impl::function_input_iterator::f	iterator/function_input_iterator.hpp	/^            Function * f;$/;"	m	class:boost::impl::function_input_iterator	access:private
boost::impl::function_input_iterator::function_input_iterator	iterator/function_input_iterator.hpp	/^            function_input_iterator() {}$/;"	f	class:boost::impl::function_input_iterator	access:public	signature:()
boost::impl::function_input_iterator::function_input_iterator	iterator/function_input_iterator.hpp	/^            function_input_iterator(Function & f_, Input state_ = Input()) $/;"	f	class:boost::impl::function_input_iterator	access:public	signature:(Function & f_, Input state_ = Input())
boost::impl::function_input_iterator::increment	iterator/function_input_iterator.hpp	/^            void increment() {$/;"	f	class:boost::impl::function_input_iterator	access:public	signature:()
boost::impl::function_input_iterator::state	iterator/function_input_iterator.hpp	/^            Input state;$/;"	m	class:boost::impl::function_input_iterator	access:private
boost::impl::function_input_iterator::value	iterator/function_input_iterator.hpp	/^            mutable optional<typename Function::result_type> value;$/;"	m	class:boost::impl::function_input_iterator	access:private
boost::impl::function_pointer_input_iterator	iterator/function_input_iterator.hpp	/^        class function_pointer_input_iterator$/;"	c	namespace:boost::impl	inherits:iterator_facade
boost::impl::function_pointer_input_iterator::equal	iterator/function_input_iterator.hpp	/^            bool equal(function_pointer_input_iterator const & other) const {$/;"	f	class:boost::impl::function_pointer_input_iterator	access:public	signature:(function_pointer_input_iterator const & other) const
boost::impl::function_pointer_input_iterator::f	iterator/function_input_iterator.hpp	/^            Function f;$/;"	m	class:boost::impl::function_pointer_input_iterator	access:private
boost::impl::function_pointer_input_iterator::function_pointer_input_iterator	iterator/function_input_iterator.hpp	/^            function_pointer_input_iterator() {}$/;"	f	class:boost::impl::function_pointer_input_iterator	access:public	signature:()
boost::impl::function_pointer_input_iterator::function_pointer_input_iterator	iterator/function_input_iterator.hpp	/^            function_pointer_input_iterator(Function &f_, Input state_ = Input())$/;"	f	class:boost::impl::function_pointer_input_iterator	access:public	signature:(Function &f_, Input state_ = Input())
boost::impl::function_pointer_input_iterator::function_types::result_type::dereference	iterator/function_input_iterator.hpp	/^                dereference() const {$/;"	f	class:boost::impl::function_pointer_input_iterator::function_types::result_type	access:public	signature:() const
boost::impl::function_pointer_input_iterator::increment	iterator/function_input_iterator.hpp	/^            void increment() {$/;"	f	class:boost::impl::function_pointer_input_iterator	access:public	signature:()
boost::impl::function_pointer_input_iterator::state	iterator/function_input_iterator.hpp	/^            Input state;$/;"	m	class:boost::impl::function_pointer_input_iterator	access:private
boost::impl::function_pointer_input_iterator::value	iterator/function_input_iterator.hpp	/^            mutable optional<typename function_types::result_type<Function>::type> value;$/;"	m	class:boost::impl::function_pointer_input_iterator	access:private
boost::impl::function_reference_input_iterator	iterator/function_input_iterator.hpp	/^        class function_reference_input_iterator$/;"	c	namespace:boost::impl	inherits:function_pointer_input_iterator
boost::impl::function_reference_input_iterator::function_reference_input_iterator	iterator/function_input_iterator.hpp	/^            function_reference_input_iterator(Function & f_, Input state_ = Input())$/;"	f	class:boost::impl::function_reference_input_iterator	access:public	signature:(Function & f_, Input state_ = Input())
boost::incrementable_traversal_tag	iterator/iterator_categories.hpp	/^struct incrementable_traversal_tag $/;"	s	namespace:boost	inherits:no_traversal_tag
boost::indirect_iterator	iterator/indirect_iterator.hpp	/^  class indirect_iterator$/;"	c	namespace:boost	inherits:detail::indirect_base::type
boost::indirect_iterator::dereference	iterator/indirect_iterator.hpp	/^      typename super_t::reference dereference() const$/;"	f	class:boost::indirect_iterator	access:private	signature:() const
boost::indirect_iterator::indirect_iterator	iterator/indirect_iterator.hpp	/^      indirect_iterator($/;"	f	class:boost::indirect_iterator	access:public	signature:( indirect_iterator< Iterator2, Value2, Category2, Reference2, Difference2 > const& y , typename enable_if_convertible<Iterator2, Iterator>::type* = 0 )
boost::indirect_iterator::indirect_iterator	iterator/indirect_iterator.hpp	/^      indirect_iterator() {}$/;"	f	class:boost::indirect_iterator	access:public	signature:()
boost::indirect_iterator::indirect_iterator	iterator/indirect_iterator.hpp	/^      indirect_iterator(Iterator iter)$/;"	f	class:boost::indirect_iterator	access:public	signature:(Iterator iter)
boost::indirect_iterator::super_t	iterator/indirect_iterator.hpp	/^      >::type super_t;$/;"	t	class:boost::indirect_iterator	access:private
boost::infinite	iterator/function_input_iterator.hpp	/^    struct infinite {$/;"	s	namespace:boost
boost::infinite::operator ++	iterator/function_input_iterator.hpp	/^        infinite & operator++() { return *this; }$/;"	f	struct:boost::infinite	access:public	signature:()
boost::infinite::operator ++	iterator/function_input_iterator.hpp	/^        infinite & operator++(int) { return *this; }$/;"	f	struct:boost::infinite	access:public	signature:(int)
boost::infinite::operator ==	iterator/function_input_iterator.hpp	/^        bool operator==(infinite &) const { return false; };$/;"	f	struct:boost::infinite	access:public	signature:(infinite &) const
boost::infinite::operator ==	iterator/function_input_iterator.hpp	/^        bool operator==(infinite const &) const { return false; };$/;"	f	struct:boost::infinite	access:public	signature:(infinite const &) const
boost::is_convertible	iterator/iterator_adaptor.hpp	/^  struct is_convertible<use_default,To>$/;"	s	namespace:boost	inherits:mpl::false_
boost::is_interoperable	iterator/interoperable.hpp	/^  struct is_interoperable$/;"	s	namespace:boost	inherits:mpl::true_
boost::iterator_access_archetype	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype$/;"	s	namespace:boost	inherits:mpl::aux::msvc_eti_base::type
boost::iterator_access_archetype_impl	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype_impl$/;"	s	namespace:boost
boost::iterator_access_archetype_impl	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype_impl<$/;"	s	namespace:boost
boost::iterator_access_archetype_impl	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype_impl<iterator_archetypes::readable_lvalue_iterator_t>$/;"	s	namespace:boost
boost::iterator_access_archetype_impl	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype_impl<iterator_archetypes::writable_lvalue_iterator_t>$/;"	s	namespace:boost
boost::iterator_access_archetype_impl::archetype	iterator/iterator_archetypes.hpp	/^    struct archetype$/;"	s	struct:boost::iterator_access_archetype_impl	access:public
boost::iterator_access_archetype_impl::archetype	iterator/iterator_archetypes.hpp	/^    struct archetype$/;"	s	struct:boost::iterator_access_archetype_impl	inherits:iterator_access_archetype	access:public
boost::iterator_access_archetype_impl::archetype::BOOST_STATIC_ASSERT	iterator/iterator_archetypes.hpp	/^        BOOST_STATIC_ASSERT((!is_const<Value>::value));$/;"	p	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:(!is_const<Value>::value)
boost::iterator_access_archetype_impl::archetype::operator *	iterator/iterator_archetypes.hpp	/^        Value& operator*() const { return static_object<Value>::get(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
boost::iterator_access_archetype_impl::archetype::operator *	iterator/iterator_archetypes.hpp	/^        detail::assign_proxy<Value> operator*() const { return detail::assign_proxy<Value>(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
boost::iterator_access_archetype_impl::archetype::operator *	iterator/iterator_archetypes.hpp	/^        detail::read_write_proxy<Value> operator*() const { return detail::read_write_proxy<Value>(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
boost::iterator_access_archetype_impl::archetype::operator *	iterator/iterator_archetypes.hpp	/^        value_type operator*() const { return static_object<value_type>::get(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
boost::iterator_access_archetype_impl::archetype::operator ->	iterator/iterator_archetypes.hpp	/^        Value* operator->() const { return 0; }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
boost::iterator_access_archetype_impl::archetype::operator ->	iterator/iterator_archetypes.hpp	/^        detail::arrow_proxy<Value> operator->() const { return detail::arrow_proxy<Value>(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
boost::iterator_access_archetype_impl::archetype::pointer	iterator/iterator_archetypes.hpp	/^        typedef Value*                          pointer;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
boost::iterator_access_archetype_impl::archetype::pointer	iterator/iterator_archetypes.hpp	/^        typedef void pointer;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
boost::iterator_access_archetype_impl::archetype::reference	iterator/iterator_archetypes.hpp	/^        typedef Value                           reference;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
boost::iterator_access_archetype_impl::archetype::reference	iterator/iterator_archetypes.hpp	/^        typedef Value&    reference;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
boost::iterator_access_archetype_impl::archetype::reference	iterator/iterator_archetypes.hpp	/^        typedef detail::read_write_proxy<Value>    reference;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
boost::iterator_access_archetype_impl::archetype::reference	iterator/iterator_archetypes.hpp	/^        typedef void reference;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
boost::iterator_access_archetype_impl::archetype::value_type	iterator/iterator_archetypes.hpp	/^        typedef typename remove_cv<Value>::type value_type;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
boost::iterator_access_archetype_impl::archetype::value_type	iterator/iterator_archetypes.hpp	/^        typedef void value_type;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
boost::iterator_adaptor	iterator/iterator_adaptor.hpp	/^  class iterator_adaptor$/;"	c	namespace:boost	inherits:boost::detail::iterator_adaptor_base::type
boost::iterator_adaptor::advance	iterator/iterator_adaptor.hpp	/^      void advance(typename super_t::difference_type n)$/;"	f	class:boost::iterator_adaptor	access:private	signature:(typename super_t::difference_type n)
boost::iterator_adaptor::base	iterator/iterator_adaptor.hpp	/^      Base const& base() const$/;"	f	class:boost::iterator_adaptor	access:public	signature:() const
boost::iterator_adaptor::base_reference	iterator/iterator_adaptor.hpp	/^      Base const& base_reference() const$/;"	f	class:boost::iterator_adaptor	access:protected	signature:() const
boost::iterator_adaptor::base_reference	iterator/iterator_adaptor.hpp	/^      Base& base_reference()$/;"	f	class:boost::iterator_adaptor	access:protected	signature:()
boost::iterator_adaptor::base_type	iterator/iterator_adaptor.hpp	/^      typedef Base base_type;$/;"	t	class:boost::iterator_adaptor	access:public
boost::iterator_adaptor::decrement	iterator/iterator_adaptor.hpp	/^      void decrement() $/;"	f	class:boost::iterator_adaptor	access:private	signature:()
boost::iterator_adaptor::dereference	iterator/iterator_adaptor.hpp	/^      typename super_t::reference dereference() const$/;"	f	class:boost::iterator_adaptor	access:private	signature:() const
boost::iterator_adaptor::distance_to	iterator/iterator_adaptor.hpp	/^      typename super_t::difference_type distance_to($/;"	f	class:boost::iterator_adaptor	access:private	signature:( iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& y) const
boost::iterator_adaptor::equal	iterator/iterator_adaptor.hpp	/^      bool equal(iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& x) const$/;"	f	class:boost::iterator_adaptor	access:private	signature:(iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& x) const
boost::iterator_adaptor::increment	iterator/iterator_adaptor.hpp	/^      void increment() { ++m_iterator; }$/;"	f	class:boost::iterator_adaptor	access:private	signature:()
boost::iterator_adaptor::iterator_adaptor	iterator/iterator_adaptor.hpp	/^      explicit iterator_adaptor(Base const &iter)$/;"	f	class:boost::iterator_adaptor	access:public	signature:(Base const &iter)
boost::iterator_adaptor::iterator_adaptor	iterator/iterator_adaptor.hpp	/^      iterator_adaptor() {}$/;"	f	class:boost::iterator_adaptor	access:public	signature:()
boost::iterator_adaptor::iterator_adaptor_	iterator/iterator_adaptor.hpp	/^      typedef iterator_adaptor<Derived,Base,Value,Traversal,Reference,Difference> iterator_adaptor_;$/;"	t	class:boost::iterator_adaptor	access:protected
boost::iterator_adaptor::m_iterator	iterator/iterator_adaptor.hpp	/^      Base m_iterator;$/;"	m	class:boost::iterator_adaptor	access:private
boost::iterator_adaptor::my_traversal	iterator/iterator_adaptor.hpp	/^      >::type my_traversal;$/;"	t	class:boost::iterator_adaptor	access:private
boost::iterator_adaptor::super_t	iterator/iterator_adaptor.hpp	/^      >::type super_t;$/;"	t	class:boost::iterator_adaptor	access:protected
boost::iterator_archetype	iterator/iterator_archetypes.hpp	/^struct iterator_archetype$/;"	s	namespace:boost	inherits:detail::iterator_archetype_base,detail::iterator_archetype_base::workaround_iterator_base
boost::iterator_archetype::base	iterator/iterator_archetypes.hpp	/^    > base;$/;"	t	struct:boost::iterator_archetype	access:public
boost::iterator_archetype::difference_type	iterator/iterator_archetypes.hpp	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:boost::iterator_archetype	access:public
boost::iterator_archetype::iterator_archetype	iterator/iterator_archetypes.hpp	/^    iterator_archetype() { }$/;"	f	struct:boost::iterator_archetype	access:public	signature:()
boost::iterator_archetype::iterator_archetype	iterator/iterator_archetypes.hpp	/^    iterator_archetype(iterator_archetype const& x)$/;"	f	struct:boost::iterator_archetype	access:public	signature:(iterator_archetype const& x)
boost::iterator_archetype::iterator_category	iterator/iterator_archetypes.hpp	/^    typedef typename base::iterator_category iterator_category;$/;"	t	struct:boost::iterator_archetype	access:public
boost::iterator_archetype::operator =	iterator/iterator_archetypes.hpp	/^    iterator_archetype& operator=(iterator_archetype const&)$/;"	f	struct:boost::iterator_archetype	access:public	signature:(iterator_archetype const&)
boost::iterator_archetype::pointer	iterator/iterator_archetypes.hpp	/^    typedef typename base::pointer pointer;$/;"	t	struct:boost::iterator_archetype	access:public
boost::iterator_archetype::reference	iterator/iterator_archetypes.hpp	/^    typedef typename base::reference reference;$/;"	t	struct:boost::iterator_archetype	access:public
boost::iterator_archetype::value_type	iterator/iterator_archetypes.hpp	/^    typedef typename base::value_type value_type;$/;"	t	struct:boost::iterator_archetype	access:public
boost::iterator_archetypes	iterator/iterator_archetypes.hpp	/^namespace iterator_archetypes$/;"	n	namespace:boost
boost::iterator_archetypes::has_access	iterator/iterator_archetypes.hpp	/^  struct has_access$/;"	s	namespace:boost::iterator_archetypes	inherits:mpl::equal_to
boost::iterator_archetypes::lvalue_iterator_bit	iterator/iterator_archetypes.hpp	/^    , lvalue_iterator_bit = 8$/;"	e	enum:boost::iterator_archetypes::__anon1
boost::iterator_archetypes::lvalue_iterator_t	iterator/iterator_archetypes.hpp	/^  typedef mpl::int_<lvalue_iterator_bit>::type lvalue_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
boost::iterator_archetypes::readable_iterator_bit	iterator/iterator_archetypes.hpp	/^      readable_iterator_bit = 1$/;"	e	enum:boost::iterator_archetypes::__anon1
boost::iterator_archetypes::readable_iterator_t	iterator/iterator_archetypes.hpp	/^  typedef mpl::int_<readable_iterator_bit>::type readable_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
boost::iterator_archetypes::readable_lvalue_iterator_t	iterator/iterator_archetypes.hpp	/^          >::type readable_lvalue_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
boost::iterator_archetypes::readable_writable_iterator_t	iterator/iterator_archetypes.hpp	/^          >::type readable_writable_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
boost::iterator_archetypes::swappable_iterator_bit	iterator/iterator_archetypes.hpp	/^    , swappable_iterator_bit = 4$/;"	e	enum:boost::iterator_archetypes::__anon1
boost::iterator_archetypes::swappable_iterator_t	iterator/iterator_archetypes.hpp	/^  typedef mpl::int_<swappable_iterator_bit>::type swappable_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
boost::iterator_archetypes::writable_iterator_bit	iterator/iterator_archetypes.hpp	/^    , writable_iterator_bit = 2$/;"	e	enum:boost::iterator_archetypes::__anon1
boost::iterator_archetypes::writable_iterator_t	iterator/iterator_archetypes.hpp	/^  typedef mpl::int_<writable_iterator_bit>::type writable_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
boost::iterator_archetypes::writable_lvalue_iterator_t	iterator/iterator_archetypes.hpp	/^          >::type writable_lvalue_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
boost::iterator_category_to_traversal	iterator/iterator_categories.hpp	/^struct iterator_category_to_traversal$/;"	s	namespace:boost	inherits:mpl::eval_if
boost::iterator_core_access	iterator/iterator_facade.hpp	/^  class iterator_core_access$/;"	c	namespace:boost
boost::iterator_core_access::advance	iterator/iterator_facade.hpp	/^      static void advance(Facade& f, typename Facade::difference_type n)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade& f, typename Facade::difference_type n)
boost::iterator_core_access::decrement	iterator/iterator_facade.hpp	/^      static void decrement(Facade& f)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade& f)
boost::iterator_core_access::dereference	iterator/iterator_facade.hpp	/^      static typename Facade::reference dereference(Facade const& f)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade const& f)
boost::iterator_core_access::derived	iterator/iterator_facade.hpp	/^      static I const& derived(iterator_facade<I,V,TC,R,D> const& facade)$/;"	f	class:boost::iterator_core_access	access:public	signature:(iterator_facade<I,V,TC,R,D> const& facade)
boost::iterator_core_access::derived	iterator/iterator_facade.hpp	/^      static I& derived(iterator_facade<I,V,TC,R,D>& facade)$/;"	f	class:boost::iterator_core_access	access:public	signature:(iterator_facade<I,V,TC,R,D>& facade)
boost::iterator_core_access::distance_from	iterator/iterator_facade.hpp	/^      static typename Facade1::difference_type distance_from($/;"	f	class:boost::iterator_core_access	access:public	signature:( Facade1 const& f1, Facade2 const& f2, mpl::true_)
boost::iterator_core_access::distance_from	iterator/iterator_facade.hpp	/^      static typename Facade2::difference_type distance_from($/;"	f	class:boost::iterator_core_access	access:public	signature:( Facade1 const& f1, Facade2 const& f2, mpl::false_)
boost::iterator_core_access::equal	iterator/iterator_facade.hpp	/^      static bool equal(Facade1 const& f1, Facade2 const& f2, mpl::false_)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade1 const& f1, Facade2 const& f2, mpl::false_)
boost::iterator_core_access::equal	iterator/iterator_facade.hpp	/^      static bool equal(Facade1 const& f1, Facade2 const& f2, mpl::true_)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade1 const& f1, Facade2 const& f2, mpl::true_)
boost::iterator_core_access::increment	iterator/iterator_facade.hpp	/^      static void increment(Facade& f)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade& f)
boost::iterator_core_access::iterator_core_access	iterator/iterator_facade.hpp	/^      iterator_core_access(); \/\/undefined$/;"	p	class:boost::iterator_core_access	access:private	signature:()
boost::iterator_difference	iterator/iterator_traits.hpp	/^struct iterator_difference$/;"	s	namespace:boost
boost::iterator_difference	iterator/iterator_traits.hpp	/^struct iterator_difference<int>$/;"	s	namespace:boost
boost::iterator_difference::type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::difference_type type;$/;"	t	struct:boost::iterator_difference	access:public
boost::iterator_difference::type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::iterator_difference	access:public
boost::iterator_facade	iterator/iterator_facade.hpp	/^  class iterator_facade$/;"	c	namespace:boost	inherits:boost::detail::iterator_facade_types::base
boost::iterator_facade::associated_types	iterator/iterator_facade.hpp	/^      > associated_types;$/;"	t	class:boost::iterator_facade	access:private
boost::iterator_facade::derived	iterator/iterator_facade.hpp	/^      Derived const& derived() const$/;"	f	class:boost::iterator_facade	access:private	signature:() const
boost::iterator_facade::derived	iterator/iterator_facade.hpp	/^      Derived& derived()$/;"	f	class:boost::iterator_facade	access:private	signature:()
boost::iterator_facade::difference_type	iterator/iterator_facade.hpp	/^      typedef Difference difference_type;$/;"	t	class:boost::iterator_facade	access:public
boost::iterator_facade::iterator_category	iterator/iterator_facade.hpp	/^      typedef typename associated_types::iterator_category iterator_category;$/;"	t	class:boost::iterator_facade	access:public
boost::iterator_facade::iterator_facade_	iterator/iterator_facade.hpp	/^      typedef iterator_facade<Derived,Value,CategoryOrTraversal,Reference,Difference> iterator_facade_;$/;"	t	class:boost::iterator_facade	access:protected
boost::iterator_facade::operator *	iterator/iterator_facade.hpp	/^      reference operator*() const$/;"	f	class:boost::iterator_facade	access:public	signature:() const
boost::iterator_facade::operator ++	iterator/iterator_facade.hpp	/^      Derived& operator++()$/;"	f	class:boost::iterator_facade	access:public	signature:()
boost::iterator_facade::operator ++	iterator/iterator_facade.hpp	/^      operator++(int)$/;"	f	class:boost::iterator_facade	access:public	signature:(int)
boost::iterator_facade::operator +=	iterator/iterator_facade.hpp	/^      Derived& operator+=(difference_type n)$/;"	f	class:boost::iterator_facade	access:public	signature:(difference_type n)
boost::iterator_facade::operator -	iterator/iterator_facade.hpp	/^      Derived operator-(difference_type x) const$/;"	f	class:boost::iterator_facade	access:public	signature:(difference_type x) const
boost::iterator_facade::operator --	iterator/iterator_facade.hpp	/^      Derived operator--(int)$/;"	f	class:boost::iterator_facade	access:public	signature:(int)
boost::iterator_facade::operator --	iterator/iterator_facade.hpp	/^      Derived& operator--()$/;"	f	class:boost::iterator_facade	access:public	signature:()
boost::iterator_facade::operator -=	iterator/iterator_facade.hpp	/^      Derived& operator-=(difference_type n)$/;"	f	class:boost::iterator_facade	access:public	signature:(difference_type n)
boost::iterator_facade::operator ->	iterator/iterator_facade.hpp	/^      pointer operator->() const$/;"	f	class:boost::iterator_facade	access:public	signature:() const
boost::iterator_facade::operator =	iterator/iterator_facade.hpp	/^      iterator_facade& operator=(iterator_facade const&)$/;"	f	class:boost::iterator_facade	access:public	signature:(iterator_facade const&)
boost::iterator_facade::operator []	iterator/iterator_facade.hpp	/^      operator[](difference_type n) const$/;"	f	class:boost::iterator_facade	access:public	signature:(difference_type n) const
boost::iterator_facade::operator_arrow_dispatch_	iterator/iterator_facade.hpp	/^      > operator_arrow_dispatch_;$/;"	t	class:boost::iterator_facade	access:private
boost::iterator_facade::pointer	iterator/iterator_facade.hpp	/^      typedef typename operator_arrow_dispatch_::result_type pointer;$/;"	t	class:boost::iterator_facade	access:public
boost::iterator_facade::reference	iterator/iterator_facade.hpp	/^      typedef Reference reference;$/;"	t	class:boost::iterator_facade	access:public
boost::iterator_facade::value_type	iterator/iterator_facade.hpp	/^      typedef typename associated_types::value_type value_type;$/;"	t	class:boost::iterator_facade	access:public
boost::iterator_pointer	iterator/iterator_traits.hpp	/^struct iterator_pointer$/;"	s	namespace:boost
boost::iterator_pointer	iterator/iterator_traits.hpp	/^struct iterator_pointer<int>$/;"	s	namespace:boost
boost::iterator_pointer::type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::pointer type;$/;"	t	struct:boost::iterator_pointer	access:public
boost::iterator_pointer::type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::iterator_pointer	access:public
boost::iterator_reference	iterator/iterator_traits.hpp	/^struct iterator_reference$/;"	s	namespace:boost
boost::iterator_reference	iterator/iterator_traits.hpp	/^struct iterator_reference<int>$/;"	s	namespace:boost
boost::iterator_reference::type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::reference type;$/;"	t	struct:boost::iterator_reference	access:public
boost::iterator_reference::type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::iterator_reference	access:public
boost::iterator_traversal	iterator/iterator_categories.hpp	/^struct iterator_traversal$/;"	s	namespace:boost	inherits:iterator_category_to_traversal
boost::iterator_traversal	iterator/iterator_categories.hpp	/^struct iterator_traversal<mpl::_1>$/;"	s	namespace:boost
boost::iterator_traversal	iterator/iterator_categories.hpp	/^struct iterator_traversal<mpl::_>$/;"	s	namespace:boost	inherits:iterator_traversal
boost::iterator_traversal::apply	iterator/iterator_categories.hpp	/^    struct apply : iterator_traversal<T>$/;"	s	struct:boost::iterator_traversal	inherits:iterator_traversal	access:public
boost::iterator_value	iterator/iterator_traits.hpp	/^struct iterator_value$/;"	s	namespace:boost
boost::iterator_value	iterator/iterator_traits.hpp	/^struct iterator_value<int>$/;"	s	namespace:boost
boost::iterator_value::type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::value_type type;$/;"	t	struct:boost::iterator_value	access:public
boost::iterator_value::type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::iterator_value	access:public
boost::iterators	iterator/detail/enable_if.hpp	/^  namespace iterators$/;"	n	namespace:boost
boost::iterators::enable_if	iterator/detail/enable_if.hpp	/^    struct enable_if$/;"	s	namespace:boost::iterators	inherits:enabled::,base
boost::iterators::enable_if::type	iterator/detail/enable_if.hpp	/^        typedef Return type;$/;"	t	struct:boost::iterators::enable_if	access:public
boost::iterators::enabled	iterator/detail/enable_if.hpp	/^    struct enabled$/;"	s	namespace:boost::iterators
boost::iterators::enabled	iterator/detail/enable_if.hpp	/^    struct enabled<false>$/;"	s	namespace:boost::iterators
boost::iterators::enabled::base	iterator/detail/enable_if.hpp	/^      struct base$/;"	s	struct:boost::iterators::enabled	access:public
boost::iterators::enabled::base::type	iterator/detail/enable_if.hpp	/^        typedef T type;$/;"	t	struct:boost::iterators::enabled::base	access:public
boost::make_counting_iterator	iterator/counting_iterator.hpp	/^make_counting_iterator(Incrementable x)$/;"	f	namespace:boost	signature:(Incrementable x)
boost::make_filter_iterator	iterator/filter_iterator.hpp	/^  make_filter_iterator($/;"	f	namespace:boost	signature:( typename iterators::enable_if< is_class<Predicate> , Iterator >::type x , Iterator end = Iterator() , Predicate* = 0 )
boost::make_filter_iterator	iterator/filter_iterator.hpp	/^  make_filter_iterator(Predicate f, Iterator x, Iterator end = Iterator())$/;"	f	namespace:boost	signature:(Predicate f, Iterator x, Iterator end = Iterator())
boost::make_function_input_iterator	iterator/function_input_iterator.hpp	/^        make_function_input_iterator(Function & f, Input state) {$/;"	f	namespace:boost	signature:(Function & f, Input state)
boost::make_function_input_iterator	iterator/function_input_iterator.hpp	/^        make_function_input_iterator(Function * f, Input state) {$/;"	f	namespace:boost	signature:(Function * f, Input state)
boost::make_indirect_iterator	iterator/indirect_iterator.hpp	/^  indirect_iterator<Iter,Traits> make_indirect_iterator(Iter x, Traits* = 0)$/;"	f	namespace:boost	signature:(Iter x, Traits* = 0)
boost::make_indirect_iterator	iterator/indirect_iterator.hpp	/^  indirect_iterator<Iter> make_indirect_iterator(Iter x)$/;"	f	namespace:boost	signature:(Iter x)
boost::make_permutation_iterator	iterator/permutation_iterator.hpp	/^make_permutation_iterator( ElementIterator e, IndexIterator i )$/;"	f	namespace:boost	signature:( ElementIterator e, IndexIterator i )
boost::make_reverse_iterator	iterator/reverse_iterator.hpp	/^  reverse_iterator<BidirectionalIterator> make_reverse_iterator(BidirectionalIterator x)$/;"	f	namespace:boost	signature:(BidirectionalIterator x)
boost::make_transform_iterator	iterator/transform_iterator.hpp	/^  make_transform_iterator(Iterator it)$/;"	f	namespace:boost	signature:(Iterator it)
boost::make_transform_iterator	iterator/transform_iterator.hpp	/^  make_transform_iterator(Iterator it, Return (*fun)(Argument))$/;"	f	namespace:boost	signature:(Iterator it, Return (*fun)(Argument))
boost::make_transform_iterator	iterator/transform_iterator.hpp	/^  make_transform_iterator(Iterator it, UnaryFunc fun)$/;"	f	namespace:boost	signature:(Iterator it, UnaryFunc fun)
boost::make_zip_iterator	iterator/zip_iterator.hpp	/^  make_zip_iterator(IteratorTuple t)$/;"	f	namespace:boost	signature:(IteratorTuple t)
boost::no_traversal_tag	iterator/iterator_categories.hpp	/^struct no_traversal_tag {};$/;"	s	namespace:boost
boost::non_const_lvalue_iterator_test	iterator/new_iterator_tests.hpp	/^void non_const_lvalue_iterator_test(Iterator i, T v1, T v2)$/;"	f	namespace:boost	signature:(Iterator i, T v1, T v2)
boost::operator ++	iterator/iterator_facade.hpp	/^  operator++($/;"	f	namespace:boost	signature:( iterator_facade<I,V,TC,R,D>& i , int )
boost::permutation_iterator	iterator/permutation_iterator.hpp	/^class permutation_iterator$/;"	c	namespace:boost	inherits:iterator_adaptor
boost::permutation_iterator::dereference	iterator/permutation_iterator.hpp	/^    typename super_t::reference dereference() const$/;"	f	class:boost::permutation_iterator	access:private	signature:() const
boost::permutation_iterator::m_elt_iter	iterator/permutation_iterator.hpp	/^    ElementIterator m_elt_iter;$/;"	m	class:boost::permutation_iterator	access:public
boost::permutation_iterator::permutation_iterator	iterator/permutation_iterator.hpp	/^  explicit permutation_iterator(ElementIterator x, IndexIterator y) $/;"	f	class:boost::permutation_iterator	access:public	signature:(ElementIterator x, IndexIterator y)
boost::permutation_iterator::permutation_iterator	iterator/permutation_iterator.hpp	/^  permutation_iterator($/;"	f	class:boost::permutation_iterator	access:public	signature:( permutation_iterator<OtherElementIterator, OtherIndexIterator> const& r , typename enable_if_convertible<OtherElementIterator, ElementIterator>::type* = 0 , typename enable_if_convertible<OtherIndexIterator, IndexIterator>::type* = 0 )
boost::permutation_iterator::permutation_iterator	iterator/permutation_iterator.hpp	/^  permutation_iterator() : m_elt_iter() {}$/;"	f	class:boost::permutation_iterator	access:public	signature:()
boost::permutation_iterator::super_t	iterator/permutation_iterator.hpp	/^          , use_default, typename detail::iterator_traits<ElementIterator>::reference> super_t;$/;"	t	class:boost::permutation_iterator	access:private
boost::random_access_readable_iterator_test	iterator/new_iterator_tests.hpp	/^void random_access_readable_iterator_test(Iterator i, int N, TrueVals vals)$/;"	f	namespace:boost	signature:(Iterator i, int N, TrueVals vals)
boost::random_access_traversal_tag	iterator/iterator_categories.hpp	/^struct random_access_traversal_tag$/;"	s	namespace:boost	inherits:bidirectional_traversal_tag
boost::readable_iterator_test	iterator/new_iterator_tests.hpp	/^void readable_iterator_test(const Iterator i1, T v)$/;"	f	namespace:boost	signature:(const Iterator i1, T v)
boost::readable_iterator_traversal_test	iterator/new_iterator_tests.hpp	/^void readable_iterator_traversal_test(Iterator i1, T v, mpl::true_)$/;"	f	namespace:boost	signature:(Iterator i1, T v, mpl::true_)
boost::readable_iterator_traversal_test	iterator/new_iterator_tests.hpp	/^void readable_iterator_traversal_test(const Iterator i1, T v, mpl::false_)$/;"	f	namespace:boost	signature:(const Iterator i1, T v, mpl::false_)
boost::reverse_iterator	iterator/reverse_iterator.hpp	/^  class reverse_iterator$/;"	c	namespace:boost	inherits:iterator_adaptor
boost::reverse_iterator::advance	iterator/reverse_iterator.hpp	/^      void advance(typename super_t::difference_type n)$/;"	f	class:boost::reverse_iterator	access:private	signature:(typename super_t::difference_type n)
boost::reverse_iterator::decrement	iterator/reverse_iterator.hpp	/^      void decrement() { ++this->base_reference(); }$/;"	f	class:boost::reverse_iterator	access:private	signature:()
boost::reverse_iterator::dereference	iterator/reverse_iterator.hpp	/^      typename super_t::reference dereference() const { return *boost::prior(this->base()); }$/;"	f	class:boost::reverse_iterator	access:private	signature:() const
boost::reverse_iterator::distance_to	iterator/reverse_iterator.hpp	/^      distance_to(reverse_iterator<OtherIterator> const& y) const$/;"	f	class:boost::reverse_iterator	access:private	signature:(reverse_iterator<OtherIterator> const& y) const
boost::reverse_iterator::increment	iterator/reverse_iterator.hpp	/^      void increment() { --this->base_reference(); }$/;"	f	class:boost::reverse_iterator	access:private	signature:()
boost::reverse_iterator::reverse_iterator	iterator/reverse_iterator.hpp	/^      explicit reverse_iterator(Iterator x) $/;"	f	class:boost::reverse_iterator	access:public	signature:(Iterator x)
boost::reverse_iterator::reverse_iterator	iterator/reverse_iterator.hpp	/^      reverse_iterator($/;"	f	class:boost::reverse_iterator	access:public	signature:( reverse_iterator<OtherIterator> const& r , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0 )
boost::reverse_iterator::reverse_iterator	iterator/reverse_iterator.hpp	/^      reverse_iterator() {}$/;"	f	class:boost::reverse_iterator	access:public	signature:()
boost::reverse_iterator::super_t	iterator/reverse_iterator.hpp	/^      typedef iterator_adaptor< reverse_iterator<Iterator>, Iterator > super_t;$/;"	t	class:boost::reverse_iterator	access:private
boost::single_pass_traversal_tag	iterator/iterator_categories.hpp	/^struct single_pass_traversal_tag$/;"	s	namespace:boost	inherits:incrementable_traversal_tag
boost::swappable_iterator_test	iterator/new_iterator_tests.hpp	/^void swappable_iterator_test(Iterator i, Iterator j)$/;"	f	namespace:boost	signature:(Iterator i, Iterator j)
boost::transform_iterator	iterator/transform_iterator.hpp	/^  class transform_iterator$/;"	c	namespace:boost	inherits:boost::detail::transform_iterator_base::type
boost::transform_iterator::dereference	iterator/transform_iterator.hpp	/^    typename super_t::reference dereference() const$/;"	f	class:boost::transform_iterator	access:private	signature:() const
boost::transform_iterator::functor	iterator/transform_iterator.hpp	/^    UnaryFunc functor() const$/;"	f	class:boost::transform_iterator	access:public	signature:() const
boost::transform_iterator::m_f	iterator/transform_iterator.hpp	/^    UnaryFunc m_f;$/;"	m	class:boost::transform_iterator	access:private
boost::transform_iterator::super_t	iterator/transform_iterator.hpp	/^    super_t;$/;"	t	class:boost::transform_iterator	access:private
boost::transform_iterator::transform_iterator	iterator/transform_iterator.hpp	/^    explicit transform_iterator(Iterator const& x)$/;"	f	class:boost::transform_iterator	access:public	signature:(Iterator const& x)
boost::transform_iterator::transform_iterator	iterator/transform_iterator.hpp	/^    transform_iterator($/;"	f	class:boost::transform_iterator	access:public	signature:( transform_iterator<OtherUnaryFunction, OtherIterator, OtherReference, OtherValue> const& t , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0 , typename enable_if_convertible<OtherUnaryFunction, UnaryFunc>::type* = 0 )
boost::transform_iterator::transform_iterator	iterator/transform_iterator.hpp	/^    transform_iterator() { }$/;"	f	class:boost::transform_iterator	access:public	signature:()
boost::transform_iterator::transform_iterator	iterator/transform_iterator.hpp	/^    transform_iterator(Iterator const& x, UnaryFunc f)$/;"	f	class:boost::transform_iterator	access:public	signature:(Iterator const& x, UnaryFunc f)
boost::traversal_archetype_base	iterator/iterator_archetypes.hpp	/^struct traversal_archetype_base $/;"	s	namespace:boost	inherits:detail::operator_brackets,detail::traversal_archetype_
boost::writable_iterator_test	iterator/new_iterator_tests.hpp	/^void writable_iterator_test(Iterator i, T v, T v2)$/;"	f	namespace:boost	signature:(Iterator i, T v, T v2)
boost::writable_iterator_traversal_test	iterator/new_iterator_tests.hpp	/^void writable_iterator_traversal_test(Iterator i1, T v, mpl::true_)$/;"	f	namespace:boost	signature:(Iterator i1, T v, mpl::true_)
boost::writable_iterator_traversal_test	iterator/new_iterator_tests.hpp	/^void writable_iterator_traversal_test(const Iterator i1, T v, mpl::false_)$/;"	f	namespace:boost	signature:(const Iterator i1, T v, mpl::false_)
boost::zip_iterator	iterator/zip_iterator.hpp	/^  class zip_iterator : $/;"	c	namespace:boost	inherits:detail::zip_iterator_base::type
boost::zip_iterator::advance	iterator/zip_iterator.hpp	/^    void advance(typename super_t::difference_type n)$/;"	f	class:boost::zip_iterator	access:private	signature:(typename super_t::difference_type n)
boost::zip_iterator::decrement	iterator/zip_iterator.hpp	/^    void decrement()$/;"	f	class:boost::zip_iterator	access:private	signature:()
boost::zip_iterator::dereference	iterator/zip_iterator.hpp	/^    typename super_t::reference dereference() const$/;"	f	class:boost::zip_iterator	access:private	signature:() const
boost::zip_iterator::distance_to	iterator/zip_iterator.hpp	/^      typename super_t::difference_type distance_to($/;"	f	class:boost::zip_iterator	access:private	signature:( const zip_iterator<OtherIteratorTuple>& other ) const
boost::zip_iterator::equal	iterator/zip_iterator.hpp	/^    bool equal(const zip_iterator<OtherIteratorTuple>& other) const$/;"	f	class:boost::zip_iterator	access:private	signature:(const zip_iterator<OtherIteratorTuple>& other) const
boost::zip_iterator::get_iterator_tuple	iterator/zip_iterator.hpp	/^    const IteratorTuple& get_iterator_tuple() const$/;"	f	class:boost::zip_iterator	access:public	signature:() const
boost::zip_iterator::increment	iterator/zip_iterator.hpp	/^    void increment()$/;"	f	class:boost::zip_iterator	access:private	signature:()
boost::zip_iterator::m_iterator_tuple	iterator/zip_iterator.hpp	/^    IteratorTuple m_iterator_tuple;$/;"	m	class:boost::zip_iterator	access:private
boost::zip_iterator::super_t	iterator/zip_iterator.hpp	/^     detail::zip_iterator_base<IteratorTuple>::type super_t;$/;"	t	class:boost::zip_iterator	access:private
boost::zip_iterator::zip_iterator	iterator/zip_iterator.hpp	/^    zip_iterator($/;"	f	class:boost::zip_iterator	access:public	signature:( const zip_iterator<OtherIteratorTuple>& other, typename enable_if_convertible< OtherIteratorTuple, IteratorTuple >::type* = 0 )
boost::zip_iterator::zip_iterator	iterator/zip_iterator.hpp	/^    zip_iterator() { }$/;"	f	class:boost::zip_iterator	access:public	signature:()
boost::zip_iterator::zip_iterator	iterator/zip_iterator.hpp	/^    zip_iterator(IteratorTuple iterator_tuple) $/;"	f	class:boost::zip_iterator	access:public	signature:(IteratorTuple iterator_tuple)
boost_concepts	iterator/iterator_concepts.hpp	/^namespace boost_concepts$/;"	n
boost_concepts::BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(BidirectionalTraversal,(Iterator))$/;"	f	namespace:boost_concepts	signature:(BidirectionalTraversal,(Iterator))
boost_concepts::BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(ForwardTraversal,(Iterator))$/;"	f	namespace:boost_concepts	signature:(ForwardTraversal,(Iterator))
boost_concepts::BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(IncrementableIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(IncrementableIterator,(Iterator))
boost_concepts::BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(InteroperableIterator,(Iterator)(ConstIterator))$/;"	f	namespace:boost_concepts	signature:(InteroperableIterator,(Iterator)(ConstIterator))
boost_concepts::BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(LvalueIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(LvalueIterator,(Iterator))
boost_concepts::BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(RandomAccessTraversal,(Iterator))$/;"	f	namespace:boost_concepts	signature:(RandomAccessTraversal,(Iterator))
boost_concepts::BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(ReadableIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(ReadableIterator,(Iterator))
boost_concepts::BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(SinglePassIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(SinglePassIterator,(Iterator))
boost_concepts::BOOST_concept	iterator/iterator_concepts.hpp	/^  BOOST_concept(SwappableIterator,(Iterator))$/;"	f	namespace:boost_concepts	signature:(SwappableIterator,(Iterator))
boost_concepts::WritableIterator	iterator/iterator_concepts.hpp	/^  struct WritableIterator$/;"	s	namespace:boost_concepts	inherits:boost::CopyConstructible
boost_concepts::WritableIterator::BOOST_CONCEPT_USAGE	iterator/iterator_concepts.hpp	/^      BOOST_CONCEPT_USAGE(WritableIterator)$/;"	f	struct:boost_concepts::WritableIterator	access:public	signature:(WritableIterator)
boost_concepts::WritableIterator::i	iterator/iterator_concepts.hpp	/^      Iterator i;$/;"	m	struct:boost_concepts::WritableIterator	access:private
boost_concepts::WritableIterator::v	iterator/iterator_concepts.hpp	/^      ValueType v;$/;"	m	struct:boost_concepts::WritableIterator	access:private
boost_concepts::WritableIteratorConcept	iterator/iterator_concepts.hpp	/^  struct WritableIteratorConcept : WritableIterator<Iterator,ValueType> {};$/;"	s	namespace:boost_concepts	inherits:WritableIterator
boost_concepts::detail	iterator/iterator_concepts.hpp	/^  namespace detail$/;"	n	namespace:boost_concepts
boost_concepts::detail::interop_rand_access_constraints	iterator/iterator_concepts.hpp	/^    void interop_rand_access_constraints($/;"	f	namespace:boost_concepts::detail	signature:( Iterator1 const& i1, Iterator2 const& i2, boost::random_access_traversal_tag, boost::random_access_traversal_tag)
boost_concepts::detail::interop_rand_access_constraints	iterator/iterator_concepts.hpp	/^    void interop_rand_access_constraints($/;"	f	namespace:boost_concepts::detail	signature:( Iterator1 const&, Iterator2 const&, boost::single_pass_traversal_tag, boost::single_pass_traversal_tag)
boost_concepts::detail::interop_single_pass_constraints	iterator/iterator_concepts.hpp	/^    void interop_single_pass_constraints(Iterator1 const& i1, Iterator2 const& i2)$/;"	f	namespace:boost_concepts::detail	signature:(Iterator1 const& i1, Iterator2 const& i2)
category	iterator/detail/facade_iterator_category.hpp	/^    >::type category;$/;"	t	struct:boost::detail::facade_iterator_category_impl	access:public
choose_difference_type	iterator/iterator_facade.hpp	/^    struct choose_difference_type$/;"	s	namespace:boost::detail
constant_lvalue_iterator_test	iterator/new_iterator_tests.hpp	/^void constant_lvalue_iterator_test(Iterator i, T v1)$/;"	f	namespace:boost	signature:(Iterator i, T v1)
conversion_eater	iterator/is_lvalue_iterator.hpp	/^          conversion_eater(Value&);$/;"	p	struct:boost::detail::is_lvalue_iterator_impl::conversion_eater	access:public	signature:(Value&)
conversion_eater	iterator/is_lvalue_iterator.hpp	/^      struct conversion_eater$/;"	s	struct:boost::detail::is_lvalue_iterator_impl	access:public
convertible_type	iterator/iterator_archetypes.hpp	/^  struct convertible_type$/;"	s	namespace:boost::detail	inherits:mpl::if_
counting_iterator	iterator/counting_iterator.hpp	/^    counting_iterator() { }$/;"	f	class:boost::counting_iterator	access:public	signature:()
counting_iterator	iterator/counting_iterator.hpp	/^    counting_iterator(Incrementable x)$/;"	f	class:boost::counting_iterator	access:public	signature:(Incrementable x)
counting_iterator	iterator/counting_iterator.hpp	/^    counting_iterator(counting_iterator const& rhs) : super_t(rhs.base()) {}$/;"	f	class:boost::counting_iterator	access:public	signature:(counting_iterator const& rhs)
counting_iterator	iterator/counting_iterator.hpp	/^class counting_iterator$/;"	c	namespace:boost	inherits:detail::counting_iterator_base::type
counting_iterator_base	iterator/counting_iterator.hpp	/^  struct counting_iterator_base$/;"	s	namespace:boost::detail
ctor_arg	iterator/iterator_archetypes.hpp	/^  struct ctor_arg {};$/;"	s	namespace:boost::detail
cv_value_type	iterator/transform_iterator.hpp	/^        >::type cv_value_type;$/;"	t	struct:boost::detail::transform_iterator_base	access:private
decrement	iterator/filter_iterator.hpp	/^      void decrement()$/;"	f	class:boost::filter_iterator	access:private	signature:()
decrement	iterator/iterator_adaptor.hpp	/^      void decrement() $/;"	f	class:boost::iterator_adaptor	access:private	signature:()
decrement	iterator/iterator_facade.hpp	/^      static void decrement(Facade& f)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade& f)
decrement	iterator/reverse_iterator.hpp	/^      void decrement() { ++this->base_reference(); }$/;"	f	class:boost::reverse_iterator	access:private	signature:()
decrement	iterator/zip_iterator.hpp	/^    void decrement()$/;"	f	class:boost::zip_iterator	access:private	signature:()
decrement_iterator	iterator/zip_iterator.hpp	/^    struct decrement_iterator$/;"	s	namespace:boost::detail
dereference	iterator/counting_iterator.hpp	/^    typename super_t::reference dereference() const$/;"	f	class:boost::counting_iterator	access:private	signature:() const
dereference	iterator/function_input_iterator.hpp	/^                dereference() const {$/;"	f	class:boost::impl::function_input_iterator::Function	access:public	signature:() const
dereference	iterator/function_input_iterator.hpp	/^                dereference() const {$/;"	f	class:boost::impl::function_pointer_input_iterator::function_types::result_type	access:public	signature:() const
dereference	iterator/indirect_iterator.hpp	/^      typename super_t::reference dereference() const$/;"	f	class:boost::indirect_iterator	access:private	signature:() const
dereference	iterator/iterator_adaptor.hpp	/^      typename super_t::reference dereference() const$/;"	f	class:boost::iterator_adaptor	access:private	signature:() const
dereference	iterator/iterator_facade.hpp	/^      static typename Facade::reference dereference(Facade const& f)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade const& f)
dereference	iterator/permutation_iterator.hpp	/^    typename super_t::reference dereference() const$/;"	f	class:boost::permutation_iterator	access:private	signature:() const
dereference	iterator/reverse_iterator.hpp	/^      typename super_t::reference dereference() const { return *boost::prior(this->base()); }$/;"	f	class:boost::reverse_iterator	access:private	signature:() const
dereference	iterator/transform_iterator.hpp	/^    typename super_t::reference dereference() const$/;"	f	class:boost::transform_iterator	access:private	signature:() const
dereference	iterator/zip_iterator.hpp	/^    typename super_t::reference dereference() const$/;"	f	class:boost::zip_iterator	access:private	signature:() const
dereference_iterator	iterator/zip_iterator.hpp	/^    struct dereference_iterator$/;"	s	namespace:boost::detail
dereferenceable	iterator/indirect_iterator.hpp	/^        typedef typename iterator_traits<Iter>::value_type dereferenceable;$/;"	t	struct:boost::detail::indirect_base	access:public
derived	iterator/iterator_facade.hpp	/^      Derived const& derived() const$/;"	f	class:boost::iterator_facade	access:private	signature:() const
derived	iterator/iterator_facade.hpp	/^      Derived& derived()$/;"	f	class:boost::iterator_facade	access:private	signature:()
derived	iterator/iterator_facade.hpp	/^      static I const& derived(iterator_facade<I,V,TC,R,D> const& facade)$/;"	f	class:boost::iterator_core_access	access:public	signature:(iterator_facade<I,V,TC,R,D> const& facade)
derived	iterator/iterator_facade.hpp	/^      static I& derived(iterator_facade<I,V,TC,R,D>& facade)$/;"	f	class:boost::iterator_core_access	access:public	signature:(iterator_facade<I,V,TC,R,D>& facade)
detail	iterator/counting_iterator.hpp	/^namespace detail$/;"	n	namespace:boost
detail	iterator/detail/any_conversion_eater.hpp	/^namespace boost { namespace detail {$/;"	n	namespace:boost
detail	iterator/detail/facade_iterator_category.hpp	/^namespace boost { namespace detail  {$/;"	n	namespace:boost
detail	iterator/detail/minimum_category.hpp	/^namespace boost { namespace detail { $/;"	n	namespace:boost
detail	iterator/filter_iterator.hpp	/^  namespace detail$/;"	n	namespace:boost
detail	iterator/indirect_iterator.hpp	/^  namespace detail$/;"	n	namespace:boost
detail	iterator/is_lvalue_iterator.hpp	/^namespace detail$/;"	n	namespace:boost
detail	iterator/is_readable_iterator.hpp	/^namespace detail$/;"	n	namespace:boost
detail	iterator/iterator_adaptor.hpp	/^  namespace detail$/;"	n	namespace:boost
detail	iterator/iterator_archetypes.hpp	/^namespace detail$/;"	n	namespace:boost
detail	iterator/iterator_categories.hpp	/^namespace detail$/;"	n	namespace:boost
detail	iterator/iterator_concepts.hpp	/^  namespace detail$/;"	n	namespace:boost_concepts
detail	iterator/iterator_facade.hpp	/^  namespace detail$/;"	n	namespace:boost
detail	iterator/transform_iterator.hpp	/^  namespace detail $/;"	n	namespace:boost
detail	iterator/zip_iterator.hpp	/^  namespace detail$/;"	n	namespace:boost
difference	iterator/counting_iterator.hpp	/^      >::type difference;$/;"	t	struct:boost::detail::counting_iterator_base	access:public
difference_type	iterator/counting_iterator.hpp	/^    typedef typename super_t::difference_type difference_type;$/;"	t	class:boost::counting_iterator	access:public
difference_type	iterator/iterator_archetypes.hpp	/^          typedef bogus difference_type;$/;"	t	struct:boost::detail::traversal_archetype_impl::archetype	access:public
difference_type	iterator/iterator_archetypes.hpp	/^          typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::detail::traversal_archetype_impl::archetype	access:public
difference_type	iterator/iterator_archetypes.hpp	/^    typedef typename base::difference_type difference_type;$/;"	t	struct:boost::iterator_archetype	access:public
difference_type	iterator/iterator_facade.hpp	/^      typedef Difference difference_type;$/;"	t	class:boost::iterator_facade	access:public
difference_type	iterator/zip_iterator.hpp	/^            >::difference_type difference_type;$/;"	t	struct:boost::detail::zip_iterator_base	access:private
distance	iterator/counting_iterator.hpp	/^      static Difference distance(Incrementable1 x, Incrementable2 y)$/;"	f	struct:boost::detail::iterator_distance	access:public	signature:(Incrementable1 x, Incrementable2 y)
distance	iterator/counting_iterator.hpp	/^      static Difference distance(Incrementable1 x, Incrementable2 y)$/;"	f	struct:boost::detail::number_distance	access:public	signature:(Incrementable1 x, Incrementable2 y)
distance_from	iterator/iterator_facade.hpp	/^      static typename Facade1::difference_type distance_from($/;"	f	class:boost::iterator_core_access	access:public	signature:( Facade1 const& f1, Facade2 const& f2, mpl::true_)
distance_from	iterator/iterator_facade.hpp	/^      static typename Facade2::difference_type distance_from($/;"	f	class:boost::iterator_core_access	access:public	signature:( Facade1 const& f1, Facade2 const& f2, mpl::false_)
distance_to	iterator/counting_iterator.hpp	/^    distance_to(counting_iterator<OtherIncrementable, CategoryOrTraversal, Difference> const& y) const$/;"	f	class:boost::counting_iterator	access:private	signature:(counting_iterator<OtherIncrementable, CategoryOrTraversal, Difference> const& y) const
distance_to	iterator/iterator_adaptor.hpp	/^      typename super_t::difference_type distance_to($/;"	f	class:boost::iterator_adaptor	access:private	signature:( iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& y) const
distance_to	iterator/reverse_iterator.hpp	/^      distance_to(reverse_iterator<OtherIterator> const& y) const$/;"	f	class:boost::reverse_iterator	access:private	signature:(reverse_iterator<OtherIterator> const& y) const
distance_to	iterator/zip_iterator.hpp	/^      typename super_t::difference_type distance_to($/;"	f	class:boost::zip_iterator	access:private	signature:( const zip_iterator<OtherIteratorTuple>& other ) const
enable_if	iterator/detail/enable_if.hpp	/^    struct enable_if$/;"	s	namespace:boost::iterators	inherits:enabled::,base
enable_if_convertible	iterator/iterator_adaptor.hpp	/^  struct enable_if_convertible$/;"	s	namespace:boost
enable_if_interoperable	iterator/iterator_facade.hpp	/^    struct enable_if_interoperable$/;"	s	namespace:boost::detail
enabled	iterator/detail/enable_if.hpp	/^    struct enabled$/;"	s	namespace:boost::iterators
enabled	iterator/detail/enable_if.hpp	/^    struct enabled<false>$/;"	s	namespace:boost::iterators
end	iterator/filter_iterator.hpp	/^      Iterator end() const { return m_end; }$/;"	f	class:boost::filter_iterator	access:public	signature:() const
equal	iterator/function_input_iterator.hpp	/^            bool equal(function_input_iterator const & other) const {$/;"	f	class:boost::impl::function_input_iterator	access:public	signature:(function_input_iterator const & other) const
equal	iterator/function_input_iterator.hpp	/^            bool equal(function_pointer_input_iterator const & other) const {$/;"	f	class:boost::impl::function_pointer_input_iterator	access:public	signature:(function_pointer_input_iterator const & other) const
equal	iterator/iterator_adaptor.hpp	/^      bool equal(iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& x) const$/;"	f	class:boost::iterator_adaptor	access:private	signature:(iterator_adaptor<OtherDerived, OtherIterator, V, C, R, D> const& x) const
equal	iterator/iterator_facade.hpp	/^      static bool equal(Facade1 const& f1, Facade2 const& f2, mpl::false_)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade1 const& f1, Facade2 const& f2, mpl::false_)
equal	iterator/iterator_facade.hpp	/^      static bool equal(Facade1 const& f1, Facade2 const& f2, mpl::true_)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade1 const& f1, Facade2 const& f2, mpl::true_)
equal	iterator/zip_iterator.hpp	/^    bool equal(const zip_iterator<OtherIteratorTuple>& other) const$/;"	f	class:boost::zip_iterator	access:private	signature:(const zip_iterator<OtherIteratorTuple>& other) const
f	iterator/function_input_iterator.hpp	/^            Function * f;$/;"	m	class:boost::impl::function_input_iterator	access:private
f	iterator/function_input_iterator.hpp	/^            Function f;$/;"	m	class:boost::impl::function_pointer_input_iterator	access:private
facade_iterator_category	iterator/detail/facade_iterator_category.hpp	/^struct facade_iterator_category$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
facade_iterator_category_impl	iterator/detail/facade_iterator_category.hpp	/^struct facade_iterator_category_impl$/;"	s	namespace:boost::detail
filter_iterator	iterator/filter_iterator.hpp	/^      filter_iterator($/;"	f	class:boost::filter_iterator	access:public	signature:( filter_iterator<Predicate, OtherIterator> const& t , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0 )
filter_iterator	iterator/filter_iterator.hpp	/^      filter_iterator() { }$/;"	f	class:boost::filter_iterator	access:public	signature:()
filter_iterator	iterator/filter_iterator.hpp	/^      filter_iterator(Iterator x, Iterator end_ = Iterator())$/;"	f	class:boost::filter_iterator	access:public	signature:(Iterator x, Iterator end_ = Iterator())
filter_iterator	iterator/filter_iterator.hpp	/^      filter_iterator(Predicate f, Iterator x, Iterator end_ = Iterator())$/;"	f	class:boost::filter_iterator	access:public	signature:(Predicate f, Iterator x, Iterator end_ = Iterator())
filter_iterator	iterator/filter_iterator.hpp	/^  class filter_iterator$/;"	c	namespace:boost	inherits:detail::filter_iterator_base::type
filter_iterator_base	iterator/filter_iterator.hpp	/^    struct filter_iterator_base$/;"	s	namespace:boost::detail
forward_readable_iterator_test	iterator/new_iterator_tests.hpp	/^void forward_readable_iterator_test(Iterator i, Iterator j, T val1, T val2)$/;"	f	namespace:boost	signature:(Iterator i, Iterator j, T val1, T val2)
forward_swappable_iterator_test	iterator/new_iterator_tests.hpp	/^void forward_swappable_iterator_test(Iterator i, Iterator j, T val1, T val2)$/;"	f	namespace:boost	signature:(Iterator i, Iterator j, T val1, T val2)
forward_traversal_tag	iterator/iterator_categories.hpp	/^struct forward_traversal_tag$/;"	s	namespace:boost	inherits:single_pass_traversal_tag
function_input_iterator	iterator/function_input_iterator.hpp	/^            function_input_iterator() {}$/;"	f	class:boost::impl::function_input_iterator	access:public	signature:()
function_input_iterator	iterator/function_input_iterator.hpp	/^            function_input_iterator(Function & f_, Input state_ = Input()) $/;"	f	class:boost::impl::function_input_iterator	access:public	signature:(Function & f_, Input state_ = Input())
function_input_iterator	iterator/function_input_iterator.hpp	/^        class function_input_iterator$/;"	c	namespace:boost::impl	inherits:iterator_facade
function_input_iterator	iterator/function_input_iterator.hpp	/^        function_input_iterator(Function & f, Input i)$/;"	f	class:boost::function_input_iterator	access:public	signature:(Function & f, Input i)
function_input_iterator	iterator/function_input_iterator.hpp	/^    class function_input_iterator $/;"	c	namespace:boost	inherits:mpl::if_::type
function_pointer_input_iterator	iterator/function_input_iterator.hpp	/^            function_pointer_input_iterator() {}$/;"	f	class:boost::impl::function_pointer_input_iterator	access:public	signature:()
function_pointer_input_iterator	iterator/function_input_iterator.hpp	/^            function_pointer_input_iterator(Function &f_, Input state_ = Input())$/;"	f	class:boost::impl::function_pointer_input_iterator	access:public	signature:(Function &f_, Input state_ = Input())
function_pointer_input_iterator	iterator/function_input_iterator.hpp	/^        class function_pointer_input_iterator$/;"	c	namespace:boost::impl	inherits:iterator_facade
function_reference_input_iterator	iterator/function_input_iterator.hpp	/^            function_reference_input_iterator(Function & f_, Input state_ = Input())$/;"	f	class:boost::impl::function_reference_input_iterator	access:public	signature:(Function & f_, Input state_ = Input())
function_reference_input_iterator	iterator/function_input_iterator.hpp	/^        class function_reference_input_iterator$/;"	c	namespace:boost::impl	inherits:function_pointer_input_iterator
functor	iterator/transform_iterator.hpp	/^    UnaryFunc functor() const$/;"	f	class:boost::transform_iterator	access:public	signature:() const
get_iterator_tuple	iterator/zip_iterator.hpp	/^    const IteratorTuple& get_iterator_tuple() const$/;"	f	class:boost::zip_iterator	access:public	signature:() const
has_access	iterator/iterator_archetypes.hpp	/^  struct has_access$/;"	s	namespace:boost::iterator_archetypes	inherits:mpl::equal_to
helper	iterator/iterator_facade.hpp	/^        >::type& helper(R const&);$/;"	p	struct:boost::detail::is_non_proxy_reference_impl	access:public	signature:(R const&)
i	iterator/iterator_concepts.hpp	/^      Iterator i;$/;"	m	struct:boost_concepts::WritableIterator	access:private
ia_dflt_help	iterator/iterator_adaptor.hpp	/^    struct ia_dflt_help$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
impl	iterator/function_input_iterator.hpp	/^    namespace impl {$/;"	n	namespace:boost
increment	iterator/filter_iterator.hpp	/^      void increment()$/;"	f	class:boost::filter_iterator	access:private	signature:()
increment	iterator/function_input_iterator.hpp	/^            void increment() {$/;"	f	class:boost::impl::function_input_iterator	access:public	signature:()
increment	iterator/function_input_iterator.hpp	/^            void increment() {$/;"	f	class:boost::impl::function_pointer_input_iterator	access:public	signature:()
increment	iterator/iterator_adaptor.hpp	/^      void increment() { ++m_iterator; }$/;"	f	class:boost::iterator_adaptor	access:private	signature:()
increment	iterator/iterator_facade.hpp	/^      static void increment(Facade& f)$/;"	f	class:boost::iterator_core_access	access:public	signature:(Facade& f)
increment	iterator/reverse_iterator.hpp	/^      void increment() { --this->base_reference(); }$/;"	f	class:boost::reverse_iterator	access:private	signature:()
increment	iterator/zip_iterator.hpp	/^    void increment()$/;"	f	class:boost::zip_iterator	access:private	signature:()
increment_iterator	iterator/zip_iterator.hpp	/^    struct increment_iterator$/;"	s	namespace:boost::detail
incrementable_traversal_tag	iterator/iterator_categories.hpp	/^struct incrementable_traversal_tag $/;"	s	namespace:boost	inherits:no_traversal_tag
indirect_base	iterator/indirect_iterator.hpp	/^    struct indirect_base$/;"	s	namespace:boost::detail
indirect_base	iterator/indirect_iterator.hpp	/^    struct indirect_base<int, int, int, int, int> {};$/;"	s	namespace:boost::detail
indirect_iterator	iterator/indirect_iterator.hpp	/^      indirect_iterator($/;"	f	class:boost::indirect_iterator	access:public	signature:( indirect_iterator< Iterator2, Value2, Category2, Reference2, Difference2 > const& y , typename enable_if_convertible<Iterator2, Iterator>::type* = 0 )
indirect_iterator	iterator/indirect_iterator.hpp	/^      indirect_iterator() {}$/;"	f	class:boost::indirect_iterator	access:public	signature:()
indirect_iterator	iterator/indirect_iterator.hpp	/^      indirect_iterator(Iterator iter)$/;"	f	class:boost::indirect_iterator	access:public	signature:(Iterator iter)
indirect_iterator	iterator/indirect_iterator.hpp	/^  class indirect_iterator$/;"	c	namespace:boost	inherits:detail::indirect_base::type
infinite	iterator/function_input_iterator.hpp	/^    struct infinite {$/;"	s	namespace:boost
inner	iterator/detail/minimum_category.hpp	/^    typedef typename outer::template apply<T1,T2> inner;$/;"	t	struct:boost::detail::minimum_category	access:public
input_output_iterator_tag	iterator/detail/facade_iterator_category.hpp	/^struct input_output_iterator_tag$/;"	s	namespace:boost::detail	inherits:std::input_iterator_tag
interop_rand_access_constraints	iterator/iterator_concepts.hpp	/^    void interop_rand_access_constraints($/;"	f	namespace:boost_concepts::detail	signature:( Iterator1 const& i1, Iterator2 const& i2, boost::random_access_traversal_tag, boost::random_access_traversal_tag)
interop_rand_access_constraints	iterator/iterator_concepts.hpp	/^    void interop_rand_access_constraints($/;"	f	namespace:boost_concepts::detail	signature:( Iterator1 const&, Iterator2 const&, boost::single_pass_traversal_tag, boost::single_pass_traversal_tag)
interop_single_pass_constraints	iterator/iterator_concepts.hpp	/^    void interop_single_pass_constraints(Iterator1 const& i1, Iterator2 const& i2)$/;"	f	namespace:boost_concepts::detail	signature:(Iterator1 const& i1, Iterator2 const& i2)
is_convertible	iterator/iterator_adaptor.hpp	/^  struct is_convertible<use_default,To>$/;"	s	namespace:boost	inherits:mpl::false_
is_interoperable	iterator/interoperable.hpp	/^  struct is_interoperable$/;"	s	namespace:boost	inherits:mpl::true_
is_iterator_category	iterator/detail/facade_iterator_category.hpp	/^struct is_iterator_category$/;"	s	namespace:boost::detail	inherits:mpl::or_
is_iterator_traversal	iterator/detail/facade_iterator_category.hpp	/^struct is_iterator_traversal$/;"	s	namespace:boost::detail	inherits:is_convertible
is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl$/;"	s	namespace:boost::detail
is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl<const void>$/;"	s	namespace:boost::detail
is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl<const volatile void>$/;"	s	namespace:boost::detail
is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl<void>$/;"	s	namespace:boost::detail
is_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_lvalue_iterator_impl<volatile void>$/;"	s	namespace:boost::detail
is_non_const_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_non_const_lvalue_iterator_impl$/;"	s	namespace:boost::detail	inherits:is_lvalue_iterator_impl::,rebind
is_non_proxy_reference	iterator/iterator_facade.hpp	/^    struct is_non_proxy_reference$/;"	s	namespace:boost::detail	inherits:is_convertible
is_non_proxy_reference	iterator/iterator_facade.hpp	/^    struct is_non_proxy_reference$/;"	s	namespace:boost::detail	inherits:mpl::bool_
is_non_proxy_reference_impl	iterator/iterator_facade.hpp	/^    struct is_non_proxy_reference_impl$/;"	s	namespace:boost::detail
is_numeric	iterator/counting_iterator.hpp	/^  struct is_numeric$/;"	s	namespace:boost::detail	inherits:mpl::bool_
is_numeric	iterator/counting_iterator.hpp	/^  struct is_numeric< ::boost::long_long_type>$/;"	s	namespace:boost::detail	inherits:mpl::true_
is_numeric	iterator/counting_iterator.hpp	/^  struct is_numeric< ::boost::ulong_long_type>$/;"	s	namespace:boost::detail	inherits:mpl::true_
is_numeric	iterator/counting_iterator.hpp	/^  struct is_numeric<wchar_t>$/;"	s	namespace:boost::detail	inherits:mpl::true_
is_numeric_impl	iterator/counting_iterator.hpp	/^  struct is_numeric_impl$/;"	s	namespace:boost::detail
is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl$/;"	s	namespace:boost::detail
is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl<const void>$/;"	s	namespace:boost::detail
is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl<const volatile void>$/;"	s	namespace:boost::detail
is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl<void>$/;"	s	namespace:boost::detail
is_readable_iterator_impl	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl<volatile void>$/;"	s	namespace:boost::detail
is_readable_iterator_impl2	iterator/is_readable_iterator.hpp	/^  struct is_readable_iterator_impl2$/;"	s	namespace:boost::detail	inherits:is_readable_iterator_impl::,rebind
is_readable_lvalue_iterator_impl	iterator/is_lvalue_iterator.hpp	/^  struct is_readable_lvalue_iterator_impl$/;"	s	namespace:boost::detail	inherits:is_lvalue_iterator_impl::,rebind
iterator_access_archetype	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype$/;"	s	namespace:boost	inherits:mpl::aux::msvc_eti_base::type
iterator_access_archetype_impl	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype_impl$/;"	s	namespace:boost
iterator_access_archetype_impl	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype_impl<$/;"	s	namespace:boost
iterator_access_archetype_impl	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype_impl<iterator_archetypes::readable_lvalue_iterator_t>$/;"	s	namespace:boost
iterator_access_archetype_impl	iterator/iterator_archetypes.hpp	/^struct iterator_access_archetype_impl<iterator_archetypes::writable_lvalue_iterator_t>$/;"	s	namespace:boost
iterator_adaptor	iterator/iterator_adaptor.hpp	/^      explicit iterator_adaptor(Base const &iter)$/;"	f	class:boost::iterator_adaptor	access:public	signature:(Base const &iter)
iterator_adaptor	iterator/iterator_adaptor.hpp	/^      iterator_adaptor() {}$/;"	f	class:boost::iterator_adaptor	access:public	signature:()
iterator_adaptor	iterator/iterator_adaptor.hpp	/^  class iterator_adaptor$/;"	c	namespace:boost	inherits:boost::detail::iterator_adaptor_base::type
iterator_adaptor_	iterator/iterator_adaptor.hpp	/^      typedef iterator_adaptor<Derived,Base,Value,Traversal,Reference,Difference> iterator_adaptor_;$/;"	t	class:boost::iterator_adaptor	access:protected
iterator_adaptor_assert_traversal	iterator/iterator_adaptor.hpp	/^    inline void iterator_adaptor_assert_traversal ()$/;"	f	namespace:boost::detail	signature:()
iterator_adaptor_base	iterator/iterator_adaptor.hpp	/^    struct iterator_adaptor_base$/;"	s	namespace:boost::detail
iterator_archetype	iterator/iterator_archetypes.hpp	/^    iterator_archetype() { }$/;"	f	struct:boost::iterator_archetype	access:public	signature:()
iterator_archetype	iterator/iterator_archetypes.hpp	/^    iterator_archetype(iterator_archetype const& x)$/;"	f	struct:boost::iterator_archetype	access:public	signature:(iterator_archetype const& x)
iterator_archetype	iterator/iterator_archetypes.hpp	/^struct iterator_archetype$/;"	s	namespace:boost	inherits:detail::iterator_archetype_base,detail::iterator_archetype_base::workaround_iterator_base
iterator_archetype_base	iterator/iterator_archetypes.hpp	/^  struct iterator_archetype_base$/;"	s	namespace:boost::detail	inherits:iterator_access_archetype,traversal_archetype_base
iterator_archetypes	iterator/iterator_archetypes.hpp	/^namespace iterator_archetypes$/;"	n	namespace:boost
iterator_category	iterator/iterator_archetypes.hpp	/^      >::type iterator_category;$/;"	t	struct:boost::detail::iterator_archetype_base	access:public
iterator_category	iterator/iterator_archetypes.hpp	/^    typedef typename base::iterator_category iterator_category;$/;"	t	struct:boost::iterator_archetype	access:public
iterator_category	iterator/iterator_facade.hpp	/^        >::type iterator_category;$/;"	t	struct:boost::detail::iterator_facade_types	access:public
iterator_category	iterator/iterator_facade.hpp	/^      typedef typename associated_types::iterator_category iterator_category;$/;"	t	class:boost::iterator_facade	access:public
iterator_category_to_traversal	iterator/iterator_categories.hpp	/^struct iterator_category_to_traversal$/;"	s	namespace:boost	inherits:mpl::eval_if
iterator_category_with_traversal	iterator/detail/facade_iterator_category.hpp	/^struct iterator_category_with_traversal$/;"	s	namespace:boost::detail	inherits:Category,Traversal
iterator_core_access	iterator/iterator_facade.hpp	/^      iterator_core_access(); \/\/undefined$/;"	p	class:boost::iterator_core_access	access:private	signature:()
iterator_core_access	iterator/iterator_facade.hpp	/^  class iterator_core_access$/;"	c	namespace:boost
iterator_difference	iterator/iterator_traits.hpp	/^struct iterator_difference$/;"	s	namespace:boost
iterator_difference	iterator/iterator_traits.hpp	/^struct iterator_difference<int>$/;"	s	namespace:boost
iterator_distance	iterator/counting_iterator.hpp	/^  struct iterator_distance$/;"	s	namespace:boost::detail
iterator_facade	iterator/iterator_facade.hpp	/^  class iterator_facade$/;"	c	namespace:boost	inherits:boost::detail::iterator_facade_types::base
iterator_facade_	iterator/iterator_facade.hpp	/^      typedef iterator_facade<Derived,Value,CategoryOrTraversal,Reference,Difference> iterator_facade_;$/;"	t	class:boost::iterator_facade	access:protected
iterator_facade_default_category	iterator/detail/facade_iterator_category.hpp	/^struct iterator_facade_default_category$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
iterator_facade_types	iterator/iterator_facade.hpp	/^    struct iterator_facade_types$/;"	s	namespace:boost::detail
iterator_pointer	iterator/iterator_traits.hpp	/^struct iterator_pointer$/;"	s	namespace:boost
iterator_pointer	iterator/iterator_traits.hpp	/^struct iterator_pointer<int>$/;"	s	namespace:boost
iterator_reference	iterator/iterator_traits.hpp	/^struct iterator_reference$/;"	s	namespace:boost
iterator_reference	iterator/iterator_traits.hpp	/^struct iterator_reference<int>$/;"	s	namespace:boost
iterator_reference	iterator/zip_iterator.hpp	/^    struct iterator_reference$/;"	s	namespace:boost::detail
iterator_reference	iterator/zip_iterator.hpp	/^    struct iterator_reference<mpl::_1>$/;"	s	namespace:boost::detail
iterator_traversal	iterator/iterator_categories.hpp	/^struct iterator_traversal$/;"	s	namespace:boost	inherits:iterator_category_to_traversal
iterator_traversal	iterator/iterator_categories.hpp	/^struct iterator_traversal<mpl::_1>$/;"	s	namespace:boost
iterator_traversal	iterator/iterator_categories.hpp	/^struct iterator_traversal<mpl::_>$/;"	s	namespace:boost	inherits:iterator_traversal
iterator_value	iterator/iterator_traits.hpp	/^struct iterator_value$/;"	s	namespace:boost
iterator_value	iterator/iterator_traits.hpp	/^struct iterator_value<int>$/;"	s	namespace:boost
iterator_writability_disabled	iterator/detail/facade_iterator_category.hpp	/^struct iterator_writability_disabled$/;"	s	namespace:boost::detail	inherits:mpl::or_
iterators	iterator/detail/enable_if.hpp	/^  namespace iterators$/;"	n	namespace:boost
lvalue_iterator_bit	iterator/iterator_archetypes.hpp	/^    , lvalue_iterator_bit = 8$/;"	e	enum:boost::iterator_archetypes::__anon1
lvalue_iterator_t	iterator/iterator_archetypes.hpp	/^  typedef mpl::int_<lvalue_iterator_bit>::type lvalue_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
lvalue_preserver	iterator/is_lvalue_iterator.hpp	/^  T& lvalue_preserver(T&, int);$/;"	p	namespace:boost::detail	signature:(T&, int)
lvalue_preserver	iterator/is_lvalue_iterator.hpp	/^  not_an_lvalue lvalue_preserver(U const&, ...);$/;"	p	namespace:boost::detail	signature:(U const&, ...)
m_elt_iter	iterator/permutation_iterator.hpp	/^    ElementIterator m_elt_iter;$/;"	m	class:boost::permutation_iterator	access:public
m_end	iterator/filter_iterator.hpp	/^      Iterator m_end;$/;"	m	class:boost::filter_iterator	access:private
m_f	iterator/transform_iterator.hpp	/^    UnaryFunc m_f;$/;"	m	class:boost::transform_iterator	access:private
m_iter	iterator/iterator_facade.hpp	/^        Iterator m_iter;$/;"	m	class:boost::detail::operator_brackets_proxy	access:private
m_iterator	iterator/iterator_adaptor.hpp	/^      Base m_iterator;$/;"	m	class:boost::iterator_adaptor	access:private
m_iterator_tuple	iterator/zip_iterator.hpp	/^    IteratorTuple m_iterator_tuple;$/;"	m	class:boost::zip_iterator	access:private
m_predicate	iterator/filter_iterator.hpp	/^      Predicate m_predicate;$/;"	m	class:boost::filter_iterator	access:private
m_ref	iterator/iterator_facade.hpp	/^            Reference m_ref;$/;"	m	struct:boost::detail::operator_arrow_dispatch::proxy	access:public
m_step	iterator/zip_iterator.hpp	/^      DiffType m_step;$/;"	m	class:boost::detail::advance_iterator	access:private
make_counting_iterator	iterator/counting_iterator.hpp	/^make_counting_iterator(Incrementable x)$/;"	f	namespace:boost	signature:(Incrementable x)
make_filter_iterator	iterator/filter_iterator.hpp	/^  make_filter_iterator($/;"	f	namespace:boost	signature:( typename iterators::enable_if< is_class<Predicate> , Iterator >::type x , Iterator end = Iterator() , Predicate* = 0 )
make_filter_iterator	iterator/filter_iterator.hpp	/^  make_filter_iterator(Predicate f, Iterator x, Iterator end = Iterator())$/;"	f	namespace:boost	signature:(Predicate f, Iterator x, Iterator end = Iterator())
make_function_input_iterator	iterator/function_input_iterator.hpp	/^        make_function_input_iterator(Function & f, Input state) {$/;"	f	namespace:boost	signature:(Function & f, Input state)
make_function_input_iterator	iterator/function_input_iterator.hpp	/^        make_function_input_iterator(Function * f, Input state) {$/;"	f	namespace:boost	signature:(Function * f, Input state)
make_indirect_iterator	iterator/indirect_iterator.hpp	/^  indirect_iterator<Iter,Traits> make_indirect_iterator(Iter x, Traits* = 0)$/;"	f	namespace:boost	signature:(Iter x, Traits* = 0)
make_indirect_iterator	iterator/indirect_iterator.hpp	/^  indirect_iterator<Iter> make_indirect_iterator(Iter x)$/;"	f	namespace:boost	signature:(Iter x)
make_operator_brackets_result	iterator/iterator_facade.hpp	/^    operator_brackets_proxy<Iterator> make_operator_brackets_result(Iterator const& iter, mpl::true_)$/;"	f	namespace:boost::detail	signature:(Iterator const& iter, mpl::true_)
make_operator_brackets_result	iterator/iterator_facade.hpp	/^    typename Iterator::value_type make_operator_brackets_result(Iterator const& iter, mpl::false_)$/;"	f	namespace:boost::detail	signature:(Iterator const& iter, mpl::false_)
make_permutation_iterator	iterator/permutation_iterator.hpp	/^make_permutation_iterator( ElementIterator e, IndexIterator i )$/;"	f	namespace:boost	signature:( ElementIterator e, IndexIterator i )
make_reverse_iterator	iterator/reverse_iterator.hpp	/^  reverse_iterator<BidirectionalIterator> make_reverse_iterator(BidirectionalIterator x)$/;"	f	namespace:boost	signature:(BidirectionalIterator x)
make_transform_iterator	iterator/transform_iterator.hpp	/^  make_transform_iterator(Iterator it)$/;"	f	namespace:boost	signature:(Iterator it)
make_transform_iterator	iterator/transform_iterator.hpp	/^  make_transform_iterator(Iterator it, Return (*fun)(Argument))$/;"	f	namespace:boost	signature:(Iterator it, Return (*fun)(Argument))
make_transform_iterator	iterator/transform_iterator.hpp	/^  make_transform_iterator(Iterator it, UnaryFunc fun)$/;"	f	namespace:boost	signature:(Iterator it, UnaryFunc fun)
make_zip_iterator	iterator/zip_iterator.hpp	/^  make_zip_iterator(IteratorTuple t)$/;"	f	namespace:boost	signature:(IteratorTuple t)
minimum_category	iterator/detail/minimum_category.hpp	/^struct minimum_category$/;"	s	namespace:boost::detail
minimum_category	iterator/detail/minimum_category.hpp	/^struct minimum_category<int,int>$/;"	s	namespace:boost::detail
minimum_category	iterator/detail/minimum_category.hpp	/^struct minimum_category<mpl::_1,mpl::_2>$/;"	s	namespace:boost::detail
minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl$/;"	s	namespace:boost::detail
minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl<false,false>$/;"	s	namespace:boost::detail
minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl<false,true>$/;"	s	namespace:boost::detail
minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl<true,false>$/;"	s	namespace:boost::detail
minimum_category_impl	iterator/detail/minimum_category.hpp	/^struct minimum_category_impl<true,true>$/;"	s	namespace:boost::detail
minimum_traversal_category_in_iterator_tuple	iterator/zip_iterator.hpp	/^      struct minimum_traversal_category_in_iterator_tuple<int>$/;"	s	namespace:boost::detail
minimum_traversal_category_in_iterator_tuple	iterator/zip_iterator.hpp	/^    struct minimum_traversal_category_in_iterator_tuple$/;"	s	namespace:boost::detail
my_traversal	iterator/iterator_adaptor.hpp	/^      >::type my_traversal;$/;"	t	class:boost::iterator_adaptor	access:private
no_operator_brackets	iterator/iterator_archetypes.hpp	/^  struct no_operator_brackets {};$/;"	s	namespace:boost::detail
no_traversal_tag	iterator/iterator_categories.hpp	/^struct no_traversal_tag {};$/;"	s	namespace:boost
non_const_lvalue_iterator_test	iterator/new_iterator_tests.hpp	/^void non_const_lvalue_iterator_test(Iterator i, T v1, T v2)$/;"	f	namespace:boost	signature:(Iterator i, T v1, T v2)
not_an_lvalue	iterator/is_lvalue_iterator.hpp	/^  struct not_an_lvalue {};$/;"	s	namespace:boost::detail
number_distance	iterator/counting_iterator.hpp	/^  struct number_distance$/;"	s	namespace:boost::detail
numeric_difference	iterator/counting_iterator.hpp	/^  struct numeric_difference$/;"	s	namespace:boost::detail
old_category_to_traversal	iterator/iterator_categories.hpp	/^  struct old_category_to_traversal$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
old_category_to_traversal	iterator/iterator_categories.hpp	/^  struct old_category_to_traversal<int>$/;"	s	namespace:boost::detail
operator !=	iterator/iterator_archetypes.hpp	/^  bool operator!=(traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&, traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&)
operator ()	iterator/zip_iterator.hpp	/^        typename apply<Iterator>::type operator()(Iterator const& it)$/;"	f	struct:boost::detail::dereference_iterator	access:public	signature:(Iterator const& it)
operator ()	iterator/zip_iterator.hpp	/^      void operator()(Iterator& it) const$/;"	f	class:boost::detail::advance_iterator	access:public	signature:(Iterator& it) const
operator ()	iterator/zip_iterator.hpp	/^      void operator()(Iterator& it)$/;"	f	struct:boost::detail::decrement_iterator	access:public	signature:(Iterator& it)
operator ()	iterator/zip_iterator.hpp	/^      void operator()(Iterator& it)$/;"	f	struct:boost::detail::increment_iterator	access:public	signature:(Iterator& it)
operator *	iterator/iterator_archetypes.hpp	/^        Value& operator*() const { return static_object<Value>::get(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
operator *	iterator/iterator_archetypes.hpp	/^        detail::assign_proxy<Value> operator*() const { return detail::assign_proxy<Value>(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
operator *	iterator/iterator_archetypes.hpp	/^        detail::read_write_proxy<Value> operator*() const { return detail::read_write_proxy<Value>(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
operator *	iterator/iterator_archetypes.hpp	/^        value_type operator*() const { return static_object<value_type>::get(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
operator *	iterator/iterator_facade.hpp	/^        operator*() const$/;"	f	class:boost::detail::postfix_increment_proxy	access:public	signature:() const
operator *	iterator/iterator_facade.hpp	/^        operator*() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
operator *	iterator/iterator_facade.hpp	/^      reference operator*() const$/;"	f	class:boost::iterator_facade	access:public	signature:() const
operator +	iterator/iterator_archetypes.hpp	/^  Derived& operator+(std::ptrdiff_t,$/;"	f	namespace:boost::detail	signature:(std::ptrdiff_t, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
operator +	iterator/iterator_archetypes.hpp	/^  Derived& operator+(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, std::ptrdiff_t)
operator ++	iterator/function_input_iterator.hpp	/^        infinite & operator++() { return *this; }$/;"	f	struct:boost::infinite	access:public	signature:()
operator ++	iterator/function_input_iterator.hpp	/^        infinite & operator++(int) { return *this; }$/;"	f	struct:boost::infinite	access:public	signature:(int)
operator ++	iterator/iterator_archetypes.hpp	/^          Derived  operator++(int) const { return (Derived&)static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(int) const
operator ++	iterator/iterator_archetypes.hpp	/^          Derived& operator++() { return (Derived&)static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:()
operator ++	iterator/iterator_facade.hpp	/^      Derived& operator++()$/;"	f	class:boost::iterator_facade	access:public	signature:()
operator ++	iterator/iterator_facade.hpp	/^      operator++(int)$/;"	f	class:boost::iterator_facade	access:public	signature:(int)
operator ++	iterator/iterator_facade.hpp	/^  operator++($/;"	f	namespace:boost	signature:( iterator_facade<I,V,TC,R,D>& i , int )
operator +=	iterator/iterator_archetypes.hpp	/^          Derived& operator+=(std::ptrdiff_t) { return static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(std::ptrdiff_t)
operator +=	iterator/iterator_facade.hpp	/^      Derived& operator+=(difference_type n)$/;"	f	class:boost::iterator_facade	access:public	signature:(difference_type n)
operator -	iterator/iterator_archetypes.hpp	/^  Derived& operator-(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, std::ptrdiff_t)
operator -	iterator/iterator_archetypes.hpp	/^  std::ptrdiff_t operator-(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
operator -	iterator/iterator_facade.hpp	/^      Derived operator-(difference_type x) const$/;"	f	class:boost::iterator_facade	access:public	signature:(difference_type x) const
operator --	iterator/iterator_archetypes.hpp	/^          Derived  operator--(int) const { return static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(int) const
operator --	iterator/iterator_archetypes.hpp	/^          Derived& operator--() { return static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:()
operator --	iterator/iterator_facade.hpp	/^      Derived operator--(int)$/;"	f	class:boost::iterator_facade	access:public	signature:(int)
operator --	iterator/iterator_facade.hpp	/^      Derived& operator--()$/;"	f	class:boost::iterator_facade	access:public	signature:()
operator -=	iterator/iterator_archetypes.hpp	/^          Derived& operator-=(std::ptrdiff_t) { return static_object<Derived>::get(); }$/;"	f	struct:boost::detail::traversal_archetype_impl::archetype	access:public	signature:(std::ptrdiff_t)
operator -=	iterator/iterator_facade.hpp	/^      Derived& operator-=(difference_type n)$/;"	f	class:boost::iterator_facade	access:public	signature:(difference_type n)
operator ->	iterator/iterator_archetypes.hpp	/^        Value* operator->() const { return 0; }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
operator ->	iterator/iterator_archetypes.hpp	/^        detail::arrow_proxy<Value> operator->() const { return detail::arrow_proxy<Value>(); }$/;"	f	struct:boost::iterator_access_archetype_impl::archetype	access:public	signature:() const
operator ->	iterator/iterator_archetypes.hpp	/^      T const* operator->() const { return 0; }$/;"	f	struct:boost::detail::arrow_proxy	access:public	signature:() const
operator ->	iterator/iterator_facade.hpp	/^            Reference* operator->() { return boost::addressof(m_ref); }$/;"	f	struct:boost::detail::operator_arrow_dispatch::proxy	access:public	signature:()
operator ->	iterator/iterator_facade.hpp	/^      pointer operator->() const$/;"	f	class:boost::iterator_facade	access:public	signature:() const
operator <	iterator/iterator_archetypes.hpp	/^  bool operator<(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
operator <=	iterator/iterator_archetypes.hpp	/^  bool operator<=(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
operator =	iterator/iterator_archetypes.hpp	/^      assign_proxy& operator=(T) { return *this; }$/;"	f	struct:boost::detail::assign_proxy	access:public	signature:(T)
operator =	iterator/iterator_archetypes.hpp	/^      read_write_proxy& operator=(T) { return *this; }$/;"	f	struct:boost::detail::read_write_proxy	access:public	signature:(T)
operator =	iterator/iterator_archetypes.hpp	/^    iterator_archetype& operator=(iterator_archetype const&)$/;"	f	struct:boost::iterator_archetype	access:public	signature:(iterator_archetype const&)
operator =	iterator/iterator_facade.hpp	/^        T const& operator=(T const& x) const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(T const& x) const
operator =	iterator/iterator_facade.hpp	/^        T& operator=(T& x) const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(T& x) const
operator =	iterator/iterator_facade.hpp	/^        operator_brackets_proxy& operator=(value_type const& val)$/;"	f	class:boost::detail::operator_brackets_proxy	access:public	signature:(value_type const& val)
operator =	iterator/iterator_facade.hpp	/^      iterator_facade& operator=(iterator_facade const&)$/;"	f	class:boost::iterator_facade	access:public	signature:(iterator_facade const&)
operator ==	iterator/function_input_iterator.hpp	/^        bool operator==(infinite &) const { return false; };$/;"	f	struct:boost::infinite	access:public	signature:(infinite &) const
operator ==	iterator/function_input_iterator.hpp	/^        bool operator==(infinite const &) const { return false; };$/;"	f	struct:boost::infinite	access:public	signature:(infinite const &) const
operator ==	iterator/iterator_archetypes.hpp	/^  bool operator==(traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&, traversal_archetype_<Derived, Value, single_pass_traversal_tag> const&)
operator >	iterator/iterator_archetypes.hpp	/^  bool operator>(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
operator >=	iterator/iterator_archetypes.hpp	/^  bool operator>=(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&,$/;"	f	namespace:boost::detail	signature:(traversal_archetype_<Derived, Value, random_access_traversal_tag> const&, traversal_archetype_<Derived, Value, random_access_traversal_tag> const&)
operator Iterator const&	iterator/iterator_facade.hpp	/^        operator Iterator const&() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
operator Reference*	iterator/iterator_facade.hpp	/^            operator Reference*() { return boost::addressof(m_ref); }$/;"	f	struct:boost::detail::operator_arrow_dispatch::proxy	access:public	signature:()
operator T	iterator/iterator_archetypes.hpp	/^      operator T() { return static_object<T>::get(); }$/;"	f	struct:boost::detail::read_proxy	access:public	signature:()
operator []	iterator/iterator_archetypes.hpp	/^      read_proxy<ValueType> operator[](std::ptrdiff_t n) const { return read_proxy<ValueType>(); }$/;"	f	struct:boost::detail::readable_operator_brackets	access:public	signature:(std::ptrdiff_t n) const
operator []	iterator/iterator_archetypes.hpp	/^      read_write_proxy<ValueType> operator[](std::ptrdiff_t n) const { return read_write_proxy<ValueType>(); }$/;"	f	struct:boost::detail::writable_operator_brackets	access:public	signature:(std::ptrdiff_t n) const
operator []	iterator/iterator_facade.hpp	/^      operator[](difference_type n) const$/;"	f	class:boost::iterator_facade	access:public	signature:(difference_type n) const
operator reference	iterator/iterator_facade.hpp	/^        operator reference() const$/;"	f	class:boost::detail::operator_brackets_proxy	access:public	signature:() const
operator std::output_iterator_tag	iterator/detail/facade_iterator_category.hpp	/^    operator std::output_iterator_tag() const$/;"	f	struct:boost::detail::input_output_iterator_tag	access:public	signature:() const
operator value_type&	iterator/iterator_facade.hpp	/^        operator value_type&() const$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:() const
operator_arrow_dispatch	iterator/iterator_facade.hpp	/^    struct operator_arrow_dispatch \/\/ proxy references$/;"	s	namespace:boost::detail
operator_arrow_dispatch	iterator/iterator_facade.hpp	/^    struct operator_arrow_dispatch<T&, Pointer> \/\/ "real" references$/;"	s	namespace:boost::detail
operator_arrow_dispatch	iterator/iterator_facade.hpp	/^    struct operator_arrow_dispatch<int, int>$/;"	s	namespace:boost::detail
operator_arrow_dispatch_	iterator/iterator_facade.hpp	/^      > operator_arrow_dispatch_;$/;"	t	class:boost::iterator_facade	access:private
operator_brackets	iterator/iterator_archetypes.hpp	/^  struct operator_brackets$/;"	s	namespace:boost::detail	inherits:mpl::aux::msvc_eti_base::type
operator_brackets_proxy	iterator/iterator_facade.hpp	/^        operator_brackets_proxy(Iterator const& iter)$/;"	f	class:boost::detail::operator_brackets_proxy	access:public	signature:(Iterator const& iter)
operator_brackets_proxy	iterator/iterator_facade.hpp	/^    class operator_brackets_proxy$/;"	c	namespace:boost::detail
operator_brackets_result	iterator/iterator_facade.hpp	/^    struct operator_brackets_result$/;"	s	namespace:boost::detail
outer	iterator/detail/minimum_category.hpp	/^    > outer;$/;"	t	struct:boost::detail::minimum_category	access:public
permutation_iterator	iterator/permutation_iterator.hpp	/^  explicit permutation_iterator(ElementIterator x, IndexIterator y) $/;"	f	class:boost::permutation_iterator	access:public	signature:(ElementIterator x, IndexIterator y)
permutation_iterator	iterator/permutation_iterator.hpp	/^  permutation_iterator($/;"	f	class:boost::permutation_iterator	access:public	signature:( permutation_iterator<OtherElementIterator, OtherIndexIterator> const& r , typename enable_if_convertible<OtherElementIterator, ElementIterator>::type* = 0 , typename enable_if_convertible<OtherIndexIterator, IndexIterator>::type* = 0 )
permutation_iterator	iterator/permutation_iterator.hpp	/^  permutation_iterator() : m_elt_iter() {}$/;"	f	class:boost::permutation_iterator	access:public	signature:()
permutation_iterator	iterator/permutation_iterator.hpp	/^class permutation_iterator$/;"	c	namespace:boost	inherits:iterator_adaptor
pointer	iterator/iterator_archetypes.hpp	/^        typedef Value*                          pointer;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
pointer	iterator/iterator_archetypes.hpp	/^        typedef void pointer;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
pointer	iterator/iterator_archetypes.hpp	/^    typedef typename base::pointer pointer;$/;"	t	struct:boost::iterator_archetype	access:public
pointer	iterator/iterator_facade.hpp	/^        >::type pointer;$/;"	t	struct:boost::detail::iterator_facade_types	access:public
pointer	iterator/iterator_facade.hpp	/^      typedef typename operator_arrow_dispatch_::result_type pointer;$/;"	t	class:boost::iterator_facade	access:public
postfix_increment_proxy	iterator/iterator_facade.hpp	/^        explicit postfix_increment_proxy(Iterator const& x)$/;"	f	class:boost::detail::postfix_increment_proxy	access:public	signature:(Iterator const& x)
postfix_increment_proxy	iterator/iterator_facade.hpp	/^    class postfix_increment_proxy$/;"	c	namespace:boost::detail
postfix_increment_result	iterator/iterator_facade.hpp	/^    struct postfix_increment_result$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
predicate	iterator/filter_iterator.hpp	/^      Predicate predicate() const { return m_predicate; }$/;"	f	class:boost::filter_iterator	access:public	signature:() const
proxy	iterator/iterator_facade.hpp	/^            explicit proxy(Reference const & x) : m_ref(x) {}$/;"	f	struct:boost::detail::operator_arrow_dispatch::proxy	access:public	signature:(Reference const & x)
proxy	iterator/iterator_facade.hpp	/^        struct proxy$/;"	s	struct:boost::detail::operator_arrow_dispatch	access:public
pure_traversal_tag	iterator/iterator_categories.hpp	/^  struct pure_traversal_tag$/;"	s	namespace:boost::detail	inherits:mpl::eval_if
pure_traversal_tag	iterator/iterator_categories.hpp	/^  struct pure_traversal_tag<int>$/;"	s	namespace:boost::detail
r	iterator/iterator_facade.hpp	/^        static Reference r;$/;"	m	struct:boost::detail::is_non_proxy_reference_impl	access:public
random_access_readable_iterator_test	iterator/new_iterator_tests.hpp	/^void random_access_readable_iterator_test(Iterator i, int N, TrueVals vals)$/;"	f	namespace:boost	signature:(Iterator i, int N, TrueVals vals)
random_access_traversal_tag	iterator/iterator_categories.hpp	/^struct random_access_traversal_tag$/;"	s	namespace:boost	inherits:bidirectional_traversal_tag
read_proxy	iterator/iterator_archetypes.hpp	/^  struct read_proxy$/;"	s	namespace:boost::detail
read_write_proxy	iterator/iterator_archetypes.hpp	/^  struct read_write_proxy$/;"	s	namespace:boost::detail	inherits:read_proxy
readable_iterator_bit	iterator/iterator_archetypes.hpp	/^      readable_iterator_bit = 1$/;"	e	enum:boost::iterator_archetypes::__anon1
readable_iterator_t	iterator/iterator_archetypes.hpp	/^  typedef mpl::int_<readable_iterator_bit>::type readable_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
readable_iterator_test	iterator/new_iterator_tests.hpp	/^void readable_iterator_test(const Iterator i1, T v)$/;"	f	namespace:boost	signature:(const Iterator i1, T v)
readable_iterator_traversal_test	iterator/new_iterator_tests.hpp	/^void readable_iterator_traversal_test(Iterator i1, T v, mpl::true_)$/;"	f	namespace:boost	signature:(Iterator i1, T v, mpl::true_)
readable_iterator_traversal_test	iterator/new_iterator_tests.hpp	/^void readable_iterator_traversal_test(const Iterator i1, T v, mpl::false_)$/;"	f	namespace:boost	signature:(const Iterator i1, T v, mpl::false_)
readable_lvalue_iterator_t	iterator/iterator_archetypes.hpp	/^          >::type readable_lvalue_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
readable_operator_brackets	iterator/iterator_archetypes.hpp	/^  struct readable_operator_brackets$/;"	s	namespace:boost::detail
readable_writable_iterator_t	iterator/iterator_archetypes.hpp	/^          >::type readable_writable_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
rebind	iterator/is_lvalue_iterator.hpp	/^      struct rebind : boost::mpl::false_$/;"	s	struct:boost::detail::is_lvalue_iterator_impl	inherits:boost::mpl::false_	access:public
rebind	iterator/is_lvalue_iterator.hpp	/^      struct rebind$/;"	s	struct:boost::detail::is_lvalue_iterator_impl	access:public
rebind	iterator/is_readable_iterator.hpp	/^      struct rebind : boost::mpl::false_$/;"	s	struct:boost::detail::is_readable_iterator_impl	inherits:boost::mpl::false_	access:public
rebind	iterator/is_readable_iterator.hpp	/^      struct rebind$/;"	s	struct:boost::detail::is_readable_iterator_impl	access:public
reference	iterator/iterator_archetypes.hpp	/^        typedef Value                           reference;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
reference	iterator/iterator_archetypes.hpp	/^        typedef Value&    reference;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
reference	iterator/iterator_archetypes.hpp	/^        typedef detail::read_write_proxy<Value>    reference;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
reference	iterator/iterator_archetypes.hpp	/^        typedef void reference;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
reference	iterator/iterator_archetypes.hpp	/^    typedef typename base::reference reference;$/;"	t	struct:boost::iterator_archetype	access:public
reference	iterator/iterator_facade.hpp	/^        typedef typename Iterator::reference  reference;$/;"	t	class:boost::detail::operator_brackets_proxy	access:private
reference	iterator/iterator_facade.hpp	/^      typedef Reference reference;$/;"	t	class:boost::iterator_facade	access:public
reference	iterator/transform_iterator.hpp	/^        >::type reference;$/;"	t	struct:boost::detail::transform_iterator_base	access:private
reference	iterator/zip_iterator.hpp	/^        detail::tuple_of_references<IteratorTuple>::type reference;$/;"	t	struct:boost::detail::zip_iterator_base	access:private
result_type	iterator/iterator_facade.hpp	/^        typedef Pointer result_type;$/;"	t	struct:boost::detail::operator_arrow_dispatch	access:public
result_type	iterator/iterator_facade.hpp	/^        typedef int result_type;$/;"	t	struct:boost::detail::operator_arrow_dispatch	access:public
result_type	iterator/iterator_facade.hpp	/^        typedef proxy result_type;$/;"	t	struct:boost::detail::operator_arrow_dispatch	access:public
reverse_iterator	iterator/reverse_iterator.hpp	/^      explicit reverse_iterator(Iterator x) $/;"	f	class:boost::reverse_iterator	access:public	signature:(Iterator x)
reverse_iterator	iterator/reverse_iterator.hpp	/^      reverse_iterator($/;"	f	class:boost::reverse_iterator	access:public	signature:( reverse_iterator<OtherIterator> const& r , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0 )
reverse_iterator	iterator/reverse_iterator.hpp	/^      reverse_iterator() {}$/;"	f	class:boost::reverse_iterator	access:public	signature:()
reverse_iterator	iterator/reverse_iterator.hpp	/^  class reverse_iterator$/;"	c	namespace:boost	inherits:iterator_adaptor
satisfy_predicate	iterator/filter_iterator.hpp	/^      void satisfy_predicate()$/;"	f	class:boost::filter_iterator	access:private	signature:()
single_pass_traversal_tag	iterator/iterator_categories.hpp	/^struct single_pass_traversal_tag$/;"	s	namespace:boost	inherits:incrementable_traversal_tag
state	iterator/function_input_iterator.hpp	/^            Input state;$/;"	m	class:boost::impl::function_input_iterator	access:private
state	iterator/function_input_iterator.hpp	/^            Input state;$/;"	m	class:boost::impl::function_pointer_input_iterator	access:private
stored_iterator	iterator/iterator_facade.hpp	/^        Iterator stored_iterator;$/;"	m	class:boost::detail::writable_postfix_increment_proxy	access:private
stored_value	iterator/iterator_facade.hpp	/^        mutable value_type stored_value;$/;"	m	class:boost::detail::postfix_increment_proxy	access:private
stored_value	iterator/iterator_facade.hpp	/^        mutable value_type stored_value;$/;"	m	class:boost::detail::writable_postfix_increment_proxy	access:private
super_t	iterator/counting_iterator.hpp	/^    >::type super_t;$/;"	t	class:boost::counting_iterator	access:private
super_t	iterator/filter_iterator.hpp	/^      >::type super_t;$/;"	t	class:boost::filter_iterator	access:private
super_t	iterator/indirect_iterator.hpp	/^      >::type super_t;$/;"	t	class:boost::indirect_iterator	access:private
super_t	iterator/iterator_adaptor.hpp	/^      >::type super_t;$/;"	t	class:boost::iterator_adaptor	access:protected
super_t	iterator/permutation_iterator.hpp	/^          , use_default, typename detail::iterator_traits<ElementIterator>::reference> super_t;$/;"	t	class:boost::permutation_iterator	access:private
super_t	iterator/reverse_iterator.hpp	/^      typedef iterator_adaptor< reverse_iterator<Iterator>, Iterator > super_t;$/;"	t	class:boost::reverse_iterator	access:private
super_t	iterator/transform_iterator.hpp	/^    super_t;$/;"	t	class:boost::transform_iterator	access:private
super_t	iterator/zip_iterator.hpp	/^     detail::zip_iterator_base<IteratorTuple>::type super_t;$/;"	t	class:boost::zip_iterator	access:private
swappable_iterator_bit	iterator/iterator_archetypes.hpp	/^    , swappable_iterator_bit = 4$/;"	e	enum:boost::iterator_archetypes::__anon1
swappable_iterator_t	iterator/iterator_archetypes.hpp	/^  typedef mpl::int_<swappable_iterator_bit>::type swappable_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
swappable_iterator_test	iterator/new_iterator_tests.hpp	/^void swappable_iterator_test(Iterator i, Iterator j)$/;"	f	namespace:boost	signature:(Iterator i, Iterator j)
tester	iterator/is_lvalue_iterator.hpp	/^      static char (& tester(any_conversion_eater, ...) )[2];$/;"	p	struct:boost::detail::is_lvalue_iterator_impl	access:public	signature:(any_conversion_eater, ...)
tester	iterator/is_lvalue_iterator.hpp	/^      static char tester(conversion_eater, int);$/;"	p	struct:boost::detail::is_lvalue_iterator_impl	access:public	signature:(conversion_eater, int)
tester	iterator/is_readable_iterator.hpp	/^      static char (& tester(any_conversion_eater, ...) )[2];$/;"	p	struct:boost::detail::is_readable_iterator_impl	access:public	signature:(any_conversion_eater, ...)
tester	iterator/is_readable_iterator.hpp	/^      static char tester(Value&, int);$/;"	p	struct:boost::detail::is_readable_iterator_impl	access:public	signature:(Value&, int)
transform_iterator	iterator/transform_iterator.hpp	/^    explicit transform_iterator(Iterator const& x)$/;"	f	class:boost::transform_iterator	access:public	signature:(Iterator const& x)
transform_iterator	iterator/transform_iterator.hpp	/^    transform_iterator($/;"	f	class:boost::transform_iterator	access:public	signature:( transform_iterator<OtherUnaryFunction, OtherIterator, OtherReference, OtherValue> const& t , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0 , typename enable_if_convertible<OtherUnaryFunction, UnaryFunc>::type* = 0 )
transform_iterator	iterator/transform_iterator.hpp	/^    transform_iterator() { }$/;"	f	class:boost::transform_iterator	access:public	signature:()
transform_iterator	iterator/transform_iterator.hpp	/^    transform_iterator(Iterator const& x, UnaryFunc f)$/;"	f	class:boost::transform_iterator	access:public	signature:(Iterator const& x, UnaryFunc f)
transform_iterator	iterator/transform_iterator.hpp	/^  class transform_iterator$/;"	c	namespace:boost	inherits:boost::detail::transform_iterator_base::type
transform_iterator_base	iterator/transform_iterator.hpp	/^    struct transform_iterator_base$/;"	s	namespace:boost::detail
traversal	iterator/counting_iterator.hpp	/^      >::type traversal;$/;"	t	struct:boost::detail::counting_iterator_base	access:public
traversal_archetype_	iterator/iterator_archetypes.hpp	/^      traversal_archetype_() {}$/;"	f	struct:boost::detail::traversal_archetype_	access:public	signature:()
traversal_archetype_	iterator/iterator_archetypes.hpp	/^      traversal_archetype_(ctor_arg arg)$/;"	f	struct:boost::detail::traversal_archetype_	access:public	signature:(ctor_arg arg)
traversal_archetype_	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_$/;"	s	namespace:boost::detail	inherits:mpl::aux::msvc_eti_base::type
traversal_archetype_base	iterator/iterator_archetypes.hpp	/^struct traversal_archetype_base $/;"	s	namespace:boost	inherits:detail::operator_brackets,detail::traversal_archetype_
traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl$/;"	s	namespace:boost::detail
traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<bidirectional_traversal_tag>$/;"	s	namespace:boost::detail
traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<forward_traversal_tag>$/;"	s	namespace:boost::detail
traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<incrementable_traversal_tag>$/;"	s	namespace:boost::detail
traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<random_access_traversal_tag>$/;"	s	namespace:boost::detail
traversal_archetype_impl	iterator/iterator_archetypes.hpp	/^  struct traversal_archetype_impl<single_pass_traversal_tag>$/;"	s	namespace:boost::detail
traversal_category	iterator/zip_iterator.hpp	/^        >::type traversal_category;$/;"	t	struct:boost::detail::zip_iterator_base	access:private
tuple_equal	iterator/zip_iterator.hpp	/^        bool tuple_equal($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( Tuple1 const& t1, Tuple2 const& t2 )
tuple_equal	iterator/zip_iterator.hpp	/^      inline bool tuple_equal(tuples::null_type, tuples::null_type)$/;"	f	namespace:boost::detail::tuple_impl_specific	signature:(tuples::null_type, tuples::null_type)
tuple_for_each	iterator/zip_iterator.hpp	/^      Fun BOOST_TUPLE_ALGO(tuple_for_each)($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( Tuple& t , Fun f BOOST_TUPLE_ALGO_RECURSE)
tuple_for_each	iterator/zip_iterator.hpp	/^      Fun BOOST_TUPLE_ALGO(tuple_for_each)($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( tuples::null_type , Fun f BOOST_TUPLE_ALGO_TERMINATOR )
tuple_for_each	iterator/zip_iterator.hpp	/^      tuple_for_each($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( Tuple& t, Fun f )
tuple_impl_specific	iterator/zip_iterator.hpp	/^    namespace tuple_impl_specific$/;"	n	namespace:boost::detail
tuple_meta_accumulate	iterator/zip_iterator.hpp	/^      struct tuple_meta_accumulate$/;"	s	namespace:boost::detail::tuple_impl_specific	inherits:mpl::eval_if
tuple_meta_accumulate_impl	iterator/zip_iterator.hpp	/^      struct tuple_meta_accumulate_impl$/;"	s	namespace:boost::detail::tuple_impl_specific
tuple_meta_transform	iterator/zip_iterator.hpp	/^      struct tuple_meta_transform$/;"	s	namespace:boost::detail::tuple_impl_specific	inherits:mpl::eval_if
tuple_meta_transform_impl	iterator/zip_iterator.hpp	/^      struct tuple_meta_transform_impl$/;"	s	namespace:boost::detail::tuple_impl_specific
tuple_of_references	iterator/zip_iterator.hpp	/^    struct tuple_of_references$/;"	s	namespace:boost::detail	inherits:tuple_impl_specific::tuple_meta_transform
tuple_of_traversal_tags	iterator/zip_iterator.hpp	/^      >::type tuple_of_traversal_tags;$/;"	t	struct:boost::detail::minimum_traversal_category_in_iterator_tuple	access:public
tuple_transform	iterator/zip_iterator.hpp	/^      BOOST_TUPLE_ALGO(tuple_transform)($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( const Tuple& t, Fun f BOOST_TUPLE_ALGO_RECURSE )
tuple_transform	iterator/zip_iterator.hpp	/^      tuple_transform($/;"	f	namespace:boost::detail::tuple_impl_specific	signature:( const Tuple& t, Fun f )
tuple_transform	iterator/zip_iterator.hpp	/^      tuples::null_type BOOST_TUPLE_ALGO(tuple_transform)$/;"	f	namespace:boost::detail::tuple_impl_specific	signature:(tuples::null_type const&, Fun BOOST_TUPLE_ALGO_TERMINATOR)
type	iterator/counting_iterator.hpp	/^      > type;$/;"	t	struct:boost::detail::counting_iterator_base	access:public
type	iterator/counting_iterator.hpp	/^      typedef typename boost::detail::numeric_traits<T>::difference_type type;$/;"	t	struct:boost::detail::numeric_difference	access:public
type	iterator/detail/enable_if.hpp	/^        typedef Return type;$/;"	t	struct:boost::iterators::enable_if	access:public
type	iterator/detail/enable_if.hpp	/^        typedef T type;$/;"	t	struct:boost::iterators::enabled::base	access:public
type	iterator/detail/facade_iterator_category.hpp	/^    >::type type;$/;"	t	struct:boost::detail::facade_iterator_category_impl	access:public
type	iterator/detail/minimum_category.hpp	/^        typedef T1 type;$/;"	t	struct:boost::detail::minimum_category_impl::apply	access:public
type	iterator/detail/minimum_category.hpp	/^        typedef T2 type;$/;"	t	struct:boost::detail::minimum_category_impl::apply	access:public
type	iterator/detail/minimum_category.hpp	/^    typedef int type;$/;"	t	struct:boost::detail::minimum_category	access:public
type	iterator/detail/minimum_category.hpp	/^    typedef typename inner::type type;$/;"	t	struct:boost::detail::minimum_category	access:public
type	iterator/detail/minimum_category.hpp	/^    typedef void type;$/;"	t	struct:boost::detail::minimum_category_impl	access:public
type	iterator/filter_iterator.hpp	/^        > type;$/;"	t	struct:boost::detail::filter_iterator_base	access:public
type	iterator/indirect_iterator.hpp	/^        > type;$/;"	t	struct:boost::detail::indirect_base	access:public
type	iterator/iterator_adaptor.hpp	/^        type;$/;"	t	struct:boost::detail::iterator_adaptor_base	access:public
type	iterator/iterator_adaptor.hpp	/^     >::type type;$/;"	t	struct:boost::enable_if_convertible	access:public
type	iterator/iterator_categories.hpp	/^      typedef int type;$/;"	t	struct:boost::detail::old_category_to_traversal	access:public
type	iterator/iterator_categories.hpp	/^      typedef int type;$/;"	t	struct:boost::detail::pure_traversal_tag	access:public
type	iterator/iterator_facade.hpp	/^            typedef bool type;$/;"	t	struct:boost::detail::always_bool2::apply	access:public
type	iterator/iterator_facade.hpp	/^        >::type type;$/;"	t	struct:boost::detail::enable_if_interoperable	access:public
type	iterator/iterator_facade.hpp	/^        >::type type;$/;"	t	struct:boost::detail::operator_brackets_result	access:public
type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::difference_type type;$/;"	t	struct:boost::iterator_difference	access:public
type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::iterator_category type;$/;"	t	struct:boost::BOOST_ITERATOR_CATEGORY	access:public
type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::pointer type;$/;"	t	struct:boost::iterator_pointer	access:public
type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::reference type;$/;"	t	struct:boost::iterator_reference	access:public
type	iterator/iterator_traits.hpp	/^    typedef typename boost::detail::iterator_traits<Iterator>::value_type type;$/;"	t	struct:boost::iterator_value	access:public
type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::BOOST_ITERATOR_CATEGORY	access:public
type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::iterator_difference	access:public
type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::iterator_pointer	access:public
type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::iterator_reference	access:public
type	iterator/iterator_traits.hpp	/^    typedef void type;$/;"	t	struct:boost::iterator_value	access:public
type	iterator/transform_iterator.hpp	/^        > type;$/;"	t	struct:boost::detail::transform_iterator_base	access:public
type	iterator/zip_iterator.hpp	/^          > type;$/;"	t	struct:boost::detail::tuple_impl_specific::tuple_meta_transform_impl	access:public
type	iterator/zip_iterator.hpp	/^          typedef int type;$/;"	t	struct:boost::detail::minimum_traversal_category_in_iterator_tuple	access:public
type	iterator/zip_iterator.hpp	/^         >::type type;$/;"	t	struct:boost::detail::tuple_impl_specific::tuple_meta_accumulate_impl	access:public
type	iterator/zip_iterator.hpp	/^        > type;$/;"	t	struct:boost::detail::zip_iterator_base	access:public
type	iterator/zip_iterator.hpp	/^        type;$/;"	t	struct:boost::detail::dereference_iterator::apply	access:public
type	iterator/zip_iterator.hpp	/^        typedef int type;$/;"	t	struct:boost::detail::zip_iterator_base	access:public
type	iterator/zip_iterator.hpp	/^        typedef typename iterator_traits<Iterator>::reference type;$/;"	t	struct:boost::detail::iterator_reference	access:public
type	iterator/zip_iterator.hpp	/^      >::type type;$/;"	t	struct:boost::detail::minimum_traversal_category_in_iterator_tuple	access:public
use_operator_brackets_proxy	iterator/iterator_facade.hpp	/^    struct use_operator_brackets_proxy$/;"	s	namespace:boost::detail	inherits:mpl::not_
v	iterator/iterator_concepts.hpp	/^      ValueType v;$/;"	m	struct:boost_concepts::WritableIterator	access:private
value	iterator/function_input_iterator.hpp	/^            mutable optional<typename Function::result_type> value;$/;"	m	class:boost::impl::function_input_iterator	access:private
value	iterator/function_input_iterator.hpp	/^            mutable optional<typename function_types::result_type<Function>::type> value;$/;"	m	class:boost::impl::function_pointer_input_iterator	access:private
value_type	iterator/iterator_archetypes.hpp	/^        typedef typename remove_cv<Value>::type value_type;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
value_type	iterator/iterator_archetypes.hpp	/^        typedef void value_type;$/;"	t	struct:boost::iterator_access_archetype_impl::archetype	access:public
value_type	iterator/iterator_archetypes.hpp	/^    typedef typename base::value_type value_type;$/;"	t	struct:boost::iterator_archetype	access:public
value_type	iterator/iterator_facade.hpp	/^        typedef typename Iterator::value_type value_type;$/;"	t	class:boost::detail::operator_brackets_proxy	access:private
value_type	iterator/iterator_facade.hpp	/^        typedef typename iterator_value<Iterator>::type value_type;$/;"	t	class:boost::detail::postfix_increment_proxy	access:private
value_type	iterator/iterator_facade.hpp	/^        typedef typename iterator_value<Iterator>::type value_type;$/;"	t	class:boost::detail::writable_postfix_increment_proxy	access:private
value_type	iterator/iterator_facade.hpp	/^        typedef typename remove_const<ValueParam>::type value_type;$/;"	t	struct:boost::detail::iterator_facade_types	access:public
value_type	iterator/iterator_facade.hpp	/^      typedef typename associated_types::value_type value_type;$/;"	t	class:boost::iterator_facade	access:public
value_type	iterator/zip_iterator.hpp	/^        typedef reference value_type;$/;"	t	struct:boost::detail::zip_iterator_base	access:private
workaround_iterator_base	iterator/iterator_archetypes.hpp	/^      > workaround_iterator_base;$/;"	t	struct:boost::detail::iterator_archetype_base	access:public
writable_iterator_bit	iterator/iterator_archetypes.hpp	/^    , writable_iterator_bit = 2$/;"	e	enum:boost::iterator_archetypes::__anon1
writable_iterator_t	iterator/iterator_archetypes.hpp	/^  typedef mpl::int_<writable_iterator_bit>::type writable_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
writable_iterator_test	iterator/new_iterator_tests.hpp	/^void writable_iterator_test(Iterator i, T v, T v2)$/;"	f	namespace:boost	signature:(Iterator i, T v, T v2)
writable_iterator_traversal_test	iterator/new_iterator_tests.hpp	/^void writable_iterator_traversal_test(Iterator i1, T v, mpl::true_)$/;"	f	namespace:boost	signature:(Iterator i1, T v, mpl::true_)
writable_iterator_traversal_test	iterator/new_iterator_tests.hpp	/^void writable_iterator_traversal_test(const Iterator i1, T v, mpl::false_)$/;"	f	namespace:boost	signature:(const Iterator i1, T v, mpl::false_)
writable_lvalue_iterator_t	iterator/iterator_archetypes.hpp	/^          >::type writable_lvalue_iterator_t;$/;"	t	namespace:boost::iterator_archetypes
writable_operator_brackets	iterator/iterator_archetypes.hpp	/^  struct writable_operator_brackets$/;"	s	namespace:boost::detail
writable_postfix_increment_proxy	iterator/iterator_facade.hpp	/^        explicit writable_postfix_increment_proxy(Iterator const& x)$/;"	f	class:boost::detail::writable_postfix_increment_proxy	access:public	signature:(Iterator const& x)
writable_postfix_increment_proxy	iterator/iterator_facade.hpp	/^    class writable_postfix_increment_proxy$/;"	c	namespace:boost::detail
x	iterator/is_lvalue_iterator.hpp	/^          static It& x;$/;"	m	struct:boost::detail::is_lvalue_iterator_impl::rebind	access:public
x	iterator/is_readable_iterator.hpp	/^          static It& x;$/;"	m	struct:boost::detail::is_readable_iterator_impl::rebind	access:public
zip_iterator	iterator/zip_iterator.hpp	/^    zip_iterator($/;"	f	class:boost::zip_iterator	access:public	signature:( const zip_iterator<OtherIteratorTuple>& other, typename enable_if_convertible< OtherIteratorTuple, IteratorTuple >::type* = 0 )
zip_iterator	iterator/zip_iterator.hpp	/^    zip_iterator() { }$/;"	f	class:boost::zip_iterator	access:public	signature:()
zip_iterator	iterator/zip_iterator.hpp	/^    zip_iterator(IteratorTuple iterator_tuple) $/;"	f	class:boost::zip_iterator	access:public	signature:(IteratorTuple iterator_tuple)
zip_iterator	iterator/zip_iterator.hpp	/^  class zip_iterator : $/;"	c	namespace:boost	inherits:detail::zip_iterator_base::type
zip_iterator_base	iterator/zip_iterator.hpp	/^    struct zip_iterator_base$/;"	s	namespace:boost::detail
zip_iterator_base	iterator/zip_iterator.hpp	/^    struct zip_iterator_base<int>$/;"	s	namespace:boost::detail
