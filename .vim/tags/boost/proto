!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	proto/transform/detail/make.hpp	/^            result_type operator ()(BOOST_PP_ENUM_BINARY_PARAMS(BOOST_PP_MAX(N, 1), A, &a)) const$/;"	m	struct:detail::construct_	access:public
ARG_COUNT	proto/detail/basic_expr.hpp	183;"	d
ARG_COUNT	proto/detail/basic_expr.hpp	54;"	d
ARG_COUNT	proto/detail/expr.hpp	472;"	d
ARG_COUNT	proto/detail/expr.hpp	85;"	d
BOOST_MPL_ASSERT_MSG	proto/transform/detail/pack.hpp	/^            BOOST_MPL_ASSERT_MSG($/;"	p	struct:boost::proto::detail::expand_pattern	access:public	signature:(expand_pattern_helper<proto::_value, Fun>::applied::value) , NO_PACK_EXPRESSION_FOUND_IN_PACK_EXPANSION , (Fun) 
BOOST_MPL_ASSERT_MSG	proto/transform/detail/pack.hpp	/^            BOOST_MPL_ASSERT_MSG($/;"	p	struct:boost::proto::detail::expand_pattern_helper	access:public	signature:(is_same<T, _>::value) , PACK_EXPANSIONS_OF_EXPRESSIONS_OTHER_THAN_THE_CURRENT_NOT_YET_SUPPORTED , (T) 
BOOST_MPL_ASSERT_MSG	proto/transform/detail/pack_impl.hpp	/^            BOOST_MPL_ASSERT_MSG($/;"	p	struct:expand_pattern	access:public	signature:(expand_pattern_helper<proto::_child_c<0>, Fun>::applied::value) , NO_PACK_EXPRESSION_FOUND_IN_UNPACKING_PATTERN , (Fun) 
BOOST_MPL_ASSERT_MSG	proto/transform/detail/preprocessed/pack_impl.hpp	/^            BOOST_MPL_ASSERT_MSG($/;"	p	struct:expand_pattern	access:public	signature:(expand_pattern_helper<proto::_child_c<0>, Fun>::applied::value) , NO_PACK_EXPRESSION_FOUND_IN_UNPACKING_PATTERN , (Fun) 
BOOST_MPL_ASSERT_NOT	proto/transform/env.hpp	/^                BOOST_MPL_ASSERT_NOT((is_same<result_type, key_not_found>)); \/\/ lookup failed$/;"	p	struct:boost::proto::_env_var::impl	access:public	signature:(is_same<result_type, key_not_found>)
BOOST_NO_CXX11_VARIADIC_TEMPLATES	proto/detail/expr.hpp	54;"	d
BOOST_NO_CXX11_VARIADIC_TEMPLATES	proto/detail/expr.hpp	77;"	d
BOOST_PP_CAT	proto/detail/and_n.hpp	/^    struct BOOST_PP_CAT(and_, N)$/;"	f	signature:(and_, N)
BOOST_PP_CAT	proto/detail/args.hpp	/^    struct BOOST_PP_CAT(list, N)$/;"	f	signature:(list, N)
BOOST_PP_CAT	proto/detail/deduce_domain_n.hpp	/^    struct BOOST_PP_CAT(common_domain, N)$/;"	f	signature:(common_domain, N)
BOOST_PP_CAT	proto/detail/funop.hpp	/^    struct BOOST_PP_CAT(funop, BOOST_PP_ITERATION())$/;"	f	signature:(funop, BOOST_PP_ITERATION())
BOOST_PP_CAT	proto/detail/or_n.hpp	/^    struct BOOST_PP_CAT(or_, N)$/;"	f	signature:(or_, N)
BOOST_PP_CAT	proto/transform/detail/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type BOOST_PP_CAT(state, N);$/;"	t	struct:reverse_fold_impl	access:public
BOOST_PP_CAT	proto/transform/detail/pack_impl.hpp	/^        struct BOOST_PP_CAT(expand_pattern_rest_, N)$/;"	f	signature:(expand_pattern_rest_, N)
BOOST_PP_DEC	proto/detail/and_n.hpp	/^    struct BOOST_PP_CAT(and_, N)<false, BOOST_PP_ENUM_PARAMS(BOOST_PP_DEC(N), P)>$/;"	p	signature:(N)
BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/basic_expr.hpp	/^        static basic_expr const make(BOOST_PP_ENUM_BINARY_PARAMS(ARG_COUNT, A, const &a))$/;"	f	struct:basic_expr	access:public	signature:(ARG_COUNT, A, const &a)
BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/deduce_domain_n.hpp	/^            BOOST_PP_ENUM_BINARY_PARAMS($/;"	f	signature:( N , typename domain_of<E, >::type BOOST_PP_INTERCEPT )
BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/expr.hpp	/^        static expr const make(BOOST_PP_ENUM_BINARY_PARAMS(ARG_COUNT, A, const &a))$/;"	f	struct:expr	access:public	signature:(ARG_COUNT, A, const &a)
BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/make_expr.hpp	/^    make_expr(BOOST_PP_ENUM_BINARY_PARAMS(N, const A, &a))$/;"	f	class:lazy_disable_if	signature:(N, const A, &a)
BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/make_expr.hpp	/^    make_expr(BOOST_PP_ENUM_BINARY_PARAMS(N, const C, &c))$/;"	f	class:result_of::make_expr	signature:(N, const C, &c)
BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/make_expr_.hpp	/^        result_type operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, typename add_reference<A, >::type a)) const$/;"	f	struct:make_expr_	access:public	signature:(N, typename add_reference<A, >::type a) const
BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/make_expr_funop.hpp	/^    operator ()(BOOST_PP_ENUM_BINARY_PARAMS(N, const A, &a)) const$/;"	f	class:result_of::make_expr	signature:(N, const A, &a) const
BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/memfun_funop.hpp	/^    result_type operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, A, const &a)) const$/;"	f	signature:(N, A, const &a) const
BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/poly_function_funop.hpp	/^    operator ()(BOOST_PP_ENUM_BINARY_PARAMS(N, A, const &a)) const$/;"	f	signature:(N, A, const &a) const
BOOST_PP_ENUM_BINARY_PARAMS	proto/transform/detail/construct_funop.hpp	/^    Type operator ()(BOOST_PP_ENUM_BINARY_PARAMS(N, A, &a)) const$/;"	f	signature:(N, A, &a) const
BOOST_PP_ENUM_BINARY_PARAMS	proto/transform/detail/construct_pod_funop.hpp	/^    Type operator ()(BOOST_PP_ENUM_BINARY_PARAMS(N, A, &a)) const$/;"	f	signature:(N, A, &a) const
BOOST_PP_ENUM_BINARY_PARAMS	proto/transform/detail/make.hpp	/^        Type construct(BOOST_PP_ENUM_BINARY_PARAMS(N, A, &a))$/;"	f	namespace:detail	signature:(N, A, &a)
BOOST_PP_ENUM_PARAMS	proto/detail/or_n.hpp	/^    struct BOOST_PP_CAT(or_, N)<true, Expr, BasicExpr, BOOST_PP_ENUM_PARAMS(N, G)>$/;"	f	signature:(N, G)
BOOST_PP_ENUM_TRAILING_PARAMS	proto/detail/expr_funop.hpp	/^          , default_domain BOOST_PP_ENUM_TRAILING_PARAMS(N, const A)$/;"	f	signature:(N, const A)
BOOST_PP_ENUM_TRAILING_PARAMS	proto/detail/expr_funop.hpp	/^          , default_domain BOOST_PP_ENUM_TRAILING_PARAMS(N, const A)$/;"	f	signature:(N, const A) const
BOOST_PP_ITERATION_PARAMS_1	proto/context/detail/callable_eval.hpp	31;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/context/detail/default_eval.hpp	27;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/context/detail/null_eval.hpp	27;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/and_n.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/args.hpp	52;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/basic_expr.hpp	38;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/basic_expr.hpp	42;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/class_member_traits.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/deduce_domain_n.hpp	29;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/deep_copy.hpp	35;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/expr.hpp	43;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/expr.hpp	48;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/expr.hpp	69;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/expr.hpp	73;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/funop.hpp	31;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/generate_by_value.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/lambda_matches.hpp	29;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/make_expr.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/make_expr_.hpp	55;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/make_expr_funop.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/matches_.hpp	37;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/memfun_funop.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/or_n.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/poly_function_funop.hpp	28;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/poly_function_traits.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/template_arity_helper.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/traits.hpp	28;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/unpack_expr_.hpp	122;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/detail/vararg_matches_impl.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/call.hpp	34;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/construct_funop.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/construct_pod_funop.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/default_function_impl.hpp	27;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/expand_pack.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/fold_impl.hpp	81;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/lazy.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/make.hpp	41;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/make_gcc_workaround.hpp	35;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/pack_impl.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/pass_through_impl.hpp	43;"	d
BOOST_PP_ITERATION_PARAMS_1	proto/transform/detail/when.hpp	23;"	d
BOOST_PP_ITERATION_PARAMS_2	proto/detail/expr.hpp	465;"	d
BOOST_PP_ITERATION_PARAMS_2	proto/transform/detail/pack_impl.hpp	54;"	d
BOOST_PP_LOCAL_LIMITS	proto/detail/local.hpp	33;"	d
BOOST_PP_LOCAL_MACRO	proto/detail/local.hpp	35;"	d
BOOST_PROTO_A	proto/repeat.hpp	43;"	d
BOOST_PROTO_ADDROF	proto/extends.hpp	47;"	d
BOOST_PROTO_AGGREGATE	proto/proto_fwd.hpp	752;"	d
BOOST_PROTO_APPLY_BINARY_	proto/operators.hpp	290;"	d
BOOST_PROTO_APPLY_BINARY_	proto/operators.hpp	322;"	d
BOOST_PROTO_APPLY_BINARY_	proto/operators.hpp	337;"	d
BOOST_PROTO_APPLY_UNARY_	proto/operators.hpp	289;"	d
BOOST_PROTO_APPLY_UNARY_	proto/operators.hpp	321;"	d
BOOST_PROTO_APPLY_UNARY_	proto/operators.hpp	330;"	d
BOOST_PROTO_ARGS_HPP_EAN_04_01_2005	proto/args.hpp	11;"	d
BOOST_PROTO_ARG_TRAITS_HPP_EAN_04_01_2005	proto/traits.hpp	12;"	d
BOOST_PROTO_ASSERT_MATCHES	proto/debug.hpp	253;"	d
BOOST_PROTO_ASSERT_MATCHES_NOT	proto/debug.hpp	262;"	d
BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/deduce_domain.hpp	32;"	d
BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain10	access:public	signature:(type)
BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain3	access:public	signature:(type)
BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain4	access:public	signature:(type)
BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain5	access:public	signature:(type)
BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain6	access:public	signature:(type)
BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain7	access:public	signature:(type)
BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain8	access:public	signature:(type)
BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain9	access:public	signature:(type)
BOOST_PROTO_AS_CHILD	proto/detail/funop.hpp	11;"	d
BOOST_PROTO_AS_CHILD	proto/detail/funop.hpp	35;"	d
BOOST_PROTO_AS_CHILD	proto/make_expr.hpp	67;"	d
BOOST_PROTO_AS_CHILD_TYPE	proto/detail/funop.hpp	36;"	d
BOOST_PROTO_AS_CHILD_TYPE	proto/detail/funop.hpp	7;"	d
BOOST_PROTO_AS_CHILD_TYPE	proto/make_expr.hpp	58;"	d
BOOST_PROTO_AUTO	proto/proto_typeof.hpp	136;"	d
BOOST_PROTO_AUTO_TPL	proto/proto_typeof.hpp	137;"	d
BOOST_PROTO_A_const	proto/repeat.hpp	48;"	d
BOOST_PROTO_A_const_ref	proto/repeat.hpp	33;"	d
BOOST_PROTO_A_const_ref_a	proto/repeat.hpp	53;"	d
BOOST_PROTO_A_ref	proto/repeat.hpp	38;"	d
BOOST_PROTO_A_ref_a	proto/repeat.hpp	58;"	d
BOOST_PROTO_BASIC_EXTENDS	proto/extends.hpp	204;"	d
BOOST_PROTO_BASIC_EXTENDS_	proto/extends.hpp	160;"	d
BOOST_PROTO_BINARY_DEFAULT_EVAL	proto/context/default.hpp	148;"	d
BOOST_PROTO_BINARY_DEFAULT_EVAL	proto/context/default.hpp	83;"	d
BOOST_PROTO_BINARY_DEFAULT_EVAL	proto/transform/default.hpp	167;"	d
BOOST_PROTO_BINARY_DEFAULT_EVAL	proto/transform/default.hpp	87;"	d
BOOST_PROTO_BROKEN_CONST_OVERLOADS	proto/proto_fwd.hpp	61;"	d
BOOST_PROTO_BROKEN_CONST_QUALIFIED_FUNCTIONS	proto/proto_fwd.hpp	68;"	d
BOOST_PROTO_BROKEN_PTS	proto/proto_fwd.hpp	92;"	d
BOOST_PROTO_CALLABLE	proto/proto_fwd.hpp	751;"	d
BOOST_PROTO_CHILD	proto/detail/basic_expr.hpp	49;"	d
BOOST_PROTO_CHILD	proto/detail/basic_expr.hpp	9;"	d
BOOST_PROTO_CHILD	proto/detail/expr.hpp	13;"	d
BOOST_PROTO_CHILD	proto/detail/expr.hpp	80;"	d
BOOST_PROTO_CHILD	proto/detail/traits.hpp	36;"	d
BOOST_PROTO_CHILD	proto/detail/traits.hpp	7;"	d
BOOST_PROTO_CHILD_N	proto/context/detail/callable_eval.hpp	11;"	d
BOOST_PROTO_CHILD_N	proto/context/detail/callable_eval.hpp	40;"	d
BOOST_PROTO_CHILD_N_TYPE	proto/context/detail/callable_eval.hpp	39;"	d
BOOST_PROTO_CHILD_N_TYPE	proto/context/detail/callable_eval.hpp	7;"	d
BOOST_PROTO_CHILD_N_TYPE	proto/transform/detail/fold_impl.hpp	7;"	d
BOOST_PROTO_CHILD_N_TYPE	proto/transform/detail/fold_impl.hpp	93;"	d
BOOST_PROTO_COMMON_DOMAIN2	proto/detail/deduce_domain_n.hpp	37;"	d
BOOST_PROTO_COMMON_DOMAIN2	proto/detail/deduce_domain_n.hpp	7;"	d
BOOST_PROTO_CONST	proto/extends.hpp	59;"	d
BOOST_PROTO_CONSTRUCT_ARG	proto/transform/detail/make.hpp	19;"	d
BOOST_PROTO_CONSTRUCT_ARG	proto/transform/detail/make.hpp	49;"	d
BOOST_PROTO_CONTEXT_CALLABLE_HPP_EAN_06_23_2007	proto/context/callable.hpp	14;"	d
BOOST_PROTO_CONTEXT_DEFAULT_HPP_EAN_01_08_2007	proto/context/default.hpp	12;"	d
BOOST_PROTO_CONTEXT_HPP_EAN_06_23_2007	proto/context.hpp	10;"	d
BOOST_PROTO_CONTEXT_NULL_HPP_EAN_06_24_2007	proto/context/null.hpp	12;"	d
BOOST_PROTO_CORE_HPP_EAN_04_01_2005	proto/core.hpp	11;"	d
BOOST_PROTO_DEBUG_HPP_EAN_12_31_2006	proto/debug.hpp	10;"	d
BOOST_PROTO_DECLTYPE_	proto/detail/decltype.hpp	47;"	d
BOOST_PROTO_DECLTYPE_	proto/detail/decltype.hpp	59;"	d
BOOST_PROTO_DECLTYPE_NESTED_TYPEDEF_TPL_	proto/detail/decltype.hpp	49;"	d
BOOST_PROTO_DEDUCE_DOMAIN_HPP_EAN_05_22_2010	proto/detail/deduce_domain.hpp	16;"	d
BOOST_PROTO_DEEP_COPY_HPP_EAN_11_21_2006	proto/deep_copy.hpp	10;"	d
BOOST_PROTO_DEFAULT_EVAL	proto/context/default.hpp	310;"	d
BOOST_PROTO_DEFAULT_EVAL	proto/context/default.hpp	389;"	d
BOOST_PROTO_DEFAULT_EVAL	proto/transform/default.hpp	465;"	d
BOOST_PROTO_DEFAULT_EVAL	proto/transform/default.hpp	573;"	d
BOOST_PROTO_DEFAULT_EVAL_SHIFTED	proto/context/detail/default_eval.hpp	35;"	d
BOOST_PROTO_DEFAULT_EVAL_SHIFTED	proto/context/detail/default_eval.hpp	7;"	d
BOOST_PROTO_DEFAULT_EVAL_TYPE	proto/context/default.hpp	301;"	d
BOOST_PROTO_DEFAULT_EVAL_TYPE	proto/context/default.hpp	388;"	d
BOOST_PROTO_DEFAULT_EVAL_TYPE	proto/transform/default.hpp	455;"	d
BOOST_PROTO_DEFAULT_EVAL_TYPE	proto/transform/default.hpp	572;"	d
BOOST_PROTO_DEFINE_BINARY_METAFUNCTION	proto/traits.hpp	557;"	d
BOOST_PROTO_DEFINE_BINARY_METAFUNCTION	proto/traits.hpp	622;"	d
BOOST_PROTO_DEFINE_BINARY_OPERATOR	proto/operators.hpp	136;"	d
BOOST_PROTO_DEFINE_CHILD_N	proto/detail/args.hpp	61;"	d
BOOST_PROTO_DEFINE_CHILD_N	proto/detail/args.hpp	9;"	d
BOOST_PROTO_DEFINE_DEEP_COPY_FUN	proto/detail/deep_copy.hpp	15;"	d
BOOST_PROTO_DEFINE_DEEP_COPY_FUN	proto/detail/deep_copy.hpp	43;"	d
BOOST_PROTO_DEFINE_DEEP_COPY_TYPE	proto/detail/deep_copy.hpp	44;"	d
BOOST_PROTO_DEFINE_DEEP_COPY_TYPE	proto/detail/deep_copy.hpp	7;"	d
BOOST_PROTO_DEFINE_ENV_VAR	proto/transform/env.hpp	/^            BOOST_PROTO_DEFINE_ENV_VAR(data_type, data);$/;"	p	namespace:boost::proto::envns_	signature:(data_type, data)
BOOST_PROTO_DEFINE_ENV_VAR	proto/transform/env.hpp	58;"	d
BOOST_PROTO_DEFINE_ENV_VAR	proto/transform/when.hpp	/^        BOOST_PROTO_DEFINE_ENV_VAR(transforms_type, transforms);$/;"	p	namespace:boost::proto::envns_	signature:(transforms_type, transforms)
BOOST_PROTO_DEFINE_FUNCTION_TEMPLATE	proto/detail/deprecated.hpp	222;"	d
BOOST_PROTO_DEFINE_FUN_OP	proto/extends.hpp	147;"	d
BOOST_PROTO_DEFINE_FUN_OP_CONST	proto/extends.hpp	135;"	d
BOOST_PROTO_DEFINE_FUN_OP_IMPL_	proto/extends.hpp	75;"	d
BOOST_PROTO_DEFINE_FUN_OP_NON_CONST	proto/extends.hpp	141;"	d
BOOST_PROTO_DEFINE_FUN_OP_VARIADIC_IMPL_	proto/extends.hpp	105;"	d
BOOST_PROTO_DEFINE_LAMBDA_MATCHES	proto/detail/lambda_matches.hpp	37;"	d
BOOST_PROTO_DEFINE_LAMBDA_MATCHES	proto/detail/lambda_matches.hpp	7;"	d
BOOST_PROTO_DEFINE_MATCHES	proto/detail/matches_.hpp	14;"	d
BOOST_PROTO_DEFINE_MATCHES	proto/detail/matches_.hpp	45;"	d
BOOST_PROTO_DEFINE_OPERATORS	proto/operators.hpp	235;"	d
BOOST_PROTO_DEFINE_TAG_INSERTION	proto/debug.hpp	27;"	d
BOOST_PROTO_DEFINE_TAG_INSERTION	proto/debug.hpp	82;"	d
BOOST_PROTO_DEFINE_TERMINAL	proto/detail/basic_expr.hpp	37;"	d
BOOST_PROTO_DEFINE_TERMINAL	proto/detail/basic_expr.hpp	41;"	d
BOOST_PROTO_DEFINE_TERMINAL	proto/detail/expr.hpp	42;"	d
BOOST_PROTO_DEFINE_TERMINAL	proto/detail/expr.hpp	47;"	d
BOOST_PROTO_DEFINE_TERMINAL	proto/detail/expr.hpp	68;"	d
BOOST_PROTO_DEFINE_TERMINAL	proto/detail/expr.hpp	72;"	d
BOOST_PROTO_DEFINE_TRANSFORM	proto/transform/detail/pass_through_impl.hpp	15;"	d
BOOST_PROTO_DEFINE_TRANSFORM	proto/transform/detail/pass_through_impl.hpp	50;"	d
BOOST_PROTO_DEFINE_TRANSFORM_TYPE	proto/transform/detail/pass_through_impl.hpp	51;"	d
BOOST_PROTO_DEFINE_TRANSFORM_TYPE	proto/transform/detail/pass_through_impl.hpp	7;"	d
BOOST_PROTO_DEFINE_UNARY_METAFUNCTION	proto/traits.hpp	539;"	d
BOOST_PROTO_DEFINE_UNARY_METAFUNCTION	proto/traits.hpp	621;"	d
BOOST_PROTO_DEFINE_UNARY_OPERATOR	proto/operators.hpp	106;"	d
BOOST_PROTO_DEFINE_VARARG_FUNCTION_TEMPLATE	proto/detail/deprecated.hpp	239;"	d
BOOST_PROTO_DEFINE_VOID_N	proto/detail/args.hpp	15;"	d
BOOST_PROTO_DEFINE_VOID_N	proto/detail/args.hpp	60;"	d
BOOST_PROTO_DEF_FUN_INVOKE_ARG	proto/transform/detail/default_function_impl.hpp	35;"	d
BOOST_PROTO_DEF_FUN_INVOKE_ARG	proto/transform/detail/default_function_impl.hpp	7;"	d
BOOST_PROTO_DETAILS_KEYWORD_FACILITY_IS_FRONT	proto/detail/remove_typename.hpp	35;"	d
BOOST_PROTO_DETAILS_KEYWORD_FACILITY_REMOVE_FRONT	proto/detail/remove_typename.hpp	43;"	d
BOOST_PROTO_DETAILS_KEYWORD_IS_TYPENAME_FRONT	proto/detail/remove_typename.hpp	58;"	d
BOOST_PROTO_DETAILS_KEYWORD_TYPENAME_IS_typename	proto/detail/remove_typename.hpp	53;"	d
BOOST_PROTO_DETAILS_KEYWORD_TYPENAME_REMOVE_typename	proto/detail/remove_typename.hpp	55;"	d
BOOST_PROTO_DETAIL_ANY_HPP_EAN_18_07_2012	proto/detail/any.hpp	10;"	d
BOOST_PROTO_DETAIL_AS_EXPR_HPP_EAN_06_09_2010	proto/detail/as_expr.hpp	12;"	d
BOOST_PROTO_DETAIL_DECLTYPE_HPP_EAN_04_04_2008	proto/detail/decltype.hpp	10;"	d
BOOST_PROTO_DETAIL_DEPRECATED_HPP_EAN_11_25_2008	proto/detail/deprecated.hpp	11;"	d
BOOST_PROTO_DETAIL_DONT_CARE_HPP_EAN_11_07_2007	proto/detail/dont_care.hpp	10;"	d
BOOST_PROTO_DETAIL_IGNORE_UNUSED_HPP_EAN_03_03_2008	proto/detail/ignore_unused.hpp	11;"	d
BOOST_PROTO_DETAIL_IS_NONCOPYABLE_HPP_EAN_19_07_2012	proto/detail/is_noncopyable.hpp	10;"	d
BOOST_PROTO_DETAIL_POLY_FUNCTION_EAN_2008_05_02	proto/detail/poly_function.hpp	12;"	d
BOOST_PROTO_DETAIL_STATIC_CONST_HPP_EAN_20_07_2012	proto/detail/static_const.hpp	10;"	d
BOOST_PROTO_DETAIL_TEMPLATE_ARITY_HPP_EAN_2011_05_07	proto/detail/template_arity.hpp	12;"	d
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/proto_fwd.hpp	75;"	d
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/proto_fwd.hpp	78;"	d
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    child(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    child(Expr2 &expr2 BOOST_PROTO_DISABLE_IF_IS_CONST(Expr2))$/;"	f	namespace:boost::proto	signature:(Expr2)
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    child_c(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    left(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    right(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    value(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/transform/env.hpp	/^                    operator()(T &t BOOST_PROTO_DISABLE_IF_IS_CONST(T)) const$/;"	f	class:boost::proto::functional::as_env::impl	access:public	signature:(T) const
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/transform/env.hpp	/^        typename proto::result_of::as_env<T &>::type const as_env(T &t BOOST_PROTO_DISABLE_IF_IS_CONST(T))$/;"	f	class:boost::proto::proto::result_of::as_env	signature:(T)
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/transform/env.hpp	/^        typename proto::result_of::env_var<Env &, Key>::type env_var(Env &e BOOST_PROTO_DISABLE_IF_IS_CONST(Env))$/;"	f	namespace:boost::proto	signature:(Env)
BOOST_PROTO_DISABLE_IF_IS_CONST	proto/transform/env.hpp	/^        typename proto::result_of::has_env_var<Env &, Key>::type has_env_var(Env &e BOOST_PROTO_DISABLE_IF_IS_CONST(Env))$/;"	f	namespace:boost::proto	signature:(Env)
BOOST_PROTO_DISABLE_IF_IS_FUNCTION	proto/proto_fwd.hpp	84;"	d
BOOST_PROTO_DISABLE_IF_IS_FUNCTION	proto/proto_fwd.hpp	87;"	d
BOOST_PROTO_DISABLE_IF_IS_FUNCTION	proto/traits.hpp	/^    as_child(T &t BOOST_PROTO_DISABLE_IF_IS_CONST(T) BOOST_PROTO_DISABLE_IF_IS_FUNCTION(T))$/;"	f	namespace:boost::proto	signature:(T)
BOOST_PROTO_DISABLE_IF_IS_FUNCTION	proto/traits.hpp	/^    as_expr(T &t BOOST_PROTO_DISABLE_IF_IS_CONST(T) BOOST_PROTO_DISABLE_IF_IS_FUNCTION(T))$/;"	f	namespace:boost::proto	signature:(T)
BOOST_PROTO_DISABLE_MSVC_C4522	proto/proto_fwd.hpp	127;"	d
BOOST_PROTO_DISABLE_MSVC_C4522	proto/proto_fwd.hpp	130;"	d
BOOST_PROTO_DISABLE_MSVC_C4714	proto/proto_fwd.hpp	128;"	d
BOOST_PROTO_DISABLE_MSVC_C4714	proto/proto_fwd.hpp	131;"	d
BOOST_PROTO_DOMAIN_HPP_EAN_02_13_2007	proto/domain.hpp	12;"	d
BOOST_PROTO_DONT_USE_PREPROCESSED_FILES	proto/proto_fwd.hpp	54;"	d
BOOST_PROTO_EVAL_HPP_EAN_03_29_2007	proto/eval.hpp	10;"	d
BOOST_PROTO_EVAL_N	proto/context/detail/null_eval.hpp	35;"	d
BOOST_PROTO_EVAL_N	proto/context/detail/null_eval.hpp	7;"	d
BOOST_PROTO_EXPR_HPP_EAN_04_01_2005	proto/expr.hpp	10;"	d
BOOST_PROTO_EXPR_MAKE_ARG	proto/transform/detail/make_gcc_workaround.hpp	45;"	d
BOOST_PROTO_EXPR_MAKE_ARG	proto/transform/detail/make_gcc_workaround.hpp	9;"	d
BOOST_PROTO_EXTENDED_TEMPLATE_PARAMETERS_MATCHING	proto/proto_fwd.hpp	123;"	d
BOOST_PROTO_EXTENDS	proto/extends.hpp	444;"	d
BOOST_PROTO_EXTENDS_ASSIGN	proto/extends.hpp	319;"	d
BOOST_PROTO_EXTENDS_ASSIGN_	proto/extends.hpp	304;"	d
BOOST_PROTO_EXTENDS_ASSIGN_CONST	proto/extends.hpp	309;"	d
BOOST_PROTO_EXTENDS_ASSIGN_CONST_	proto/extends.hpp	294;"	d
BOOST_PROTO_EXTENDS_ASSIGN_IMPL_	proto/extends.hpp	259;"	d
BOOST_PROTO_EXTENDS_ASSIGN_NON_CONST	proto/extends.hpp	314;"	d
BOOST_PROTO_EXTENDS_ASSIGN_NON_CONST_	proto/extends.hpp	299;"	d
BOOST_PROTO_EXTENDS_CHILD	proto/extends.hpp	154;"	d
BOOST_PROTO_EXTENDS_COPY_ASSIGN_	proto/extends.hpp	247;"	d
BOOST_PROTO_EXTENDS_COPY_ASSIGN_IMPL_	proto/extends.hpp	209;"	d
BOOST_PROTO_EXTENDS_FUNCTION	proto/extends.hpp	407;"	d
BOOST_PROTO_EXTENDS_FUNCTION_	proto/extends.hpp	378;"	d
BOOST_PROTO_EXTENDS_FUNCTION_CONST	proto/extends.hpp	397;"	d
BOOST_PROTO_EXTENDS_FUNCTION_NON_CONST	proto/extends.hpp	402;"	d
BOOST_PROTO_EXTENDS_HPP_EAN_11_1_2006	proto/extends.hpp	10;"	d
BOOST_PROTO_EXTENDS_MEMBERS	proto/extends.hpp	635;"	d
BOOST_PROTO_EXTENDS_MEMBERS_WITH_DOMAIN	proto/extends.hpp	625;"	d
BOOST_PROTO_EXTENDS_MEMBER_	proto/extends.hpp	615;"	d
BOOST_PROTO_EXTENDS_SUBSCRIPT	proto/extends.hpp	371;"	d
BOOST_PROTO_EXTENDS_SUBSCRIPT_CONST	proto/extends.hpp	361;"	d
BOOST_PROTO_EXTENDS_SUBSCRIPT_IMPL_	proto/extends.hpp	326;"	d
BOOST_PROTO_EXTENDS_SUBSCRIPT_NON_CONST	proto/extends.hpp	366;"	d
BOOST_PROTO_EXTENDS_USING_ASSIGN	proto/extends.hpp	451;"	d
BOOST_PROTO_EXTENDS_USING_ASSIGN_NON_DEPENDENT	proto/extends.hpp	457;"	d
BOOST_PROTO_FOLD_STATE	proto/transform/detail/fold_impl.hpp	21;"	d
BOOST_PROTO_FOLD_STATE	proto/transform/detail/fold_impl.hpp	91;"	d
BOOST_PROTO_FOLD_STATE_TYPE	proto/transform/detail/fold_impl.hpp	11;"	d
BOOST_PROTO_FOLD_STATE_TYPE	proto/transform/detail/fold_impl.hpp	92;"	d
BOOST_PROTO_FUNCTIONAL_FUSION_AT_HPP_EAN_11_27_2010	proto/functional/fusion/at.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_FUSION_HPP_EAN_11_27_2010	proto/functional/fusion.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_FUSION_POP_BACK_HPP_EAN_11_27_2010	proto/functional/fusion/pop_back.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_FUSION_POP_FRONT_HPP_EAN_11_27_2010	proto/functional/fusion/pop_front.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_FUSION_PUSH_BACK_HPP_EAN_11_27_2010	proto/functional/fusion/push_back.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_FUSION_PUSH_FRONT_HPP_EAN_11_27_2010	proto/functional/fusion/push_front.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_FUSION_REVERSE_HPP_EAN_11_27_2010	proto/functional/fusion/reverse.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_HPP_EAN_11_27_2010	proto/functional.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_RANGE_BEGIN_HPP_EAN_27_08_2012	proto/functional/range/begin.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_RANGE_EMPTY_HPP_EAN_27_08_2012	proto/functional/range/empty.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_RANGE_END_HPP_EAN_27_08_2012	proto/functional/range/end.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_RANGE_HPP_EAN_27_08_2012	proto/functional/range.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_RANGE_RBEGIN_HPP_EAN_27_08_2012	proto/functional/range/rbegin.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_RANGE_REND_HPP_EAN_27_08_2012	proto/functional/range/rend.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_RANGE_SIZE_HPP_EAN_27_08_2012	proto/functional/range/size.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_STD_HPP_EAN_11_27_2010	proto/functional/std.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_STD_ITERATOR_HPP_EAN_27_08_2012	proto/functional/std/iterator.hpp	10;"	d
BOOST_PROTO_FUNCTIONAL_STD_UTILITY_HPP_EAN_11_27_2010	proto/functional/std/utility.hpp	10;"	d
BOOST_PROTO_FUSION_AS_CHILD_AT	proto/detail/unpack_expr_.hpp	132;"	d
BOOST_PROTO_FUSION_AS_CHILD_AT	proto/detail/unpack_expr_.hpp	65;"	d
BOOST_PROTO_FUSION_AS_CHILD_AT_TYPE	proto/detail/unpack_expr_.hpp	133;"	d
BOOST_PROTO_FUSION_AS_CHILD_AT_TYPE	proto/detail/unpack_expr_.hpp	56;"	d
BOOST_PROTO_FUSION_AT	proto/detail/unpack_expr_.hpp	130;"	d
BOOST_PROTO_FUSION_AT	proto/detail/unpack_expr_.hpp	50;"	d
BOOST_PROTO_FUSION_AT_TYPE	proto/detail/unpack_expr_.hpp	131;"	d
BOOST_PROTO_FUSION_AT_TYPE	proto/detail/unpack_expr_.hpp	26;"	d
BOOST_PROTO_FUSION_HPP_EAN_11_04_2006	proto/fusion.hpp	10;"	d
BOOST_PROTO_FUSION_ITERATORS	proto/detail/unpack_expr_.hpp	136;"	d
BOOST_PROTO_FUSION_ITERATORS	proto/detail/unpack_expr_.hpp	43;"	d
BOOST_PROTO_FUSION_ITERATORS_TYPE	proto/detail/unpack_expr_.hpp	137;"	d
BOOST_PROTO_FUSION_ITERATORS_TYPE	proto/detail/unpack_expr_.hpp	17;"	d
BOOST_PROTO_FUSION_NEXT_ITERATOR	proto/detail/unpack_expr_.hpp	134;"	d
BOOST_PROTO_FUSION_NEXT_ITERATOR	proto/detail/unpack_expr_.hpp	36;"	d
BOOST_PROTO_FUSION_NEXT_ITERATOR_TYPE	proto/detail/unpack_expr_.hpp	135;"	d
BOOST_PROTO_FUSION_NEXT_ITERATOR_TYPE	proto/detail/unpack_expr_.hpp	9;"	d
BOOST_PROTO_FWD_HPP_EAN_04_01_2005	proto/proto_fwd.hpp	10;"	d
BOOST_PROTO_GENERATE_HPP_EAN_02_13_2007	proto/generate.hpp	11;"	d
BOOST_PROTO_GET_POINTER	proto/detail/decltype.hpp	236;"	d
BOOST_PROTO_HPP_EAN_04_01_2005	proto/proto.hpp	10;"	d
BOOST_PROTO_LITERAL_HPP_EAN_01_03_2007	proto/literal.hpp	11;"	d
BOOST_PROTO_LOCAL_A	proto/detail/local.hpp	22;"	d
BOOST_PROTO_LOCAL_A	proto/detail/local.hpp	50;"	d
BOOST_PROTO_LOCAL_A_a	proto/detail/local.hpp	26;"	d
BOOST_PROTO_LOCAL_A_a	proto/detail/local.hpp	51;"	d
BOOST_PROTO_LOCAL_ITERATE	proto/repeat.hpp	308;"	d
BOOST_PROTO_LOCAL_LIMITS	proto/detail/local.hpp	14;"	d
BOOST_PROTO_LOCAL_LIMITS	proto/detail/local.hpp	48;"	d
BOOST_PROTO_LOCAL_MACRO	proto/detail/local.hpp	47;"	d
BOOST_PROTO_LOCAL_a	proto/detail/local.hpp	30;"	d
BOOST_PROTO_LOCAL_a	proto/detail/local.hpp	52;"	d
BOOST_PROTO_LOCAL_typename_A	proto/detail/local.hpp	18;"	d
BOOST_PROTO_LOCAL_typename_A	proto/detail/local.hpp	49;"	d
BOOST_PROTO_LOGICAL_G	proto/matches.hpp	52;"	d
BOOST_PROTO_LOGICAL_G	proto/matches.hpp	941;"	d
BOOST_PROTO_LOGICAL_typename_G	proto/matches.hpp	51;"	d
BOOST_PROTO_LOGICAL_typename_G	proto/matches.hpp	940;"	d
BOOST_PROTO_MAKE_EXPR_HPP_EAN_04_01_2005	proto/make_expr.hpp	12;"	d
BOOST_PROTO_MAKE_IF	proto/transform/detail/make.hpp	52;"	d
BOOST_PROTO_MAKE_IF	proto/transform/detail/make.hpp	7;"	d
BOOST_PROTO_MAKE_IF_APPLIED	proto/transform/detail/make.hpp	15;"	d
BOOST_PROTO_MAKE_IF_APPLIED	proto/transform/detail/make.hpp	50;"	d
BOOST_PROTO_MAKE_IF_TYPE	proto/transform/detail/make.hpp	11;"	d
BOOST_PROTO_MAKE_IF_TYPE	proto/transform/detail/make.hpp	51;"	d
BOOST_PROTO_MATCHES_HPP_EAN_11_03_2006	proto/matches.hpp	11;"	d
BOOST_PROTO_MATCHES_N_FUN	proto/detail/matches_.hpp	46;"	d
BOOST_PROTO_MATCHES_N_FUN	proto/detail/matches_.hpp	7;"	d
BOOST_PROTO_MAX_ARITY	proto/proto_fwd.hpp	31;"	d
BOOST_PROTO_MAX_FUNCTION_CALL_ARITY	proto/proto_fwd.hpp	39;"	d
BOOST_PROTO_MAX_LOGICAL_ARITY	proto/proto_fwd.hpp	35;"	d
BOOST_PROTO_NORMALIZE_ARG	proto/detail/poly_function_funop.hpp	36;"	d
BOOST_PROTO_NORMALIZE_ARG	proto/detail/poly_function_funop.hpp	7;"	d
BOOST_PROTO_NO_WAVE_OUTPUT	proto/extends.hpp	587;"	d
BOOST_PROTO_NO_WAVE_OUTPUT	proto/extends.hpp	589;"	d
BOOST_PROTO_NTH_RESULT	proto/transform/detail/call.hpp	14;"	d
BOOST_PROTO_NTH_RESULT	proto/transform/detail/call.hpp	42;"	d
BOOST_PROTO_NTH_RESULT_TYPE	proto/transform/detail/call.hpp	43;"	d
BOOST_PROTO_NTH_RESULT_TYPE	proto/transform/detail/call.hpp	7;"	d
BOOST_PROTO_OFFSETOF	proto/extends.hpp	50;"	d
BOOST_PROTO_OPERATORS_HPP_EAN_04_01_2005	proto/operators.hpp	11;"	d
BOOST_PROTO_POLY_FUNCTION	proto/detail/poly_function.hpp	155;"	d
BOOST_PROTO_PREPROCESSOR_REMOVE_TYPENAME_HPP_INCLUDED	proto/detail/remove_typename.hpp	11;"	d
BOOST_PROTO_REMOVE_TYPENAME	proto/detail/remove_typename.hpp	74;"	d
BOOST_PROTO_REPEAT	proto/repeat.hpp	197;"	d
BOOST_PROTO_REPEAT_EX	proto/repeat.hpp	183;"	d
BOOST_PROTO_REPEAT_FROM_TO	proto/repeat.hpp	169;"	d
BOOST_PROTO_REPEAT_FROM_TO_EX	proto/repeat.hpp	87;"	d
BOOST_PROTO_REPEAT_HPP_EAN_11_24_2008	proto/repeat.hpp	10;"	d
BOOST_PROTO_RESULT_OF	proto/proto_fwd.hpp	108;"	d
BOOST_PROTO_RESULT_OF	proto/proto_fwd.hpp	110;"	d
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr const , proto_domain >::type ) >::type const operator ()() const { typedef boost::proto::result_of::funop0< proto_derived_expr const , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) ) ); } BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr , proto_domain >::type ) >::type const operator ()() { typedef boost::proto::result_of::funop0< proto_derived_expr , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:()
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr const , proto_domain >::type ) >::type const operator ()() const { typedef boost::proto::result_of::funop0< proto_derived_expr const , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) ) ); } BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr , proto_domain >::type ) >::type const operator ()() { typedef boost::proto::result_of::funop0< proto_derived_expr , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:() const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const { typedef boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) { typedef boost::proto::result_of::funop9< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const { typedef boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) { typedef boost::proto::result_of::funop9< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const { typedef boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) { typedef boost::proto::result_of::funop8< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const { typedef boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) { typedef boost::proto::result_of::funop8< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const { typedef boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) { typedef boost::proto::result_of::funop7< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const { typedef boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) { typedef boost::proto::result_of::funop7< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const { typedef boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) { typedef boost::proto::result_of::funop6< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const { typedef boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) { typedef boost::proto::result_of::funop6< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const { typedef boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) { typedef boost::proto::result_of::funop5< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const { typedef boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) { typedef boost::proto::result_of::funop5< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const { typedef boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) { typedef boost::proto::result_of::funop4< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const { typedef boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) { typedef boost::proto::result_of::funop4< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) const { typedef boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 ) ); } template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) { typedef boost::proto::result_of::funop3< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) const { typedef boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 ) ); } template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) { typedef boost::proto::result_of::funop3< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) const { typedef boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 ) ); } template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) { typedef boost::proto::result_of::funop2< proto_derived_expr , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1)
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) const { typedef boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 ) ); } template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) { typedef boost::proto::result_of::funop2< proto_derived_expr , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) const { typedef boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 ) ); } template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) { typedef boost::proto::result_of::funop1< proto_derived_expr , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0)
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) const { typedef boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 ) ); } template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) { typedef boost::proto::result_of::funop1< proto_derived_expr , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr const , proto_domain >::type ) >::type const operator ()() const { typedef boost::proto::result_of::funop0< proto_derived_expr const , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:() const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const { typedef boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const { typedef boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const { typedef boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const { typedef boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const { typedef boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const { typedef boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) const { typedef boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) const { typedef boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1) const
BOOST_PROTO_RESULT_OF::operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) const { typedef boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0) const
BOOST_PROTO_RETURN_TYPE_STRICT_LOOSE	proto/proto_fwd.hpp	117;"	d
BOOST_PROTO_RETURN_TYPE_STRICT_LOOSE	proto/proto_fwd.hpp	119;"	d
BOOST_PROTO_REVERSE_FOLD_STATE	proto/transform/detail/fold_impl.hpp	48;"	d
BOOST_PROTO_REVERSE_FOLD_STATE	proto/transform/detail/fold_impl.hpp	89;"	d
BOOST_PROTO_REVERSE_FOLD_STATE_TYPE	proto/transform/detail/fold_impl.hpp	35;"	d
BOOST_PROTO_REVERSE_FOLD_STATE_TYPE	proto/transform/detail/fold_impl.hpp	90;"	d
BOOST_PROTO_SEQ_PUSH_FRONT	proto/detail/deprecated.hpp	140;"	d
BOOST_PROTO_STRICT_RESULT_OF	proto/proto_fwd.hpp	116;"	d
BOOST_PROTO_TAGS_HPP_EAN_04_01_2005	proto/tags.hpp	10;"	d
BOOST_PROTO_TEMPLATE_ARITY_PARAM	proto/detail/template_arity.hpp	17;"	d
BOOST_PROTO_TEMPLATE_ARITY_PARAM2	proto/detail/template_arity.hpp	18;"	d
BOOST_PROTO_TEMPLATE_ARITY_PARAM2	proto/detail/template_arity.hpp	30;"	d
BOOST_PROTO_TEMPLATE_ARITY_PARAM2	proto/detail/template_arity.hpp	31;"	d
BOOST_PROTO_TEMPLATE_NO_	proto/extends.hpp	71;"	d
BOOST_PROTO_TEMPLATE_PARAMS_NO_	proto/detail/deprecated.hpp	101;"	d
BOOST_PROTO_TEMPLATE_PARAMS_YES_	proto/detail/deprecated.hpp	83;"	d
BOOST_PROTO_TEMPLATE_YES_	proto/extends.hpp	67;"	d
BOOST_PROTO_TRANSFORM	proto/transform/impl.hpp	227;"	d
BOOST_PROTO_TRANSFORM_	proto/transform/impl.hpp	186;"	d
BOOST_PROTO_TRANSFORM_	proto/transform/impl.hpp	82;"	d
BOOST_PROTO_TRANSFORM_ARG_HPP_EAN_11_01_2007	proto/transform/arg.hpp	10;"	d
BOOST_PROTO_TRANSFORM_AS_LVALUE_HPP_EAN_12_27_2007	proto/detail/as_lvalue.hpp	10;"	d
BOOST_PROTO_TRANSFORM_CALL_HPP_EAN_11_02_2007	proto/transform/call.hpp	10;"	d
BOOST_PROTO_TRANSFORM_DEFAULT_HPP_EAN_04_04_2008	proto/transform/default.hpp	11;"	d
BOOST_PROTO_TRANSFORM_DETAIL_PACK_HPP_EAN_2012_07_11	proto/transform/detail/pack.hpp	10;"	d
BOOST_PROTO_TRANSFORM_ENV_HPP_EAN_18_07_2012	proto/transform/env.hpp	10;"	d
BOOST_PROTO_TRANSFORM_FOLD_HPP_EAN_11_04_2007	proto/transform/fold.hpp	10;"	d
BOOST_PROTO_TRANSFORM_FOLD_TREE_HPP_EAN_11_05_2007	proto/transform/fold_tree.hpp	10;"	d
BOOST_PROTO_TRANSFORM_HPP_EAN_06_23_2007	proto/transform.hpp	10;"	d
BOOST_PROTO_TRANSFORM_IMPL_HPP_EAN_04_03_2008	proto/transform/impl.hpp	10;"	d
BOOST_PROTO_TRANSFORM_INTEGRAL_C_HPP_EAN_04_28_2011	proto/transform/integral_c.hpp	10;"	d
BOOST_PROTO_TRANSFORM_LAZY_HPP_EAN_12_02_2007	proto/transform/lazy.hpp	10;"	d
BOOST_PROTO_TRANSFORM_MAKE_HPP_EAN_12_02_2007	proto/transform/make.hpp	10;"	d
BOOST_PROTO_TRANSFORM_PASS_THROUGH_HPP_EAN_12_26_2006	proto/transform/pass_through.hpp	13;"	d
BOOST_PROTO_TRANSFORM_WHEN_HPP_EAN_10_29_2007	proto/transform/when.hpp	10;"	d
BOOST_PROTO_TYPENAME	proto/extends.hpp	63;"	d
BOOST_PROTO_UNARY_DEFAULT_EVAL	proto/context/default.hpp	147;"	d
BOOST_PROTO_UNARY_DEFAULT_EVAL	proto/context/default.hpp	65;"	d
BOOST_PROTO_UNARY_DEFAULT_EVAL	proto/transform/default.hpp	166;"	d
BOOST_PROTO_UNARY_DEFAULT_EVAL	proto/transform/default.hpp	55;"	d
BOOST_PROTO_UNARY_OP_IS_POSTFIX_0	proto/operators.hpp	101;"	d
BOOST_PROTO_UNARY_OP_IS_POSTFIX_1	proto/operators.hpp	102;"	d
BOOST_PROTO_UNCVREF	proto/proto_fwd.hpp	210;"	d
BOOST_PROTO_UNEXPR	proto/proto_fwd.hpp	750;"	d
BOOST_PROTO_USE_BASIC_EXPR	proto/proto_fwd.hpp	753;"	d
BOOST_PROTO_USE_GET_POINTER	proto/detail/decltype.hpp	232;"	d
BOOST_PROTO_USE_NORMAL_RESULT_OF	proto/proto_fwd.hpp	101;"	d
BOOST_PROTO_VARARG_AS_CHILD_	proto/detail/deprecated.hpp	134;"	d
BOOST_PROTO_VARARG_AS_EXPR_	proto/detail/deprecated.hpp	118;"	d
BOOST_PROTO_VARARG_AS_PARAM_	proto/detail/deprecated.hpp	146;"	d
BOOST_PROTO_VARARG_FUN_	proto/detail/deprecated.hpp	152;"	d
BOOST_PROTO_VARARG_TEMPLATE_	proto/detail/deprecated.hpp	67;"	d
BOOST_PROTO_VARARG_TEMPLATE_AUX_	proto/detail/deprecated.hpp	42;"	d
BOOST_PROTO_VARARG_TEMPLATE_NO_	proto/detail/deprecated.hpp	62;"	d
BOOST_PROTO_VARARG_TEMPLATE_YES_	proto/detail/deprecated.hpp	48;"	d
BOOST_PROTO_VARARG_TYPE_	proto/detail/deprecated.hpp	106;"	d
BOOST_PROTO_VARARG_TYPE_AUX_	proto/detail/deprecated.hpp	77;"	d
BOOST_PROTO_VOID	proto/detail/basic_expr.hpp	16;"	d
BOOST_PROTO_VOID	proto/detail/basic_expr.hpp	50;"	d
BOOST_PROTO_VOID	proto/detail/expr.hpp	20;"	d
BOOST_PROTO_VOID	proto/detail/expr.hpp	81;"	d
BOOST_PROTO_a	proto/repeat.hpp	68;"	d
BOOST_PROTO_invoke	proto/repeat.hpp	73;"	d
BOOST_PROTO_ref_a	proto/repeat.hpp	63;"	d
BOOST_PROTO_ref_a_aux	proto/repeat.hpp	23;"	d
BOOST_PROTO_typename_A	proto/repeat.hpp	28;"	d
BOOST_XPRESSIVE_PROTO_PROTO_TYPEOF_H	proto/proto_typeof.hpp	11;"	d
Expr	proto/expr.hpp	/^        Expr make_terminal(T (&t)[N], Expr *, proto::term<Arg0[N]> *)$/;"	m	namespace:boost::proto::detail
Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3;$/;"	t	struct:_and_impl	access:public
Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2;$/;"	t	struct:_and_impl	access:public
Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1;$/;"	t	struct:_and_impl	access:public
Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3;$/;"	t	struct:_and_impl	access:public
Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2;$/;"	t	struct:_and_impl	access:public
Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1;$/;"	t	struct:_and_impl	access:public
Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3;$/;"	t	struct:_and_impl	access:public
Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2;$/;"	t	struct:_and_impl	access:public
Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3;$/;"	t	struct:_and_impl	access:public
Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
Gimpl6	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
Gimpl6	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
Gimpl6	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
Gimpl6	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
Gimpl7	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
Gimpl7	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
Gimpl7	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
Gimpl8	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
Gimpl8	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
Gimpl9	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
I	proto/transform/detail/pack_impl.hpp	62;"	d
I	proto/transform/detail/pack_impl.hpp	70;"	d
J	proto/transform/detail/pack_impl.hpp	63;"	d
J	proto/transform/detail/pack_impl.hpp	69;"	d
M	proto/detail/make_expr_.hpp	103;"	d
M	proto/detail/make_expr_.hpp	66;"	d
M	proto/detail/unpack_expr_.hpp	142;"	d
M	proto/detail/unpack_expr_.hpp	196;"	d
M	proto/transform/detail/pack_impl.hpp	34;"	d
M	proto/transform/detail/pack_impl.hpp	59;"	d
M0	proto/detail/and_n.hpp	62;"	d
M0	proto/detail/and_n.hpp	69;"	d
M0	proto/detail/and_n.hpp	83;"	d
M0	proto/detail/and_n.hpp	86;"	d
M0	proto/detail/any.hpp	29;"	d
M0	proto/detail/any.hpp	31;"	d
M0	proto/proto_fwd.hpp	237;"	d
M0	proto/proto_fwd.hpp	241;"	d
M0	proto/proto_fwd.hpp	862;"	d
M0	proto/proto_fwd.hpp	869;"	d
M0	proto/transform/detail/expand_pack.hpp	33;"	d
M0	proto/transform/detail/expand_pack.hpp	44;"	d
M0	proto/transform/detail/pack_impl.hpp	35;"	d
M0	proto/transform/detail/pack_impl.hpp	58;"	d
M1	proto/transform/detail/expand_pack.hpp	34;"	d
M1	proto/transform/detail/expand_pack.hpp	43;"	d
N	proto/context/detail/callable_eval.hpp	111;"	d
N	proto/context/detail/callable_eval.hpp	44;"	d
N	proto/context/detail/default_eval.hpp	39;"	d
N	proto/context/detail/default_eval.hpp	80;"	d
N	proto/context/detail/null_eval.hpp	39;"	d
N	proto/context/detail/null_eval.hpp	52;"	d
N	proto/detail/and_n.hpp	33;"	d
N	proto/detail/and_n.hpp	92;"	d
N	proto/detail/args.hpp	65;"	d
N	proto/detail/args.hpp	83;"	d
N	proto/detail/class_member_traits.hpp	33;"	d
N	proto/detail/class_member_traits.hpp	49;"	d
N	proto/detail/deduce_domain_n.hpp	41;"	d
N	proto/detail/deduce_domain_n.hpp	62;"	d
N	proto/detail/deep_copy.hpp	48;"	d
N	proto/detail/deep_copy.hpp	77;"	d
N	proto/detail/expr_funop.hpp	45;"	d
N	proto/detail/expr_funop.hpp	9;"	d
N	proto/detail/generate_by_value.hpp	33;"	d
N	proto/detail/generate_by_value.hpp	91;"	d
N	proto/detail/lambda_matches.hpp	41;"	d
N	proto/detail/lambda_matches.hpp	59;"	d
N	proto/detail/make_expr.hpp	33;"	d
N	proto/detail/make_expr.hpp	73;"	d
N	proto/detail/make_expr_.hpp	102;"	d
N	proto/detail/make_expr_.hpp	65;"	d
N	proto/detail/make_expr_funop.hpp	33;"	d
N	proto/detail/make_expr_funop.hpp	65;"	d
N	proto/detail/matches_.hpp	50;"	d
N	proto/detail/matches_.hpp	94;"	d
N	proto/detail/memfun_funop.hpp	33;"	d
N	proto/detail/memfun_funop.hpp	43;"	d
N	proto/detail/or_n.hpp	33;"	d
N	proto/detail/or_n.hpp	57;"	d
N	proto/detail/poly_function_funop.hpp	40;"	d
N	proto/detail/poly_function_funop.hpp	72;"	d
N	proto/detail/poly_function_traits.hpp	33;"	d
N	proto/detail/poly_function_traits.hpp	63;"	d
N	proto/detail/template_arity_helper.hpp	33;"	d
N	proto/detail/template_arity_helper.hpp	42;"	d
N	proto/detail/traits.hpp	219;"	d
N	proto/detail/traits.hpp	40;"	d
N	proto/detail/unpack_expr_.hpp	141;"	d
N	proto/detail/unpack_expr_.hpp	195;"	d
N	proto/detail/vararg_matches_impl.hpp	33;"	d
N	proto/detail/vararg_matches_impl.hpp	56;"	d
N	proto/proto_fwd.hpp	/^    int const N = (INT_MAX >> 10);$/;"	m	namespace:boost::proto
N	proto/transform/detail/call.hpp	108;"	d
N	proto/transform/detail/call.hpp	47;"	d
N	proto/transform/detail/construct_funop.hpp	33;"	d
N	proto/transform/detail/construct_funop.hpp	42;"	d
N	proto/transform/detail/construct_pod_funop.hpp	33;"	d
N	proto/transform/detail/construct_pod_funop.hpp	43;"	d
N	proto/transform/detail/default_function_impl.hpp	39;"	d
N	proto/transform/detail/default_function_impl.hpp	95;"	d
N	proto/transform/detail/expand_pack.hpp	32;"	d
N	proto/transform/detail/expand_pack.hpp	45;"	d
N	proto/transform/detail/fold_impl.hpp	141;"	d
N	proto/transform/detail/fold_impl.hpp	97;"	d
N	proto/transform/detail/lazy.hpp	33;"	d
N	proto/transform/detail/lazy.hpp	77;"	d
N	proto/transform/detail/make.hpp	200;"	d
N	proto/transform/detail/make.hpp	56;"	d
N	proto/transform/detail/make_gcc_workaround.hpp	49;"	d
N	proto/transform/detail/make_gcc_workaround.hpp	98;"	d
N	proto/transform/detail/pack_impl.hpp	33;"	d
N	proto/transform/detail/pack_impl.hpp	60;"	d
N	proto/transform/detail/pass_through_impl.hpp	102;"	d
N	proto/transform/detail/pass_through_impl.hpp	55;"	d
N	proto/transform/detail/when.hpp	33;"	d
N	proto/transform/detail/when.hpp	99;"	d
T	proto/expr.hpp	/^        Expr make_terminal(T (&t)[N], Expr *, proto::term<Arg0[N]> *)$/;"	m	namespace:boost::proto::detail
UNREF	proto/context/default.hpp	37;"	d
UNREF	proto/context/default.hpp	407;"	d
V	proto/detail/decltype.hpp	/^                V;$/;"	t	struct:boost::proto::detail::get_pointerns::mem_ptr_fun	access:public
V	proto/detail/decltype.hpp	/^            typedef typename class_member_traits<pmf_type>::class_type V;$/;"	t	struct:boost::proto::detail::memfun	access:public
_	proto/matches.hpp	/^    struct _ : transform<_>$/;"	s	namespace:boost::proto	inherits:transform
_and_impl	proto/detail/and_n.hpp	/^        struct _and_impl<proto::and_<BOOST_PP_ENUM_PARAMS(N, G)>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/detail/preprocessed/and_n.hpp	/^        struct _and_impl<proto::and_<G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8 , G9>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/detail/preprocessed/and_n.hpp	/^        struct _and_impl<proto::and_<G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/detail/preprocessed/and_n.hpp	/^        struct _and_impl<proto::and_<G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/detail/preprocessed/and_n.hpp	/^        struct _and_impl<proto::and_<G0 , G1 , G2 , G3 , G4 , G5 , G6>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/detail/preprocessed/and_n.hpp	/^        struct _and_impl<proto::and_<G0 , G1 , G2 , G3 , G4 , G5>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/detail/preprocessed/and_n.hpp	/^        struct _and_impl<proto::and_<G0 , G1 , G2 , G3 , G4>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/detail/preprocessed/and_n.hpp	/^        struct _and_impl<proto::and_<G0 , G1 , G2 , G3>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/detail/preprocessed/and_n.hpp	/^        struct _and_impl<proto::and_<G0 , G1 , G2>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/detail/preprocessed/and_n.hpp	/^        struct _and_impl<proto::and_<G0 , G1>, Expr, State, Data>$/;"	s	inherits:proto::transform_impl
_and_impl	proto/matches.hpp	/^        struct _and_impl<proto::and_<>, Expr, State, Data>$/;"	s	namespace:boost::proto::detail	inherits:proto::_::impl
_and_impl	proto/matches.hpp	/^        struct _and_impl<proto::and_<G0>, Expr, State, Data>$/;"	s	namespace:boost::proto::detail	inherits:proto::when::,impl
_and_impl::Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl0	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl1	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl2	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl3	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl4	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl5	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl6	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl6	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl6	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl6	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl7	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl7	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl7	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl8	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl8	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8;$/;"	t	struct:_and_impl	access:public
_and_impl::Gimpl9	proto/detail/preprocessed/and_n.hpp	/^            typedef typename proto::when<proto::_, G0> ::template impl<Expr, State, Data> Gimpl0; typedef typename proto::when<proto::_, G1> ::template impl<Expr, State, Data> Gimpl1; typedef typename proto::when<proto::_, G2> ::template impl<Expr, State, Data> Gimpl2; typedef typename proto::when<proto::_, G3> ::template impl<Expr, State, Data> Gimpl3; typedef typename proto::when<proto::_, G4> ::template impl<Expr, State, Data> Gimpl4; typedef typename proto::when<proto::_, G5> ::template impl<Expr, State, Data> Gimpl5; typedef typename proto::when<proto::_, G6> ::template impl<Expr, State, Data> Gimpl6; typedef typename proto::when<proto::_, G7> ::template impl<Expr, State, Data> Gimpl7; typedef typename proto::when<proto::_, G8> ::template impl<Expr, State, Data> Gimpl8; typedef typename proto::when<proto::_, G9> ::template impl<Expr, State, Data> Gimpl9;$/;"	t	struct:_and_impl	access:public
_and_impl::operator ()	proto/detail/and_n.hpp	/^            result_type operator()($/;"	f	struct:_and_impl	access:public	signature:( typename _and_impl::expr_param e , typename _and_impl::state_param s , typename _and_impl::data_param d ) const
_and_impl::operator ()	proto/detail/preprocessed/and_n.hpp	/^            result_type operator()($/;"	f	struct:_and_impl	access:public	signature:( typename _and_impl::expr_param e , typename _and_impl::state_param s , typename _and_impl::data_param d ) const
_and_impl::result_type	proto/detail/and_n.hpp	/^            typedef typename BOOST_PP_CAT(Gimpl, BOOST_PP_DEC(N))::result_type result_type;$/;"	t	struct:_and_impl	access:public
_and_impl::result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl1::result_type result_type;$/;"	t	struct:_and_impl	access:public
_and_impl::result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl2::result_type result_type;$/;"	t	struct:_and_impl	access:public
_and_impl::result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl3::result_type result_type;$/;"	t	struct:_and_impl	access:public
_and_impl::result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl4::result_type result_type;$/;"	t	struct:_and_impl	access:public
_and_impl::result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl5::result_type result_type;$/;"	t	struct:_and_impl	access:public
_and_impl::result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl6::result_type result_type;$/;"	t	struct:_and_impl	access:public
_and_impl::result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl7::result_type result_type;$/;"	t	struct:_and_impl	access:public
_and_impl::result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl8::result_type result_type;$/;"	t	struct:_and_impl	access:public
_and_impl::result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl9::result_type result_type;$/;"	t	struct:_and_impl	access:public
_at	proto/proto_fwd.hpp	/^    typedef functional::pop_front   _at;$/;"	t	namespace:boost::proto
_byref	proto/transform/arg.hpp	/^    struct _byref : callable$/;"	s	namespace:boost::proto	inherits:callable
_byval	proto/transform/arg.hpp	/^    struct _byval : callable$/;"	s	namespace:boost::proto	inherits:callable
_child	proto/proto_fwd.hpp	/^    typedef _child0     _child;$/;"	t	namespace:boost::proto
_child0	proto/proto_fwd.hpp	/^    typedef _child_c<0> _child0;$/;"	t	namespace:boost::proto
_child1	proto/proto_fwd.hpp	/^    typedef _child_c<1> _child1;$/;"	t	namespace:boost::proto
_child_c	proto/transform/arg.hpp	/^    struct _child_c : transform<_child_c<N> >$/;"	s	namespace:boost::proto	inherits:transform
_data	proto/transform/arg.hpp	/^    struct _data : transform<_data>$/;"	s	namespace:boost::proto	inherits:transform
_deep_copy	proto/deep_copy.hpp	/^    struct _deep_copy$/;"	s	namespace:boost::proto	inherits:proto::transform
_default	proto/transform/default.hpp	/^        struct _default$/;"	s	namespace:boost::proto::detail	inherits:proto::_default
_default	proto/transform/default.hpp	/^    struct _default$/;"	s	namespace:boost::proto	inherits:switch_
_env	proto/transform/env.hpp	/^        struct _env$/;"	s	namespace:boost::proto	inherits:transform
_env_var	proto/transform/env.hpp	/^        struct _env_var$/;"	s	namespace:boost::proto	inherits:proto::transform
_eval	proto/proto_fwd.hpp	/^    typedef functional::eval        _eval;$/;"	t	namespace:boost::proto
_expr	proto/transform/arg.hpp	/^    struct _expr : transform<_expr>$/;"	s	namespace:boost::proto	inherits:transform
_first	proto/proto_fwd.hpp	/^    typedef functional::first       _first;$/;"	t	namespace:boost::proto
_flatten	proto/proto_fwd.hpp	/^    typedef functional::flatten     _flatten;$/;"	t	namespace:boost::proto
_left	proto/proto_fwd.hpp	/^    typedef _child0     _left;$/;"	t	namespace:boost::proto
_make_address_of	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::address_of>         _make_address_of;$/;"	t	namespace:boost::proto
_make_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::assign>             _make_assign;$/;"	t	namespace:boost::proto
_make_bitwise_and	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_and>        _make_bitwise_and;$/;"	t	namespace:boost::proto
_make_bitwise_and_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_and_assign> _make_bitwise_and_assign;$/;"	t	namespace:boost::proto
_make_bitwise_or	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_or>         _make_bitwise_or;$/;"	t	namespace:boost::proto
_make_bitwise_or_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_or_assign>  _make_bitwise_or_assign;$/;"	t	namespace:boost::proto
_make_bitwise_xor	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_xor>        _make_bitwise_xor;$/;"	t	namespace:boost::proto
_make_bitwise_xor_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_xor_assign> _make_bitwise_xor_assign;$/;"	t	namespace:boost::proto
_make_comma	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::comma>              _make_comma;$/;"	t	namespace:boost::proto
_make_complement	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::complement>         _make_complement;$/;"	t	namespace:boost::proto
_make_dereference	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::dereference>        _make_dereference;$/;"	t	namespace:boost::proto
_make_divides	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::divides>            _make_divides;$/;"	t	namespace:boost::proto
_make_divides_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::divides_assign>     _make_divides_assign;$/;"	t	namespace:boost::proto
_make_equal_to	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::equal_to>           _make_equal_to;$/;"	t	namespace:boost::proto
_make_function	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::function>           _make_function;$/;"	t	namespace:boost::proto
_make_greater	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::greater>            _make_greater;$/;"	t	namespace:boost::proto
_make_greater_equal	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::greater_equal>      _make_greater_equal;$/;"	t	namespace:boost::proto
_make_if_else	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::if_else_>           _make_if_else;$/;"	t	namespace:boost::proto
_make_less	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::less>               _make_less;$/;"	t	namespace:boost::proto
_make_less_equal	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::less_equal>         _make_less_equal;$/;"	t	namespace:boost::proto
_make_logical_and	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::logical_and>        _make_logical_and;$/;"	t	namespace:boost::proto
_make_logical_not	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::logical_not>        _make_logical_not;$/;"	t	namespace:boost::proto
_make_logical_or	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::logical_or>         _make_logical_or;$/;"	t	namespace:boost::proto
_make_mem_ptr	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::mem_ptr>            _make_mem_ptr;$/;"	t	namespace:boost::proto
_make_minus	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::minus>              _make_minus;$/;"	t	namespace:boost::proto
_make_minus_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::minus_assign>       _make_minus_assign;$/;"	t	namespace:boost::proto
_make_modulus	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::modulus>            _make_modulus;$/;"	t	namespace:boost::proto
_make_modulus_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::modulus_assign>     _make_modulus_assign;$/;"	t	namespace:boost::proto
_make_multiplies	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::multiplies>         _make_multiplies;$/;"	t	namespace:boost::proto
_make_multiplies_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::multiplies_assign>  _make_multiplies_assign;$/;"	t	namespace:boost::proto
_make_negate	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::negate>             _make_negate;$/;"	t	namespace:boost::proto
_make_not_equal_to	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::not_equal_to>       _make_not_equal_to;$/;"	t	namespace:boost::proto
_make_pair	proto/proto_fwd.hpp	/^    typedef functional::make_pair   _make_pair;$/;"	t	namespace:boost::proto
_make_plus	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::plus>               _make_plus;$/;"	t	namespace:boost::proto
_make_plus_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::plus_assign>        _make_plus_assign;$/;"	t	namespace:boost::proto
_make_post_dec	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::post_dec>           _make_post_dec;$/;"	t	namespace:boost::proto
_make_post_inc	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::post_inc>           _make_post_inc;$/;"	t	namespace:boost::proto
_make_pre_dec	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::pre_dec>            _make_pre_dec;$/;"	t	namespace:boost::proto
_make_pre_inc	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::pre_inc>            _make_pre_inc;$/;"	t	namespace:boost::proto
_make_shift_left	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::shift_left>         _make_shift_left;$/;"	t	namespace:boost::proto
_make_shift_left_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::shift_left_assign>  _make_shift_left_assign;$/;"	t	namespace:boost::proto
_make_shift_right	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::shift_right>        _make_shift_right;$/;"	t	namespace:boost::proto
_make_shift_right_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::shift_right_assign> _make_shift_right_assign;$/;"	t	namespace:boost::proto
_make_subscript	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::subscript>          _make_subscript;$/;"	t	namespace:boost::proto
_make_terminal	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::terminal>           _make_terminal;$/;"	t	namespace:boost::proto
_make_unary_plus	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::unary_plus>         _make_unary_plus;$/;"	t	namespace:boost::proto
_pop_back	proto/proto_fwd.hpp	/^    typedef functional::pop_back    _pop_back;$/;"	t	namespace:boost::proto
_pop_front	proto/proto_fwd.hpp	/^    typedef functional::pop_front   _pop_front;$/;"	t	namespace:boost::proto
_push_back	proto/proto_fwd.hpp	/^    typedef functional::push_back   _push_back;$/;"	t	namespace:boost::proto
_push_front	proto/proto_fwd.hpp	/^    typedef functional::push_front  _push_front;$/;"	t	namespace:boost::proto
_reverse	proto/proto_fwd.hpp	/^    typedef functional::reverse     _reverse;$/;"	t	namespace:boost::proto
_right	proto/proto_fwd.hpp	/^    typedef _child1     _right;$/;"	t	namespace:boost::proto
_second	proto/proto_fwd.hpp	/^    typedef functional::second      _second;$/;"	t	namespace:boost::proto
_state	proto/transform/arg.hpp	/^    struct _state : transform<_state>$/;"	s	namespace:boost::proto	inherits:transform
_value	proto/transform/arg.hpp	/^    struct _value : transform<_value>$/;"	s	namespace:boost::proto	inherits:transform
_void	proto/transform/arg.hpp	/^    struct _void : transform<_void>$/;"	s	namespace:boost::proto	inherits:transform
a0	proto/transform/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data>::result_type a0;$/;"	t	struct:boost::proto::call::impl2	access:public
a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
a1	proto/transform/call.hpp	/^            typedef typename when<_, A1>::template impl<Expr, State, Data>::result_type a1;$/;"	t	struct:boost::proto::call::impl2	access:public
a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
a2	proto/transform/call.hpp	/^            typedef typename when<_, A2>::template impl<Expr, State, Data>::result_type a2;$/;"	t	struct:boost::proto::call::impl2	access:public
a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
a6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
a6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
a6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
a6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
a7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
a7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
a7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
a8	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
a8	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
a9	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
address_of	proto/tags.hpp	/^    struct address_of {};$/;"	s	namespace:boost::proto::tagns_::tag
address_of_hack	proto/expr.hpp	/^        struct address_of_hack$/;"	s	namespace:boost::proto::detail
address_of_hack	proto/expr.hpp	/^        struct address_of_hack<proto::tag::address_of, Expr &>$/;"	s	namespace:boost::proto::detail
address_of_hack_type_	proto/detail/basic_expr.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:basic_expr	access:public
address_of_hack_type_	proto/detail/basic_expr.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:basic_expr	access:public
address_of_hack_type_	proto/detail/expr.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:expr	access:public
address_of_hack_type_	proto/detail/expr.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:expr	access:public
address_of_hack_type_	proto/detail/preprocessed/basic_expr.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:basic_expr	access:public
address_of_hack_type_	proto/detail/preprocessed/basic_expr.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:basic_expr	access:public
address_of_hack_type_	proto/detail/preprocessed/expr.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:expr	access:public
address_of_hack_type_	proto/detail/preprocessed/expr.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:expr	access:public
address_of_hack_type_	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:expr	access:public
address_of_hack_type_	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:expr	access:public
advance	proto/functional/std/iterator.hpp	/^    struct advance$/;"	s	namespace:boost::proto::functional
advance_impl	proto/fusion.hpp	/^        struct advance_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
and_	proto/matches.hpp	/^    struct and_ : transform<and_<BOOST_PROTO_LOGICAL_G> >$/;"	s	namespace:boost::proto	inherits:transform
and_10	proto/detail/preprocessed/and_n.hpp	/^    struct and_10$/;"	s	inherits:and_9
and_10	proto/detail/preprocessed/and_n.hpp	/^    struct and_10<false, P0 , P1 , P2 , P3 , P4 , P5 , P6 , P7 , P8>$/;"	s	inherits:mpl::false_
and_2	proto/detail/preprocessed/and_n.hpp	/^    struct and_2$/;"	s	inherits:mpl::bool_
and_2	proto/detail/preprocessed/and_n.hpp	/^    struct and_2<false, P0>$/;"	s	inherits:mpl::false_
and_3	proto/detail/preprocessed/and_n.hpp	/^    struct and_3$/;"	s	inherits:and_2
and_3	proto/detail/preprocessed/and_n.hpp	/^    struct and_3<false, P0 , P1>$/;"	s	inherits:mpl::false_
and_4	proto/detail/preprocessed/and_n.hpp	/^    struct and_4$/;"	s	inherits:and_3
and_4	proto/detail/preprocessed/and_n.hpp	/^    struct and_4<false, P0 , P1 , P2>$/;"	s	inherits:mpl::false_
and_5	proto/detail/preprocessed/and_n.hpp	/^    struct and_5$/;"	s	inherits:and_4
and_5	proto/detail/preprocessed/and_n.hpp	/^    struct and_5<false, P0 , P1 , P2 , P3>$/;"	s	inherits:mpl::false_
and_6	proto/detail/preprocessed/and_n.hpp	/^    struct and_6$/;"	s	inherits:and_5
and_6	proto/detail/preprocessed/and_n.hpp	/^    struct and_6<false, P0 , P1 , P2 , P3 , P4>$/;"	s	inherits:mpl::false_
and_7	proto/detail/preprocessed/and_n.hpp	/^    struct and_7$/;"	s	inherits:and_6
and_7	proto/detail/preprocessed/and_n.hpp	/^    struct and_7<false, P0 , P1 , P2 , P3 , P4 , P5>$/;"	s	inherits:mpl::false_
and_8	proto/detail/preprocessed/and_n.hpp	/^    struct and_8$/;"	s	inherits:and_7
and_8	proto/detail/preprocessed/and_n.hpp	/^    struct and_8<false, P0 , P1 , P2 , P3 , P4 , P5 , P6>$/;"	s	inherits:mpl::false_
and_9	proto/detail/preprocessed/and_n.hpp	/^    struct and_9$/;"	s	inherits:and_8
and_9	proto/detail/preprocessed/and_n.hpp	/^    struct and_9<false, P0 , P1 , P2 , P3 , P4 , P5 , P6 , P7>$/;"	s	inherits:mpl::false_
any	proto/detail/any.hpp	/^                template<typename T> any(T const &) {}$/;"	f	struct:boost::proto::detail::anyns::any	access:public	signature:(T const &)
any	proto/detail/any.hpp	/^            struct any$/;"	s	namespace:boost::proto::detail::anyns
anyns	proto/detail/any.hpp	/^        namespace anyns$/;"	n	namespace:boost::proto::detail
applied	proto/transform/detail/expand_pack.hpp	/^            typedef mpl::bool_<BOOST_PP_REPEAT(N, M1, ~) false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/make.hpp	/^            static bool const applied = true;$/;"	m	struct:detail::make_	access:public
applied	proto/transform/detail/pack.hpp	/^            typedef mpl::false_ applied;$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
applied	proto/transform/detail/pack.hpp	/^            typedef mpl::true_ applied;$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_< false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || expand_pattern_helper<Tfx, A7>::applied::value || expand_pattern_helper<Tfx, A8>::applied::value || expand_pattern_helper<Tfx, A9>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || expand_pattern_helper<Tfx, A7>::applied::value || expand_pattern_helper<Tfx, A8>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || expand_pattern_helper<Tfx, A7>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
applied	proto/transform/detail/preprocessed/make.hpp	/^            static bool const applied = true;$/;"	m	struct:detail::make_	access:public
applied	proto/transform/make.hpp	/^            static bool const applied = false;$/;"	m	struct:boost::proto::detail::make_	access:public
applied	proto/transform/make.hpp	/^            static bool const applied = false;$/;"	m	struct:boost::proto::detail::make_if_	access:public
applied	proto/transform/make.hpp	/^            static bool const applied = false;$/;"	m	struct:boost::proto::detail::nested_type_if	access:public
applied	proto/transform/make.hpp	/^            static bool const applied = true;$/;"	m	struct:boost::proto::detail::make_if_	access:public
applied	proto/transform/make.hpp	/^            static bool const applied = true;$/;"	m	struct:boost::proto::detail::nested_type_if	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::advance_impl	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::at_impl	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::begin_impl	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::category_of_impl	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::convert_impl	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::deref_impl	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::distance_impl	inherits:mpl::long_	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::end_impl	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::is_segmented_impl	inherits:mpl::true_	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::is_sequence_impl	inherits:mpl::true_	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::is_view_impl	inherits:mpl::false_	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::is_view_impl	inherits:mpl::true_	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::next_impl	inherits:advance_impl::,apply	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::prior_impl	inherits:advance_impl::,apply	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::segments_impl	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::size_impl	inherits:mpl::long_	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::value_at_impl	access:public
apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::value_of_impl	access:public
apply	proto/fusion.hpp	/^            struct apply<Iterator, 0>$/;"	s	struct:boost::fusion::extension::deref_impl	access:public
apply	proto/fusion.hpp	/^            struct apply<Iterator, 0>$/;"	s	struct:boost::fusion::extension::value_of_impl	access:public
apply	proto/fusion.hpp	/^            struct apply<Sequence, Index, 0>$/;"	s	struct:boost::fusion::extension::at_impl	access:public
apply	proto/fusion.hpp	/^            struct apply<Sequence, Index, 0>$/;"	s	struct:boost::fusion::extension::value_at_impl	access:public
apply_transform	proto/transform/impl.hpp	/^        struct apply_transform<PrimitiveTransform(Expr)>$/;"	s	namespace:boost::proto::detail	inherits:PrimitiveTransform::,impl
apply_transform	proto/transform/impl.hpp	/^        struct apply_transform<PrimitiveTransform(Expr, State)>$/;"	s	namespace:boost::proto::detail	inherits:PrimitiveTransform::,impl
apply_transform	proto/transform/impl.hpp	/^        struct apply_transform<PrimitiveTransform(Expr, State, Data)>$/;"	s	namespace:boost::proto::detail	inherits:PrimitiveTransform::,impl
arg	proto/detail/poly_function.hpp	/^        arg(type t)$/;"	f	struct:boost::proto::detail::arg	access:public	signature:(type t)
arg	proto/detail/poly_function.hpp	/^    struct arg$/;"	s	namespace:boost::proto::detail
arg	proto/detail/poly_function.hpp	/^    struct arg<T &>$/;"	s	namespace:boost::proto::detail
argsns_	proto/args.hpp	/^    namespace argsns_$/;"	n	namespace:boost::proto
argsns_	proto/proto_fwd.hpp	/^    namespace argsns_$/;"	n	namespace:boost::proto
arity	proto/detail/args.hpp	/^        static const long arity = 0;$/;"	m	struct:term	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 0;$/;"	m	struct:term	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 10;$/;"	m	struct:list10	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 1;$/;"	m	struct:list1	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 2;$/;"	m	struct:list2	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 3;$/;"	m	struct:list3	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 4;$/;"	m	struct:list4	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 5;$/;"	m	struct:list5	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 6;$/;"	m	struct:list6	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 7;$/;"	m	struct:list7	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 8;$/;"	m	struct:list8	access:public
arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 9;$/;"	m	struct:list9	access:public
arity_of	proto/traits.hpp	/^    struct arity_of$/;"	s	namespace:boost::proto	inherits:Expr::proto_arity
arity_of	proto/traits.hpp	/^    struct arity_of<Expr &>$/;"	s	namespace:boost::proto	inherits:Expr::proto_arity
array_matches	proto/matches.hpp	/^        struct array_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
array_matches	proto/matches.hpp	/^        struct array_matches<T[M], T *>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
array_matches	proto/matches.hpp	/^        struct array_matches<T[M], T const *>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
array_matches	proto/matches.hpp	/^        struct array_matches<T[M], T[proto::N]>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
as_callable	proto/transform/fold.hpp	/^            as_callable(Data d)$/;"	f	struct:boost::proto::detail::as_callable	access:public	signature:(Data d)
as_callable	proto/transform/fold.hpp	/^        struct as_callable$/;"	s	namespace:boost::proto::detail
as_child	proto/detail/as_expr.hpp	/^    struct as_child<T, Generator, false>$/;"	s	namespace:boost::proto::detail
as_child	proto/detail/as_expr.hpp	/^    struct as_child<T, Generator, true>$/;"	s	namespace:boost::proto::detail
as_child	proto/detail/as_expr.hpp	/^    struct as_child<T, proto::default_generator, false>$/;"	s	namespace:boost::proto::detail
as_child	proto/detail/as_expr.hpp	/^    struct as_child<T, proto::default_generator, true>$/;"	s	namespace:boost::proto::detail
as_child	proto/domain.hpp	/^            struct as_child$/;"	s	struct:boost::proto::domainns_::domain	inherits:detail::as_child	access:public
as_child	proto/domain.hpp	/^            struct as_child<T, typename T::proto_is_expr_, proto::callable>$/;"	s	struct:boost::proto::domainns_::domain	access:public
as_child	proto/traits.hpp	/^        struct as_child$/;"	s	namespace:boost::proto::functional
as_child	proto/traits.hpp	/^        struct as_child$/;"	s	namespace:boost::proto::result_of
as_child	proto/traits.hpp	/^    as_child(T const &t)$/;"	f	namespace:boost::proto	signature:(T const &t)
as_element	proto/fusion.hpp	/^        struct as_element$/;"	s	namespace:boost::proto::detail
as_env	proto/transform/env.hpp	/^            struct as_env$/;"	s	namespace:boost::proto::functional
as_env	proto/transform/env.hpp	/^            struct as_env$/;"	s	namespace:boost::proto::result_of	inherits:BOOST_PROTO_RESULT_OF
as_env	proto/transform/env.hpp	/^        typename proto::result_of::as_env<T const &>::type const as_env(T const &t)$/;"	f	class:boost::proto::proto::result_of::as_env	signature:(T const &t)
as_expr	proto/detail/as_expr.hpp	/^    struct as_expr<T, Generator, false>$/;"	s	namespace:boost::proto::detail
as_expr	proto/detail/as_expr.hpp	/^    struct as_expr<T, Generator, true>$/;"	s	namespace:boost::proto::detail
as_expr	proto/detail/as_expr.hpp	/^    struct as_expr<T, proto::default_generator, false>$/;"	s	namespace:boost::proto::detail
as_expr	proto/detail/as_expr.hpp	/^    struct as_expr<T, proto::default_generator, true>$/;"	s	namespace:boost::proto::detail
as_expr	proto/domain.hpp	/^            struct as_expr$/;"	s	struct:boost::proto::domainns_::domain	inherits:detail::as_expr	access:public
as_expr	proto/domain.hpp	/^            struct as_expr<T, typename T::proto_is_expr_, proto::callable>$/;"	s	struct:boost::proto::domainns_::domain	access:public
as_expr	proto/traits.hpp	/^        struct as_expr$/;"	s	namespace:boost::proto::functional
as_expr	proto/traits.hpp	/^        struct as_expr$/;"	s	namespace:boost::proto::result_of
as_expr	proto/traits.hpp	/^    as_expr(T const &t)$/;"	f	namespace:boost::proto	signature:(T const &t)
as_lvalue	proto/detail/as_lvalue.hpp	/^        T &as_lvalue(T &t)$/;"	f	namespace:boost::proto::detail	signature:(T &t)
as_lvalue	proto/detail/as_lvalue.hpp	/^        T const &as_lvalue(T const &t)$/;"	f	namespace:boost::proto::detail	signature:(T const &t)
as_mono_function	proto/detail/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0 , A1 , A2 , A3 , A4)>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0 , A1 , A2 , A3)>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0 , A1 , A2)>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0 , A1)>$/;"	s	inherits:as_mono_function_impl
as_mono_function	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function<PolyFun(A0)>$/;"	s	inherits:as_mono_function_impl
as_mono_function_impl	proto/detail/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(BOOST_PP_ENUM_PARAMS(N, A)), false>$/;"	s
as_mono_function_impl	proto/detail/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(BOOST_PP_ENUM_PARAMS(N, A)), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4 , A5), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3 , A4), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2 , A3), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1 , A2), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0 , A1), true>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0), false>$/;"	s
as_mono_function_impl	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct as_mono_function_impl<PolyFun(A0), true>$/;"	s
as_mono_function_impl::type	proto/detail/poly_function_traits.hpp	/^        typedef PolyFun type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<BOOST_PP_ENUM_PARAMS(N, const A)> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef PolyFun type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 , const A9> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mono_function_impl::type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0> type;$/;"	t	struct:as_mono_function_impl	access:public
as_mutable	proto/detail/decltype.hpp	/^        struct as_mutable$/;"	s	namespace:boost::proto::detail
as_mutable	proto/detail/decltype.hpp	/^        struct as_mutable<T &>$/;"	s	namespace:boost::proto::detail
as_mutable	proto/detail/decltype.hpp	/^        struct as_mutable<T const &>$/;"	s	namespace:boost::proto::detail
as_subscriptable	proto/detail/decltype.hpp	/^        struct as_subscriptable$/;"	s	namespace:boost::proto::detail
as_subscriptable	proto/detail/decltype.hpp	/^        struct as_subscriptable<T &>$/;"	s	namespace:boost::proto::detail
as_subscriptable	proto/detail/decltype.hpp	/^        struct as_subscriptable<T const &>$/;"	s	namespace:boost::proto::detail
as_subscriptable	proto/detail/decltype.hpp	/^        struct as_subscriptable<T const>$/;"	s	namespace:boost::proto::detail
assert_matches	proto/debug.hpp	/^    void assert_matches(Expr const & \/*expr*\/)$/;"	f	namespace:boost::proto	signature:(Expr const & )
assert_matches_not	proto/debug.hpp	/^    void assert_matches_not(Expr const & \/*expr*\/)$/;"	f	namespace:boost::proto	signature:(Expr const & )
assign	proto/tags.hpp	/^    struct assign {};$/;"	s	namespace:boost::proto::tagns_::tag
at	proto/functional/fusion/at.hpp	/^    struct at$/;"	s	namespace:boost::proto::functional
at	proto/transform/env.hpp	/^                const_reference at(Key, T const &) const$/;"	f	struct:boost::proto::envns_::env	access:public	signature:(Key, T const &) const
at	proto/transform/impl.hpp	/^            T const &at(detail::any, T const &t) const$/;"	f	struct:boost::proto::envns_::empty_env	access:public	signature:(detail::any, T const &t) const
at_impl	proto/fusion.hpp	/^        struct at_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
b6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
b6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
b6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
b6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
b7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
b7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
b7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
b8	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
b8	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
b9	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
back_	proto/detail/args.hpp	/^        typedef Arg0 back_;$/;"	t	struct:term	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 back_;$/;"	t	struct:list1	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 back_;$/;"	t	struct:term	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg1 back_;$/;"	t	struct:list2	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg2 back_;$/;"	t	struct:list3	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg3 back_;$/;"	t	struct:list4	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg4 back_;$/;"	t	struct:list5	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg5 back_;$/;"	t	struct:list6	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg6 back_;$/;"	t	struct:list7	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg7 back_;$/;"	t	struct:list8	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg8 back_;$/;"	t	struct:list9	access:public
back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg9 back_;$/;"	t	struct:list10	access:public
base	proto/detail/deduce_domain.hpp	/^                typedef domain_<typename Domain::proto_super_domain> base;$/;"	t	struct:boost::proto::detail::domain_	access:public
base_expr	proto/domain.hpp	/^        struct base_expr$/;"	s	namespace:boost::proto::domainns_
base_expr	proto/domain.hpp	/^        struct base_expr<Domain, Tag, Args, true>$/;"	s	namespace:boost::proto::domainns_
base_generator	proto/detail/as_expr.hpp	/^    struct base_generator$/;"	s	namespace:boost::proto::detail
base_generator	proto/detail/as_expr.hpp	/^    struct base_generator<use_basic_expr<Generator> >$/;"	s	namespace:boost::proto::detail
base_type	proto/literal.hpp	/^            typedef extends<terminal_type, literal<T, Domain>, Domain> base_type;$/;"	t	struct:boost::proto::utility::literal	access:private
basic_default_domain	proto/domain.hpp	/^        struct basic_default_domain$/;"	s	namespace:boost::proto::domainns_	inherits:domain
basic_default_generator	proto/generate.hpp	/^    struct basic_default_generator$/;"	s	namespace:boost::proto	inherits:proto::use_basic_expr
basic_expr	proto/detail/basic_expr.hpp	/^    struct basic_expr<Tag, term<Arg0>, 0>$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list10<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9>, 10 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list1<Arg0>, 1 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list2<Arg0 , Arg1>, 2 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list3<Arg0 , Arg1 , Arg2>, 3 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list4<Arg0 , Arg1 , Arg2 , Arg3>, 4 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list5<Arg0 , Arg1 , Arg2 , Arg3 , Arg4>, 5 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list6<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5>, 6 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list7<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6>, 7 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list8<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7>, 8 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, list9<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8>, 9 >$/;"	s
basic_expr	proto/detail/preprocessed/basic_expr.hpp	/^    struct basic_expr<Tag, term<Arg0>, 0>$/;"	s
basic_expr::BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/basic_expr.hpp	/^        static basic_expr const make(BOOST_PP_ENUM_BINARY_PARAMS(ARG_COUNT, A, const &a))$/;"	f	struct:basic_expr	access:public	signature:(ARG_COUNT, A, const &a)
basic_expr::address_of_hack_type_	proto/detail/basic_expr.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:basic_expr	access:public
basic_expr::address_of_hack_type_	proto/detail/basic_expr.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:basic_expr	access:public
basic_expr::address_of_hack_type_	proto/detail/preprocessed/basic_expr.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:basic_expr	access:public
basic_expr::address_of_hack_type_	proto/detail/preprocessed/basic_expr.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:basic_expr	access:public
basic_expr::child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	m	struct:basic_expr	access:public
basic_expr::child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
basic_expr::child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
basic_expr::child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
basic_expr::child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
basic_expr::child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
basic_expr::child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:basic_expr	access:public
basic_expr::child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:basic_expr	access:public
basic_expr::child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:basic_expr	access:public
basic_expr::child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
basic_expr::child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
basic_expr::child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
basic_expr::child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
basic_expr::child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
basic_expr::child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:basic_expr	access:public
basic_expr::child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:basic_expr	access:public
basic_expr::child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
basic_expr::child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
basic_expr::child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
basic_expr::child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
basic_expr::child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
basic_expr::child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:basic_expr	access:public
basic_expr::child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
basic_expr::child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
basic_expr::child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
basic_expr::child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
basic_expr::child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
basic_expr::child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
basic_expr::child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
basic_expr::child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
basic_expr::child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
basic_expr::child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
basic_expr::child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
basic_expr::child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
basic_expr::child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
basic_expr::child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
basic_expr::child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
basic_expr::child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
basic_expr::fusion_tag	proto/detail/basic_expr.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:basic_expr	access:public
basic_expr::fusion_tag	proto/detail/preprocessed/basic_expr.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:basic_expr	access:public
basic_expr::make	proto/detail/basic_expr.hpp	/^        static basic_expr const make(A0 &a0)$/;"	f	struct:basic_expr	access:public	signature:(A0 &a0)
basic_expr::make	proto/detail/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 &a0)$/;"	f	struct:basic_expr	access:public	signature:(A0 &a0)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1)
basic_expr::make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0)
basic_expr::operator address_of_hack_type_	proto/detail/basic_expr.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:basic_expr	access:public	signature:() const
basic_expr::operator address_of_hack_type_	proto/detail/preprocessed/basic_expr.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:basic_expr	access:public	signature:() const
basic_expr::proto_args	proto/detail/basic_expr.hpp	/^        typedef BOOST_PP_CAT(list, BOOST_PP_ITERATION())<BOOST_PP_ENUM_PARAMS(ARG_COUNT, Arg)> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/basic_expr.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list10<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list1<Arg0> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list2<Arg0 , Arg1> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list3<Arg0 , Arg1 , Arg2> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list4<Arg0 , Arg1 , Arg2 , Arg3> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list5<Arg0 , Arg1 , Arg2 , Arg3 , Arg4> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list6<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list7<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list8<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list9<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/basic_expr.hpp	/^        typedef mpl::long_<BOOST_PP_ITERATION() > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<0 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<1 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<10 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<2 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<3 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<4 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<5 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<6 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<7 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<8 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<9 > proto_arity;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/basic_expr.hpp	/^        static const long proto_arity_c = BOOST_PP_ITERATION();$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 0;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 10;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 1;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 2;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 3;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 4;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 5;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 6;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 7;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 8;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 9;$/;"	m	struct:basic_expr	access:public
basic_expr::proto_base	proto/detail/basic_expr.hpp	/^        basic_expr &proto_base()$/;"	f	struct:basic_expr	access:public	signature:()
basic_expr::proto_base	proto/detail/basic_expr.hpp	/^        basic_expr const &proto_base() const$/;"	f	struct:basic_expr	access:public	signature:() const
basic_expr::proto_base	proto/detail/preprocessed/basic_expr.hpp	/^        basic_expr &proto_base()$/;"	f	struct:basic_expr	access:public	signature:()
basic_expr::proto_base	proto/detail/preprocessed/basic_expr.hpp	/^        basic_expr const &proto_base() const$/;"	f	struct:basic_expr	access:public	signature:() const
basic_expr::proto_base_expr	proto/detail/basic_expr.hpp	/^        typedef basic_expr proto_base_expr;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_base_expr	proto/detail/preprocessed/basic_expr.hpp	/^        typedef basic_expr proto_base_expr;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_derived_expr	proto/detail/basic_expr.hpp	/^        typedef basic_expr proto_derived_expr;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_derived_expr	proto/detail/preprocessed/basic_expr.hpp	/^        typedef basic_expr proto_derived_expr;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_domain	proto/detail/basic_expr.hpp	/^        typedef basic_default_domain proto_domain;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_domain	proto/detail/preprocessed/basic_expr.hpp	/^        typedef basic_default_domain proto_domain;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_generator	proto/detail/basic_expr.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_generator	proto/detail/preprocessed/basic_expr.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_grammar	proto/detail/basic_expr.hpp	/^        typedef basic_expr proto_grammar;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_grammar	proto/detail/preprocessed/basic_expr.hpp	/^        typedef basic_expr proto_grammar;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_is_expr_	proto/detail/basic_expr.hpp	/^        typedef void proto_is_expr_; \/**< INTERNAL ONLY *\/$/;"	t	struct:basic_expr	access:public
basic_expr::proto_is_expr_	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_is_expr_; $/;"	t	struct:basic_expr	access:public
basic_expr::proto_tag	proto/detail/basic_expr.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:basic_expr	access:public
basic_expr::proto_tag	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:basic_expr	access:public
begin	proto/functional/range/begin.hpp	/^    struct begin$/;"	s	namespace:boost::proto::functional
begin_impl	proto/fusion.hpp	/^        struct begin_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
binary_expr	proto/traits.hpp	/^    struct binary_expr$/;"	s	namespace:boost::proto	inherits:proto::transform
bitwise_and	proto/tags.hpp	/^    struct bitwise_and {};$/;"	s	namespace:boost::proto::tagns_::tag
bitwise_and_assign	proto/tags.hpp	/^    struct bitwise_and_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
bitwise_or	proto/tags.hpp	/^    struct bitwise_or {};$/;"	s	namespace:boost::proto::tagns_::tag
bitwise_or_assign	proto/tags.hpp	/^    struct bitwise_or_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
bitwise_xor	proto/tags.hpp	/^    struct bitwise_xor {};$/;"	s	namespace:boost::proto::tagns_::tag
bitwise_xor_assign	proto/tags.hpp	/^    struct bitwise_xor_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost	proto/args.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/context/callable.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/context/default.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/context/null.hpp	/^namespace boost { namespace proto { namespace context$/;"	n
boost	proto/debug.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/deep_copy.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/detail/any.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/detail/as_expr.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n
boost	proto/detail/as_lvalue.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/detail/decltype.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/detail/deduce_domain.hpp	/^namespace boost$/;"	n
boost	proto/detail/dont_care.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/detail/ignore_unused.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/detail/is_noncopyable.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n
boost	proto/detail/poly_function.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n
boost	proto/detail/static_const.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/detail/template_arity.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n
boost	proto/domain.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/eval.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/expr.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/extends.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/functional/fusion/at.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/fusion/pop_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/fusion/pop_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/fusion/push_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/fusion/push_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/fusion/reverse.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/range/begin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/range/empty.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/range/end.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/range/rbegin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/range/rend.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/range/size.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/std/iterator.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/functional/std/utility.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n
boost	proto/fusion.hpp	/^namespace boost { namespace fusion$/;"	n
boost	proto/fusion.hpp	/^namespace boost { namespace mpl$/;"	n
boost	proto/fusion.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/generate.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/generate.hpp	/^namespace boost$/;"	n
boost	proto/literal.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/make_expr.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/matches.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/operators.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/proto_fwd.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/tags.hpp	/^namespace boost { namespace proto { namespace tagns_ { namespace tag$/;"	n
boost	proto/traits.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/arg.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/call.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/default.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/detail/pack.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/env.hpp	/^namespace boost$/;"	n
boost	proto/transform/fold.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/fold_tree.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/impl.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/integral_c.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/lazy.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/make.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/pass_through.hpp	/^namespace boost { namespace proto$/;"	n
boost	proto/transform/when.hpp	/^namespace boost { namespace proto$/;"	n
boost::fusion	proto/fusion.hpp	/^namespace boost { namespace fusion$/;"	n	namespace:boost
boost::fusion::extension	proto/fusion.hpp	/^    namespace extension$/;"	n	namespace:boost::fusion
boost::fusion::extension::advance_impl	proto/fusion.hpp	/^        struct advance_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::advance_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::advance_impl	access:public
boost::fusion::extension::advance_impl::apply::call	proto/fusion.hpp	/^                static type call(Iterator const &iter)$/;"	f	struct:boost::fusion::extension::advance_impl::apply	access:public	signature:(Iterator const &iter)
boost::fusion::extension::advance_impl::apply::type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::advance_impl::apply	access:public
boost::fusion::extension::at_impl	proto/fusion.hpp	/^        struct at_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::at_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::at_impl	access:public
boost::fusion::extension::at_impl::apply	proto/fusion.hpp	/^            struct apply<Sequence, Index, 0>$/;"	s	struct:boost::fusion::extension::at_impl	access:public
boost::fusion::extension::at_impl::apply::call	proto/fusion.hpp	/^                static type call(Sequence &seq)$/;"	f	struct:boost::fusion::extension::at_impl::apply	access:public	signature:(Sequence &seq)
boost::fusion::extension::at_impl::apply::type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::at_impl::apply	access:public
boost::fusion::extension::begin_impl	proto/fusion.hpp	/^        struct begin_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::begin_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::begin_impl	access:public
boost::fusion::extension::begin_impl::apply::call	proto/fusion.hpp	/^                static type call(Sequence &seq)$/;"	f	struct:boost::fusion::extension::begin_impl::apply	access:public	signature:(Sequence &seq)
boost::fusion::extension::begin_impl::apply::type	proto/fusion.hpp	/^                typedef proto::detail::expr_iterator<Sequence, 0> type;$/;"	t	struct:boost::fusion::extension::begin_impl::apply	access:public
boost::fusion::extension::category_of_impl	proto/fusion.hpp	/^        struct category_of_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::category_of_impl	proto/fusion.hpp	/^        struct category_of_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::category_of_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::category_of_impl	access:public
boost::fusion::extension::category_of_impl::apply::type	proto/fusion.hpp	/^                typedef forward_traversal_tag type;$/;"	t	struct:boost::fusion::extension::category_of_impl::apply	access:public
boost::fusion::extension::category_of_impl::apply::type	proto/fusion.hpp	/^                typedef random_access_traversal_tag type;$/;"	t	struct:boost::fusion::extension::category_of_impl::apply	access:public
boost::fusion::extension::convert_impl	proto/fusion.hpp	/^        struct convert_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::convert_impl	proto/fusion.hpp	/^        struct convert_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::convert_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::convert_impl	access:public
boost::fusion::extension::convert_impl::apply::call	proto/fusion.hpp	/^                static type call(Sequence& seq)$/;"	f	struct:boost::fusion::extension::convert_impl::apply	access:public	signature:(Sequence& seq)
boost::fusion::extension::convert_impl::apply::type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::convert_impl::apply	access:public
boost::fusion::extension::deref_impl	proto/fusion.hpp	/^        struct deref_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::deref_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::deref_impl	access:public
boost::fusion::extension::deref_impl::apply	proto/fusion.hpp	/^            struct apply<Iterator, 0>$/;"	s	struct:boost::fusion::extension::deref_impl	access:public
boost::fusion::extension::deref_impl::apply::call	proto/fusion.hpp	/^                static type call(Iterator const &iter)$/;"	f	struct:boost::fusion::extension::deref_impl::apply	access:public	signature:(Iterator const &iter)
boost::fusion::extension::deref_impl::apply::type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::deref_impl::apply	access:public
boost::fusion::extension::distance_impl	proto/fusion.hpp	/^        struct distance_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::distance_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::distance_impl	inherits:mpl::long_	access:public
boost::fusion::extension::end_impl	proto/fusion.hpp	/^        struct end_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::end_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::end_impl	access:public
boost::fusion::extension::end_impl::apply::call	proto/fusion.hpp	/^                static type call(Sequence &seq)$/;"	f	struct:boost::fusion::extension::end_impl::apply	access:public	signature:(Sequence &seq)
boost::fusion::extension::end_impl::apply::type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::end_impl::apply	access:public
boost::fusion::extension::is_segmented_impl	proto/fusion.hpp	/^        struct is_segmented_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::is_segmented_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::is_segmented_impl	inherits:mpl::true_	access:public
boost::fusion::extension::is_sequence_impl	proto/fusion.hpp	/^        struct is_sequence_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::is_sequence_impl	proto/fusion.hpp	/^        struct is_sequence_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::is_sequence_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::is_sequence_impl	inherits:mpl::true_	access:public
boost::fusion::extension::is_view_impl	proto/fusion.hpp	/^        struct is_view_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::is_view_impl	proto/fusion.hpp	/^        struct is_view_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::is_view_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::is_view_impl	inherits:mpl::false_	access:public
boost::fusion::extension::is_view_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::is_view_impl	inherits:mpl::true_	access:public
boost::fusion::extension::next_impl	proto/fusion.hpp	/^        struct next_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::next_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::next_impl	inherits:advance_impl::,apply	access:public
boost::fusion::extension::prior_impl	proto/fusion.hpp	/^        struct prior_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::prior_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::prior_impl	inherits:advance_impl::,apply	access:public
boost::fusion::extension::segments_impl	proto/fusion.hpp	/^        struct segments_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::segments_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::segments_impl	access:public
boost::fusion::extension::segments_impl::apply::Sequence::type	proto/fusion.hpp	/^                typedef typename Sequence::segments_type const &type;$/;"	t	class:boost::fusion::extension::segments_impl::apply::Sequence	access:public
boost::fusion::extension::segments_impl::apply::call	proto/fusion.hpp	/^                static type call(Sequence &sequence)$/;"	f	struct:boost::fusion::extension::segments_impl::apply	access:public	signature:(Sequence &sequence)
boost::fusion::extension::size_impl	proto/fusion.hpp	/^        struct size_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::size_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::size_impl	inherits:mpl::long_	access:public
boost::fusion::extension::value_at_impl	proto/fusion.hpp	/^        struct value_at_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::value_at_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::value_at_impl	access:public
boost::fusion::extension::value_at_impl::apply	proto/fusion.hpp	/^            struct apply<Sequence, Index, 0>$/;"	s	struct:boost::fusion::extension::value_at_impl	access:public
boost::fusion::extension::value_at_impl::apply::type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::value_at_impl::apply	access:public
boost::fusion::extension::value_of_impl	proto/fusion.hpp	/^        struct value_of_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
boost::fusion::extension::value_of_impl::apply	proto/fusion.hpp	/^            struct apply$/;"	s	struct:boost::fusion::extension::value_of_impl	access:public
boost::fusion::extension::value_of_impl::apply	proto/fusion.hpp	/^            struct apply<Iterator, 0>$/;"	s	struct:boost::fusion::extension::value_of_impl	access:public
boost::fusion::extension::value_of_impl::apply::type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::value_of_impl::apply	access:public
boost::fusion::traits	proto/fusion.hpp	/^    namespace traits$/;"	n	namespace:boost::fusion
boost::fusion::traits::enable_comparison	proto/fusion.hpp	/^        struct enable_comparison<$/;"	s	namespace:boost::fusion::traits	inherits:mpl::false_
boost::fusion::traits::enable_equality	proto/fusion.hpp	/^        struct enable_equality<$/;"	s	namespace:boost::fusion::traits	inherits:mpl::false_
boost::mpl	proto/fusion.hpp	/^namespace boost { namespace mpl$/;"	n	namespace:boost
boost::mpl::sequence_tag	proto/fusion.hpp	/^    struct sequence_tag< proto::basic_expr<Tag, Args, Arity> >$/;"	s	namespace:boost::mpl
boost::mpl::sequence_tag	proto/fusion.hpp	/^    struct sequence_tag< proto::expr<Tag, Args, Arity> >$/;"	s	namespace:boost::mpl
boost::mpl::sequence_tag::type	proto/fusion.hpp	/^        typedef fusion::fusion_sequence_tag type;$/;"	t	struct:boost::mpl::sequence_tag	access:public
boost::proto	proto/args.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/context/callable.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/context/default.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/context/null.hpp	/^namespace boost { namespace proto { namespace context$/;"	n	namespace:boost
boost::proto	proto/debug.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/deep_copy.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/detail/any.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/detail/as_expr.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost
boost::proto	proto/detail/as_lvalue.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/detail/decltype.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/detail/deduce_domain.hpp	/^    namespace proto$/;"	n	namespace:boost
boost::proto	proto/detail/dont_care.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/detail/ignore_unused.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/detail/is_noncopyable.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost
boost::proto	proto/detail/poly_function.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost
boost::proto	proto/detail/static_const.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/detail/template_arity.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost
boost::proto	proto/domain.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/eval.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/expr.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/extends.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/functional/fusion/at.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/fusion/pop_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/fusion/pop_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/fusion/push_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/fusion/push_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/fusion/reverse.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/range/begin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/range/empty.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/range/end.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/range/rbegin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/range/rend.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/range/size.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/std/iterator.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/functional/std/utility.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
boost::proto	proto/fusion.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/generate.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/literal.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/make_expr.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/matches.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/operators.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/proto_fwd.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/tags.hpp	/^namespace boost { namespace proto { namespace tagns_ { namespace tag$/;"	n	namespace:boost
boost::proto	proto/traits.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/arg.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/call.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/default.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/detail/pack.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/env.hpp	/^    namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/fold.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/fold_tree.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/impl.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/integral_c.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/lazy.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/make.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/pass_through.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto	proto/transform/when.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
boost::proto::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    child(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
boost::proto::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    child(Expr2 &expr2 BOOST_PROTO_DISABLE_IF_IS_CONST(Expr2))$/;"	f	namespace:boost::proto	signature:(Expr2)
boost::proto::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    child_c(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
boost::proto::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    left(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
boost::proto::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    right(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
boost::proto::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/traits.hpp	/^    value(Expr &e BOOST_PROTO_DISABLE_IF_IS_CONST(Expr))$/;"	f	namespace:boost::proto	signature:(Expr)
boost::proto::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/transform/env.hpp	/^        typename proto::result_of::env_var<Env &, Key>::type env_var(Env &e BOOST_PROTO_DISABLE_IF_IS_CONST(Env))$/;"	f	namespace:boost::proto	signature:(Env)
boost::proto::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/transform/env.hpp	/^        typename proto::result_of::has_env_var<Env &, Key>::type has_env_var(Env &e BOOST_PROTO_DISABLE_IF_IS_CONST(Env))$/;"	f	namespace:boost::proto	signature:(Env)
boost::proto::BOOST_PROTO_DISABLE_IF_IS_FUNCTION	proto/traits.hpp	/^    as_child(T &t BOOST_PROTO_DISABLE_IF_IS_CONST(T) BOOST_PROTO_DISABLE_IF_IS_FUNCTION(T))$/;"	f	namespace:boost::proto	signature:(T)
boost::proto::BOOST_PROTO_DISABLE_IF_IS_FUNCTION	proto/traits.hpp	/^    as_expr(T &t BOOST_PROTO_DISABLE_IF_IS_CONST(T) BOOST_PROTO_DISABLE_IF_IS_FUNCTION(T))$/;"	f	namespace:boost::proto	signature:(T)
boost::proto::N	proto/proto_fwd.hpp	/^    int const N = (INT_MAX >> 10);$/;"	m	namespace:boost::proto
boost::proto::_	proto/matches.hpp	/^    struct _ : transform<_>$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::_::impl	proto/matches.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_	inherits:transform_impl	access:public
boost::proto::_::impl::operator ()	proto/matches.hpp	/^            operator()($/;"	f	struct:boost::proto::_::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
boost::proto::_::impl::result_type	proto/matches.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::_::impl	access:public
boost::proto::_::proto_grammar	proto/matches.hpp	/^        typedef _ proto_grammar;$/;"	t	struct:boost::proto::_	access:public
boost::proto::_at	proto/proto_fwd.hpp	/^    typedef functional::pop_front   _at;$/;"	t	namespace:boost::proto
boost::proto::_byref	proto/transform/arg.hpp	/^    struct _byref : callable$/;"	s	namespace:boost::proto	inherits:callable
boost::proto::_byref::boost::operator ()	proto/transform/arg.hpp	/^        boost::reference_wrapper<T const> const operator ()(T const &t) const$/;"	f	class:boost::proto::_byref::boost	access:public	signature:(T const &t) const
boost::proto::_byref::boost::operator ()	proto/transform/arg.hpp	/^        boost::reference_wrapper<T> const operator ()(T &t) const$/;"	f	class:boost::proto::_byref::boost	access:public	signature:(T &t) const
boost::proto::_byref::result	proto/transform/arg.hpp	/^        struct result<This(T &)>$/;"	s	struct:boost::proto::_byref	access:public
boost::proto::_byref::result	proto/transform/arg.hpp	/^        struct result<This(T)>$/;"	s	struct:boost::proto::_byref	access:public
boost::proto::_byref::result::boost::type	proto/transform/arg.hpp	/^            typedef boost::reference_wrapper<T const> const type;$/;"	t	class:boost::proto::_byref::result::boost	access:public
boost::proto::_byref::result::boost::type	proto/transform/arg.hpp	/^            typedef boost::reference_wrapper<T> const type;$/;"	t	class:boost::proto::_byref::result::boost	access:public
boost::proto::_byval	proto/transform/arg.hpp	/^    struct _byval : callable$/;"	s	namespace:boost::proto	inherits:callable
boost::proto::_byval::operator ()	proto/transform/arg.hpp	/^        T operator ()(T const &t) const$/;"	f	struct:boost::proto::_byval	access:public	signature:(T const &t) const
boost::proto::_byval::operator ()	proto/transform/arg.hpp	/^        T operator ()(boost::reference_wrapper<T> const &t) const$/;"	f	struct:boost::proto::_byval	access:public	signature:(boost::reference_wrapper<T> const &t) const
boost::proto::_byval::result	proto/transform/arg.hpp	/^        struct result<This(T &)>$/;"	s	struct:boost::proto::_byval	inherits:result	access:public
boost::proto::_byval::result	proto/transform/arg.hpp	/^        struct result<This(T)>$/;"	s	struct:boost::proto::_byval	access:public
boost::proto::_byval::result	proto/transform/arg.hpp	/^        struct result<This(boost::reference_wrapper<T>)>$/;"	s	struct:boost::proto::_byval	inherits:result	access:public
boost::proto::_byval::result::type	proto/transform/arg.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::_byval::result	access:public
boost::proto::_child	proto/proto_fwd.hpp	/^    typedef _child0     _child;$/;"	t	namespace:boost::proto
boost::proto::_child0	proto/proto_fwd.hpp	/^    typedef _child_c<0> _child0;$/;"	t	namespace:boost::proto
boost::proto::_child1	proto/proto_fwd.hpp	/^    typedef _child_c<1> _child1;$/;"	t	namespace:boost::proto
boost::proto::_child_c	proto/transform/arg.hpp	/^    struct _child_c : transform<_child_c<N> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::_child_c::impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_child_c	inherits:transform_impl	access:public
boost::proto::_child_c::impl::operator ()	proto/transform/arg.hpp	/^            operator ()($/;"	f	struct:boost::proto::_child_c::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
boost::proto::_child_c::impl::result_type	proto/transform/arg.hpp	/^            result_type;$/;"	t	struct:boost::proto::_child_c::impl	access:public
boost::proto::_data	proto/transform/arg.hpp	/^    struct _data : transform<_data>$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::_data::impl	proto/transform/arg.hpp	/^        struct impl$/;"	s	struct:boost::proto::_data	inherits:mpl::if_c::type::,impl	access:public
boost::proto::_deep_copy	proto/deep_copy.hpp	/^    struct _deep_copy$/;"	s	namespace:boost::proto	inherits:proto::transform
boost::proto::_deep_copy::impl	proto/deep_copy.hpp	/^        struct impl$/;"	s	struct:boost::proto::_deep_copy	inherits:detail::deep_copy_impl	access:public
boost::proto::_default	proto/transform/default.hpp	/^    struct _default$/;"	s	namespace:boost::proto	inherits:switch_
boost::proto::_env	proto/transform/env.hpp	/^        struct _env$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::_env::impl	proto/transform/env.hpp	/^            struct impl$/;"	s	struct:boost::proto::_env	inherits:transform_impl	access:public
boost::proto::_env::impl::operator ()	proto/transform/env.hpp	/^                operator ()($/;"	f	struct:boost::proto::_env::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param d ) const
boost::proto::_env::impl::result_type	proto/transform/env.hpp	/^                typedef Data result_type;$/;"	t	struct:boost::proto::_env::impl	access:public
boost::proto::_env_var	proto/transform/env.hpp	/^        struct _env_var$/;"	s	namespace:boost::proto	inherits:proto::transform
boost::proto::_env_var::impl	proto/transform/env.hpp	/^            struct impl$/;"	s	struct:boost::proto::_env_var	inherits:transform_impl	access:public
boost::proto::_env_var::impl::BOOST_MPL_ASSERT_NOT	proto/transform/env.hpp	/^                BOOST_MPL_ASSERT_NOT((is_same<result_type, key_not_found>)); \/\/ lookup failed$/;"	p	struct:boost::proto::_env_var::impl	access:public	signature:(is_same<result_type, key_not_found>)
boost::proto::_env_var::impl::operator ()	proto/transform/env.hpp	/^                operator ()($/;"	f	struct:boost::proto::_env_var::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param d ) const
boost::proto::_env_var::impl::result_type	proto/transform/env.hpp	/^                typedef typename impl::data::template lookup<Key>::type result_type;$/;"	t	struct:boost::proto::_env_var::impl	access:public
boost::proto::_eval	proto/proto_fwd.hpp	/^    typedef functional::eval        _eval;$/;"	t	namespace:boost::proto
boost::proto::_expr	proto/transform/arg.hpp	/^    struct _expr : transform<_expr>$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::_expr::impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_expr	inherits:transform_impl	access:public
boost::proto::_expr::impl::operator ()	proto/transform/arg.hpp	/^            operator()($/;"	f	struct:boost::proto::_expr::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
boost::proto::_expr::impl::result_type	proto/transform/arg.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::_expr::impl	access:public
boost::proto::_first	proto/proto_fwd.hpp	/^    typedef functional::first       _first;$/;"	t	namespace:boost::proto
boost::proto::_flatten	proto/proto_fwd.hpp	/^    typedef functional::flatten     _flatten;$/;"	t	namespace:boost::proto
boost::proto::_left	proto/proto_fwd.hpp	/^    typedef _child0     _left;$/;"	t	namespace:boost::proto
boost::proto::_make_address_of	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::address_of>         _make_address_of;$/;"	t	namespace:boost::proto
boost::proto::_make_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::assign>             _make_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_bitwise_and	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_and>        _make_bitwise_and;$/;"	t	namespace:boost::proto
boost::proto::_make_bitwise_and_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_and_assign> _make_bitwise_and_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_bitwise_or	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_or>         _make_bitwise_or;$/;"	t	namespace:boost::proto
boost::proto::_make_bitwise_or_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_or_assign>  _make_bitwise_or_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_bitwise_xor	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_xor>        _make_bitwise_xor;$/;"	t	namespace:boost::proto
boost::proto::_make_bitwise_xor_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::bitwise_xor_assign> _make_bitwise_xor_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_comma	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::comma>              _make_comma;$/;"	t	namespace:boost::proto
boost::proto::_make_complement	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::complement>         _make_complement;$/;"	t	namespace:boost::proto
boost::proto::_make_dereference	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::dereference>        _make_dereference;$/;"	t	namespace:boost::proto
boost::proto::_make_divides	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::divides>            _make_divides;$/;"	t	namespace:boost::proto
boost::proto::_make_divides_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::divides_assign>     _make_divides_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_equal_to	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::equal_to>           _make_equal_to;$/;"	t	namespace:boost::proto
boost::proto::_make_function	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::function>           _make_function;$/;"	t	namespace:boost::proto
boost::proto::_make_greater	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::greater>            _make_greater;$/;"	t	namespace:boost::proto
boost::proto::_make_greater_equal	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::greater_equal>      _make_greater_equal;$/;"	t	namespace:boost::proto
boost::proto::_make_if_else	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::if_else_>           _make_if_else;$/;"	t	namespace:boost::proto
boost::proto::_make_less	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::less>               _make_less;$/;"	t	namespace:boost::proto
boost::proto::_make_less_equal	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::less_equal>         _make_less_equal;$/;"	t	namespace:boost::proto
boost::proto::_make_logical_and	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::logical_and>        _make_logical_and;$/;"	t	namespace:boost::proto
boost::proto::_make_logical_not	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::logical_not>        _make_logical_not;$/;"	t	namespace:boost::proto
boost::proto::_make_logical_or	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::logical_or>         _make_logical_or;$/;"	t	namespace:boost::proto
boost::proto::_make_mem_ptr	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::mem_ptr>            _make_mem_ptr;$/;"	t	namespace:boost::proto
boost::proto::_make_minus	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::minus>              _make_minus;$/;"	t	namespace:boost::proto
boost::proto::_make_minus_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::minus_assign>       _make_minus_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_modulus	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::modulus>            _make_modulus;$/;"	t	namespace:boost::proto
boost::proto::_make_modulus_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::modulus_assign>     _make_modulus_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_multiplies	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::multiplies>         _make_multiplies;$/;"	t	namespace:boost::proto
boost::proto::_make_multiplies_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::multiplies_assign>  _make_multiplies_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_negate	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::negate>             _make_negate;$/;"	t	namespace:boost::proto
boost::proto::_make_not_equal_to	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::not_equal_to>       _make_not_equal_to;$/;"	t	namespace:boost::proto
boost::proto::_make_pair	proto/proto_fwd.hpp	/^    typedef functional::make_pair   _make_pair;$/;"	t	namespace:boost::proto
boost::proto::_make_plus	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::plus>               _make_plus;$/;"	t	namespace:boost::proto
boost::proto::_make_plus_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::plus_assign>        _make_plus_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_post_dec	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::post_dec>           _make_post_dec;$/;"	t	namespace:boost::proto
boost::proto::_make_post_inc	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::post_inc>           _make_post_inc;$/;"	t	namespace:boost::proto
boost::proto::_make_pre_dec	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::pre_dec>            _make_pre_dec;$/;"	t	namespace:boost::proto
boost::proto::_make_pre_inc	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::pre_inc>            _make_pre_inc;$/;"	t	namespace:boost::proto
boost::proto::_make_shift_left	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::shift_left>         _make_shift_left;$/;"	t	namespace:boost::proto
boost::proto::_make_shift_left_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::shift_left_assign>  _make_shift_left_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_shift_right	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::shift_right>        _make_shift_right;$/;"	t	namespace:boost::proto
boost::proto::_make_shift_right_assign	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::shift_right_assign> _make_shift_right_assign;$/;"	t	namespace:boost::proto
boost::proto::_make_subscript	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::subscript>          _make_subscript;$/;"	t	namespace:boost::proto
boost::proto::_make_terminal	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::terminal>           _make_terminal;$/;"	t	namespace:boost::proto
boost::proto::_make_unary_plus	proto/proto_fwd.hpp	/^    typedef functional::make_expr<tag::unary_plus>         _make_unary_plus;$/;"	t	namespace:boost::proto
boost::proto::_pop_back	proto/proto_fwd.hpp	/^    typedef functional::pop_back    _pop_back;$/;"	t	namespace:boost::proto
boost::proto::_pop_front	proto/proto_fwd.hpp	/^    typedef functional::pop_front   _pop_front;$/;"	t	namespace:boost::proto
boost::proto::_push_back	proto/proto_fwd.hpp	/^    typedef functional::push_back   _push_back;$/;"	t	namespace:boost::proto
boost::proto::_push_front	proto/proto_fwd.hpp	/^    typedef functional::push_front  _push_front;$/;"	t	namespace:boost::proto
boost::proto::_reverse	proto/proto_fwd.hpp	/^    typedef functional::reverse     _reverse;$/;"	t	namespace:boost::proto
boost::proto::_right	proto/proto_fwd.hpp	/^    typedef _child1     _right;$/;"	t	namespace:boost::proto
boost::proto::_second	proto/proto_fwd.hpp	/^    typedef functional::second      _second;$/;"	t	namespace:boost::proto
boost::proto::_state	proto/transform/arg.hpp	/^    struct _state : transform<_state>$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::_state::impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_state	inherits:transform_impl	access:public
boost::proto::_state::impl::operator ()	proto/transform/arg.hpp	/^            operator ()($/;"	f	struct:boost::proto::_state::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param s , typename impl::data_param ) const
boost::proto::_state::impl::result_type	proto/transform/arg.hpp	/^            typedef State result_type;$/;"	t	struct:boost::proto::_state::impl	access:public
boost::proto::_value	proto/transform/arg.hpp	/^    struct _value : transform<_value>$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::_value::impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_value	inherits:transform_impl	access:public
boost::proto::_value::impl::operator ()	proto/transform/arg.hpp	/^            operator ()($/;"	f	struct:boost::proto::_value::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
boost::proto::_value::impl::result_type	proto/transform/arg.hpp	/^            result_type;$/;"	t	struct:boost::proto::_value::impl	access:public
boost::proto::_void	proto/transform/arg.hpp	/^    struct _void : transform<_void>$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::_void::impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_void	inherits:transform_impl	access:public
boost::proto::_void::impl::operator ()	proto/transform/arg.hpp	/^            void operator ()($/;"	f	struct:boost::proto::_void::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param ) const
boost::proto::_void::impl::result_type	proto/transform/arg.hpp	/^            typedef void result_type;$/;"	t	struct:boost::proto::_void::impl	access:public
boost::proto::and_	proto/matches.hpp	/^    struct and_ : transform<and_<BOOST_PROTO_LOGICAL_G> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::and_::impl	proto/matches.hpp	/^        struct impl$/;"	s	struct:boost::proto::and_	inherits:detail::_and_impl	access:public
boost::proto::and_::proto_grammar	proto/matches.hpp	/^        typedef and_ proto_grammar;$/;"	t	struct:boost::proto::and_	access:public
boost::proto::argsns_	proto/args.hpp	/^    namespace argsns_$/;"	n	namespace:boost::proto
boost::proto::argsns_	proto/proto_fwd.hpp	/^    namespace argsns_$/;"	n	namespace:boost::proto
boost::proto::arity_of	proto/traits.hpp	/^    struct arity_of$/;"	s	namespace:boost::proto	inherits:Expr::proto_arity
boost::proto::arity_of	proto/traits.hpp	/^    struct arity_of<Expr &>$/;"	s	namespace:boost::proto	inherits:Expr::proto_arity
boost::proto::as_child	proto/traits.hpp	/^    as_child(T const &t)$/;"	f	namespace:boost::proto	signature:(T const &t)
boost::proto::as_expr	proto/traits.hpp	/^    as_expr(T const &t)$/;"	f	namespace:boost::proto	signature:(T const &t)
boost::proto::assert_matches	proto/debug.hpp	/^    void assert_matches(Expr const & \/*expr*\/)$/;"	f	namespace:boost::proto	signature:(Expr const & )
boost::proto::assert_matches_not	proto/debug.hpp	/^    void assert_matches_not(Expr const & \/*expr*\/)$/;"	f	namespace:boost::proto	signature:(Expr const & )
boost::proto::basic_default_generator	proto/generate.hpp	/^    struct basic_default_generator$/;"	s	namespace:boost::proto	inherits:proto::use_basic_expr
boost::proto::binary_expr	proto/traits.hpp	/^    struct binary_expr$/;"	s	namespace:boost::proto	inherits:proto::transform
boost::proto::binary_expr::impl	proto/traits.hpp	/^        struct impl$/;"	s	struct:boost::proto::binary_expr	inherits:detail::pass_through_impl	access:public
boost::proto::binary_expr::proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::binary_expr	access:public
boost::proto::binary_expr::proto_child1	proto/traits.hpp	/^        typedef U proto_child1;$/;"	t	struct:boost::proto::binary_expr	access:public
boost::proto::binary_expr::proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<Tag, list2<T, U>, 2> proto_grammar;$/;"	t	struct:boost::proto::binary_expr	access:public
boost::proto::binary_expr::proto_tag	proto/traits.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:boost::proto::binary_expr	access:public
boost::proto::binary_expr::type	proto/traits.hpp	/^        typedef proto::expr<Tag, list2<T, U>, 2> type;$/;"	t	struct:boost::proto::binary_expr	access:public
boost::proto::by_value_generator	proto/generate.hpp	/^    struct by_value_generator$/;"	s	namespace:boost::proto
boost::proto::by_value_generator::operator ()	proto/generate.hpp	/^        typename result<by_value_generator(Expr)>::type operator ()(Expr const &e) const$/;"	f	struct:boost::proto::by_value_generator	access:public	signature:(Expr const &e) const
boost::proto::by_value_generator::result	proto/generate.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::by_value_generator	access:public
boost::proto::by_value_generator::result	proto/generate.hpp	/^        struct result<This(Expr const &)>$/;"	s	struct:boost::proto::by_value_generator	access:public
boost::proto::by_value_generator::result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::by_value_generator	access:public
boost::proto::by_value_generator::result::type	proto/generate.hpp	/^            type;$/;"	t	struct:boost::proto::by_value_generator::result	access:public
boost::proto::call	proto/transform/call.hpp	/^    struct call$/;"	s	namespace:boost::proto	inherits:PrimitiveTransform
boost::proto::call	proto/transform/call.hpp	/^    struct call<Fun *>$/;"	s	namespace:boost::proto	inherits:call
boost::proto::call	proto/transform/call.hpp	/^    struct call<Fun()> : transform<call<Fun()> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::call	proto/transform/call.hpp	/^    struct call<Fun(A0)> : transform<call<Fun(A0)> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::call	proto/transform/call.hpp	/^    struct call<Fun(A0, A1)> : transform<call<Fun(A0, A1)> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::call	proto/transform/call.hpp	/^    struct call<Fun(A0, A1, A2)> : transform<call<Fun(A0, A1, A2)> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::call	proto/transform/call.hpp	/^    struct call<detail::msvc_fun_workaround<Fun> >$/;"	s	namespace:boost::proto	inherits:call
boost::proto::call::impl	proto/transform/call.hpp	/^        struct impl$/;"	s	struct:boost::proto::call	inherits:impl2	access:public
boost::proto::call::impl2	proto/transform/call.hpp	/^        struct impl2$/;"	s	struct:boost::proto::call	inherits:transform_impl	access:public
boost::proto::call::impl2	proto/transform/call.hpp	/^        struct impl2<Expr, State, Data, true>$/;"	s	struct:boost::proto::call	inherits:Fun::,impl	access:public
boost::proto::call::impl2	proto/transform/call.hpp	/^        struct impl2<Expr, State, Data, true>$/;"	s	struct:boost::proto::call	inherits:transform_impl	access:public
boost::proto::call::impl2::a0	proto/transform/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data>::result_type a0;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::call::impl2::a1	proto/transform/call.hpp	/^            typedef typename when<_, A1>::template impl<Expr, State, Data>::result_type a1;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::call::impl2::a2	proto/transform/call.hpp	/^            typedef typename when<_, A2>::template impl<Expr, State, Data>::result_type a2;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::call::impl2::operator ()	proto/transform/call.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::call::impl2	access:public	signature:( typename impl2::expr_param e , typename impl2::state_param s , typename impl2::data_param d ) const
boost::proto::call::impl2::operator ()	proto/transform/call.hpp	/^            result_type operator()($/;"	f	struct:boost::proto::call::impl2	access:public	signature:( typename impl2::expr_param , typename impl2::state_param , typename impl2::data_param ) const
boost::proto::call::impl2::result_type	proto/transform/call.hpp	/^            typedef typename BOOST_PROTO_RESULT_OF<Fun()>::type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::call::impl2::result_type	proto/transform/call.hpp	/^            typedef typename Fun::template impl<a0, State, Data>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::call::impl2::result_type	proto/transform/call.hpp	/^            typedef typename Fun::template impl<a0, a1, Data>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::call::impl2::result_type	proto/transform/call.hpp	/^            typedef typename Fun::template impl<a0, a1, a2>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::call::impl2::result_type	proto/transform/call.hpp	/^            typedef typename detail::poly_function_traits<Fun, Fun(a0)>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::call::impl2::result_type	proto/transform/call.hpp	/^            typedef typename detail::poly_function_traits<Fun, Fun(a0, a1)>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::call::impl2::result_type	proto/transform/call.hpp	/^            typedef typename detail::poly_function_traits<Fun, Fun(a0, a1, a2)>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
boost::proto::callable	proto/proto_fwd.hpp	/^    struct callable$/;"	s	namespace:boost::proto
boost::proto::char_	proto/transform/integral_c.hpp	/^    struct char_$/;"	s	namespace:boost::proto	inherits:integral_c
boost::proto::child	proto/traits.hpp	/^    child(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
boost::proto::child	proto/traits.hpp	/^    child(Expr2 const &expr2)$/;"	f	namespace:boost::proto	signature:(Expr2 const &expr2)
boost::proto::child_c	proto/traits.hpp	/^    child_c(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
boost::proto::compose_generators	proto/generate.hpp	/^    struct compose_generators$/;"	s	namespace:boost::proto
boost::proto::compose_generators::operator ()	proto/generate.hpp	/^        typename result<compose_generators(Expr)>::type operator ()(Expr const &e) const$/;"	f	struct:boost::proto::compose_generators	access:public	signature:(Expr const &e) const
boost::proto::compose_generators::result	proto/generate.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::compose_generators	access:public
boost::proto::compose_generators::result	proto/generate.hpp	/^        struct result<This(Expr const &)>$/;"	s	struct:boost::proto::compose_generators	access:public
boost::proto::compose_generators::result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::compose_generators	access:public
boost::proto::compose_generators::result::type	proto/generate.hpp	/^            type;$/;"	t	struct:boost::proto::compose_generators::result	access:public
boost::proto::context	proto/context/callable.hpp	/^    namespace context$/;"	n	namespace:boost::proto
boost::proto::context	proto/context/default.hpp	/^    namespace context$/;"	n	namespace:boost::proto
boost::proto::context	proto/context/null.hpp	/^namespace boost { namespace proto { namespace context$/;"	n	namespace:boost::proto
boost::proto::context	proto/proto_fwd.hpp	/^    namespace context$/;"	n	namespace:boost::proto
boost::proto::context::callable_context	proto/context/callable.hpp	/^        struct callable_context$/;"	s	namespace:boost::proto::context
boost::proto::context::callable_context::eval	proto/context/callable.hpp	/^            struct eval$/;"	s	struct:boost::proto::context::callable_context	inherits:mpl::if_c::type	access:public
boost::proto::context::callable_eval	proto/context/callable.hpp	/^        struct callable_eval$/;"	s	namespace:boost::proto::context
boost::proto::context::callable_eval	proto/context/callable.hpp	/^        struct callable_eval<Expr, Context, 0>$/;"	s	namespace:boost::proto::context
boost::proto::context::callable_eval::operator ()	proto/context/callable.hpp	/^            result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:boost::proto::context::callable_eval	access:public	signature:(Expr &expr, Context &context) const
boost::proto::context::callable_eval::result_type	proto/context/callable.hpp	/^            result_type;$/;"	t	struct:boost::proto::context::callable_eval	access:public
boost::proto::context::callable_eval::value_type	proto/context/callable.hpp	/^            typedef typename proto::result_of::value<Expr const &>::type value_type;$/;"	t	struct:boost::proto::context::callable_eval	access:public
boost::proto::context::default_context	proto/context/default.hpp	/^        struct default_context$/;"	s	namespace:boost::proto::context
boost::proto::context::default_context::eval	proto/context/default.hpp	/^            struct eval$/;"	s	struct:boost::proto::context::default_context	inherits:default_eval	access:public
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval$/;"	s	namespace:boost::proto::context
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::comma, 2>$/;"	s	namespace:boost::proto::context
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::function, 1>$/;"	s	namespace:boost::proto::context
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::function, 2>$/;"	s	namespace:boost::proto::context
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::if_else_, 3>$/;"	s	namespace:boost::proto::context
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::post_dec, 1>$/;"	s	namespace:boost::proto::context
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::post_inc, 1>$/;"	s	namespace:boost::proto::context
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::subscript, 2>$/;"	s	namespace:boost::proto::context
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, tag::mem_ptr, 2>$/;"	s	namespace:boost::proto::context	inherits:memfun_eval
boost::proto::context::default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, tag::terminal, 0>$/;"	s	namespace:boost::proto::context
boost::proto::context::default_eval::e0	proto/context/default.hpp	/^            typedef typename proto::result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::context::default_eval	access:private
boost::proto::context::default_eval::e1	proto/context/default.hpp	/^            typedef typename proto::result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::context::default_eval	access:private
boost::proto::context::default_eval::e2	proto/context/default.hpp	/^            typedef typename proto::result_of::child_c<Expr, 2>::type e2;$/;"	t	struct:boost::proto::context::default_eval	access:private
boost::proto::context::default_eval::function_type	proto/context/default.hpp	/^            function_type;$/;"	t	struct:boost::proto::context::default_eval	access:public
boost::proto::context::default_eval::invoke	proto/context/default.hpp	/^            result_type invoke(Expr &expr, Context &context, mpl::false_, mpl::false_) const$/;"	f	struct:boost::proto::context::default_eval	access:private	signature:(Expr &expr, Context &context, mpl::false_, mpl::false_) const
boost::proto::context::default_eval::invoke	proto/context/default.hpp	/^            result_type invoke(Expr &expr, Context &context, mpl::false_, mpl::true_) const$/;"	f	struct:boost::proto::context::default_eval	access:private	signature:(Expr &expr, Context &context, mpl::false_, mpl::true_) const
boost::proto::context::default_eval::invoke	proto/context/default.hpp	/^            result_type invoke(Expr &expr, Context &context, mpl::true_, mpl::false_) const$/;"	f	struct:boost::proto::context::default_eval	access:private	signature:(Expr &expr, Context &context, mpl::true_, mpl::false_) const
boost::proto::context::default_eval::operator ()	proto/context/default.hpp	/^            result_type operator ()(Expr &expr, Context &) const$/;"	f	struct:boost::proto::context::default_eval	access:public	signature:(Expr &expr, Context &) const
boost::proto::context::default_eval::operator ()	proto/context/default.hpp	/^            result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:boost::proto::context::default_eval	access:public	signature:(Expr &expr, Context &context) const
boost::proto::context::default_eval::operator ()	proto/context/default.hpp	/^            result_type operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:boost::proto::context::default_eval	access:public	signature:(Expr &expr, Context &ctx) const
boost::proto::context::default_eval::r0	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e0), Context>::type r0;$/;"	t	struct:boost::proto::context::default_eval	access:private
boost::proto::context::default_eval::r1	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e1), Context>::type r1;$/;"	t	struct:boost::proto::context::default_eval	access:private
boost::proto::context::default_eval::r2	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e2), Context>::type r2;$/;"	t	struct:boost::proto::context::default_eval	access:private
boost::proto::context::default_eval::result_type	proto/context/default.hpp	/^            result_type;$/;"	t	struct:boost::proto::context::default_eval	access:public
boost::proto::context::default_eval::result_type	proto/context/default.hpp	/^            typedef typename proto::detail::comma_result<r0, r1>::type result_type;$/;"	t	struct:boost::proto::context::default_eval	access:public
boost::proto::context::is_member_function_eval	proto/context/default.hpp	/^        struct is_member_function_eval$/;"	s	namespace:boost::proto::context	inherits:is_member_function_pointer
boost::proto::context::memfun_eval	proto/context/default.hpp	/^        struct memfun_eval$/;"	s	namespace:boost::proto::context
boost::proto::context::memfun_eval	proto/context/default.hpp	/^        struct memfun_eval<Expr, Context, true>$/;"	s	namespace:boost::proto::context
boost::proto::context::memfun_eval::e0	proto/context/default.hpp	/^            typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::context::memfun_eval	access:private
boost::proto::context::memfun_eval::e1	proto/context/default.hpp	/^            typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::context::memfun_eval	access:private
boost::proto::context::memfun_eval::operator ()	proto/context/default.hpp	/^            result_type const operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:boost::proto::context::memfun_eval	access:public	signature:(Expr &expr, Context &ctx) const
boost::proto::context::memfun_eval::operator ()	proto/context/default.hpp	/^            result_type operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:boost::proto::context::memfun_eval	access:public	signature:(Expr &expr, Context &ctx) const
boost::proto::context::memfun_eval::r0	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e0), Context>::type r0;$/;"	t	struct:boost::proto::context::memfun_eval	access:private
boost::proto::context::memfun_eval::r1	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e1), Context>::type r1;$/;"	t	struct:boost::proto::context::memfun_eval	access:private
boost::proto::context::memfun_eval::result_type	proto/context/default.hpp	/^            typedef detail::memfun<r0, r1> result_type;$/;"	t	struct:boost::proto::context::memfun_eval	access:public
boost::proto::context::memfun_eval::result_type	proto/context/default.hpp	/^            typedef typename detail::mem_ptr_fun<r0, r1>::result_type result_type;$/;"	t	struct:boost::proto::context::memfun_eval	access:public
boost::proto::context::null_context	proto/context/null.hpp	/^    struct null_context$/;"	s	namespace:boost::proto::context
boost::proto::context::null_context::eval	proto/context/null.hpp	/^        struct eval$/;"	s	struct:boost::proto::context::null_context	inherits:null_eval	access:public
boost::proto::context::null_eval	proto/context/null.hpp	/^    struct null_eval$/;"	s	namespace:boost::proto::context
boost::proto::context::null_eval	proto/context/null.hpp	/^    struct null_eval<Expr, Context, 0>$/;"	s	namespace:boost::proto::context
boost::proto::context::null_eval::operator ()	proto/context/null.hpp	/^        void operator()(Expr &, Context &) const$/;"	f	struct:boost::proto::context::null_eval	access:public	signature:(Expr &, Context &) const
boost::proto::context::null_eval::result_type	proto/context/null.hpp	/^        typedef void result_type;$/;"	t	struct:boost::proto::context::null_eval	access:public
boost::proto::convertible_to	proto/matches.hpp	/^    struct convertible_to$/;"	s	namespace:boost::proto
boost::proto::deep_copy	proto/deep_copy.hpp	/^    deep_copy(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
boost::proto::default_generator	proto/generate.hpp	/^    struct default_generator$/;"	s	namespace:boost::proto
boost::proto::default_generator::operator ()	proto/generate.hpp	/^        operator ()(Expr const &e) const$/;"	f	struct:boost::proto::default_generator	access:public	signature:(Expr const &e) const
boost::proto::default_generator::result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::default_generator	access:public
boost::proto::default_generator::result::type	proto/generate.hpp	/^            typedef Expr type;$/;"	t	struct:boost::proto::default_generator::result	access:public
boost::proto::detail	proto/args.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/context/callable.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/debug.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/deep_copy.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/any.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/as_expr.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/as_lvalue.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/decltype.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/deduce_domain.hpp	/^        namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/dont_care.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/ignore_unused.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/is_noncopyable.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/poly_function.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/static_const.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/detail/template_arity.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/domain.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/expr.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/fusion.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/generate.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/make_expr.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/matches.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/operators.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/proto_fwd.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/traits.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/transform/default.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/transform/detail/pack.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/transform/env.hpp	/^        namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/transform/fold.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/transform/fold_tree.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/transform/impl.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/transform/make.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/transform/pass_through.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail	proto/transform/when.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
boost::proto::detail::Expr	proto/expr.hpp	/^        Expr make_terminal(T (&t)[N], Expr *, proto::term<Arg0[N]> *)$/;"	m	namespace:boost::proto::detail
boost::proto::detail::T	proto/expr.hpp	/^        Expr make_terminal(T (&t)[N], Expr *, proto::term<Arg0[N]> *)$/;"	m	namespace:boost::proto::detail
boost::proto::detail::_and_impl	proto/matches.hpp	/^        struct _and_impl<proto::and_<>, Expr, State, Data>$/;"	s	namespace:boost::proto::detail	inherits:proto::_::impl
boost::proto::detail::_and_impl	proto/matches.hpp	/^        struct _and_impl<proto::and_<G0>, Expr, State, Data>$/;"	s	namespace:boost::proto::detail	inherits:proto::when::,impl
boost::proto::detail::_default	proto/transform/default.hpp	/^        struct _default$/;"	s	namespace:boost::proto::detail	inherits:proto::_default
boost::proto::detail::address_of_hack	proto/expr.hpp	/^        struct address_of_hack$/;"	s	namespace:boost::proto::detail
boost::proto::detail::address_of_hack	proto/expr.hpp	/^        struct address_of_hack<proto::tag::address_of, Expr &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::address_of_hack::type	proto/expr.hpp	/^            typedef Expr *type;$/;"	t	struct:boost::proto::detail::address_of_hack	access:public
boost::proto::detail::address_of_hack::type	proto/expr.hpp	/^            typedef not_a_valid_type type;$/;"	t	struct:boost::proto::detail::address_of_hack	access:public
boost::proto::detail::anyns	proto/detail/any.hpp	/^        namespace anyns$/;"	n	namespace:boost::proto::detail
boost::proto::detail::anyns::any	proto/detail/any.hpp	/^            struct any$/;"	s	namespace:boost::proto::detail::anyns
boost::proto::detail::anyns::any::any	proto/detail/any.hpp	/^                template<typename T> any(T const &) {}$/;"	f	struct:boost::proto::detail::anyns::any	access:public	signature:(T const &)
boost::proto::detail::anyns::any::operator !	proto/detail/any.hpp	/^                any operator!();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
boost::proto::detail::anyns::any::operator !=	proto/detail/any.hpp	/^                friend any operator!=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator %	proto/detail/any.hpp	/^                friend any operator%(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator %=	proto/detail/any.hpp	/^                friend any operator%=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator &	proto/detail/any.hpp	/^                any operator&();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
boost::proto::detail::anyns::any::operator &	proto/detail/any.hpp	/^                friend any operator&(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator &&	proto/detail/any.hpp	/^                friend any operator&&(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator &=	proto/detail/any.hpp	/^                friend any operator&=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator *	proto/detail/any.hpp	/^                any operator*();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
boost::proto::detail::anyns::any::operator *	proto/detail/any.hpp	/^                friend any operator*(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator *=	proto/detail/any.hpp	/^                friend any operator*=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator +	proto/detail/any.hpp	/^                any operator+();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
boost::proto::detail::anyns::any::operator +	proto/detail/any.hpp	/^                friend any operator+(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator ++	proto/detail/any.hpp	/^                any operator++();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
boost::proto::detail::anyns::any::operator ++	proto/detail/any.hpp	/^                any operator++(int);$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:(int)
boost::proto::detail::anyns::any::operator +=	proto/detail/any.hpp	/^                friend any operator+=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator ,	proto/detail/any.hpp	/^                friend any operator,(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator -	proto/detail/any.hpp	/^                any operator-();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
boost::proto::detail::anyns::any::operator -	proto/detail/any.hpp	/^                friend any operator-(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator --	proto/detail/any.hpp	/^                any operator--();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
boost::proto::detail::anyns::any::operator --	proto/detail/any.hpp	/^                any operator--(int);$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:(int)
boost::proto::detail::anyns::any::operator -=	proto/detail/any.hpp	/^                friend any operator-=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator ->*	proto/detail/any.hpp	/^                friend any operator->*(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator /	proto/detail/any.hpp	/^                friend any operator\/(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator /=	proto/detail/any.hpp	/^                friend any operator\/=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator <	proto/detail/any.hpp	/^                friend any operator<(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator <<	proto/detail/any.hpp	/^                friend any operator<<(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator <<=	proto/detail/any.hpp	/^                friend any operator<<=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator <=	proto/detail/any.hpp	/^                friend any operator<=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator =	proto/detail/any.hpp	/^                any operator=(any);$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:(any)
boost::proto::detail::anyns::any::operator ==	proto/detail/any.hpp	/^                friend any operator==(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator >	proto/detail/any.hpp	/^                friend any operator>(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator >=	proto/detail/any.hpp	/^                friend any operator>=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator >>	proto/detail/any.hpp	/^                friend any operator>>(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator >>=	proto/detail/any.hpp	/^                friend any operator>>=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator T &	proto/detail/any.hpp	/^                operator T &() const volatile;$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:() const volatile
boost::proto::detail::anyns::any::operator []	proto/detail/any.hpp	/^                any operator[](any);$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:(any)
boost::proto::detail::anyns::any::operator ^	proto/detail/any.hpp	/^                friend any operator^(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator ^=	proto/detail/any.hpp	/^                friend any operator^=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator |	proto/detail/any.hpp	/^                friend any operator|(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator |=	proto/detail/any.hpp	/^                friend any operator|=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator ||	proto/detail/any.hpp	/^                friend any operator||(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
boost::proto::detail::anyns::any::operator ~	proto/detail/any.hpp	/^                any operator~();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
boost::proto::detail::apply_transform	proto/transform/impl.hpp	/^        struct apply_transform<PrimitiveTransform(Expr)>$/;"	s	namespace:boost::proto::detail	inherits:PrimitiveTransform::,impl
boost::proto::detail::apply_transform	proto/transform/impl.hpp	/^        struct apply_transform<PrimitiveTransform(Expr, State)>$/;"	s	namespace:boost::proto::detail	inherits:PrimitiveTransform::,impl
boost::proto::detail::apply_transform	proto/transform/impl.hpp	/^        struct apply_transform<PrimitiveTransform(Expr, State, Data)>$/;"	s	namespace:boost::proto::detail	inherits:PrimitiveTransform::,impl
boost::proto::detail::arg	proto/detail/poly_function.hpp	/^    struct arg$/;"	s	namespace:boost::proto::detail
boost::proto::detail::arg	proto/detail/poly_function.hpp	/^    struct arg<T &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::arg::arg	proto/detail/poly_function.hpp	/^        arg(type t)$/;"	f	struct:boost::proto::detail::arg	access:public	signature:(type t)
boost::proto::detail::arg::operator ()	proto/detail/poly_function.hpp	/^        type operator()() const$/;"	f	struct:boost::proto::detail::arg	access:public	signature:() const
boost::proto::detail::arg::operator =	proto/detail/poly_function.hpp	/^        arg &operator =(arg const &);$/;"	p	struct:boost::proto::detail::arg	access:private	signature:(arg const &)
boost::proto::detail::arg::operator type	proto/detail/poly_function.hpp	/^        operator type() const$/;"	f	struct:boost::proto::detail::arg	access:public	signature:() const
boost::proto::detail::arg::type	proto/detail/poly_function.hpp	/^        typedef T &type;$/;"	t	struct:boost::proto::detail::arg	access:public
boost::proto::detail::arg::type	proto/detail/poly_function.hpp	/^        typedef T const &type;$/;"	t	struct:boost::proto::detail::arg	access:public
boost::proto::detail::arg::value	proto/detail/poly_function.hpp	/^        type value;$/;"	m	struct:boost::proto::detail::arg	access:private
boost::proto::detail::array_matches	proto/matches.hpp	/^        struct array_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::array_matches	proto/matches.hpp	/^        struct array_matches<T[M], T *>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::array_matches	proto/matches.hpp	/^        struct array_matches<T[M], T const *>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::array_matches	proto/matches.hpp	/^        struct array_matches<T[M], T[proto::N]>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::as_callable	proto/transform/fold.hpp	/^        struct as_callable$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_callable::as_callable	proto/transform/fold.hpp	/^            as_callable(Data d)$/;"	f	struct:boost::proto::detail::as_callable	access:public	signature:(Data d)
boost::proto::detail::as_callable::d_	proto/transform/fold.hpp	/^            Data d_;$/;"	m	struct:boost::proto::detail::as_callable	access:private
boost::proto::detail::as_callable::operator ()	proto/transform/fold.hpp	/^            operator ()(State const &s, Expr &e) const$/;"	f	struct:boost::proto::detail::as_callable	access:public	signature:(State const &s, Expr &e) const
boost::proto::detail::as_callable::result	proto/transform/fold.hpp	/^            struct result<This(State, Expr)>$/;"	s	struct:boost::proto::detail::as_callable	access:public
boost::proto::detail::as_callable::result::type	proto/transform/fold.hpp	/^                type;$/;"	t	struct:boost::proto::detail::as_callable::result	access:public
boost::proto::detail::as_child	proto/detail/as_expr.hpp	/^    struct as_child<T, Generator, false>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_child	proto/detail/as_expr.hpp	/^    struct as_child<T, Generator, true>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_child	proto/detail/as_expr.hpp	/^    struct as_child<T, proto::default_generator, false>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_child	proto/detail/as_expr.hpp	/^    struct as_child<T, proto::default_generator, true>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_child::expr_type	proto/detail/as_expr.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<reference>, 0> expr_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
boost::proto::detail::as_child::expr_type	proto/detail/as_expr.hpp	/^        typedef proto::expr<proto::tag::terminal, term<reference>, 0> expr_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
boost::proto::detail::as_child::operator ()	proto/detail/as_expr.hpp	/^        result_type operator()(T &t) const$/;"	f	struct:boost::proto::detail::as_child	access:public	signature:(T &t) const
boost::proto::detail::as_child::reference	proto/detail/as_expr.hpp	/^        typedef typename term_traits<T &>::reference reference;$/;"	t	struct:boost::proto::detail::as_child	access:public
boost::proto::detail::as_child::result_type	proto/detail/as_expr.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<reference>, 0> result_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
boost::proto::detail::as_child::result_type	proto/detail/as_expr.hpp	/^        typedef proto::expr<proto::tag::terminal, term<reference>, 0> result_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
boost::proto::detail::as_child::result_type	proto/detail/as_expr.hpp	/^        typedef typename Generator::template result<Generator(expr_type)>::type result_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
boost::proto::detail::as_element	proto/fusion.hpp	/^        struct as_element$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_element::result	proto/fusion.hpp	/^            struct result<This(Expr &)>$/;"	s	struct:boost::proto::detail::as_element	inherits:mpl::if_c	access:public
boost::proto::detail::as_element::result	proto/fusion.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::detail::as_element	inherits:result	access:public
boost::proto::detail::as_element::result::operator ()	proto/fusion.hpp	/^            operator ()(Expr &e) const$/;"	f	class:boost::proto::detail::as_element::result	access:public	signature:(Expr &e) const
boost::proto::detail::as_element::result::operator ()	proto/fusion.hpp	/^            operator ()(Expr const &e) const$/;"	f	class:boost::proto::detail::as_element::result	access:public	signature:(Expr const &e) const
boost::proto::detail::as_expr	proto/detail/as_expr.hpp	/^    struct as_expr<T, Generator, false>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_expr	proto/detail/as_expr.hpp	/^    struct as_expr<T, Generator, true>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_expr	proto/detail/as_expr.hpp	/^    struct as_expr<T, proto::default_generator, false>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_expr	proto/detail/as_expr.hpp	/^    struct as_expr<T, proto::default_generator, true>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_expr::expr_type	proto/detail/as_expr.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<value_type>, 0> expr_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
boost::proto::detail::as_expr::expr_type	proto/detail/as_expr.hpp	/^        typedef proto::expr<proto::tag::terminal, term<value_type>, 0> expr_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
boost::proto::detail::as_expr::operator ()	proto/detail/as_expr.hpp	/^        result_type operator()(T &t) const$/;"	f	struct:boost::proto::detail::as_expr	access:public	signature:(T &t) const
boost::proto::detail::as_expr::result_type	proto/detail/as_expr.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<value_type>, 0> result_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
boost::proto::detail::as_expr::result_type	proto/detail/as_expr.hpp	/^        typedef proto::expr<proto::tag::terminal, term<value_type>, 0> result_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
boost::proto::detail::as_expr::result_type	proto/detail/as_expr.hpp	/^        typedef typename Generator::template result<Generator(expr_type)>::type result_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
boost::proto::detail::as_expr::value_type	proto/detail/as_expr.hpp	/^        typedef typename term_traits<T &>::value_type value_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
boost::proto::detail::as_lvalue	proto/detail/as_lvalue.hpp	/^        T &as_lvalue(T &t)$/;"	f	namespace:boost::proto::detail	signature:(T &t)
boost::proto::detail::as_lvalue	proto/detail/as_lvalue.hpp	/^        T const &as_lvalue(T const &t)$/;"	f	namespace:boost::proto::detail	signature:(T const &t)
boost::proto::detail::as_mutable	proto/detail/decltype.hpp	/^        struct as_mutable$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_mutable	proto/detail/decltype.hpp	/^        struct as_mutable<T &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_mutable	proto/detail/decltype.hpp	/^        struct as_mutable<T const &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_mutable::type	proto/detail/decltype.hpp	/^            typedef T &type;$/;"	t	struct:boost::proto::detail::as_mutable	access:public
boost::proto::detail::as_subscriptable	proto/detail/decltype.hpp	/^        struct as_subscriptable$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_subscriptable	proto/detail/decltype.hpp	/^        struct as_subscriptable<T &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_subscriptable	proto/detail/decltype.hpp	/^        struct as_subscriptable<T const &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_subscriptable	proto/detail/decltype.hpp	/^        struct as_subscriptable<T const>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::as_subscriptable::type	proto/detail/decltype.hpp	/^            type;$/;"	t	struct:boost::proto::detail::as_subscriptable	access:public
boost::proto::detail::base_generator	proto/detail/as_expr.hpp	/^    struct base_generator$/;"	s	namespace:boost::proto::detail
boost::proto::detail::base_generator	proto/detail/as_expr.hpp	/^    struct base_generator<use_basic_expr<Generator> >$/;"	s	namespace:boost::proto::detail
boost::proto::detail::base_generator::type	proto/detail/as_expr.hpp	/^        typedef Generator type;$/;"	t	struct:boost::proto::detail::base_generator	access:public
boost::proto::detail::by_value_generator_	proto/generate.hpp	/^        struct by_value_generator_<proto::basic_expr<Tag, term<Arg>, 0> >$/;"	s	namespace:boost::proto::detail
boost::proto::detail::by_value_generator_	proto/generate.hpp	/^        struct by_value_generator_<proto::expr<Tag, term<Arg>, 0> >$/;"	s	namespace:boost::proto::detail
boost::proto::detail::by_value_generator_::call	proto/generate.hpp	/^            static type const call(proto::basic_expr<Tag, term<Arg>, 0> const &e)$/;"	f	struct:boost::proto::detail::by_value_generator_	access:public	signature:(proto::basic_expr<Tag, term<Arg>, 0> const &e)
boost::proto::detail::by_value_generator_::call	proto/generate.hpp	/^            static type const call(proto::expr<Tag, term<Arg>, 0> const &e)$/;"	f	struct:boost::proto::detail::by_value_generator_	access:public	signature:(proto::expr<Tag, term<Arg>, 0> const &e)
boost::proto::detail::by_value_generator_::type	proto/generate.hpp	/^            type;$/;"	t	struct:boost::proto::detail::by_value_generator_	access:public
boost::proto::detail::callable_context_wrapper	proto/context/callable.hpp	/^        struct callable_context_wrapper$/;"	s	namespace:boost::proto::detail	inherits:remove_cv::type
boost::proto::detail::callable_context_wrapper::callable_context_wrapper	proto/context/callable.hpp	/^            callable_context_wrapper();$/;"	p	struct:boost::proto::detail::callable_context_wrapper	access:public	signature:()
boost::proto::detail::callable_context_wrapper::fun_type	proto/context/callable.hpp	/^            typedef private_type_ fun_type(...);$/;"	t	struct:boost::proto::detail::callable_context_wrapper	access:public
boost::proto::detail::callable_context_wrapper::operator =	proto/context/callable.hpp	/^            callable_context_wrapper &operator =(callable_context_wrapper const &);$/;"	p	struct:boost::proto::detail::callable_context_wrapper	access:private	signature:(callable_context_wrapper const &)
boost::proto::detail::callable_context_wrapper::operator fun_type *	proto/context/callable.hpp	/^            operator fun_type *() const;$/;"	p	struct:boost::proto::detail::callable_context_wrapper	access:public	signature:() const
boost::proto::detail::check_is_expr_handled	proto/context/callable.hpp	/^        no_type check_is_expr_handled(private_type_ const &);$/;"	p	namespace:boost::proto::detail	signature:(private_type_ const &)
boost::proto::detail::check_is_expr_handled	proto/context/callable.hpp	/^        yes_type check_is_expr_handled(T const &);$/;"	p	namespace:boost::proto::detail	signature:(T const &)
boost::proto::detail::check_is_iostream	proto/detail/is_noncopyable.hpp	/^    no_type check_is_iostream(...);$/;"	p	namespace:boost::proto::detail	signature:(....)
boost::proto::detail::check_is_iostream	proto/detail/is_noncopyable.hpp	/^    yes_type check_is_iostream($/;"	p	namespace:boost::proto::detail	signature:( typename T::failure * , typename T::Init * , typename T::fmtflags * , typename T::iostate * , typename T::openmode * , typename T::seekdir * )
boost::proto::detail::check_reference	proto/detail/decltype.hpp	/^        char (&check_reference(T const &))[2];$/;"	p	namespace:boost::proto::detail	signature:(T const &)
boost::proto::detail::check_reference	proto/detail/decltype.hpp	/^        char check_reference(T &);$/;"	p	namespace:boost::proto::detail	signature:(T &)
boost::proto::detail::class_member_traits	proto/detail/decltype.hpp	/^        struct class_member_traits<T U::*>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::class_member_traits::class_type	proto/detail/decltype.hpp	/^            typedef U class_type;$/;"	t	struct:boost::proto::detail::class_member_traits	access:public
boost::proto::detail::class_member_traits::result_type	proto/detail/decltype.hpp	/^            typedef T result_type;$/;"	t	struct:boost::proto::detail::class_member_traits	access:public
boost::proto::detail::comma_result	proto/detail/decltype.hpp	/^        struct comma_result$/;"	s	namespace:boost::proto::detail
boost::proto::detail::comma_result	proto/detail/decltype.hpp	/^        struct comma_result<A0, void>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::comma_result	proto/detail/decltype.hpp	/^        struct comma_result<void, A1>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::comma_result	proto/detail/decltype.hpp	/^        struct comma_result<void, void>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::comma_result::type	proto/detail/decltype.hpp	/^            typedef A1 type;$/;"	t	struct:boost::proto::detail::comma_result	access:public
boost::proto::detail::comma_result::type	proto/detail/decltype.hpp	/^            typedef void type;$/;"	t	struct:boost::proto::detail::comma_result	access:public
boost::proto::detail::common_domain1	proto/detail/deduce_domain.hpp	/^            struct common_domain1$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain1::type	proto/detail/deduce_domain.hpp	/^                typedef D0 type;$/;"	t	struct:boost::proto::detail::common_domain1	access:public
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<D0, D1, 2>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<D0, D1, 3>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<D0, basic_default_domain, 4>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<D0, default_domain, 4>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<basic_default_domain, D1, 4>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<basic_default_domain, basic_default_domain, 4>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<basic_default_domain, default_domain, 4>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<default_domain, D1, 4>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<default_domain, basic_default_domain, 4>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<default_domain, default_domain, 4>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::common_domain2::index	proto/detail/deduce_domain.hpp	/^                static int const index = domain_<D0>::index - sizeof(domain_<D0>::deduce98((domain_<D1>*)0));$/;"	m	struct:boost::proto::detail::common_domain2	access:public
boost::proto::detail::common_domain2::type	proto/detail/deduce_domain.hpp	/^                typedef D0 type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
boost::proto::detail::common_domain2::type	proto/detail/deduce_domain.hpp	/^                typedef D1 type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
boost::proto::detail::common_domain2::type	proto/detail/deduce_domain.hpp	/^                typedef basic_default_domain type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
boost::proto::detail::common_domain2::type	proto/detail/deduce_domain.hpp	/^                typedef default_domain type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
boost::proto::detail::common_domain2::type	proto/detail/deduce_domain.hpp	/^                typedef typename nth_domain<index, domain_<D0> >::type type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
boost::proto::detail::construct_	proto/transform/make.hpp	/^        struct construct_$/;"	s	namespace:boost::proto::detail
boost::proto::detail::construct_	proto/transform/make.hpp	/^        struct construct_<Type, true>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::construct_::operator ()	proto/transform/make.hpp	/^            Type operator ()() const$/;"	f	struct:boost::proto::detail::construct_	access:public	signature:() const
boost::proto::detail::construct_::result_type	proto/transform/make.hpp	/^            typedef Type result_type;$/;"	t	struct:boost::proto::detail::construct_	access:public
boost::proto::detail::deduce_domain1	proto/detail/deduce_domain.hpp	/^            struct deduce_domain1$/;"	s	namespace:boost::proto::detail	inherits:domain_of
boost::proto::detail::deduce_domain2	proto/detail/deduce_domain.hpp	/^            struct deduce_domain2$/;"	s	namespace:boost::proto::detail	inherits:common_domain2
boost::proto::detail::deep_copy_impl	proto/deep_copy.hpp	/^        struct deep_copy_impl<Expr, 0>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::deep_copy_impl::expr_type	proto/deep_copy.hpp	/^            expr_type;$/;"	t	struct:boost::proto::detail::deep_copy_impl	access:public
boost::proto::detail::deep_copy_impl::operator ()	proto/deep_copy.hpp	/^            result_type operator()(Expr2 const &e, S const &, D const &) const$/;"	f	struct:boost::proto::detail::deep_copy_impl	access:public	signature:(Expr2 const &e, S const &, D const &) const
boost::proto::detail::deep_copy_impl::proto_generator	proto/deep_copy.hpp	/^            typedef typename Expr::proto_generator proto_generator;$/;"	t	struct:boost::proto::detail::deep_copy_impl	access:public
boost::proto::detail::deep_copy_impl::result_type	proto/deep_copy.hpp	/^            typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:boost::proto::detail::deep_copy_impl	access:public
boost::proto::detail::default_case	proto/transform/default.hpp	/^        struct default_case$/;"	s	namespace:boost::proto::detail	inherits:not_
boost::proto::detail::default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::comma>$/;"	s	namespace:boost::proto::detail	inherits:when
boost::proto::detail::default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::function>$/;"	s	namespace:boost::proto::detail	inherits:when
boost::proto::detail::default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::if_else_>$/;"	s	namespace:boost::proto::detail	inherits:when
boost::proto::detail::default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::mem_ptr>$/;"	s	namespace:boost::proto::detail	inherits:when
boost::proto::detail::default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::post_dec>$/;"	s	namespace:boost::proto::detail	inherits:when
boost::proto::detail::default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::post_inc>$/;"	s	namespace:boost::proto::detail	inherits:when
boost::proto::detail::default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::subscript>$/;"	s	namespace:boost::proto::detail	inherits:when
boost::proto::detail::default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::terminal>$/;"	s	namespace:boost::proto::detail	inherits:when
boost::proto::detail::default_cases	proto/transform/default.hpp	/^        struct default_cases$/;"	s	namespace:boost::proto::detail
boost::proto::detail::default_cases::case_	proto/transform/default.hpp	/^            struct case_$/;"	s	struct:boost::proto::detail::default_cases	inherits:default_case	access:public
boost::proto::detail::default_comma	proto/transform/default.hpp	/^        struct default_comma$/;"	s	namespace:boost::proto::detail	inherits:transform
boost::proto::detail::default_comma::impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_comma	inherits:transform_impl	access:public
boost::proto::detail::default_comma::impl::e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:private
boost::proto::detail::default_comma::impl::e1	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:private
boost::proto::detail::default_comma::impl::operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_comma::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
boost::proto::detail::default_comma::impl::r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:private
boost::proto::detail::default_comma::impl::r1	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:private
boost::proto::detail::default_comma::impl::result_type	proto/transform/default.hpp	/^                typedef typename proto::detail::comma_result<r0, r1>::type result_type;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:public
boost::proto::detail::default_function	proto/transform/default.hpp	/^        struct default_function$/;"	s	namespace:boost::proto::detail	inherits:transform
boost::proto::detail::default_function::impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_function	inherits:default_function_impl	access:public
boost::proto::detail::default_function_impl	proto/transform/default.hpp	/^        struct default_function_impl<Grammar, Expr, State, Data, 1>$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
boost::proto::detail::default_function_impl	proto/transform/default.hpp	/^        struct default_function_impl<Grammar, Expr, State, Data, 2>$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
boost::proto::detail::default_function_impl::function_type	proto/transform/default.hpp	/^            function_type;$/;"	t	struct:boost::proto::detail::default_function_impl	access:public
boost::proto::detail::default_function_impl::invoke	proto/transform/default.hpp	/^            result_type invoke($/;"	f	struct:boost::proto::detail::default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::false_ , mpl::false_ ) const
boost::proto::detail::default_function_impl::invoke	proto/transform/default.hpp	/^            result_type invoke($/;"	f	struct:boost::proto::detail::default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::false_ , mpl::true_ ) const
boost::proto::detail::default_function_impl::invoke	proto/transform/default.hpp	/^            result_type invoke($/;"	f	struct:boost::proto::detail::default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::true_ , mpl::false_ ) const
boost::proto::detail::default_function_impl::operator ()	proto/transform/default.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::detail::default_function_impl	access:public	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d ) const
boost::proto::detail::default_function_impl::result_type	proto/transform/default.hpp	/^            result_type;$/;"	t	struct:boost::proto::detail::default_function_impl	access:public
boost::proto::detail::default_if_else_	proto/transform/default.hpp	/^        struct default_if_else_$/;"	s	namespace:boost::proto::detail
boost::proto::detail::default_if_else_::impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_if_else_	inherits:transform_impl	access:public
boost::proto::detail::default_if_else_::impl::e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
boost::proto::detail::default_if_else_::impl::e1	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
boost::proto::detail::default_if_else_::impl::e2	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 2>::type e2;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
boost::proto::detail::default_if_else_::impl::operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_if_else_::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
boost::proto::detail::default_if_else_::impl::r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
boost::proto::detail::default_if_else_::impl::r1	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
boost::proto::detail::default_if_else_::impl::r2	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
boost::proto::detail::default_mem_ptr	proto/transform/default.hpp	/^        struct default_mem_ptr$/;"	s	namespace:boost::proto::detail	inherits:transform
boost::proto::detail::default_mem_ptr::impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_mem_ptr	inherits:default_mem_ptr_impl	access:public
boost::proto::detail::default_mem_ptr_impl	proto/transform/default.hpp	/^        struct default_mem_ptr_impl$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
boost::proto::detail::default_mem_ptr_impl	proto/transform/default.hpp	/^        struct default_mem_ptr_impl<Grammar, Expr, State, Data, true>$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
boost::proto::detail::default_mem_ptr_impl::e0	proto/transform/default.hpp	/^            typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:private
boost::proto::detail::default_mem_ptr_impl::e1	proto/transform/default.hpp	/^            typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:private
boost::proto::detail::default_mem_ptr_impl::operator ()	proto/transform/default.hpp	/^            result_type const operator ()($/;"	f	struct:boost::proto::detail::default_mem_ptr_impl	access:public	signature:( typename default_mem_ptr_impl::expr_param e , typename default_mem_ptr_impl::state_param s , typename default_mem_ptr_impl::data_param d ) const
boost::proto::detail::default_mem_ptr_impl::operator ()	proto/transform/default.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::detail::default_mem_ptr_impl	access:public	signature:( typename default_mem_ptr_impl::expr_param e , typename default_mem_ptr_impl::state_param s , typename default_mem_ptr_impl::data_param d ) const
boost::proto::detail::default_mem_ptr_impl::r0	proto/transform/default.hpp	/^            typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:private
boost::proto::detail::default_mem_ptr_impl::r1	proto/transform/default.hpp	/^            typedef typename Grammar::template impl<e1, State, Data>::result_type r1;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:private
boost::proto::detail::default_mem_ptr_impl::result_type	proto/transform/default.hpp	/^            typedef detail::memfun<r0, r1> result_type;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:public
boost::proto::detail::default_mem_ptr_impl::result_type	proto/transform/default.hpp	/^            typedef typename detail::mem_ptr_fun<r0, r1>::result_type result_type;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:public
boost::proto::detail::default_post_dec	proto/transform/default.hpp	/^        struct default_post_dec$/;"	s	namespace:boost::proto::detail	inherits:transform
boost::proto::detail::default_post_dec::impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_post_dec	inherits:transform_impl	access:public
boost::proto::detail::default_post_dec::impl::e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_post_dec::impl	access:private
boost::proto::detail::default_post_dec::impl::operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_post_dec::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
boost::proto::detail::default_post_dec::impl::r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_post_dec::impl	access:private
boost::proto::detail::default_post_inc	proto/transform/default.hpp	/^        struct default_post_inc$/;"	s	namespace:boost::proto::detail	inherits:transform
boost::proto::detail::default_post_inc::impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_post_inc	inherits:transform_impl	access:public
boost::proto::detail::default_post_inc::impl::e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_post_inc::impl	access:private
boost::proto::detail::default_post_inc::impl::operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_post_inc::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
boost::proto::detail::default_post_inc::impl::r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_post_inc::impl	access:private
boost::proto::detail::default_subscript	proto/transform/default.hpp	/^        struct default_subscript$/;"	s	namespace:boost::proto::detail	inherits:transform
boost::proto::detail::default_subscript::impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_subscript	inherits:transform_impl	access:public
boost::proto::detail::default_subscript::impl::e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_subscript::impl	access:private
boost::proto::detail::default_subscript::impl::e1	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::detail::default_subscript::impl	access:private
boost::proto::detail::default_subscript::impl::operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_subscript::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
boost::proto::detail::default_subscript::impl::r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_subscript::impl	access:private
boost::proto::detail::default_subscript::impl::r1	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;$/;"	t	struct:boost::proto::detail::default_subscript::impl	access:private
boost::proto::detail::default_test	proto/detail/deduce_domain.hpp	/^            sized_type<1>::type default_test(void*, void*);$/;"	p	namespace:boost::proto::detail	signature:(void*, void*)
boost::proto::detail::default_test	proto/detail/deduce_domain.hpp	/^            sized_type<2>::type default_test(domain_<basic_default_domain>*, void*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<basic_default_domain>*, void*)
boost::proto::detail::default_test	proto/detail/deduce_domain.hpp	/^            sized_type<2>::type default_test(domain_<default_domain>*, void*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<default_domain>*, void*)
boost::proto::detail::default_test	proto/detail/deduce_domain.hpp	/^            sized_type<3>::type default_test(void*, domain_<basic_default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(void*, domain_<basic_default_domain>*)
boost::proto::detail::default_test	proto/detail/deduce_domain.hpp	/^            sized_type<3>::type default_test(void*, domain_<default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(void*, domain_<default_domain>*)
boost::proto::detail::default_test	proto/detail/deduce_domain.hpp	/^            sized_type<4>::type default_test(domain_<basic_default_domain>*, domain_<basic_default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<basic_default_domain>*, domain_<basic_default_domain>*)
boost::proto::detail::default_test	proto/detail/deduce_domain.hpp	/^            sized_type<4>::type default_test(domain_<basic_default_domain>*, domain_<default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<basic_default_domain>*, domain_<default_domain>*)
boost::proto::detail::default_test	proto/detail/deduce_domain.hpp	/^            sized_type<4>::type default_test(domain_<default_domain>*, domain_<basic_default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<default_domain>*, domain_<basic_default_domain>*)
boost::proto::detail::default_test	proto/detail/deduce_domain.hpp	/^            sized_type<4>::type default_test(domain_<default_domain>*, domain_<default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<default_domain>*, domain_<default_domain>*)
boost::proto::detail::display_expr_impl	proto/debug.hpp	/^        struct display_expr_impl$/;"	s	namespace:boost::proto::detail
boost::proto::detail::display_expr_impl::depth_	proto/debug.hpp	/^            int depth_;$/;"	m	struct:boost::proto::detail::display_expr_impl	access:private
boost::proto::detail::display_expr_impl::display_expr_impl	proto/debug.hpp	/^            display_expr_impl(display_expr_impl const &);$/;"	p	struct:boost::proto::detail::display_expr_impl	access:private	signature:(display_expr_impl const &)
boost::proto::detail::display_expr_impl::display_expr_impl	proto/debug.hpp	/^            explicit display_expr_impl(std::ostream &sout, int depth = 0)$/;"	f	struct:boost::proto::detail::display_expr_impl	access:public	signature:(std::ostream &sout, int depth = 0)
boost::proto::detail::display_expr_impl::first_	proto/debug.hpp	/^            mutable bool first_;$/;"	m	struct:boost::proto::detail::display_expr_impl	access:private
boost::proto::detail::display_expr_impl::impl	proto/debug.hpp	/^            void impl(Expr const &expr, Arity) const$/;"	f	struct:boost::proto::detail::display_expr_impl	access:private	signature:(Expr const &expr, Arity) const
boost::proto::detail::display_expr_impl::impl	proto/debug.hpp	/^            void impl(Expr const &expr, mpl::long_<0>) const$/;"	f	struct:boost::proto::detail::display_expr_impl	access:private	signature:(Expr const &expr, mpl::long_<0>) const
boost::proto::detail::display_expr_impl::operator ()	proto/debug.hpp	/^            void operator()(Expr const &expr) const$/;"	f	struct:boost::proto::detail::display_expr_impl	access:public	signature:(Expr const &expr) const
boost::proto::detail::display_expr_impl::operator =	proto/debug.hpp	/^            display_expr_impl &operator =(display_expr_impl const &);$/;"	p	struct:boost::proto::detail::display_expr_impl	access:private	signature:(display_expr_impl const &)
boost::proto::detail::display_expr_impl::sout_	proto/debug.hpp	/^            std::ostream &sout_;$/;"	m	struct:boost::proto::detail::display_expr_impl	access:private
boost::proto::detail::domain_	proto/detail/deduce_domain.hpp	/^            struct domain_$/;"	s	namespace:boost::proto::detail	inherits:domain_
boost::proto::detail::domain_	proto/detail/deduce_domain.hpp	/^            struct domain_<basic_default_domain>$/;"	s	namespace:boost::proto::detail	inherits:domain_
boost::proto::detail::domain_	proto/detail/deduce_domain.hpp	/^            struct domain_<default_domain>$/;"	s	namespace:boost::proto::detail	inherits:domain_
boost::proto::detail::domain_	proto/detail/deduce_domain.hpp	/^            struct domain_<not_a_domain>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::domain_::base	proto/detail/deduce_domain.hpp	/^                typedef domain_<typename Domain::proto_super_domain> base;$/;"	t	struct:boost::proto::detail::domain_	access:public
boost::proto::detail::domain_::deduce0x	proto/detail/deduce_domain.hpp	/^                static Domain deduce0x(domain_<Domain>*);$/;"	p	struct:boost::proto::detail::domain_	access:public	signature:(domain_<Domain>*)
boost::proto::detail::domain_::deduce0x	proto/detail/deduce_domain.hpp	/^                static not_a_domain deduce0x(void*);$/;"	p	struct:boost::proto::detail::domain_	access:public	signature:(void*)
boost::proto::detail::domain_::deduce98	proto/detail/deduce_domain.hpp	/^                static sized_type<1>::type deduce98(void*);$/;"	p	struct:boost::proto::detail::domain_	access:public	signature:(void*)
boost::proto::detail::domain_::deduce98	proto/detail/deduce_domain.hpp	/^                static typename sized_type<index>::type deduce98(domain_<Domain>*);$/;"	p	struct:boost::proto::detail::domain_	access:public	signature:(domain_<Domain>*)
boost::proto::detail::domain_::index	proto/detail/deduce_domain.hpp	/^                static int const index = 1;$/;"	m	struct:boost::proto::detail::domain_	access:public
boost::proto::detail::domain_::index	proto/detail/deduce_domain.hpp	/^                static int const index = base::index + 1;$/;"	m	struct:boost::proto::detail::domain_	access:public
boost::proto::detail::domain_::type	proto/detail/deduce_domain.hpp	/^                typedef Domain type;$/;"	t	struct:boost::proto::detail::domain_	access:public
boost::proto::detail::domain_::type	proto/detail/deduce_domain.hpp	/^                typedef not_a_domain type;$/;"	t	struct:boost::proto::detail::domain_	access:public
boost::proto::detail::dont_care	proto/detail/dont_care.hpp	/^        struct dont_care$/;"	s	namespace:boost::proto::detail
boost::proto::detail::dont_care::dont_care	proto/detail/dont_care.hpp	/^            BOOST_FORCEINLINE dont_care(...);$/;"	p	struct:boost::proto::detail::dont_care	access:public	signature:(....)
boost::proto::detail::enable_binary	proto/operators.hpp	/^        struct enable_binary$/;"	s	namespace:boost::proto::detail	inherits:boost::lazy_enable_if_c
boost::proto::detail::enable_binary	proto/operators.hpp	/^        struct enable_binary<Domain, proto::_, Trait, Tag, Left &, Right &>$/;"	s	namespace:boost::proto::detail	inherits:boost::lazy_enable_if_c
boost::proto::detail::enable_binary	proto/operators.hpp	/^        struct enable_binary<deduce_domain, not_a_grammar, Trait, Tag, Left &, Right &>$/;"	s	namespace:boost::proto::detail	inherits:enable_binary
boost::proto::detail::enable_unary	proto/operators.hpp	/^        struct enable_unary$/;"	s	namespace:boost::proto::detail	inherits:boost::lazy_enable_if_c
boost::proto::detail::enable_unary	proto/operators.hpp	/^        struct enable_unary<Domain, proto::_, Trait, Tag, Arg &>$/;"	s	namespace:boost::proto::detail	inherits:boost::lazy_enable_if_c
boost::proto::detail::enable_unary	proto/operators.hpp	/^        struct enable_unary<deduce_domain, not_a_grammar, Trait, Tag, Arg &>$/;"	s	namespace:boost::proto::detail	inherits:enable_unary
boost::proto::detail::expand_pattern	proto/transform/detail/pack.hpp	/^        struct expand_pattern<0, Fun, Cont>$/;"	s	namespace:boost::proto::detail	inherits:Cont::,cat
boost::proto::detail::expand_pattern::BOOST_MPL_ASSERT_MSG	proto/transform/detail/pack.hpp	/^            BOOST_MPL_ASSERT_MSG($/;"	p	struct:boost::proto::detail::expand_pattern	access:public	signature:(expand_pattern_helper<proto::_value, Fun>::applied::value) , NO_PACK_EXPRESSION_FOUND_IN_PACK_EXPANSION , (Fun) 
boost::proto::detail::expand_pattern_helper	proto/transform/detail/pack.hpp	/^        struct expand_pattern_helper$/;"	s	namespace:boost::proto::detail
boost::proto::detail::expand_pattern_helper	proto/transform/detail/pack.hpp	/^        struct expand_pattern_helper<Tfx, Fun *>$/;"	s	namespace:boost::proto::detail	inherits:expand_pattern_helper
boost::proto::detail::expand_pattern_helper	proto/transform/detail/pack.hpp	/^        struct expand_pattern_helper<Tfx, pack(T)>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::expand_pattern_helper	proto/transform/detail/pack.hpp	/^        struct expand_pattern_helper<Tfx, pack(_)>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::expand_pattern_helper::BOOST_MPL_ASSERT_MSG	proto/transform/detail/pack.hpp	/^            BOOST_MPL_ASSERT_MSG($/;"	p	struct:boost::proto::detail::expand_pattern_helper	access:public	signature:(is_same<T, _>::value) , PACK_EXPANSIONS_OF_EXPRESSIONS_OTHER_THAN_THE_CURRENT_NOT_YET_SUPPORTED , (T) 
boost::proto::detail::expand_pattern_helper::applied	proto/transform/detail/pack.hpp	/^            typedef mpl::false_ applied;$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
boost::proto::detail::expand_pattern_helper::applied	proto/transform/detail/pack.hpp	/^            typedef mpl::true_ applied;$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
boost::proto::detail::expand_pattern_helper::type	proto/transform/detail/pack.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
boost::proto::detail::expand_pattern_helper::type	proto/transform/detail/pack.hpp	/^            typedef Tfx type(T);$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
boost::proto::detail::expand_pattern_helper::type	proto/transform/detail/pack.hpp	/^            typedef Tfx type;$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
boost::proto::detail::expr_iterator	proto/fusion.hpp	/^        struct expr_iterator$/;"	s	namespace:boost::proto::detail	inherits:fusion::iterator_base
boost::proto::detail::expr_iterator::category	proto/fusion.hpp	/^            typedef fusion::random_access_traversal_tag category;$/;"	t	struct:boost::proto::detail::expr_iterator	access:public
boost::proto::detail::expr_iterator::expr	proto/fusion.hpp	/^            Expr &expr;$/;"	m	struct:boost::proto::detail::expr_iterator	access:public
boost::proto::detail::expr_iterator::expr_iterator	proto/fusion.hpp	/^            explicit expr_iterator(Expr &e)$/;"	f	struct:boost::proto::detail::expr_iterator	access:public	signature:(Expr &e)
boost::proto::detail::expr_iterator::expr_type	proto/fusion.hpp	/^            typedef Expr expr_type;$/;"	t	struct:boost::proto::detail::expr_iterator	access:public
boost::proto::detail::expr_iterator::fusion_tag	proto/fusion.hpp	/^            fusion_tag;$/;"	t	struct:boost::proto::detail::expr_iterator	access:public
boost::proto::detail::expr_iterator::index	proto/fusion.hpp	/^            static const long index = Pos;$/;"	m	struct:boost::proto::detail::expr_iterator	access:public
boost::proto::detail::expr_traits	proto/args.hpp	/^        struct expr_traits$/;"	s	namespace:boost::proto::detail
boost::proto::detail::expr_traits	proto/args.hpp	/^        struct expr_traits<Expr &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::expr_traits	proto/args.hpp	/^        struct expr_traits<Expr const &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::expr_traits::const_reference	proto/args.hpp	/^            typedef Expr &const_reference;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
boost::proto::detail::expr_traits::const_reference	proto/args.hpp	/^            typedef Expr const &const_reference;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
boost::proto::detail::expr_traits::reference	proto/args.hpp	/^            typedef Expr &reference;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
boost::proto::detail::expr_traits::reference	proto/args.hpp	/^            typedef Expr const &reference;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
boost::proto::detail::expr_traits::value_type	proto/args.hpp	/^            typedef Expr value_type;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
boost::proto::detail::flat_view	proto/fusion.hpp	/^        struct flat_view$/;"	s	namespace:boost::proto::detail	inherits:fusion::sequence_base
boost::proto::detail::flat_view::category	proto/fusion.hpp	/^            typedef fusion::forward_traversal_tag category;$/;"	t	struct:boost::proto::detail::flat_view	access:public
boost::proto::detail::flat_view::flat_view	proto/fusion.hpp	/^            explicit flat_view(Expr &e)$/;"	f	struct:boost::proto::detail::flat_view	access:public	signature:(Expr &e)
boost::proto::detail::flat_view::fusion_tag	proto/fusion.hpp	/^            fusion_tag;$/;"	t	struct:boost::proto::detail::flat_view	access:public
boost::proto::detail::flat_view::segments_type	proto/fusion.hpp	/^            segments_type;$/;"	t	struct:boost::proto::detail::flat_view	access:public
boost::proto::detail::flat_view::segs_	proto/fusion.hpp	/^            segments_type segs_;$/;"	m	struct:boost::proto::detail::flat_view	access:public
boost::proto::detail::fold_impl	proto/transform/fold.hpp	/^        struct fold_impl$/;"	s	namespace:boost::proto::detail
boost::proto::detail::fold_tree_	proto/transform/fold_tree.hpp	/^        struct fold_tree_$/;"	s	namespace:boost::proto::detail	inherits:if_
boost::proto::detail::get_pointerns	proto/detail/decltype.hpp	/^        namespace get_pointerns$/;"	n	namespace:boost::proto::detail
boost::proto::detail::get_pointerns::get_pointer	proto/detail/decltype.hpp	/^            get_pointer(T &t)$/;"	f	namespace:boost::proto::detail::get_pointerns	signature:(T &t)
boost::proto::detail::get_pointerns::get_pointer	proto/detail/decltype.hpp	/^            get_pointer(T const &t)$/;"	f	namespace:boost::proto::detail::get_pointerns	signature:(T const &t)
boost::proto::detail::get_pointerns::mem_ptr_fun	proto/detail/decltype.hpp	/^            struct mem_ptr_fun$/;"	s	namespace:boost::proto::detail::get_pointerns
boost::proto::detail::get_pointerns::mem_ptr_fun	proto/detail/decltype.hpp	/^            struct mem_ptr_fun<T, U, true>$/;"	s	namespace:boost::proto::detail::get_pointerns
boost::proto::detail::get_pointerns::mem_ptr_fun::V	proto/detail/decltype.hpp	/^                V;$/;"	t	struct:boost::proto::detail::get_pointerns::mem_ptr_fun	access:public
boost::proto::detail::get_pointerns::mem_ptr_fun::operator ()	proto/detail/decltype.hpp	/^                result_type operator()($/;"	f	struct:boost::proto::detail::get_pointerns::mem_ptr_fun	access:public	signature:( typename add_reference<typename add_const<T>::type>::type t , U u ) const
boost::proto::detail::get_pointerns::mem_ptr_fun::operator ()	proto/detail/decltype.hpp	/^                result_type operator()($/;"	f	struct:boost::proto::detail::get_pointerns::mem_ptr_fun	access:public	signature:( typename add_reference<typename add_const<T>::type>::type t , typename add_reference<typename add_const<U>::type>::type u ) const
boost::proto::detail::get_pointerns::mem_ptr_fun::proto::detail::make	proto/detail/decltype.hpp	/^                    BOOST_PROTO_GET_POINTER(V, proto::detail::make_mutable<T>()) ->* proto::detail::make<U>()$/;"	p	class:boost::proto::detail::get_pointerns::mem_ptr_fun::proto::detail	access:public	signature:()
boost::proto::detail::get_pointerns::mem_ptr_fun::proto::detail::make	proto/detail/decltype.hpp	/^                    proto::detail::make_mutable<T>() ->* proto::detail::make<U>()$/;"	p	class:boost::proto::detail::get_pointerns::mem_ptr_fun::proto::detail	access:public	signature:()
boost::proto::detail::get_pointerns::result_of_	proto/detail/decltype.hpp	/^            struct result_of_$/;"	s	namespace:boost::proto::detail::get_pointerns	inherits:BOOST_PROTO_RESULT_OF
boost::proto::detail::get_pointerns::result_of_	proto/detail/decltype.hpp	/^            struct result_of_<T U::*(V), typename enable_if_c<is_member_object_pointer<T U::*>::value>::type>$/;"	s	namespace:boost::proto::detail::get_pointerns
boost::proto::detail::get_pointerns::result_of_::is_V_a_smart_ptr	proto/detail/decltype.hpp	/^                static const bool is_V_a_smart_ptr = 2 == sizeof(test_V_is_a_U<U>(&lvalue(make<V>())));$/;"	m	struct:boost::proto::detail::get_pointerns::result_of_	access:public
boost::proto::detail::get_pointerns::result_of_::is_ptr_to_const	proto/detail/decltype.hpp	/^                static const bool is_ptr_to_const = 2 == sizeof(test_ptr_to_const(BOOST_PROTO_GET_POINTER(U, make<V>())));$/;"	m	struct:boost::proto::detail::get_pointerns::result_of_	access:public
boost::proto::detail::get_pointerns::result_of_::type	proto/detail/decltype.hpp	/^                type;$/;"	t	struct:boost::proto::detail::get_pointerns::result_of_	access:public
boost::proto::detail::get_pointerns::test_V_is_a_U	proto/detail/decltype.hpp	/^            template<typename U> char (&test_V_is_a_U(...))[2];$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(....)
boost::proto::detail::get_pointerns::test_V_is_a_U	proto/detail/decltype.hpp	/^            template<typename U> char test_V_is_a_U(U *);$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(U *)
boost::proto::detail::get_pointerns::test_V_is_a_U	proto/detail/decltype.hpp	/^            template<typename U> char test_V_is_a_U(U const *);$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(U const *)
boost::proto::detail::get_pointerns::test_ptr_to_const	proto/detail/decltype.hpp	/^            char (&test_ptr_to_const(void const *))[2];$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(void const *)
boost::proto::detail::get_pointerns::test_ptr_to_const	proto/detail/decltype.hpp	/^            char test_ptr_to_const(void *);$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(void *)
boost::proto::detail::has_get_pointerns	proto/detail/decltype.hpp	/^        namespace has_get_pointerns$/;"	n	namespace:boost::proto::detail
boost::proto::detail::has_get_pointerns::get_pointer	proto/detail/decltype.hpp	/^            void *(&get_pointer(...))[2];$/;"	p	namespace:boost::proto::detail::has_get_pointerns	signature:(....)
boost::proto::detail::has_get_pointerns::has_get_pointer	proto/detail/decltype.hpp	/^            struct has_get_pointer$/;"	s	namespace:boost::proto::detail::has_get_pointerns
boost::proto::detail::has_get_pointerns::has_get_pointer::type	proto/detail/decltype.hpp	/^                typedef mpl::bool_<value> type;$/;"	t	struct:boost::proto::detail::has_get_pointerns::has_get_pointer	access:public
boost::proto::detail::has_get_pointerns::has_get_pointer::value	proto/detail/decltype.hpp	/^                static const bool value = sizeof(void *) == sizeof(get_pointer(make<T &>()));$/;"	m	struct:boost::proto::detail::has_get_pointerns::has_get_pointer	access:public
boost::proto::detail::has_tag	proto/transform/fold_tree.hpp	/^        struct has_tag$/;"	s	namespace:boost::proto::detail
boost::proto::detail::has_tag::impl	proto/transform/fold_tree.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::has_tag	access:public
boost::proto::detail::has_tag::impl	proto/transform/fold_tree.hpp	/^            struct impl<Expr &, State, Data, typename Expr::proto_tag>$/;"	s	struct:boost::proto::detail::has_tag	access:public
boost::proto::detail::has_tag::impl	proto/transform/fold_tree.hpp	/^            struct impl<Expr, State, Data, typename Expr::proto_tag>$/;"	s	struct:boost::proto::detail::has_tag	access:public
boost::proto::detail::has_tag::impl::result_type	proto/transform/fold_tree.hpp	/^                typedef mpl::false_ result_type;$/;"	t	struct:boost::proto::detail::has_tag::impl	access:public
boost::proto::detail::has_tag::impl::result_type	proto/transform/fold_tree.hpp	/^                typedef mpl::true_ result_type;$/;"	t	struct:boost::proto::detail::has_tag::impl	access:public
boost::proto::detail::if_vararg	proto/traits.hpp	/^        struct if_vararg$/;"	s	namespace:boost::proto::detail
boost::proto::detail::if_vararg	proto/traits.hpp	/^        struct if_vararg<T, typename T::proto_is_vararg_>$/;"	s	namespace:boost::proto::detail	inherits:T
boost::proto::detail::ignore	proto/proto_fwd.hpp	/^        struct ignore$/;"	s	namespace:boost::proto::detail
boost::proto::detail::ignore	proto/proto_fwd.hpp	/^    typedef detail::ignore const ignore;$/;"	t	class:boost::proto::detail
boost::proto::detail::ignore::ignore	proto/proto_fwd.hpp	/^            ignore()$/;"	f	struct:boost::proto::detail::ignore	access:public	signature:()
boost::proto::detail::ignore::ignore	proto/proto_fwd.hpp	/^            ignore(T const &)$/;"	f	struct:boost::proto::detail::ignore	access:public	signature:(T const &)
boost::proto::detail::ignore_unused	proto/detail/ignore_unused.hpp	/^        BOOST_FORCEINLINE void ignore_unused(T const &)$/;"	f	namespace:boost::proto::detail	signature:(T const &)
boost::proto::detail::is_aggregate_	proto/traits.hpp	/^        struct is_aggregate_$/;"	s	namespace:boost::proto::detail	inherits:is_pod
boost::proto::detail::is_aggregate_	proto/traits.hpp	/^        struct is_aggregate_<T, typename T::proto_is_aggregate_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::is_aggregate_	proto/traits.hpp	/^        struct is_aggregate_<proto::basic_expr<Tag, Args, N>, void>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::is_aggregate_	proto/traits.hpp	/^        struct is_aggregate_<proto::expr<Tag, Args, N>, void>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::is_applyable	proto/transform/make.hpp	/^        struct is_applyable$/;"	s	namespace:boost::proto::detail	inherits:mpl::and_
boost::proto::detail::is_callable2_	proto/traits.hpp	/^        struct is_callable2_$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::is_callable2_	proto/traits.hpp	/^        struct is_callable2_<T, typename T::proto_is_callable_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::is_callable_	proto/traits.hpp	/^        struct is_callable_$/;"	s	namespace:boost::proto::detail	inherits:is_callable2_
boost::proto::detail::is_cv_ref_compatible	proto/matches.hpp	/^        struct is_cv_ref_compatible$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::is_cv_ref_compatible	proto/matches.hpp	/^        struct is_cv_ref_compatible<T &, U &>$/;"	s	namespace:boost::proto::detail	inherits:mpl::bool_
boost::proto::detail::is_cv_ref_compatible	proto/matches.hpp	/^        struct is_cv_ref_compatible<T, U &>$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::is_expr_handled	proto/context/callable.hpp	/^        struct is_expr_handled<Expr, Context, 0>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::is_expr_handled::sctx_	proto/context/callable.hpp	/^            static callable_context_wrapper<Context> &sctx_;$/;"	m	struct:boost::proto::detail::is_expr_handled	access:public
boost::proto::detail::is_expr_handled::sexpr_	proto/context/callable.hpp	/^            static Expr &sexpr_;$/;"	m	struct:boost::proto::detail::is_expr_handled	access:public
boost::proto::detail::is_expr_handled::stag_	proto/context/callable.hpp	/^            static typename Expr::proto_tag &stag_;$/;"	m	struct:boost::proto::detail::is_expr_handled	access:public
boost::proto::detail::is_expr_handled::type	proto/context/callable.hpp	/^            typedef mpl::bool_<value> type;$/;"	t	struct:boost::proto::detail::is_expr_handled	access:public
boost::proto::detail::is_expr_handled::value	proto/context/callable.hpp	/^            static const bool value =$/;"	m	struct:boost::proto::detail::is_expr_handled	access:public
boost::proto::detail::is_iostream	proto/detail/is_noncopyable.hpp	/^    struct is_iostream$/;"	s	namespace:boost::proto::detail
boost::proto::detail::is_iostream::type	proto/detail/is_noncopyable.hpp	/^        typedef mpl::bool_<value> type;$/;"	t	struct:boost::proto::detail::is_iostream	access:public
boost::proto::detail::is_iostream::value	proto/detail/is_noncopyable.hpp	/^        static bool const value = sizeof(yes_type) == sizeof(check_is_iostream<T>(0,0,0,0,0,0));$/;"	m	struct:boost::proto::detail::is_iostream	access:public
boost::proto::detail::is_member_function_invocation	proto/transform/default.hpp	/^        struct is_member_function_invocation$/;"	s	namespace:boost::proto::detail	inherits:is_member_function_pointer
boost::proto::detail::is_noncopyable	proto/detail/is_noncopyable.hpp	/^    struct is_noncopyable$/;"	s	namespace:boost::proto::detail	inherits:mpl::or_
boost::proto::detail::is_noncopyable	proto/detail/is_noncopyable.hpp	/^    struct is_noncopyable<T[N]>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::is_poly_function	proto/detail/poly_function.hpp	/^    struct is_poly_function$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::is_poly_function	proto/detail/poly_function.hpp	/^    struct is_poly_function<T, typename T::is_poly_function_base_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::is_transform_	proto/traits.hpp	/^        struct is_transform_$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::is_transform_	proto/traits.hpp	/^        struct is_transform_<T, typename T::proto_is_transform_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::lambda_matches	proto/matches.hpp	/^        struct lambda_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T, T BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T, proto::_ BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T<Expr0>, T<Grammar0> BOOST_PROTO_TEMPLATE_ARITY_PARAM(1) >$/;"	s	namespace:boost::proto::detail	inherits:lambda_matches
boost::proto::detail::lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T[M], T[M] BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T[M], U BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:array_matches
boost::proto::detail::lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T[M], _ BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::lazy_matches	proto/operators.hpp	/^        struct lazy_matches$/;"	s	namespace:boost::proto::detail	inherits:proto::matches
boost::proto::detail::lvalue	proto/detail/decltype.hpp	/^        T &lvalue(T &t)$/;"	f	namespace:boost::proto::detail	signature:(T &t)
boost::proto::detail::lvalue	proto/detail/decltype.hpp	/^        T const &lvalue(T const &t)$/;"	f	namespace:boost::proto::detail	signature:(T const &t)
boost::proto::detail::make	proto/detail/decltype.hpp	/^        T make();$/;"	p	namespace:boost::proto::detail	signature:()
boost::proto::detail::make_	proto/transform/make.hpp	/^        struct make_$/;"	s	namespace:boost::proto::detail
boost::proto::detail::make_::applied	proto/transform/make.hpp	/^            static bool const applied = false;$/;"	m	struct:boost::proto::detail::make_	access:public
boost::proto::detail::make_::type	proto/transform/make.hpp	/^            typedef R type;$/;"	t	struct:boost::proto::detail::make_	access:public
boost::proto::detail::make_if_	proto/transform/make.hpp	/^        struct make_if_$/;"	s	namespace:boost::proto::detail	inherits:make_
boost::proto::detail::make_if_	proto/transform/make.hpp	/^        struct make_if_<R, Expr, State, Data, true>$/;"	s	namespace:boost::proto::detail	inherits:uncvref
boost::proto::detail::make_if_	proto/transform/make.hpp	/^        struct make_if_<proto::basic_expr<Tag, Args, N>, Expr, State, Data, false>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::make_if_	proto/transform/make.hpp	/^        struct make_if_<proto::expr<Tag, Args, N>, Expr, State, Data, false>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::make_if_::applied	proto/transform/make.hpp	/^            static bool const applied = false;$/;"	m	struct:boost::proto::detail::make_if_	access:public
boost::proto::detail::make_if_::applied	proto/transform/make.hpp	/^            static bool const applied = true;$/;"	m	struct:boost::proto::detail::make_if_	access:public
boost::proto::detail::make_if_::type	proto/transform/make.hpp	/^            typedef proto::basic_expr<Tag, Args, N> type;$/;"	t	struct:boost::proto::detail::make_if_	access:public
boost::proto::detail::make_if_::type	proto/transform/make.hpp	/^            typedef proto::expr<Tag, Args, N> type;$/;"	t	struct:boost::proto::detail::make_if_	access:public
boost::proto::detail::make_mutable	proto/detail/decltype.hpp	/^        typename as_mutable<T>::type make_mutable();$/;"	p	namespace:boost::proto::detail	signature:()
boost::proto::detail::make_subscriptable	proto/detail/decltype.hpp	/^        typename as_subscriptable<T>::type make_subscriptable();$/;"	p	namespace:boost::proto::detail	signature:()
boost::proto::detail::make_terminal	proto/expr.hpp	/^        Expr make_terminal(T &t, Expr *, proto::term<Arg0> *)$/;"	f	namespace:boost::proto::detail	signature:(T &t, Expr *, proto::term<Arg0> *)
boost::proto::detail::make_terminal	proto/expr.hpp	/^        Expr make_terminal(T &t, Expr *, proto::term<U C::*> *)$/;"	f	namespace:boost::proto::detail	signature:(T &t, Expr *, proto::term<U C::*> *)
boost::proto::detail::make_terminal	proto/expr.hpp	/^        Expr make_terminal(T const(&t)[N], Expr *, proto::term<Arg0[N]> *)$/;"	f	namespace:boost::proto::detail	signature:(T const(&t)[N], Expr *, proto::term<Arg0[N]> *)
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_< Expr, BasicExpr, proto::_ >$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 0>, proto::basic_expr<Tag, Args2, 0> >$/;"	s	namespace:boost::proto::detail	inherits:terminal_matches
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 0>, proto::basic_expr<proto::_, Args2, 0> >$/;"	s	namespace:boost::proto::detail	inherits:terminal_matches
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 0>, proto::basic_expr<proto::_, Args2, N2> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 1>, proto::basic_expr<Tag, Args2, 1> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 1>, proto::basic_expr<proto::_, Args2, 1> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, N1>, proto::basic_expr<Tag, Args2, N2> >$/;"	s	namespace:boost::proto::detail	inherits:vararg_matchesN2,N2,N1
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, N1>, proto::basic_expr<proto::_, Args2, N2> >$/;"	s	namespace:boost::proto::detail	inherits:vararg_matchesN2,N2,N1
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, and_<> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, and_<G0> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, not_<Grammar> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::not_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, or_<> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, or_<G0> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_<Expr, proto::basic_expr<Tag, Args, Arity>, proto::if_<If, Then, Else> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::eval_if_c::type
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_<Expr, proto::basic_expr<Tag, Args, Arity>, switch_<Cases, Transform> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
boost::proto::detail::matches_	proto/matches.hpp	/^        struct matches_<Expr, proto::basic_expr<Tag, Args, Arity>, switch_<Cases> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
boost::proto::detail::matches_::which	proto/matches.hpp	/^            typedef G0 which;$/;"	t	struct:boost::proto::detail::matches_	access:public
boost::proto::detail::matches_::which	proto/matches.hpp	/^            typedef not_<_> which;$/;"	t	struct:boost::proto::detail::matches_	access:public
boost::proto::detail::matches_::which	proto/matches.hpp	/^            typedef typename Cases::template case_<Tag> which;$/;"	t	struct:boost::proto::detail::matches_	access:public
boost::proto::detail::matches_::which	proto/matches.hpp	/^            which;$/;"	t	struct:boost::proto::detail::matches_	access:public
boost::proto::detail::memfun	proto/detail/decltype.hpp	/^        struct memfun$/;"	s	namespace:boost::proto::detail
boost::proto::detail::memfun::V	proto/detail/decltype.hpp	/^            typedef typename class_member_traits<pmf_type>::class_type V;$/;"	t	struct:boost::proto::detail::memfun	access:public
boost::proto::detail::memfun::memfun	proto/detail/decltype.hpp	/^            memfun(T t, pmf_type p)$/;"	f	struct:boost::proto::detail::memfun	access:public	signature:(T t, pmf_type p)
boost::proto::detail::memfun::obj	proto/detail/decltype.hpp	/^            T obj;$/;"	m	struct:boost::proto::detail::memfun	access:private
boost::proto::detail::memfun::operator ()	proto/detail/decltype.hpp	/^            result_type operator()() const$/;"	f	struct:boost::proto::detail::memfun	access:public	signature:() const
boost::proto::detail::memfun::pmf	proto/detail/decltype.hpp	/^            pmf_type pmf;$/;"	m	struct:boost::proto::detail::memfun	access:private
boost::proto::detail::memfun::pmf_type	proto/detail/decltype.hpp	/^            typedef typename uncvref<PMF>::type pmf_type;$/;"	t	struct:boost::proto::detail::memfun	access:public
boost::proto::detail::memfun::result_type	proto/detail/decltype.hpp	/^            typedef typename class_member_traits<pmf_type>::result_type result_type;$/;"	t	struct:boost::proto::detail::memfun	access:public
boost::proto::detail::mono_function_t	proto/detail/poly_function.hpp	/^    typedef char (&mono_function_t)[2];$/;"	t	namespace:boost::proto::detail
boost::proto::detail::nested_type	proto/transform/make.hpp	/^        struct nested_type$/;"	s	namespace:boost::proto::detail
boost::proto::detail::nested_type	proto/transform/make.hpp	/^        struct nested_type<T, false>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::nested_type::type	proto/transform/make.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::detail::nested_type	access:public
boost::proto::detail::nested_type::type	proto/transform/make.hpp	/^            typedef typename T::type type;$/;"	t	struct:boost::proto::detail::nested_type	access:public
boost::proto::detail::nested_type_if	proto/transform/make.hpp	/^        struct nested_type_if$/;"	s	namespace:boost::proto::detail
boost::proto::detail::nested_type_if	proto/transform/make.hpp	/^        struct nested_type_if<T, true>$/;"	s	namespace:boost::proto::detail	inherits:nested_type
boost::proto::detail::nested_type_if::applied	proto/transform/make.hpp	/^            static bool const applied = false;$/;"	m	struct:boost::proto::detail::nested_type_if	access:public
boost::proto::detail::nested_type_if::applied	proto/transform/make.hpp	/^            static bool const applied = true;$/;"	m	struct:boost::proto::detail::nested_type_if	access:public
boost::proto::detail::nested_type_if::type	proto/transform/make.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::detail::nested_type_if	access:public
boost::proto::detail::no_type	proto/proto_fwd.hpp	/^        typedef char (&no_type)[2];$/;"	t	namespace:boost::proto::detail
boost::proto::detail::normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg$/;"	s	namespace:boost::proto::detail
boost::proto::detail::normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<T &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<T const &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<T const>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<boost::reference_wrapper<T> &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<boost::reference_wrapper<T> >$/;"	s	namespace:boost::proto::detail
boost::proto::detail::normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<boost::reference_wrapper<T> const &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<boost::reference_wrapper<T> const>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::normalize_arg::reference	proto/detail/poly_function.hpp	/^        typedef T &reference;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
boost::proto::detail::normalize_arg::reference	proto/detail/poly_function.hpp	/^        typedef T const &reference;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
boost::proto::detail::normalize_arg::type	proto/detail/poly_function.hpp	/^        typedef T &type;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
boost::proto::detail::normalize_arg::type	proto/detail/poly_function.hpp	/^        typedef typename mpl::if_c<is_noncopyable<T>::value, T &, T>::type type;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
boost::proto::detail::normalize_arg::type	proto/detail/poly_function.hpp	/^        typedef typename mpl::if_c<is_noncopyable<T>::value, T const &, T>::type type;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
boost::proto::detail::not_a_domain	proto/domain.hpp	/^        struct not_a_domain$/;"	s	namespace:boost::proto::detail
boost::proto::detail::not_a_generator	proto/domain.hpp	/^        struct not_a_generator$/;"	s	namespace:boost::proto::detail
boost::proto::detail::not_a_grammar	proto/domain.hpp	/^        struct not_a_grammar$/;"	s	namespace:boost::proto::detail
boost::proto::detail::not_a_valid_type	proto/expr.hpp	/^        struct not_a_valid_type$/;"	s	namespace:boost::proto::detail
boost::proto::detail::not_a_valid_type::not_a_valid_type	proto/expr.hpp	/^            not_a_valid_type()$/;"	f	struct:boost::proto::detail::not_a_valid_type	access:private	signature:()
boost::proto::detail::nth_domain	proto/detail/deduce_domain.hpp	/^            struct nth_domain$/;"	s	namespace:boost::proto::detail	inherits:nth_domain
boost::proto::detail::nth_domain	proto/detail/deduce_domain.hpp	/^            struct nth_domain<0, Domain>$/;"	s	namespace:boost::proto::detail	inherits:Domain
boost::proto::detail::pass_through_impl	proto/transform/pass_through.hpp	/^        struct pass_through_impl$/;"	s	namespace:boost::proto::detail
boost::proto::detail::pass_through_impl	proto/transform/pass_through.hpp	/^        struct pass_through_impl<Grammar, Domain, Expr, State, Data, 0>$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
boost::proto::detail::pass_through_impl::operator ()	proto/transform/pass_through.hpp	/^            operator()($/;"	f	struct:boost::proto::detail::pass_through_impl	access:public	signature:( typename pass_through_impl::expr_param e , typename pass_through_impl::state_param , typename pass_through_impl::data_param ) const
boost::proto::detail::pass_through_impl::result_type	proto/transform/pass_through.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::detail::pass_through_impl	access:public
boost::proto::detail::poly_function	proto/detail/poly_function.hpp	/^    struct poly_function$/;"	s	namespace:boost::proto::detail	inherits:poly_function_base
boost::proto::detail::poly_function::operator ()	proto/detail/poly_function.hpp	/^        NullaryResult operator()() const$/;"	f	struct:boost::proto::detail::poly_function	access:public	signature:() const
boost::proto::detail::poly_function::result	proto/detail/poly_function.hpp	/^        struct result<This()>$/;"	s	struct:boost::proto::detail::poly_function	inherits:Derived::,impl	access:public
boost::proto::detail::poly_function::result::type	proto/detail/poly_function.hpp	/^            typedef typename result::result_type type;$/;"	t	struct:boost::proto::detail::poly_function::result	access:public
boost::proto::detail::poly_function_base	proto/detail/poly_function.hpp	/^    struct poly_function_base$/;"	s	namespace:boost::proto::detail
boost::proto::detail::poly_function_t	proto/detail/poly_function.hpp	/^    typedef char poly_function_t;$/;"	t	namespace:boost::proto::detail
boost::proto::detail::poly_function_traits	proto/detail/poly_function.hpp	/^    struct poly_function_traits$/;"	s	namespace:boost::proto::detail
boost::proto::detail::poly_function_traits	proto/detail/poly_function.hpp	/^    struct poly_function_traits<Fun, Sig, mpl::size_t<sizeof(mono_function_t)> >$/;"	s	namespace:boost::proto::detail
boost::proto::detail::poly_function_traits::function_type	proto/detail/poly_function.hpp	/^        typedef Fun function_type;$/;"	t	struct:boost::proto::detail::poly_function_traits	access:public
boost::proto::detail::poly_function_traits::result_type	proto/detail/poly_function.hpp	/^        typedef typename Fun::result_type result_type;$/;"	t	struct:boost::proto::detail::poly_function_traits	access:public
boost::proto::detail::poly_function_traits::result_type	proto/detail/poly_function.hpp	/^        typedef typename Fun::template result<Sig>::type result_type;$/;"	t	struct:boost::proto::detail::poly_function_traits	access:public
boost::proto::detail::private_type_	proto/proto_fwd.hpp	/^        struct private_type_$/;"	s	namespace:boost::proto::detail
boost::proto::detail::private_type_::operator ,	proto/proto_fwd.hpp	/^            private_type_ operator ,(int) const;$/;"	p	struct:boost::proto::detail::private_type_	access:public	signature:(int) const
boost::proto::detail::proto_get_pointer	proto/detail/decltype.hpp	/^        U *proto_get_pointer(T &t, V *, U *)$/;"	f	namespace:boost::proto::detail	signature:(T &t, V *, U *)
boost::proto::detail::proto_get_pointer	proto/detail/decltype.hpp	/^        U const *proto_get_pointer(T &t, V *, U const *)$/;"	f	namespace:boost::proto::detail	signature:(T &t, V *, U const *)
boost::proto::detail::proto_get_pointer	proto/detail/decltype.hpp	/^        V *proto_get_pointer(T &t, V *, ...)$/;"	f	namespace:boost::proto::detail	signature:(T &t, V *, ...)
boost::proto::detail::protoify	proto/make_expr.hpp	/^        struct protoify$/;"	s	namespace:boost::proto::detail	inherits:Domain::,as_expr
boost::proto::detail::protoify	proto/make_expr.hpp	/^        struct protoify<T &, Domain>$/;"	s	namespace:boost::proto::detail	inherits:Domain::,as_child
boost::proto::detail::protoify	proto/make_expr.hpp	/^        struct protoify<boost::reference_wrapper<T> const, Domain>$/;"	s	namespace:boost::proto::detail	inherits:Domain::,as_child
boost::proto::detail::protoify	proto/make_expr.hpp	/^        struct protoify<boost::reference_wrapper<T>, Domain>$/;"	s	namespace:boost::proto::detail	inherits:Domain::,as_child
boost::proto::detail::result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup$/;"	s	namespace:boost::proto::detail	inherits:mpl::if_c
boost::proto::detail::result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<R T::*, U>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<T &, U>$/;"	s	namespace:boost::proto::detail	inherits:result_of_fixup
boost::proto::detail::result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<T *, U>$/;"	s	namespace:boost::proto::detail	inherits:result_of_fixup
boost::proto::detail::result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<T const &, U>$/;"	s	namespace:boost::proto::detail	inherits:result_of_fixup
boost::proto::detail::result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<T const, U>$/;"	s	namespace:boost::proto::detail	inherits:result_of_fixup
boost::proto::detail::result_of_fixup::T::type	proto/detail/decltype.hpp	/^            typedef R T::*type;$/;"	t	class:boost::proto::detail::result_of_fixup::T	access:public
boost::proto::detail::reverse_fold_impl	proto/transform/fold.hpp	/^        struct reverse_fold_impl$/;"	s	namespace:boost::proto::detail
boost::proto::detail::reverse_fold_tree_	proto/transform/fold_tree.hpp	/^        struct reverse_fold_tree_$/;"	s	namespace:boost::proto::detail	inherits:if_
boost::proto::detail::same_cv	proto/expr.hpp	/^        struct same_cv$/;"	s	namespace:boost::proto::detail
boost::proto::detail::same_cv	proto/expr.hpp	/^        struct same_cv<T const, U>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::same_cv::type	proto/expr.hpp	/^            typedef U const type;$/;"	t	struct:boost::proto::detail::same_cv	access:public
boost::proto::detail::same_cv::type	proto/expr.hpp	/^            typedef U type;$/;"	t	struct:boost::proto::detail::same_cv	access:public
boost::proto::detail::sized_type	proto/proto_fwd.hpp	/^        struct sized_type$/;"	s	namespace:boost::proto::detail
boost::proto::detail::sized_type::type	proto/proto_fwd.hpp	/^            typedef char (&type)[N];$/;"	t	struct:boost::proto::detail::sized_type	access:public
boost::proto::detail::static_const	proto/detail/static_const.hpp	/^        struct static_const$/;"	s	namespace:boost::proto::detail
boost::proto::detail::static_const::value	proto/detail/static_const.hpp	/^            static T const value;$/;"	m	struct:boost::proto::detail::static_const	access:public
boost::proto::detail::static_const::value	proto/detail/static_const.hpp	/^        T const static_const<T>::value = {};$/;"	m	class:boost::proto::detail::static_const
boost::proto::detail::subscript_wrapper	proto/detail/decltype.hpp	/^        struct subscript_wrapper$/;"	s	namespace:boost::proto::detail	inherits:T
boost::proto::detail::template_arity	proto/detail/template_arity.hpp	/^    struct template_arity$/;"	s	namespace:boost::proto::detail	inherits:template_arity_impl2
boost::proto::detail::template_arity_helper	proto/detail/template_arity.hpp	/^    sized_type<1>::type template_arity_helper(...);$/;"	p	namespace:boost::proto::detail	signature:(....)
boost::proto::detail::template_arity_impl2	proto/detail/template_arity.hpp	/^    struct template_arity_impl2$/;"	s	namespace:boost::proto::detail	inherits:mpl::int_
boost::proto::detail::template_arity_impl2	proto/detail/template_arity.hpp	/^    struct template_arity_impl2<F, 0, 1>$/;"	s	namespace:boost::proto::detail	inherits:mpl::int_
boost::proto::detail::template_arity_impl2	proto/detail/template_arity.hpp	/^    struct template_arity_impl2<F, N, 1>$/;"	s	namespace:boost::proto::detail	inherits:template_arity
boost::proto::detail::term_traits	proto/args.hpp	/^        struct term_traits$/;"	s	namespace:boost::proto::detail
boost::proto::detail::term_traits	proto/args.hpp	/^        struct term_traits<T &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::term_traits	proto/args.hpp	/^        struct term_traits<T (&)[N]>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::term_traits	proto/args.hpp	/^        struct term_traits<T const &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::term_traits	proto/args.hpp	/^        struct term_traits<T const (&)[N]>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::term_traits	proto/args.hpp	/^        struct term_traits<T const[N]>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::term_traits	proto/args.hpp	/^        struct term_traits<T[N]>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::term_traits::const_reference	proto/args.hpp	/^            typedef T &const_reference;$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::const_reference	proto/args.hpp	/^            typedef T (&const_reference)[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::const_reference	proto/args.hpp	/^            typedef T const &const_reference;$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::const_reference	proto/args.hpp	/^            typedef T const (&const_reference)[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::reference	proto/args.hpp	/^            typedef T &reference;$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::reference	proto/args.hpp	/^            typedef T (&reference)[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::reference	proto/args.hpp	/^            typedef T const &reference;$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::reference	proto/args.hpp	/^            typedef T const (&reference)[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::value_type	proto/args.hpp	/^            typedef T value_type;$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::value_type	proto/args.hpp	/^            typedef T value_type[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::term_traits::value_type	proto/args.hpp	/^            typedef typename mpl::if_c<is_noncopyable<T>::value, T &, T>::type value_type;$/;"	t	struct:boost::proto::detail::term_traits	access:public
boost::proto::detail::terminal_array_matches	proto/matches.hpp	/^        struct terminal_array_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::terminal_array_matches	proto/matches.hpp	/^        struct terminal_array_matches<T, U *, true>$/;"	s	namespace:boost::proto::detail	inherits:is_convertible
boost::proto::detail::terminal_array_matches	proto/matches.hpp	/^        struct terminal_array_matches<T, U(&)[M], true>$/;"	s	namespace:boost::proto::detail	inherits:is_convertible
boost::proto::detail::terminal_array_matches	proto/matches.hpp	/^        struct terminal_array_matches<T, U(&)[proto::N], true>$/;"	s	namespace:boost::proto::detail	inherits:is_convertible
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::and_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::or_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T &, T>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T const &, T>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T const (&)[M], T const[M]>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T(&)[M], T *>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T(&)[M], T(&)[proto::N]>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T, T>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T, exact<T> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T, proto::_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
boost::proto::detail::terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T, proto::convertible_to<U> >$/;"	s	namespace:boost::proto::detail	inherits:is_convertible
boost::proto::detail::test_poly_function	proto/detail/poly_function.hpp	/^    template<typename T> mono_function_t test_poly_function(T *, wrap_t<typename T::result_type> * = 0);$/;"	p	namespace:boost::proto::detail	signature:(T *, wrap_t<typename T::result_type> * = 0)
boost::proto::detail::test_poly_function	proto/detail/poly_function.hpp	/^    template<typename T> poly_function_t test_poly_function(T *, wrap_t<typename T::is_poly_function_base_> * = 0);$/;"	p	namespace:boost::proto::detail	signature:(T *, wrap_t<typename T::is_poly_function_base_> * = 0)
boost::proto::detail::test_poly_function	proto/detail/poly_function.hpp	/^    template<typename T> unknown_function_t test_poly_function(T *, ...);$/;"	p	namespace:boost::proto::detail	signature:(T *, ...)
boost::proto::detail::uncvref	proto/proto_fwd.hpp	/^        struct uncvref$/;"	s	namespace:boost::proto::detail
boost::proto::detail::uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T (&)[N]>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T const &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T const (&)[N]>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T const>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T const[N]>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::uncvref::type	proto/proto_fwd.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::detail::uncvref	access:public
boost::proto::detail::uncvref::type	proto/proto_fwd.hpp	/^            typedef T type[N];$/;"	t	struct:boost::proto::detail::uncvref	access:public
boost::proto::detail::unknown_function_t	proto/detail/poly_function.hpp	/^    typedef char (&unknown_function_t)[3];$/;"	t	namespace:boost::proto::detail
boost::proto::detail::value_type	proto/transform/env.hpp	/^            struct value_type$/;"	s	namespace:boost::proto::detail
boost::proto::detail::value_type	proto/transform/env.hpp	/^            struct value_type<T &>$/;"	s	namespace:boost::proto::detail
boost::proto::detail::value_type::reference	proto/transform/env.hpp	/^                typedef T &reference;$/;"	t	struct:boost::proto::detail::value_type	access:public
boost::proto::detail::value_type::reference	proto/transform/env.hpp	/^                typedef typename add_reference<T>::type reference;$/;"	t	struct:boost::proto::detail::value_type	access:public
boost::proto::detail::value_type::type	proto/transform/env.hpp	/^                typedef T &type;$/;"	t	struct:boost::proto::detail::value_type	access:public
boost::proto::detail::value_type::type	proto/transform/env.hpp	/^                typedef typename mpl::if_c<is_noncopyable<T>::value, reference, value>::type type;$/;"	t	struct:boost::proto::detail::value_type	access:public
boost::proto::detail::value_type::value	proto/transform/env.hpp	/^                typedef T &value;$/;"	t	struct:boost::proto::detail::value_type	access:public
boost::proto::detail::value_type::value	proto/transform/env.hpp	/^                typedef typename remove_const<T>::type value;$/;"	t	struct:boost::proto::detail::value_type	access:public
boost::proto::detail::vararg_matches	proto/matches.hpp	/^        struct vararg_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
boost::proto::detail::vararg_matches	proto/matches.hpp	/^        struct vararg_matches<Expr, Args1, Args2, Back, true, false, typename Back::proto_is_vararg_>$/;"	s	namespace:boost::proto::detail	inherits:and_2
boost::proto::detail::vararg_matches	proto/matches.hpp	/^        struct vararg_matches<Expr, Args1, Args2, Back, true, true, typename Back::proto_is_vararg_>$/;"	s	namespace:boost::proto::detail	inherits:matches_
boost::proto::detail::when_impl	proto/transform/when.hpp	/^        struct when_impl$/;"	s	namespace:boost::proto::detail	inherits:transform
boost::proto::detail::when_impl::first	proto/transform/when.hpp	/^            typedef Grammar first;$/;"	t	struct:boost::proto::detail::when_impl	access:public
boost::proto::detail::when_impl::impl	proto/transform/when.hpp	/^            struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::detail::when_impl	inherits:transform_impl	access:public
boost::proto::detail::when_impl::impl::operator ()	proto/transform/when.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::when_impl::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
boost::proto::detail::when_impl::impl::result_type	proto/transform/when.hpp	/^                typedef typename which::template impl<Expr, State, Data>::result_type result_type;$/;"	t	struct:boost::proto::detail::when_impl::impl	access:public
boost::proto::detail::when_impl::impl::which	proto/transform/when.hpp	/^                which;$/;"	t	struct:boost::proto::detail::when_impl::impl	access:public
boost::proto::detail::when_impl::proto_grammar	proto/transform/when.hpp	/^            typedef typename Grammar::proto_grammar proto_grammar;$/;"	t	struct:boost::proto::detail::when_impl	access:public
boost::proto::detail::when_impl::second	proto/transform/when.hpp	/^            typedef Fun second;$/;"	t	struct:boost::proto::detail::when_impl	access:public
boost::proto::detail::yes_type	proto/proto_fwd.hpp	/^        typedef char yes_type;$/;"	t	namespace:boost::proto::detail
boost::proto::display_expr	proto/debug.hpp	/^    void display_expr(Expr const &expr)$/;"	f	namespace:boost::proto	signature:(Expr const &expr)
boost::proto::display_expr	proto/debug.hpp	/^    void display_expr(Expr const &expr, std::ostream &sout)$/;"	f	namespace:boost::proto	signature:(Expr const &expr, std::ostream &sout)
boost::proto::domain_of	proto/domain.hpp	/^    struct domain_of$/;"	s	namespace:boost::proto
boost::proto::domain_of	proto/domain.hpp	/^    struct domain_of<T &, void>$/;"	s	namespace:boost::proto
boost::proto::domain_of	proto/domain.hpp	/^    struct domain_of<T, typename T::proto_is_expr_>$/;"	s	namespace:boost::proto
boost::proto::domain_of	proto/domain.hpp	/^    struct domain_of<boost::reference_wrapper<T> const, void>$/;"	s	namespace:boost::proto
boost::proto::domain_of	proto/domain.hpp	/^    struct domain_of<boost::reference_wrapper<T>, void>$/;"	s	namespace:boost::proto
boost::proto::domain_of::type	proto/domain.hpp	/^        typedef default_domain type;$/;"	t	struct:boost::proto::domain_of	access:public
boost::proto::domain_of::type	proto/domain.hpp	/^        typedef typename T::proto_domain type;$/;"	t	struct:boost::proto::domain_of	access:public
boost::proto::domain_of::type	proto/domain.hpp	/^        typedef typename domain_of<T>::type type;$/;"	t	struct:boost::proto::domain_of	access:public
boost::proto::domainns_	proto/domain.hpp	/^    namespace domainns_$/;"	n	namespace:boost::proto
boost::proto::domainns_	proto/proto_fwd.hpp	/^    namespace domainns_$/;"	n	namespace:boost::proto
boost::proto::domainns_::base_expr	proto/domain.hpp	/^        struct base_expr$/;"	s	namespace:boost::proto::domainns_
boost::proto::domainns_::base_expr	proto/domain.hpp	/^        struct base_expr<Domain, Tag, Args, true>$/;"	s	namespace:boost::proto::domainns_
boost::proto::domainns_::base_expr::type	proto/domain.hpp	/^            typedef proto::basic_expr<Tag, Args, Args::arity> type;$/;"	t	struct:boost::proto::domainns_::base_expr	access:public
boost::proto::domainns_::base_expr::type	proto/domain.hpp	/^            typedef proto::expr<Tag, Args, Args::arity> type;$/;"	t	struct:boost::proto::domainns_::base_expr	access:public
boost::proto::domainns_::basic_default_domain	proto/domain.hpp	/^        struct basic_default_domain$/;"	s	namespace:boost::proto::domainns_	inherits:domain
boost::proto::domainns_::deduce_domain	proto/domain.hpp	/^        struct deduce_domain$/;"	s	namespace:boost::proto::domainns_	inherits:domain
boost::proto::domainns_::default_domain	proto/domain.hpp	/^        struct default_domain$/;"	s	namespace:boost::proto::domainns_	inherits:domain
boost::proto::domainns_::domain	proto/domain.hpp	/^        struct domain$/;"	s	namespace:boost::proto::domainns_	inherits:Generator
boost::proto::domainns_::domain::as_child	proto/domain.hpp	/^            struct as_child$/;"	s	struct:boost::proto::domainns_::domain	inherits:detail::as_child	access:public
boost::proto::domainns_::domain::as_child	proto/domain.hpp	/^            struct as_child<T, typename T::proto_is_expr_, proto::callable>$/;"	s	struct:boost::proto::domainns_::domain	access:public
boost::proto::domainns_::domain::as_child::operator ()	proto/domain.hpp	/^                result_type operator()(T &e) const$/;"	f	struct:boost::proto::domainns_::domain::as_child	access:public	signature:(T &e) const
boost::proto::domainns_::domain::as_child::result_type	proto/domain.hpp	/^                typedef T &result_type;$/;"	t	struct:boost::proto::domainns_::domain::as_child	access:public
boost::proto::domainns_::domain::as_expr	proto/domain.hpp	/^            struct as_expr$/;"	s	struct:boost::proto::domainns_::domain	inherits:detail::as_expr	access:public
boost::proto::domainns_::domain::as_expr	proto/domain.hpp	/^            struct as_expr<T, typename T::proto_is_expr_, proto::callable>$/;"	s	struct:boost::proto::domainns_::domain	access:public
boost::proto::domainns_::domain::as_expr::operator ()	proto/domain.hpp	/^                result_type operator()(T &e) const$/;"	f	struct:boost::proto::domainns_::domain::as_expr	access:public	signature:(T &e) const
boost::proto::domainns_::domain::as_expr::result_type	proto/domain.hpp	/^                typedef typename remove_const<T>::type result_type;$/;"	t	struct:boost::proto::domainns_::domain::as_expr	access:public
boost::proto::domainns_::domain::proto_base_domain	proto/domain.hpp	/^            typedef domain    proto_base_domain;$/;"	t	struct:boost::proto::domainns_::domain	access:public
boost::proto::domainns_::domain::proto_generator	proto/domain.hpp	/^            typedef Generator proto_generator;$/;"	t	struct:boost::proto::domainns_::domain	access:public
boost::proto::domainns_::domain::proto_grammar	proto/domain.hpp	/^            typedef Grammar   proto_grammar;$/;"	t	struct:boost::proto::domainns_::domain	access:public
boost::proto::domainns_::domain::proto_is_domain_	proto/domain.hpp	/^            typedef void proto_is_domain_;$/;"	t	struct:boost::proto::domainns_::domain	access:public
boost::proto::domainns_::domain::proto_super_domain	proto/domain.hpp	/^            typedef Super     proto_super_domain;$/;"	t	struct:boost::proto::domainns_::domain	access:public
boost::proto::domainns_::no_super_domain	proto/proto_fwd.hpp	/^        typedef detail::not_a_domain no_super_domain;$/;"	t	namespace:boost::proto::domainns_
boost::proto::env_var	proto/transform/env.hpp	/^        typename proto::result_of::env_var<Env const &, Key>::type env_var(Env const &e)$/;"	f	namespace:boost::proto	signature:(Env const &e)
boost::proto::envns_	proto/proto_fwd.hpp	/^    namespace envns_$/;"	n	namespace:boost::proto
boost::proto::envns_	proto/transform/env.hpp	/^        namespace envns_$/;"	n	namespace:boost::proto
boost::proto::envns_	proto/transform/impl.hpp	/^    namespace envns_$/;"	n	namespace:boost::proto
boost::proto::envns_	proto/transform/when.hpp	/^    namespace envns_$/;"	n	namespace:boost::proto
boost::proto::envns_::BOOST_PROTO_DEFINE_ENV_VAR	proto/transform/env.hpp	/^            BOOST_PROTO_DEFINE_ENV_VAR(data_type, data);$/;"	p	namespace:boost::proto::envns_	signature:(data_type, data)
boost::proto::envns_::BOOST_PROTO_DEFINE_ENV_VAR	proto/transform/when.hpp	/^        BOOST_PROTO_DEFINE_ENV_VAR(transforms_type, transforms);$/;"	p	namespace:boost::proto::envns_	signature:(transforms_type, transforms)
boost::proto::envns_::disable_if_c::operator ,	proto/transform/env.hpp	/^            >::type const operator,(T &t, env<T1, V1> const &head)$/;"	f	class:boost::proto::envns_::disable_if_c	signature:(T &t, env<T1, V1> const &head)
boost::proto::envns_::empty_env	proto/transform/impl.hpp	/^        struct empty_env$/;"	s	namespace:boost::proto::envns_
boost::proto::envns_::empty_env::at	proto/transform/impl.hpp	/^            T const &at(detail::any, T const &t) const$/;"	f	struct:boost::proto::envns_::empty_env	access:public	signature:(detail::any, T const &t) const
boost::proto::envns_::empty_env::lookup	proto/transform/impl.hpp	/^            struct lookup$/;"	s	struct:boost::proto::envns_::empty_env	access:public
boost::proto::envns_::empty_env::lookup::const_reference	proto/transform/impl.hpp	/^                const_reference;$/;"	t	struct:boost::proto::envns_::empty_env::lookup	access:public
boost::proto::envns_::empty_env::lookup::type	proto/transform/impl.hpp	/^                typedef OtherValue type;$/;"	t	struct:boost::proto::envns_::empty_env::lookup	access:public
boost::proto::envns_::empty_env::operator []	proto/transform/impl.hpp	/^            key_not_found operator[](detail::any) const$/;"	f	struct:boost::proto::envns_::empty_env	access:public	signature:(detail::any) const
boost::proto::envns_::empty_env::proto_environment_	proto/transform/impl.hpp	/^            typedef void proto_environment_;$/;"	t	struct:boost::proto::envns_::empty_env	access:public
boost::proto::envns_::empty_state	proto/proto_fwd.hpp	/^        typedef int empty_state;$/;"	t	namespace:boost::proto::envns_
boost::proto::envns_::env	proto/transform/env.hpp	/^            struct env$/;"	s	namespace:boost::proto::envns_	inherits:Base
boost::proto::envns_::env::at	proto/transform/env.hpp	/^                const_reference at(Key, T const &) const$/;"	f	struct:boost::proto::envns_::env	access:public	signature:(Key, T const &) const
boost::proto::envns_::env::const_reference	proto/transform/env.hpp	/^                typedef typename add_reference<typename add_const<Value>::type>::type const_reference;$/;"	t	struct:boost::proto::envns_::env	access:public
boost::proto::envns_::env::env	proto/transform/env.hpp	/^                explicit env(const_reference value, Base const &base = Base())$/;"	f	struct:boost::proto::envns_::env	access:public	signature:(const_reference value, Base const &base = Base())
boost::proto::envns_::env::found	proto/transform/env.hpp	/^                struct found$/;"	s	struct:boost::proto::envns_::env	access:public
boost::proto::envns_::env::found::const_reference	proto/transform/env.hpp	/^                    typedef typename add_reference<typename add_const<Value>::type>::type const_reference;$/;"	t	struct:boost::proto::envns_::env::found	access:public
boost::proto::envns_::env::found::type	proto/transform/env.hpp	/^                    typedef Value type;$/;"	t	struct:boost::proto::envns_::env::found	access:public
boost::proto::envns_::env::lookup	proto/transform/env.hpp	/^                struct lookup$/;"	s	struct:boost::proto::envns_::env	inherits:Base::,lookup	access:public
boost::proto::envns_::env::lookup	proto/transform/env.hpp	/^                struct lookup$/;"	s	struct:boost::proto::envns_::env	inherits:mpl::if_c::type	access:public
boost::proto::envns_::env::lookup	proto/transform/env.hpp	/^                struct lookup<Key, OtherValue>$/;"	s	struct:boost::proto::envns_::env	access:public
boost::proto::envns_::env::lookup::const_reference	proto/transform/env.hpp	/^                    typedef typename add_reference<typename add_const<Value>::type>::type const_reference;$/;"	t	struct:boost::proto::envns_::env::lookup	access:public
boost::proto::envns_::env::lookup::type	proto/transform/env.hpp	/^                    typedef Value type;$/;"	t	struct:boost::proto::envns_::env::lookup	access:public
boost::proto::envns_::env::operator []	proto/transform/env.hpp	/^                const_reference operator[](Key) const$/;"	f	struct:boost::proto::envns_::env	access:public	signature:(Key) const
boost::proto::envns_::env::proto_environment_	proto/transform/env.hpp	/^                typedef void proto_environment_; \/\/\/< INTERNAL ONLY$/;"	t	struct:boost::proto::envns_::env	access:public
boost::proto::envns_::env::reference	proto/transform/env.hpp	/^                typedef typename add_reference<Value>::type reference;$/;"	t	struct:boost::proto::envns_::env	access:public
boost::proto::envns_::env::value_	proto/transform/env.hpp	/^                Value value_;$/;"	m	struct:boost::proto::envns_::env	access:private
boost::proto::envns_::env::value_type	proto/transform/env.hpp	/^                typedef Value value_type;$/;"	t	struct:boost::proto::envns_::env	access:public
boost::proto::envns_::key_not_found	proto/transform/impl.hpp	/^        struct key_not_found$/;"	s	namespace:boost::proto::envns_
boost::proto::envns_::operator ,	proto/transform/env.hpp	/^                operator,(T const &t, env<T1, V1> const &head)$/;"	f	namespace:boost::proto::envns_	signature:(T const &t, env<T1, V1> const &head)
boost::proto::eval	proto/eval.hpp	/^    eval(Expr &e, Context &ctx)$/;"	f	namespace:boost::proto	signature:(Expr &e, Context &ctx)
boost::proto::eval	proto/eval.hpp	/^    eval(Expr &e, Context const &ctx)$/;"	f	namespace:boost::proto	signature:(Expr &e, Context const &ctx)
boost::proto::eval	proto/eval.hpp	/^    eval(Expr const &e, Context &ctx)$/;"	f	namespace:boost::proto	signature:(Expr const &e, Context &ctx)
boost::proto::eval	proto/eval.hpp	/^    eval(Expr const &e, Context const &ctx)$/;"	f	namespace:boost::proto	signature:(Expr const &e, Context const &ctx)
boost::proto::eval_fun	proto/fusion.hpp	/^    struct eval_fun$/;"	s	namespace:boost::proto	inherits:proto::callable
boost::proto::eval_fun::ctx_	proto/fusion.hpp	/^        Context &ctx_;$/;"	m	struct:boost::proto::eval_fun	access:private
boost::proto::eval_fun::eval_fun	proto/fusion.hpp	/^        explicit eval_fun(Context &ctx)$/;"	f	struct:boost::proto::eval_fun	access:public	signature:(Context &ctx)
boost::proto::eval_fun::operator ()	proto/fusion.hpp	/^        operator ()(Expr &e) const$/;"	f	struct:boost::proto::eval_fun	access:public	signature:(Expr &e) const
boost::proto::eval_fun::operator ()	proto/fusion.hpp	/^        operator ()(Expr const &e) const$/;"	f	struct:boost::proto::eval_fun	access:public	signature:(Expr const &e) const
boost::proto::eval_fun::result	proto/fusion.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::eval_fun	inherits:proto::result_of::eval	access:public
boost::proto::eval_fun::result	proto/fusion.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::eval_fun	inherits:result	access:public
boost::proto::exact	proto/matches.hpp	/^    struct exact$/;"	s	namespace:boost::proto
boost::proto::exprns_	proto/expr.hpp	/^    namespace exprns_$/;"	n	namespace:boost::proto
boost::proto::exprns_	proto/extends.hpp	/^    namespace exprns_$/;"	n	namespace:boost::proto
boost::proto::exprns_	proto/operators.hpp	/^    namespace exprns_$/;"	n	namespace:boost::proto
boost::proto::exprns_	proto/proto_fwd.hpp	/^    namespace exprns_$/;"	n	namespace:boost::proto
boost::proto::exprns_::extends	proto/extends.hpp	/^        struct extends$/;"	s	namespace:boost::proto::exprns_
boost::proto::exprns_::extends	proto/extends.hpp	/^        struct extends<Expr, Derived, Domain, 0>$/;"	s	namespace:boost::proto::exprns_
boost::proto::exprns_::extends::extends	proto/extends.hpp	/^            extends()$/;"	f	struct:boost::proto::exprns_::extends	access:public	signature:()
boost::proto::exprns_::extends::extends	proto/extends.hpp	/^            extends(Expr const &expr_)$/;"	f	struct:boost::proto::exprns_::extends	access:public	signature:(Expr const &expr_)
boost::proto::exprns_::extends::extends	proto/extends.hpp	/^            extends(extends const &that)$/;"	f	struct:boost::proto::exprns_::extends	access:public	signature:(extends const &that)
boost::proto::exprns_::extends::proto_extends	proto/extends.hpp	/^            typedef extends proto_extends;$/;"	t	struct:boost::proto::exprns_::extends	access:public
boost::proto::exprns_::is_proto_expr	proto/extends.hpp	/^        struct is_proto_expr$/;"	s	namespace:boost::proto::exprns_
boost::proto::exprns_::result_of::make_expr::if_else	proto/operators.hpp	/^        if_else(A0 const &a0, A1 const &a1, A2 const &a2)$/;"	f	class:boost::proto::exprns_::result_of::make_expr	signature:(A0 const &a0, A1 const &a1, A2 const &a2)
boost::proto::exprns_::virtual_member	proto/extends.hpp	/^        struct virtual_member$/;"	s	namespace:boost::proto::exprns_
boost::proto::exprns_::virtual_member::child0	proto/extends.hpp	/^            proto_child0 child0() const$/;"	f	struct:boost::proto::exprns_::virtual_member	access:public	signature:() const
boost::proto::exprns_::virtual_member::child1	proto/extends.hpp	/^            proto_child1 child1() const$/;"	f	struct:boost::proto::exprns_::virtual_member	access:public	signature:() const
boost::proto::exprns_::virtual_member::fusion_tag	proto/extends.hpp	/^            typedef boost::proto::tag::proto_expr<proto_tag, Domain> fusion_tag;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_address_of_hack_type_	proto/extends.hpp	/^            typedef detail::not_a_valid_type proto_address_of_hack_type_;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_args	proto/extends.hpp	/^            typedef list2<This &, expr<tag::terminal, term<Fun> > const &> proto_args;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_arity	proto/extends.hpp	/^            typedef mpl::long_<2> proto_arity;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_arity_c	proto/extends.hpp	/^            static const long proto_arity_c = 2;$/;"	m	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_base	proto/extends.hpp	/^            proto_base_expr const proto_base() const$/;"	f	struct:boost::proto::exprns_::virtual_member	access:public	signature:() const
boost::proto::exprns_::virtual_member::proto_base_expr	proto/extends.hpp	/^            typedef expr<proto_tag, proto_args, proto_arity_c> proto_base_expr;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_child0	proto/extends.hpp	/^            typedef This &proto_child0;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_child1	proto/extends.hpp	/^            typedef expr<tag::terminal, term<Fun> > const &proto_child1;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_derived_expr	proto/extends.hpp	/^            typedef virtual_member<This, Fun, Domain> proto_derived_expr;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_domain	proto/extends.hpp	/^            typedef Domain proto_domain;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_generator	proto/extends.hpp	/^            typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_grammar	proto/extends.hpp	/^            typedef basic_expr<proto_tag, proto_args, proto_arity_c> proto_grammar;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_is_aggregate_	proto/extends.hpp	/^            typedef void proto_is_aggregate_; \/**< INTERNAL ONLY *\/$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_is_expr_	proto/extends.hpp	/^            typedef void proto_is_expr_; \/**< INTERNAL ONLY *\/$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::exprns_::virtual_member::proto_tag	proto/extends.hpp	/^            typedef tag::member proto_tag;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
boost::proto::external_transforms	proto/transform/when.hpp	/^    struct external_transforms$/;"	s	namespace:boost::proto
boost::proto::external_transforms::map_type	proto/transform/when.hpp	/^        typedef mpl::map<BOOST_PP_ENUM_PARAMS(BOOST_MPL_LIMIT_MAP_SIZE, T)> map_type;$/;"	t	struct:boost::proto::external_transforms	access:public
boost::proto::external_transforms::when	proto/transform/when.hpp	/^        struct when$/;"	s	struct:boost::proto::external_transforms	inherits:proto::when	access:public
boost::proto::fold	proto/transform/fold.hpp	/^    struct fold : transform<fold<Sequence, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::fold	proto/transform/fold.hpp	/^    struct fold<_, State0, Fun> : transform<fold<_, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::fold::impl	proto/transform/fold.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::fold	inherits:transform_impl	access:public
boost::proto::fold::impl	proto/transform/fold.hpp	/^        struct impl$/;"	s	struct:boost::proto::fold	inherits:detail::fold_impl	access:public
boost::proto::fold::impl::fun	proto/transform/fold.hpp	/^            fun;$/;"	t	struct:boost::proto::fold::impl	access:public
boost::proto::fold::impl::operator ()	proto/transform/fold.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::fold::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
boost::proto::fold::impl::result_type	proto/transform/fold.hpp	/^            result_type;$/;"	t	struct:boost::proto::fold::impl	access:public
boost::proto::fold::impl::sequence	proto/transform/fold.hpp	/^            sequence;$/;"	t	struct:boost::proto::fold::impl	access:public
boost::proto::fold::impl::state0	proto/transform/fold.hpp	/^            state0;$/;"	t	struct:boost::proto::fold::impl	access:public
boost::proto::fold_tree	proto/transform/fold_tree.hpp	/^    struct fold_tree$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::fold_tree::impl	proto/transform/fold_tree.hpp	/^        struct impl$/;"	s	struct:boost::proto::fold_tree	inherits:fold::,impl	access:public
boost::proto::fold_tree::impl	proto/transform/fold_tree.hpp	/^        struct impl<Expr &, State, Data>$/;"	s	struct:boost::proto::fold_tree	inherits:fold::,impl	access:public
boost::proto::functional	proto/debug.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/deep_copy.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/eval.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/fusion/at.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/fusion/pop_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/fusion/pop_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/fusion/push_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/fusion/push_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/fusion/reverse.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/range/begin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/range/empty.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/range/end.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/range/rbegin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/range/rend.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/range/size.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/std/iterator.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/functional/std/utility.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/fusion.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/make_expr.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/proto_fwd.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/traits.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional	proto/transform/env.hpp	/^        namespace functional$/;"	n	namespace:boost::proto
boost::proto::functional::advance	proto/functional/std/iterator.hpp	/^    struct advance$/;"	s	namespace:boost::proto::functional
boost::proto::functional::advance::operator ()	proto/functional/std/iterator.hpp	/^        void operator()(InputIterator &x, Distance n) const$/;"	f	struct:boost::proto::functional::advance	access:public	signature:(InputIterator &x, Distance n) const
boost::proto::functional::advance::result_type	proto/functional/std/iterator.hpp	/^        typedef void result_type;$/;"	t	struct:boost::proto::functional::advance	access:public
boost::proto::functional::as_child	proto/traits.hpp	/^        struct as_child$/;"	s	namespace:boost::proto::functional
boost::proto::functional::as_child::operator ()	proto/traits.hpp	/^            operator ()(T &t) const$/;"	f	struct:boost::proto::functional::as_child	access:public	signature:(T &t) const
boost::proto::functional::as_child::operator ()	proto/traits.hpp	/^            operator ()(T const &t) const$/;"	f	struct:boost::proto::functional::as_child	access:public	signature:(T const &t) const
boost::proto::functional::as_child::result	proto/traits.hpp	/^            struct result<This(T &)>$/;"	s	struct:boost::proto::functional::as_child	access:public
boost::proto::functional::as_child::result	proto/traits.hpp	/^            struct result<This(T)>$/;"	s	struct:boost::proto::functional::as_child	access:public
boost::proto::functional::as_child::result::type	proto/traits.hpp	/^                typedef typename Domain::template as_child<T>::result_type type;$/;"	t	struct:boost::proto::functional::as_child::result	access:public
boost::proto::functional::as_env	proto/transform/env.hpp	/^            struct as_env$/;"	s	namespace:boost::proto::functional
boost::proto::functional::as_env::impl	proto/transform/env.hpp	/^                struct impl$/;"	s	struct:boost::proto::functional::as_env	access:public
boost::proto::functional::as_env::impl	proto/transform/env.hpp	/^                struct impl<T, true>$/;"	s	struct:boost::proto::functional::as_env	access:public
boost::proto::functional::as_env::impl::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/transform/env.hpp	/^                    operator()(T &t BOOST_PROTO_DISABLE_IF_IS_CONST(T)) const$/;"	f	class:boost::proto::functional::as_env::impl	access:public	signature:(T) const
boost::proto::functional::as_env::impl::operator ()	proto/transform/env.hpp	/^                    operator()(T const &t) const$/;"	f	class:boost::proto::functional::as_env::impl	access:public	signature:(T const &t) const
boost::proto::functional::as_env::impl::operator ()	proto/transform/env.hpp	/^                    result_type const operator()(detail::arg<T> t) const$/;"	f	struct:boost::proto::functional::as_env::impl	access:public	signature:(detail::arg<T> t) const
boost::proto::functional::as_env::impl::operator ()	proto/transform/env.hpp	/^                    typename add_const<T>::type operator()(detail::arg<T> t) const$/;"	f	struct:boost::proto::functional::as_env::impl	access:public	signature:(detail::arg<T> t) const
boost::proto::functional::as_env::impl::result_type	proto/transform/env.hpp	/^                    typedef T result_type;$/;"	t	struct:boost::proto::functional::as_env::impl	access:public
boost::proto::functional::as_env::impl::result_type	proto/transform/env.hpp	/^                    typedef env<data_type, typename detail::value_type<T>::type> result_type;$/;"	t	struct:boost::proto::functional::as_env::impl	access:public
boost::proto::functional::as_env::result	proto/transform/env.hpp	/^                struct result<This(T)>$/;"	s	struct:boost::proto::functional::as_env	access:public
boost::proto::functional::as_env::result::type	proto/transform/env.hpp	/^                    typedef typename impl<typename detail::normalize_arg<T>::type>::result_type type;$/;"	t	struct:boost::proto::functional::as_env::result	access:public
boost::proto::functional::as_expr	proto/traits.hpp	/^        struct as_expr$/;"	s	namespace:boost::proto::functional
boost::proto::functional::as_expr::operator ()	proto/traits.hpp	/^            operator ()(T &t) const$/;"	f	struct:boost::proto::functional::as_expr	access:public	signature:(T &t) const
boost::proto::functional::as_expr::operator ()	proto/traits.hpp	/^            operator ()(T const &t) const$/;"	f	struct:boost::proto::functional::as_expr	access:public	signature:(T const &t) const
boost::proto::functional::as_expr::operator ()	proto/traits.hpp	/^            operator ()(T const (&t)[N_]) const$/;"	f	struct:boost::proto::functional::as_expr	access:public	signature:(T const (&t)[N_]) const
boost::proto::functional::as_expr::result	proto/traits.hpp	/^            struct result<This(T &)>$/;"	s	struct:boost::proto::functional::as_expr	access:public
boost::proto::functional::as_expr::result	proto/traits.hpp	/^            struct result<This(T)>$/;"	s	struct:boost::proto::functional::as_expr	access:public
boost::proto::functional::as_expr::result::type	proto/traits.hpp	/^                typedef typename Domain::template as_expr<T>::result_type type;$/;"	t	struct:boost::proto::functional::as_expr::result	access:public
boost::proto::functional::at	proto/functional/fusion/at.hpp	/^    struct at$/;"	s	namespace:boost::proto::functional
boost::proto::functional::at::operator ()	proto/functional/fusion/at.hpp	/^        operator ()(Seq &seq, N const & BOOST_PROTO_DISABLE_IF_IS_CONST(Seq)) const$/;"	f	struct:boost::proto::functional::at	access:public	signature:(Seq &seq, N const & BOOST_PROTO_DISABLE_IF_IS_CONST(Seq)) const
boost::proto::functional::at::operator ()	proto/functional/fusion/at.hpp	/^        operator ()(Seq const &seq, N const &) const$/;"	f	struct:boost::proto::functional::at	access:public	signature:(Seq const &seq, N const &) const
boost::proto::functional::at::result	proto/functional/fusion/at.hpp	/^        struct result<This(Seq, N)>$/;"	s	struct:boost::proto::functional::at	inherits:fusion::result_of::at	access:public
boost::proto::functional::begin	proto/functional/range/begin.hpp	/^    struct begin$/;"	s	namespace:boost::proto::functional
boost::proto::functional::begin::operator ()	proto/functional/range/begin.hpp	/^        typename boost::range_iterator<Rng const>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::begin	access:public	signature:(Rng const &rng) const
boost::proto::functional::begin::operator ()	proto/functional/range/begin.hpp	/^        typename boost::range_iterator<Rng>::type operator()(Rng &rng) const$/;"	f	struct:boost::proto::functional::begin	access:public	signature:(Rng &rng) const
boost::proto::functional::begin::result	proto/functional/range/begin.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::begin	inherits:boost::range_iterator	access:public
boost::proto::functional::begin::result	proto/functional/range/begin.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::begin	inherits:boost::range_iterator	access:public
boost::proto::functional::child	proto/traits.hpp	/^        struct child$/;"	s	namespace:boost::proto::functional
boost::proto::functional::child::operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::child	access:public	signature:(Expr &e) const
boost::proto::functional::child::operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::child	access:public	signature:(Expr const &e) const
boost::proto::functional::child::result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::child	access:public
boost::proto::functional::child::result::type	proto/traits.hpp	/^                typedef typename result_of::child<Expr, N>::type type;$/;"	t	struct:boost::proto::functional::child::result	access:public
boost::proto::functional::child_c	proto/traits.hpp	/^        struct child_c$/;"	s	namespace:boost::proto::functional
boost::proto::functional::child_c::operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::child_c	access:public	signature:(Expr &e) const
boost::proto::functional::child_c::operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::child_c	access:public	signature:(Expr const &e) const
boost::proto::functional::child_c::result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::child_c	access:public
boost::proto::functional::child_c::result::type	proto/traits.hpp	/^                typedef typename result_of::child_c<Expr, N>::type type;$/;"	t	struct:boost::proto::functional::child_c::result	access:public
boost::proto::functional::deep_copy	proto/deep_copy.hpp	/^        struct deep_copy$/;"	s	namespace:boost::proto::functional
boost::proto::functional::deep_copy::operator ()	proto/deep_copy.hpp	/^            operator()(Expr const &e) const$/;"	f	struct:boost::proto::functional::deep_copy	access:public	signature:(Expr const &e) const
boost::proto::functional::deep_copy::result	proto/deep_copy.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::deep_copy	access:public
boost::proto::functional::deep_copy::result::type	proto/deep_copy.hpp	/^                type;$/;"	t	struct:boost::proto::functional::deep_copy::result	access:public
boost::proto::functional::display_expr	proto/debug.hpp	/^        struct display_expr$/;"	s	namespace:boost::proto::functional
boost::proto::functional::display_expr::depth_	proto/debug.hpp	/^            int depth_;$/;"	m	struct:boost::proto::functional::display_expr	access:private
boost::proto::functional::display_expr::display_expr	proto/debug.hpp	/^            explicit display_expr(std::ostream &sout = std::cout, int depth = 0)$/;"	f	struct:boost::proto::functional::display_expr	access:public	signature:(std::ostream &sout = std::cout, int depth = 0)
boost::proto::functional::display_expr::operator ()	proto/debug.hpp	/^            void operator()(Expr const &expr) const$/;"	f	struct:boost::proto::functional::display_expr	access:public	signature:(Expr const &expr) const
boost::proto::functional::display_expr::result_type	proto/debug.hpp	/^            typedef void result_type;$/;"	t	struct:boost::proto::functional::display_expr	access:public
boost::proto::functional::display_expr::sout_	proto/debug.hpp	/^            reference_wrapper<std::ostream> sout_;$/;"	m	struct:boost::proto::functional::display_expr	access:private
boost::proto::functional::distance	proto/functional/std/iterator.hpp	/^    struct distance$/;"	s	namespace:boost::proto::functional
boost::proto::functional::distance::operator ()	proto/functional/std/iterator.hpp	/^        operator()(InputIterator first, InputIterator last) const$/;"	f	struct:boost::proto::functional::distance	access:public	signature:(InputIterator first, InputIterator last) const
boost::proto::functional::distance::result	proto/functional/std/iterator.hpp	/^        struct result<This(InputIter1, InputIter2)>$/;"	s	struct:boost::proto::functional::distance	access:public
boost::proto::functional::distance::result::type	proto/functional/std/iterator.hpp	/^            type;$/;"	t	struct:boost::proto::functional::distance::result	access:public
boost::proto::functional::empty	proto/functional/range/empty.hpp	/^    struct empty$/;"	s	namespace:boost::proto::functional
boost::proto::functional::empty::operator ()	proto/functional/range/empty.hpp	/^        bool operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::empty	access:public	signature:(Rng const &rng) const
boost::proto::functional::empty::result_type	proto/functional/range/empty.hpp	/^        typedef bool result_type;$/;"	t	struct:boost::proto::functional::empty	access:public
boost::proto::functional::end	proto/functional/range/end.hpp	/^    struct end$/;"	s	namespace:boost::proto::functional
boost::proto::functional::end::operator ()	proto/functional/range/end.hpp	/^        typename boost::range_iterator<Rng const>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::end	access:public	signature:(Rng const &rng) const
boost::proto::functional::end::operator ()	proto/functional/range/end.hpp	/^        typename boost::range_iterator<Rng>::type operator()(Rng &rng) const$/;"	f	struct:boost::proto::functional::end	access:public	signature:(Rng &rng) const
boost::proto::functional::end::result	proto/functional/range/end.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::end	inherits:boost::range_iterator	access:public
boost::proto::functional::end::result	proto/functional/range/end.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::end	inherits:boost::range_iterator	access:public
boost::proto::functional::env_var	proto/transform/env.hpp	/^            struct env_var$/;"	s	namespace:boost::proto::functional	inherits:detail::poly_function
boost::proto::functional::env_var	proto/transform/env.hpp	/^            struct env_var<data_type>$/;"	s	namespace:boost::proto::functional	inherits:detail::poly_function
boost::proto::functional::env_var::impl	proto/transform/env.hpp	/^                struct impl$/;"	s	struct:boost::proto::functional::env_var	access:public
boost::proto::functional::env_var::impl	proto/transform/env.hpp	/^                struct impl<Env, true>$/;"	s	struct:boost::proto::functional::env_var	access:public
boost::proto::functional::env_var::impl::operator ()	proto/transform/env.hpp	/^                    result_type operator()(detail::arg<Env> e) const$/;"	f	struct:boost::proto::functional::env_var::impl	access:public	signature:(detail::arg<Env> e) const
boost::proto::functional::env_var::impl::result_type	proto/transform/env.hpp	/^                    result_type;$/;"	t	struct:boost::proto::functional::env_var::impl	access:public
boost::proto::functional::env_var::impl::result_type	proto/transform/env.hpp	/^                    typedef Env result_type;$/;"	t	struct:boost::proto::functional::env_var::impl	access:public
boost::proto::functional::eval	proto/eval.hpp	/^        struct eval$/;"	s	namespace:boost::proto::functional
boost::proto::functional::eval::operator ()	proto/eval.hpp	/^            operator ()(Expr &e, Context &ctx) const$/;"	f	struct:boost::proto::functional::eval	access:public	signature:(Expr &e, Context &ctx) const
boost::proto::functional::eval::operator ()	proto/eval.hpp	/^            operator ()(Expr &e, Context const &ctx) const$/;"	f	struct:boost::proto::functional::eval	access:public	signature:(Expr &e, Context const &ctx) const
boost::proto::functional::eval::operator ()	proto/eval.hpp	/^            operator ()(Expr const &e, Context &ctx) const$/;"	f	struct:boost::proto::functional::eval	access:public	signature:(Expr const &e, Context &ctx) const
boost::proto::functional::eval::operator ()	proto/eval.hpp	/^            operator ()(Expr const &e, Context const &ctx) const$/;"	f	struct:boost::proto::functional::eval	access:public	signature:(Expr const &e, Context const &ctx) const
boost::proto::functional::eval::result	proto/eval.hpp	/^            struct result<This(Expr, Context)>$/;"	s	struct:boost::proto::functional::eval	access:public
boost::proto::functional::eval::result::type	proto/eval.hpp	/^                type;$/;"	t	struct:boost::proto::functional::eval::result	access:public
boost::proto::functional::first	proto/functional/std/utility.hpp	/^    struct first$/;"	s	namespace:boost::proto::functional
boost::proto::functional::first::Pair::operator ()	proto/functional/std/utility.hpp	/^        typename Pair::first_type const &operator()(Pair const &pair) const$/;"	f	class:boost::proto::functional::first::Pair	access:public	signature:(Pair const &pair) const
boost::proto::functional::first::operator ()	proto/functional/std/utility.hpp	/^        typename Pair::first_type &operator()(Pair &pair) const$/;"	f	struct:boost::proto::functional::first	access:public	signature:(Pair &pair) const
boost::proto::functional::first::result	proto/functional/std/utility.hpp	/^        struct result<This(Pair &)>$/;"	s	struct:boost::proto::functional::first	access:public
boost::proto::functional::first::result	proto/functional/std/utility.hpp	/^        struct result<This(Pair const &)>$/;"	s	struct:boost::proto::functional::first	access:public
boost::proto::functional::first::result	proto/functional/std/utility.hpp	/^        struct result<This(Pair)>$/;"	s	struct:boost::proto::functional::first	access:public
boost::proto::functional::first::result::Pair::type	proto/functional/std/utility.hpp	/^            typedef typename Pair::first_type const &type;$/;"	t	class:boost::proto::functional::first::result::Pair	access:public
boost::proto::functional::first::result::type	proto/functional/std/utility.hpp	/^            typedef typename Pair::first_type &type;$/;"	t	struct:boost::proto::functional::first::result	access:public
boost::proto::functional::first::result::type	proto/functional/std/utility.hpp	/^            typedef typename Pair::first_type type;$/;"	t	struct:boost::proto::functional::first::result	access:public
boost::proto::functional::flatten	proto/fusion.hpp	/^        struct flatten$/;"	s	namespace:boost::proto::functional
boost::proto::functional::flatten::proto::detail::operator ()	proto/fusion.hpp	/^            operator ()(Expr &e) const$/;"	f	class:boost::proto::functional::flatten::proto::detail	access:public	signature:(Expr &e) const
boost::proto::functional::flatten::proto::detail::operator ()	proto/fusion.hpp	/^            operator ()(Expr const &e) const$/;"	f	class:boost::proto::functional::flatten::proto::detail	access:public	signature:(Expr const &e) const
boost::proto::functional::flatten::result	proto/fusion.hpp	/^            struct result<This(Expr &)>$/;"	s	struct:boost::proto::functional::flatten	access:public
boost::proto::functional::flatten::result	proto/fusion.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::flatten	inherits:result	access:public
boost::proto::functional::flatten::result::type	proto/fusion.hpp	/^                typedef proto::detail::flat_view<Expr> type;$/;"	t	struct:boost::proto::functional::flatten::result	access:public
boost::proto::functional::has_env_var	proto/transform/env.hpp	/^            struct has_env_var$/;"	s	namespace:boost::proto::functional	inherits:detail::poly_function
boost::proto::functional::has_env_var	proto/transform/env.hpp	/^            struct has_env_var<data_type>$/;"	s	namespace:boost::proto::functional	inherits:detail::poly_function
boost::proto::functional::has_env_var::impl	proto/transform/env.hpp	/^                struct impl$/;"	s	struct:boost::proto::functional::has_env_var	access:public
boost::proto::functional::has_env_var::impl	proto/transform/env.hpp	/^                struct impl<Env, false>$/;"	s	struct:boost::proto::functional::has_env_var	access:public
boost::proto::functional::has_env_var::impl::operator ()	proto/transform/env.hpp	/^                    result_type operator()(detail::arg<Env>) const$/;"	f	struct:boost::proto::functional::has_env_var::impl	access:public	signature:(detail::arg<Env>) const
boost::proto::functional::has_env_var::impl::result_type	proto/transform/env.hpp	/^                    result_type;$/;"	t	struct:boost::proto::functional::has_env_var::impl	access:public
boost::proto::functional::has_env_var::impl::result_type	proto/transform/env.hpp	/^                    typedef mpl::false_ result_type;$/;"	t	struct:boost::proto::functional::has_env_var::impl	access:public
boost::proto::functional::has_env_var::impl::result_type	proto/transform/env.hpp	/^                    typedef mpl::true_ result_type;$/;"	t	struct:boost::proto::functional::has_env_var::impl	access:public
boost::proto::functional::left	proto/traits.hpp	/^        struct left$/;"	s	namespace:boost::proto::functional
boost::proto::functional::left::operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::left	access:public	signature:(Expr &e) const
boost::proto::functional::left::operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::left	access:public	signature:(Expr const &e) const
boost::proto::functional::left::result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::left	access:public
boost::proto::functional::left::result::type	proto/traits.hpp	/^                typedef typename result_of::left<Expr>::type type;$/;"	t	struct:boost::proto::functional::left::result	access:public
boost::proto::functional::make_address_of	proto/proto_fwd.hpp	/^        typedef make_expr<tag::address_of>          make_address_of;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::assign>              make_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_bitwise_and	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_and>         make_bitwise_and;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_bitwise_and_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_and_assign>  make_bitwise_and_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_bitwise_or	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_or>          make_bitwise_or;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_bitwise_or_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_or_assign>   make_bitwise_or_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_bitwise_xor	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_xor>         make_bitwise_xor;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_bitwise_xor_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_xor_assign>  make_bitwise_xor_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_comma	proto/proto_fwd.hpp	/^        typedef make_expr<tag::comma>               make_comma;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_complement	proto/proto_fwd.hpp	/^        typedef make_expr<tag::complement>          make_complement;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_dereference	proto/proto_fwd.hpp	/^        typedef make_expr<tag::dereference>         make_dereference;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_divides	proto/proto_fwd.hpp	/^        typedef make_expr<tag::divides>             make_divides;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_divides_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::divides_assign>      make_divides_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_equal_to	proto/proto_fwd.hpp	/^        typedef make_expr<tag::equal_to>            make_equal_to;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_expr	proto/make_expr.hpp	/^        struct make_expr$/;"	s	namespace:boost::proto::functional
boost::proto::functional::make_expr::impl	proto/make_expr.hpp	/^            struct impl$/;"	s	struct:boost::proto::functional::make_expr	inherits:detail::make_expr_	access:public
boost::proto::functional::make_expr::result	proto/make_expr.hpp	/^            struct result<This(A0)>$/;"	s	struct:boost::proto::functional::make_expr	access:public
boost::proto::functional::make_expr::result::type	proto/make_expr.hpp	/^                type;$/;"	t	struct:boost::proto::functional::make_expr::result	access:public
boost::proto::functional::make_expr::result_of::make_expr::operator ()	proto/make_expr.hpp	/^            operator ()(A0 const &a0) const$/;"	f	class:boost::proto::functional::make_expr::result_of::make_expr	access:public	signature:(A0 const &a0) const
boost::proto::functional::make_function	proto/proto_fwd.hpp	/^        typedef make_expr<tag::function>            make_function;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_greater	proto/proto_fwd.hpp	/^        typedef make_expr<tag::greater>             make_greater;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_greater_equal	proto/proto_fwd.hpp	/^        typedef make_expr<tag::greater_equal>       make_greater_equal;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_if_else	proto/proto_fwd.hpp	/^        typedef make_expr<tag::if_else_>            make_if_else;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_less	proto/proto_fwd.hpp	/^        typedef make_expr<tag::less>                make_less;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_less_equal	proto/proto_fwd.hpp	/^        typedef make_expr<tag::less_equal>          make_less_equal;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_logical_and	proto/proto_fwd.hpp	/^        typedef make_expr<tag::logical_and>         make_logical_and;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_logical_not	proto/proto_fwd.hpp	/^        typedef make_expr<tag::logical_not>         make_logical_not;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_logical_or	proto/proto_fwd.hpp	/^        typedef make_expr<tag::logical_or>          make_logical_or;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_mem_ptr	proto/proto_fwd.hpp	/^        typedef make_expr<tag::mem_ptr>             make_mem_ptr;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_minus	proto/proto_fwd.hpp	/^        typedef make_expr<tag::minus>               make_minus;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_minus_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::minus_assign>        make_minus_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_modulus	proto/proto_fwd.hpp	/^        typedef make_expr<tag::modulus>             make_modulus;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_modulus_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::modulus_assign>      make_modulus_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_multiplies	proto/proto_fwd.hpp	/^        typedef make_expr<tag::multiplies>          make_multiplies;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_multiplies_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::multiplies_assign>   make_multiplies_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_negate	proto/proto_fwd.hpp	/^        typedef make_expr<tag::negate>              make_negate;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_not_equal_to	proto/proto_fwd.hpp	/^        typedef make_expr<tag::not_equal_to>        make_not_equal_to;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_pair	proto/functional/std/utility.hpp	/^    struct make_pair$/;"	s	namespace:boost::proto::functional
boost::proto::functional::make_pair::operator ()	proto/functional/std/utility.hpp	/^        std::pair<First, Second> operator()(First const &first, Second const &second) const$/;"	f	struct:boost::proto::functional::make_pair	access:public	signature:(First const &first, Second const &second) const
boost::proto::functional::make_pair::result	proto/functional/std/utility.hpp	/^        struct result<This(First, Second)>$/;"	s	struct:boost::proto::functional::make_pair	access:public
boost::proto::functional::make_pair::result::type	proto/functional/std/utility.hpp	/^            type;$/;"	t	struct:boost::proto::functional::make_pair::result	access:public
boost::proto::functional::make_plus	proto/proto_fwd.hpp	/^        typedef make_expr<tag::plus>                make_plus;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_plus_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::plus_assign>         make_plus_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_post_dec	proto/proto_fwd.hpp	/^        typedef make_expr<tag::post_dec>            make_post_dec;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_post_inc	proto/proto_fwd.hpp	/^        typedef make_expr<tag::post_inc>            make_post_inc;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_pre_dec	proto/proto_fwd.hpp	/^        typedef make_expr<tag::pre_dec>             make_pre_dec;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_pre_inc	proto/proto_fwd.hpp	/^        typedef make_expr<tag::pre_inc>             make_pre_inc;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_shift_left	proto/proto_fwd.hpp	/^        typedef make_expr<tag::shift_left>          make_shift_left;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_shift_left_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::shift_left_assign>   make_shift_left_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_shift_right	proto/proto_fwd.hpp	/^        typedef make_expr<tag::shift_right>         make_shift_right;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_shift_right_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::shift_right_assign>  make_shift_right_assign;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_subscript	proto/proto_fwd.hpp	/^        typedef make_expr<tag::subscript>           make_subscript;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_terminal	proto/proto_fwd.hpp	/^        typedef make_expr<tag::terminal>            make_terminal;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::make_unary_plus	proto/proto_fwd.hpp	/^        typedef make_expr<tag::unary_plus>          make_unary_plus;$/;"	t	namespace:boost::proto::functional
boost::proto::functional::next	proto/functional/std/iterator.hpp	/^    struct next$/;"	s	namespace:boost::proto::functional
boost::proto::functional::next::operator ()	proto/functional/std/iterator.hpp	/^        ForwardIterator operator()($/;"	f	struct:boost::proto::functional::next	access:public	signature:( ForwardIterator x , typename std::iterator_traits<ForwardIterator>::difference_type n ) const
boost::proto::functional::next::operator ()	proto/functional/std/iterator.hpp	/^        ForwardIterator operator()(ForwardIterator x) const$/;"	f	struct:boost::proto::functional::next	access:public	signature:(ForwardIterator x) const
boost::proto::functional::next::result	proto/functional/std/iterator.hpp	/^        struct result<This(ForwardIterator)>$/;"	s	struct:boost::proto::functional::next	access:public
boost::proto::functional::next::result	proto/functional/std/iterator.hpp	/^        struct result<This(ForwardIterator, Distance)>$/;"	s	struct:boost::proto::functional::next	access:public
boost::proto::functional::next::result::type	proto/functional/std/iterator.hpp	/^            type;$/;"	t	struct:boost::proto::functional::next::result	access:public
boost::proto::functional::pop_back	proto/functional/fusion/pop_back.hpp	/^    struct pop_back$/;"	s	namespace:boost::proto::functional
boost::proto::functional::pop_back::operator ()	proto/functional/fusion/pop_back.hpp	/^        operator ()(Seq &seq) const$/;"	f	struct:boost::proto::functional::pop_back	access:public	signature:(Seq &seq) const
boost::proto::functional::pop_back::operator ()	proto/functional/fusion/pop_back.hpp	/^        operator ()(Seq const &seq) const$/;"	f	struct:boost::proto::functional::pop_back	access:public	signature:(Seq const &seq) const
boost::proto::functional::pop_back::result	proto/functional/fusion/pop_back.hpp	/^        struct result<This(Seq &)>$/;"	s	struct:boost::proto::functional::pop_back	inherits:fusion::result_of::pop_back	access:public
boost::proto::functional::pop_back::result	proto/functional/fusion/pop_back.hpp	/^        struct result<This(Seq)>$/;"	s	struct:boost::proto::functional::pop_back	inherits:result	access:public
boost::proto::functional::pop_front	proto/functional/fusion/pop_front.hpp	/^    struct pop_front$/;"	s	namespace:boost::proto::functional
boost::proto::functional::pop_front::operator ()	proto/functional/fusion/pop_front.hpp	/^        operator ()(Seq &seq) const$/;"	f	struct:boost::proto::functional::pop_front	access:public	signature:(Seq &seq) const
boost::proto::functional::pop_front::operator ()	proto/functional/fusion/pop_front.hpp	/^        operator ()(Seq const &seq) const$/;"	f	struct:boost::proto::functional::pop_front	access:public	signature:(Seq const &seq) const
boost::proto::functional::pop_front::result	proto/functional/fusion/pop_front.hpp	/^        struct result<This(Seq &)>$/;"	s	struct:boost::proto::functional::pop_front	inherits:fusion::result_of::pop_front	access:public
boost::proto::functional::pop_front::result	proto/functional/fusion/pop_front.hpp	/^        struct result<This(Seq)>$/;"	s	struct:boost::proto::functional::pop_front	inherits:result	access:public
boost::proto::functional::prior	proto/functional/std/iterator.hpp	/^    struct prior$/;"	s	namespace:boost::proto::functional
boost::proto::functional::prior::operator ()	proto/functional/std/iterator.hpp	/^        BidirectionalIterator operator()($/;"	f	struct:boost::proto::functional::prior	access:public	signature:( BidirectionalIterator x , typename std::iterator_traits<BidirectionalIterator>::difference_type n ) const
boost::proto::functional::prior::operator ()	proto/functional/std/iterator.hpp	/^        BidirectionalIterator operator()(BidirectionalIterator x) const$/;"	f	struct:boost::proto::functional::prior	access:public	signature:(BidirectionalIterator x) const
boost::proto::functional::prior::result	proto/functional/std/iterator.hpp	/^        struct result<This(BidirectionalIterator)>$/;"	s	struct:boost::proto::functional::prior	access:public
boost::proto::functional::prior::result	proto/functional/std/iterator.hpp	/^        struct result<This(BidirectionalIterator, Distance)>$/;"	s	struct:boost::proto::functional::prior	access:public
boost::proto::functional::prior::result::type	proto/functional/std/iterator.hpp	/^            type;$/;"	t	struct:boost::proto::functional::prior::result	access:public
boost::proto::functional::push_back	proto/functional/fusion/push_back.hpp	/^    struct push_back$/;"	s	namespace:boost::proto::functional
boost::proto::functional::push_back::operator ()	proto/functional/fusion/push_back.hpp	/^        operator ()(Seq const &seq, T const &t) const$/;"	f	struct:boost::proto::functional::push_back	access:public	signature:(Seq const &seq, T const &t) const
boost::proto::functional::push_back::result	proto/functional/fusion/push_back.hpp	/^        struct result<This(Seq, T)>$/;"	s	struct:boost::proto::functional::push_back	inherits:fusion::result_of::push_back	access:public
boost::proto::functional::push_front	proto/functional/fusion/push_front.hpp	/^    struct push_front$/;"	s	namespace:boost::proto::functional
boost::proto::functional::push_front::operator ()	proto/functional/fusion/push_front.hpp	/^        operator ()(Seq const &seq, T const &t) const$/;"	f	struct:boost::proto::functional::push_front	access:public	signature:(Seq const &seq, T const &t) const
boost::proto::functional::push_front::result	proto/functional/fusion/push_front.hpp	/^        struct result<This(Seq, T)>$/;"	s	struct:boost::proto::functional::push_front	inherits:fusion::result_of::push_front	access:public
boost::proto::functional::rbegin	proto/functional/range/rbegin.hpp	/^    struct rbegin$/;"	s	namespace:boost::proto::functional
boost::proto::functional::rbegin::operator ()	proto/functional/range/rbegin.hpp	/^        typename boost::range_reverse_iterator<Rng const>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::rbegin	access:public	signature:(Rng const &rng) const
boost::proto::functional::rbegin::operator ()	proto/functional/range/rbegin.hpp	/^        typename boost::range_reverse_iterator<Rng>::type operator()(Rng &rng) const$/;"	f	struct:boost::proto::functional::rbegin	access:public	signature:(Rng &rng) const
boost::proto::functional::rbegin::result	proto/functional/range/rbegin.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::rbegin	inherits:boost::range_reverse_iterator	access:public
boost::proto::functional::rbegin::result	proto/functional/range/rbegin.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::rbegin	inherits:boost::range_reverse_iterator	access:public
boost::proto::functional::rend	proto/functional/range/rend.hpp	/^    struct rend$/;"	s	namespace:boost::proto::functional
boost::proto::functional::rend::operator ()	proto/functional/range/rend.hpp	/^        typename boost::range_reverse_iterator<Rng const>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::rend	access:public	signature:(Rng const &rng) const
boost::proto::functional::rend::operator ()	proto/functional/range/rend.hpp	/^        typename boost::range_reverse_iterator<Rng>::type operator()(Rng &rng) const$/;"	f	struct:boost::proto::functional::rend	access:public	signature:(Rng &rng) const
boost::proto::functional::rend::result	proto/functional/range/rend.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::rend	inherits:boost::range_reverse_iterator	access:public
boost::proto::functional::rend::result	proto/functional/range/rend.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::rend	inherits:boost::range_reverse_iterator	access:public
boost::proto::functional::reverse	proto/functional/fusion/reverse.hpp	/^    struct reverse$/;"	s	namespace:boost::proto::functional
boost::proto::functional::reverse::operator ()	proto/functional/fusion/reverse.hpp	/^        operator ()(Seq &seq) const$/;"	f	struct:boost::proto::functional::reverse	access:public	signature:(Seq &seq) const
boost::proto::functional::reverse::operator ()	proto/functional/fusion/reverse.hpp	/^        operator ()(Seq const &seq) const$/;"	f	struct:boost::proto::functional::reverse	access:public	signature:(Seq const &seq) const
boost::proto::functional::reverse::result	proto/functional/fusion/reverse.hpp	/^        struct result<This(Seq &)>$/;"	s	struct:boost::proto::functional::reverse	inherits:fusion::result_of::reverse	access:public
boost::proto::functional::reverse::result	proto/functional/fusion/reverse.hpp	/^        struct result<This(Seq)>$/;"	s	struct:boost::proto::functional::reverse	inherits:result	access:public
boost::proto::functional::right	proto/traits.hpp	/^        struct right$/;"	s	namespace:boost::proto::functional
boost::proto::functional::right::operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::right	access:public	signature:(Expr &e) const
boost::proto::functional::right::operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::right	access:public	signature:(Expr const &e) const
boost::proto::functional::right::result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::right	access:public
boost::proto::functional::right::result::type	proto/traits.hpp	/^                typedef typename result_of::right<Expr>::type type;$/;"	t	struct:boost::proto::functional::right::result	access:public
boost::proto::functional::second	proto/functional/std/utility.hpp	/^    struct second$/;"	s	namespace:boost::proto::functional
boost::proto::functional::second::Pair::operator ()	proto/functional/std/utility.hpp	/^        typename Pair::second_type const &operator()(Pair const &pair) const$/;"	f	class:boost::proto::functional::second::Pair	access:public	signature:(Pair const &pair) const
boost::proto::functional::second::operator ()	proto/functional/std/utility.hpp	/^        typename Pair::second_type &operator()(Pair &pair) const$/;"	f	struct:boost::proto::functional::second	access:public	signature:(Pair &pair) const
boost::proto::functional::second::result	proto/functional/std/utility.hpp	/^        struct result<This(Pair &)>$/;"	s	struct:boost::proto::functional::second	access:public
boost::proto::functional::second::result	proto/functional/std/utility.hpp	/^        struct result<This(Pair const &)>$/;"	s	struct:boost::proto::functional::second	access:public
boost::proto::functional::second::result	proto/functional/std/utility.hpp	/^        struct result<This(Pair)>$/;"	s	struct:boost::proto::functional::second	access:public
boost::proto::functional::second::result::Pair::type	proto/functional/std/utility.hpp	/^            typedef typename Pair::second_type const &type;$/;"	t	class:boost::proto::functional::second::result::Pair	access:public
boost::proto::functional::second::result::type	proto/functional/std/utility.hpp	/^            typedef typename Pair::second_type &type;$/;"	t	struct:boost::proto::functional::second::result	access:public
boost::proto::functional::second::result::type	proto/functional/std/utility.hpp	/^            typedef typename Pair::second_type type;$/;"	t	struct:boost::proto::functional::second::result	access:public
boost::proto::functional::size	proto/functional/range/size.hpp	/^    struct size$/;"	s	namespace:boost::proto::functional
boost::proto::functional::size::operator ()	proto/functional/range/size.hpp	/^        typename boost::range_size<Rng>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::size	access:public	signature:(Rng const &rng) const
boost::proto::functional::size::result	proto/functional/range/size.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::size	inherits:boost::range_size	access:public
boost::proto::functional::size::result	proto/functional/range/size.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::size	inherits:boost::range_size	access:public
boost::proto::functional::unpack_expr	proto/make_expr.hpp	/^        struct unpack_expr$/;"	s	namespace:boost::proto::functional
boost::proto::functional::unpack_expr::result	proto/make_expr.hpp	/^            struct result<This(Sequence)>$/;"	s	struct:boost::proto::functional::unpack_expr	access:public
boost::proto::functional::unpack_expr::result::type	proto/make_expr.hpp	/^                type;$/;"	t	struct:boost::proto::functional::unpack_expr::result	access:public
boost::proto::functional::unpack_expr::result_of::unpack_expr::operator ()	proto/make_expr.hpp	/^            operator ()(Sequence const &sequence) const$/;"	f	class:boost::proto::functional::unpack_expr::result_of::unpack_expr	access:public	signature:(Sequence const &sequence) const
boost::proto::functional::value	proto/traits.hpp	/^        struct value$/;"	s	namespace:boost::proto::functional
boost::proto::functional::value::operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::value	access:public	signature:(Expr &e) const
boost::proto::functional::value::operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::value	access:public	signature:(Expr const &e) const
boost::proto::functional::value::result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::value	access:public
boost::proto::functional::value::result::type	proto/traits.hpp	/^                typedef typename result_of::value<Expr>::type type;$/;"	t	struct:boost::proto::functional::value::result	access:public
boost::proto::generator	proto/generate.hpp	/^    struct generator$/;"	s	namespace:boost::proto
boost::proto::generator::operator ()	proto/generate.hpp	/^        Extends<Expr> operator ()(Expr const &e) const$/;"	f	struct:boost::proto::generator	access:public	signature:(Expr const &e) const
boost::proto::generator::result	proto/generate.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::generator	access:public
boost::proto::generator::result	proto/generate.hpp	/^        struct result<This(Expr const &)>$/;"	s	struct:boost::proto::generator	access:public
boost::proto::generator::result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::generator	access:public
boost::proto::generator::result::type	proto/generate.hpp	/^            typedef Extends<Expr> type;$/;"	t	struct:boost::proto::generator::result	access:public
boost::proto::has_env_var	proto/transform/env.hpp	/^        typename proto::result_of::has_env_var<Env const &, Key>::type has_env_var(Env const &e)$/;"	f	namespace:boost::proto	signature:(Env const &e)
boost::proto::hidden_detail_	proto/debug.hpp	/^    namespace hidden_detail_$/;"	n	namespace:boost::proto
boost::proto::hidden_detail_::named_any	proto/debug.hpp	/^        struct named_any$/;"	s	namespace:boost::proto::hidden_detail_
boost::proto::hidden_detail_::named_any::name_	proto/debug.hpp	/^            char const *name_;$/;"	m	struct:boost::proto::hidden_detail_::named_any	access:public
boost::proto::hidden_detail_::named_any::named_any	proto/debug.hpp	/^            named_any(T const &)$/;"	f	struct:boost::proto::hidden_detail_::named_any	access:public	signature:(T const &)
boost::proto::hidden_detail_::operator <<	proto/debug.hpp	/^        inline std::ostream &operator <<(ostream_wrapper sout_wrap, named_any t)$/;"	f	namespace:boost::proto::hidden_detail_	signature:(ostream_wrapper sout_wrap, named_any t)
boost::proto::hidden_detail_::ostream_wrapper	proto/debug.hpp	/^        struct ostream_wrapper$/;"	s	namespace:boost::proto::hidden_detail_
boost::proto::hidden_detail_::ostream_wrapper::operator =	proto/debug.hpp	/^            ostream_wrapper &operator =(ostream_wrapper const &);$/;"	p	struct:boost::proto::hidden_detail_::ostream_wrapper	access:private	signature:(ostream_wrapper const &)
boost::proto::hidden_detail_::ostream_wrapper::ostream_wrapper	proto/debug.hpp	/^            ostream_wrapper(std::ostream &sout)$/;"	f	struct:boost::proto::hidden_detail_::ostream_wrapper	access:public	signature:(std::ostream &sout)
boost::proto::hidden_detail_::ostream_wrapper::sout_	proto/debug.hpp	/^            std::ostream &sout_;$/;"	m	struct:boost::proto::hidden_detail_::ostream_wrapper	access:public
boost::proto::if_	proto/matches.hpp	/^    struct if_ : transform<if_<If, Then, Else> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::if_::impl	proto/matches.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::if_	inherits:transform_impl	access:public
boost::proto::if_::impl::condition	proto/matches.hpp	/^            condition;$/;"	t	struct:boost::proto::if_::impl	access:public
boost::proto::if_::impl::operator ()	proto/matches.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::if_::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
boost::proto::if_::impl::result_type	proto/matches.hpp	/^            typedef typename which::template impl<Expr, State, Data>::result_type result_type;$/;"	t	struct:boost::proto::if_::impl	access:public
boost::proto::if_::impl::which	proto/matches.hpp	/^            which;$/;"	t	struct:boost::proto::if_::impl	access:public
boost::proto::if_::proto_grammar	proto/matches.hpp	/^        typedef if_ proto_grammar;$/;"	t	struct:boost::proto::if_	access:public
boost::proto::if_else_	proto/traits.hpp	/^    struct if_else_$/;"	s	namespace:boost::proto	inherits:proto::transform
boost::proto::if_else_::impl	proto/traits.hpp	/^        struct impl$/;"	s	struct:boost::proto::if_else_	inherits:detail::pass_through_impl	access:public
boost::proto::if_else_::proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::if_else_	access:public
boost::proto::if_else_::proto_child1	proto/traits.hpp	/^        typedef U proto_child1;$/;"	t	struct:boost::proto::if_else_	access:public
boost::proto::if_else_::proto_child2	proto/traits.hpp	/^        typedef V proto_child2;$/;"	t	struct:boost::proto::if_else_	access:public
boost::proto::if_else_::proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<proto::tag::if_else_, list3<T, U, V>, 3> proto_grammar;$/;"	t	struct:boost::proto::if_else_	access:public
boost::proto::if_else_::proto_tag	proto/traits.hpp	/^        typedef proto::tag::if_else_ proto_tag;$/;"	t	struct:boost::proto::if_else_	access:public
boost::proto::if_else_::type	proto/traits.hpp	/^        typedef proto::expr<proto::tag::if_else_, list3<T, U, V>, 3> type;$/;"	t	struct:boost::proto::if_else_	access:public
boost::proto::int_	proto/transform/integral_c.hpp	/^    struct int_$/;"	s	namespace:boost::proto	inherits:integral_c
boost::proto::integral_c	proto/transform/integral_c.hpp	/^    struct integral_c : transform<integral_c<T, I> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::integral_c::impl	proto/transform/integral_c.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::integral_c	inherits:transform_impl	access:public
boost::proto::integral_c::impl::operator ()	proto/transform/integral_c.hpp	/^            T operator()($/;"	f	struct:boost::proto::integral_c::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param ) const
boost::proto::integral_c::impl::result_type	proto/transform/integral_c.hpp	/^            typedef T result_type;$/;"	t	struct:boost::proto::integral_c::impl	access:public
boost::proto::is_aggregate	proto/traits.hpp	/^    struct is_aggregate$/;"	s	namespace:boost::proto	inherits:proto::detail::is_aggregate_
boost::proto::is_callable	proto/fusion.hpp	/^    struct is_callable<eval_fun<Context> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/generate.hpp	/^    struct is_callable<by_value_generator>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/generate.hpp	/^    struct is_callable<compose_generators<First, Second> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/generate.hpp	/^    struct is_callable<default_generator>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/generate.hpp	/^    struct is_callable<generator<Extends> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/generate.hpp	/^    struct is_callable<pod_generator<Extends> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/make_expr.hpp	/^    struct is_callable<functional::make_expr<Tag, Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/make_expr.hpp	/^    struct is_callable<functional::unpack_expr<Tag, Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/matches.hpp	/^    struct is_callable<and_<BOOST_PROTO_LOGICAL_G> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/matches.hpp	/^    struct is_callable<if_<If, Then, Else> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/matches.hpp	/^    struct is_callable<not_<Grammar> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/matches.hpp	/^    struct is_callable<or_<BOOST_PROTO_LOGICAL_G> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/matches.hpp	/^    struct is_callable<switch_<Cases, Transform> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/matches.hpp	/^    struct is_callable<vararg<Grammar> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable$/;"	s	namespace:boost::proto	inherits:proto::detail::is_callable_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable<functional::as_child<Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable<functional::as_expr<Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable<functional::child<N> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable<functional::child_c<N> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable<proto::_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable<proto::basic_expr<Tag, Args, N> >$/;"	s	namespace:boost::proto	inherits:mpl::false_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable<proto::callable>$/;"	s	namespace:boost::proto	inherits:mpl::false_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable<proto::expr<Tag, Args, N> >$/;"	s	namespace:boost::proto	inherits:mpl::false_
boost::proto::is_callable	proto/traits.hpp	/^    struct is_callable<proto::transform<PrimitiveTransform, X> >$/;"	s	namespace:boost::proto	inherits:mpl::false_
boost::proto::is_callable	proto/transform/arg.hpp	/^    struct is_callable<_byref>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/arg.hpp	/^    struct is_callable<_byval>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/arg.hpp	/^    struct is_callable<_child_c<N> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/arg.hpp	/^    struct is_callable<_data>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/arg.hpp	/^    struct is_callable<_expr>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/arg.hpp	/^    struct is_callable<_state>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/arg.hpp	/^    struct is_callable<_value>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/call.hpp	/^    struct is_callable<call<Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/default.hpp	/^    struct is_callable<_default<Grammar> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/env.hpp	/^        struct is_callable<_env_var<Key> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/env.hpp	/^        struct is_callable<functional::env_var<Key> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/env.hpp	/^        struct is_callable<functional::has_env_var<Key> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/fold.hpp	/^    struct is_callable<fold<Sequence, State, Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/fold.hpp	/^    struct is_callable<reverse_fold<Sequence, State, Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/fold_tree.hpp	/^    struct is_callable<fold_tree<Sequence, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/fold_tree.hpp	/^    struct is_callable<reverse_fold_tree<Sequence, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<char_<I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<int_<I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<integral_c<T, I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<long_<I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<size_t<I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/lazy.hpp	/^    struct is_callable<lazy<Object> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/make.hpp	/^    struct is_callable<make<Object> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/make.hpp	/^    struct is_callable<protect<PrimitiveTransform> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/pass_through.hpp	/^    struct is_callable<pass_through<Grammar, Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_callable	proto/transform/when.hpp	/^    struct is_callable<when<Grammar, Transform> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_domain	proto/domain.hpp	/^    struct is_domain$/;"	s	namespace:boost::proto	inherits:mpl::false_
boost::proto::is_domain	proto/domain.hpp	/^    struct is_domain<T, typename T::proto_is_domain_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_env	proto/transform/impl.hpp	/^    struct is_env$/;"	s	namespace:boost::proto	inherits:mpl::false_
boost::proto::is_env	proto/transform/impl.hpp	/^    struct is_env<T &, void>$/;"	s	namespace:boost::proto	inherits:is_env
boost::proto::is_env	proto/transform/impl.hpp	/^    struct is_env<T, typename T::proto_environment_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_expr	proto/traits.hpp	/^    struct is_expr$/;"	s	namespace:boost::proto	inherits:mpl::false_
boost::proto::is_expr	proto/traits.hpp	/^    struct is_expr<T &, void>$/;"	s	namespace:boost::proto	inherits:is_expr
boost::proto::is_expr	proto/traits.hpp	/^    struct is_expr<T, typename T::proto_is_expr_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_extension	proto/operators.hpp	/^    struct is_extension$/;"	s	namespace:boost::proto	inherits:is_expr
boost::proto::is_extension	proto/operators.hpp	/^    struct is_extension<T &>$/;"	s	namespace:boost::proto	inherits:is_expr
boost::proto::is_sub_domain_of	proto/domain.hpp	/^    struct is_sub_domain_of$/;"	s	namespace:boost::proto	inherits:is_sub_domain_of
boost::proto::is_sub_domain_of	proto/domain.hpp	/^    struct is_sub_domain_of<SuperDomain, SuperDomain>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::is_sub_domain_of	proto/domain.hpp	/^    struct is_sub_domain_of<proto::no_super_domain, SuperDomain>$/;"	s	namespace:boost::proto	inherits:mpl::false_
boost::proto::is_transform	proto/traits.hpp	/^    struct is_transform$/;"	s	namespace:boost::proto	inherits:proto::detail::is_transform_
boost::proto::lazy	proto/transform/lazy.hpp	/^    struct lazy : transform<lazy<Object> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::lazy	proto/transform/lazy.hpp	/^    struct lazy<detail::msvc_fun_workaround<Fun> >$/;"	s	namespace:boost::proto	inherits:lazy
boost::proto::lazy::impl	proto/transform/lazy.hpp	/^        struct impl$/;"	s	struct:boost::proto::lazy	inherits:call::,impl	access:public
boost::proto::lazy_disable_if::make_expr	proto/make_expr.hpp	/^    make_expr(A0 const &a0)$/;"	f	class:boost::proto::lazy_disable_if	signature:(A0 const &a0)
boost::proto::lazy_disable_if::unpack_expr	proto/make_expr.hpp	/^    unpack_expr(Sequence const &sequence)$/;"	f	class:boost::proto::lazy_disable_if	signature:(Sequence const &sequence)
boost::proto::left	proto/traits.hpp	/^    left(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
boost::proto::lit	proto/literal.hpp	/^    inline literal<T &> const lit(T &t)$/;"	f	namespace:boost::proto	signature:(T &t)
boost::proto::lit	proto/literal.hpp	/^    inline literal<T const &> const lit(T const &t)$/;"	f	namespace:boost::proto	signature:(T const &t)
boost::proto::long_	proto/transform/integral_c.hpp	/^    struct long_$/;"	s	namespace:boost::proto	inherits:integral_c
boost::proto::make	proto/transform/make.hpp	/^    struct make : transform<make<Object> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::make	proto/transform/make.hpp	/^    struct make<detail::msvc_fun_workaround<Fun> >$/;"	s	namespace:boost::proto	inherits:make
boost::proto::make::impl	proto/transform/make.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::make	inherits:transform_impl	access:public
boost::proto::make::impl::operator ()	proto/transform/make.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::make::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param ) const
boost::proto::make::impl::result_type	proto/transform/make.hpp	/^            typedef typename detail::make_if_<Object, Expr, State, Data>::type result_type;$/;"	t	struct:boost::proto::make::impl	access:public
boost::proto::matches	proto/matches.hpp	/^    struct matches$/;"	s	namespace:boost::proto	inherits:detail::matches_
boost::proto::matches	proto/matches.hpp	/^    struct matches<Expr &, Grammar>$/;"	s	namespace:boost::proto	inherits:detail::matches_
boost::proto::not_	proto/matches.hpp	/^    struct not_ : transform<not_<Grammar> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::not_::impl	proto/matches.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::not_	inherits:transform_impl	access:public
boost::proto::not_::impl::operator ()	proto/matches.hpp	/^            operator()($/;"	f	struct:boost::proto::not_::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
boost::proto::not_::impl::result_type	proto/matches.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::not_::impl	access:public
boost::proto::not_::proto_grammar	proto/matches.hpp	/^        typedef not_ proto_grammar;$/;"	t	struct:boost::proto::not_	access:public
boost::proto::nullary_expr	proto/traits.hpp	/^    struct nullary_expr$/;"	s	namespace:boost::proto	inherits:proto::transform
boost::proto::nullary_expr::impl	proto/traits.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::nullary_expr	inherits:transform_impl	access:public
boost::proto::nullary_expr::impl::operator ()	proto/traits.hpp	/^            operator ()($/;"	f	struct:boost::proto::nullary_expr::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
boost::proto::nullary_expr::impl::result_type	proto/traits.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::nullary_expr::impl	access:public
boost::proto::nullary_expr::proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::nullary_expr	access:public
boost::proto::nullary_expr::proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<Tag, term<T>, 0> proto_grammar;$/;"	t	struct:boost::proto::nullary_expr	access:public
boost::proto::nullary_expr::proto_tag	proto/traits.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:boost::proto::nullary_expr	access:public
boost::proto::nullary_expr::type	proto/traits.hpp	/^        typedef proto::expr<Tag, term<T>, 0> type;$/;"	t	struct:boost::proto::nullary_expr	access:public
boost::proto::or_	proto/matches.hpp	/^    struct or_ : transform<or_<BOOST_PROTO_LOGICAL_G> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::or_::impl	proto/matches.hpp	/^        struct impl$/;"	s	struct:boost::proto::or_	inherits:detail::matches_::which::,impl	access:public
boost::proto::or_::impl	proto/matches.hpp	/^        struct impl<Expr &, State, Data>$/;"	s	struct:boost::proto::or_	inherits:detail::matches_::which::,impl	access:public
boost::proto::or_::proto_grammar	proto/matches.hpp	/^        typedef or_ proto_grammar;$/;"	t	struct:boost::proto::or_	access:public
boost::proto::otherwise	proto/transform/when.hpp	/^    struct otherwise$/;"	s	namespace:boost::proto	inherits:when
boost::proto::pass_through	proto/transform/pass_through.hpp	/^    struct pass_through$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::pass_through::impl	proto/transform/pass_through.hpp	/^        struct impl$/;"	s	struct:boost::proto::pass_through	inherits:detail::pass_through_impl	access:public
boost::proto::pod_generator	proto/generate.hpp	/^    struct pod_generator$/;"	s	namespace:boost::proto
boost::proto::pod_generator::operator ()	proto/generate.hpp	/^        Extends<Expr> operator ()(Expr const &e) const$/;"	f	struct:boost::proto::pod_generator	access:public	signature:(Expr const &e) const
boost::proto::pod_generator::operator ()	proto/generate.hpp	/^        Extends<basic_expr<tag::terminal, proto::term<Member Class::*> > > operator ()(basic_expr<tag::terminal, proto::term<Member Class::*> > const &e) const$/;"	f	struct:boost::proto::pod_generator	access:public	signature:(basic_expr<tag::terminal, proto::term<Member Class::*> > const &e) const
boost::proto::pod_generator::operator ()	proto/generate.hpp	/^        Extends<expr<tag::terminal, proto::term<Member Class::*> > > operator ()(expr<tag::terminal, proto::term<Member Class::*> > const &e) const$/;"	f	struct:boost::proto::pod_generator	access:public	signature:(expr<tag::terminal, proto::term<Member Class::*> > const &e) const
boost::proto::pod_generator::result	proto/generate.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::pod_generator	access:public
boost::proto::pod_generator::result	proto/generate.hpp	/^        struct result<This(Expr const &)>$/;"	s	struct:boost::proto::pod_generator	access:public
boost::proto::pod_generator::result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::pod_generator	access:public
boost::proto::pod_generator::result::type	proto/generate.hpp	/^            typedef Extends<Expr> type;$/;"	t	struct:boost::proto::pod_generator::result	access:public
boost::proto::protect	proto/transform/make.hpp	/^    struct protect : transform<protect<PrimitiveTransform> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::protect::impl	proto/transform/make.hpp	/^        struct impl$/;"	s	struct:boost::proto::protect	access:public
boost::proto::protect::impl::result_type	proto/transform/make.hpp	/^            typedef PrimitiveTransform result_type;$/;"	t	struct:boost::proto::protect::impl	access:public
boost::proto::proto::detail::flatten	proto/fusion.hpp	/^    flatten(Expr &e)$/;"	f	class:boost::proto::proto::detail	signature:(Expr &e)
boost::proto::proto::detail::flatten	proto/fusion.hpp	/^    flatten(Expr const &e)$/;"	f	class:boost::proto::proto::detail	signature:(Expr const &e)
boost::proto::proto::result_of::as_env::BOOST_PROTO_DISABLE_IF_IS_CONST	proto/transform/env.hpp	/^        typename proto::result_of::as_env<T &>::type const as_env(T &t BOOST_PROTO_DISABLE_IF_IS_CONST(T))$/;"	f	class:boost::proto::proto::result_of::as_env	signature:(T)
boost::proto::proto::result_of::as_env::as_env	proto/transform/env.hpp	/^        typename proto::result_of::as_env<T const &>::type const as_env(T const &t)$/;"	f	class:boost::proto::proto::result_of::as_env	signature:(T const &t)
boost::proto::result_of	proto/deep_copy.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
boost::proto::result_of	proto/eval.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
boost::proto::result_of	proto/expr.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
boost::proto::result_of	proto/fusion.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
boost::proto::result_of	proto/make_expr.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
boost::proto::result_of	proto/proto_fwd.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
boost::proto::result_of	proto/traits.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
boost::proto::result_of	proto/transform/env.hpp	/^        namespace result_of$/;"	n	namespace:boost::proto
boost::proto::result_of::as_child	proto/traits.hpp	/^        struct as_child$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::as_child::type	proto/traits.hpp	/^            typedef typename Domain::template as_child<T>::result_type type;$/;"	t	struct:boost::proto::result_of::as_child	access:public
boost::proto::result_of::as_env	proto/transform/env.hpp	/^            struct as_env$/;"	s	namespace:boost::proto::result_of	inherits:BOOST_PROTO_RESULT_OF
boost::proto::result_of::as_expr	proto/traits.hpp	/^        struct as_expr$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::as_expr::type	proto/traits.hpp	/^            typedef typename Domain::template as_expr<T>::result_type type;$/;"	t	struct:boost::proto::result_of::as_expr	access:public
boost::proto::result_of::child	proto/traits.hpp	/^        struct child$/;"	s	namespace:boost::proto::result_of	inherits:child_c
boost::proto::result_of::deep_copy	proto/deep_copy.hpp	/^        struct deep_copy$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::deep_copy::type	proto/deep_copy.hpp	/^            type;$/;"	t	struct:boost::proto::result_of::deep_copy	access:public
boost::proto::result_of::env_var	proto/transform/env.hpp	/^            struct env_var$/;"	s	namespace:boost::proto::result_of	inherits:BOOST_PROTO_RESULT_OF
boost::proto::result_of::eval	proto/eval.hpp	/^        struct eval$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::eval::type	proto/eval.hpp	/^            typedef typename Context::template eval<Expr>::result_type type;$/;"	t	struct:boost::proto::result_of::eval	access:public
boost::proto::result_of::flatten	proto/fusion.hpp	/^        struct flatten$/;"	s	namespace:boost::proto::result_of	inherits:flatten
boost::proto::result_of::flatten	proto/fusion.hpp	/^        struct flatten<Expr &>$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::flatten::type	proto/fusion.hpp	/^            typedef detail::flat_view<Expr> type;$/;"	t	struct:boost::proto::result_of::flatten	access:public
boost::proto::result_of::has_env_var	proto/transform/env.hpp	/^            struct has_env_var$/;"	s	namespace:boost::proto::result_of	inherits:BOOST_PROTO_RESULT_OF::type
boost::proto::result_of::left	proto/traits.hpp	/^        struct left$/;"	s	namespace:boost::proto::result_of	inherits:child_c
boost::proto::result_of::make_expr	proto/make_expr.hpp	/^        struct make_expr$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::make_expr	proto/make_expr.hpp	/^        struct make_expr<$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::make_expr::make_expr	proto/make_expr.hpp	/^    make_expr(C0 const &c0)$/;"	f	class:boost::proto::result_of::make_expr	signature:(C0 const &c0)
boost::proto::result_of::make_expr::type	proto/make_expr.hpp	/^            type;$/;"	t	struct:boost::proto::result_of::make_expr	access:public
boost::proto::result_of::right	proto/traits.hpp	/^        struct right$/;"	s	namespace:boost::proto::result_of	inherits:child_c
boost::proto::result_of::unpack_expr	proto/make_expr.hpp	/^        struct unpack_expr$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::unpack_expr	proto/make_expr.hpp	/^        struct unpack_expr<Tag, Domain, Sequence, typename Domain::proto_is_domain_>$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::unpack_expr::type	proto/make_expr.hpp	/^            type;$/;"	t	struct:boost::proto::result_of::unpack_expr	access:public
boost::proto::result_of::unpack_expr::unpack_expr	proto/make_expr.hpp	/^    unpack_expr(Sequence2 const &sequence2)$/;"	f	class:boost::proto::result_of::unpack_expr	signature:(Sequence2 const &sequence2)
boost::proto::result_of::value	proto/traits.hpp	/^        struct value$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::value	proto/traits.hpp	/^        struct value<Expr &>$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::value	proto/traits.hpp	/^        struct value<Expr const &>$/;"	s	namespace:boost::proto::result_of
boost::proto::result_of::value::type	proto/traits.hpp	/^            typedef typename detail::term_traits<typename Expr::proto_child0>::const_reference type;$/;"	t	struct:boost::proto::result_of::value	access:public
boost::proto::result_of::value::type	proto/traits.hpp	/^            typedef typename detail::term_traits<typename Expr::proto_child0>::reference type;$/;"	t	struct:boost::proto::result_of::value	access:public
boost::proto::result_of::value::type	proto/traits.hpp	/^            typedef typename detail::term_traits<typename Expr::proto_child0>::value_type type;$/;"	t	struct:boost::proto::result_of::value	access:public
boost::proto::result_of::value::value_type	proto/traits.hpp	/^            typedef typename Expr::proto_child0 value_type;$/;"	t	struct:boost::proto::result_of::value	access:public
boost::proto::reverse_fold	proto/transform/fold.hpp	/^    struct reverse_fold  : transform<reverse_fold<Sequence, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::reverse_fold	proto/transform/fold.hpp	/^    struct reverse_fold<_, State0, Fun> : transform<reverse_fold<_, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::reverse_fold::impl	proto/transform/fold.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::reverse_fold	inherits:transform_impl	access:public
boost::proto::reverse_fold::impl	proto/transform/fold.hpp	/^        struct impl$/;"	s	struct:boost::proto::reverse_fold	inherits:detail::reverse_fold_impl	access:public
boost::proto::reverse_fold::impl::fun	proto/transform/fold.hpp	/^            fun;$/;"	t	struct:boost::proto::reverse_fold::impl	access:public
boost::proto::reverse_fold::impl::operator ()	proto/transform/fold.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::reverse_fold::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
boost::proto::reverse_fold::impl::result_type	proto/transform/fold.hpp	/^            result_type;$/;"	t	struct:boost::proto::reverse_fold::impl	access:public
boost::proto::reverse_fold::impl::sequence	proto/transform/fold.hpp	/^            sequence;$/;"	t	struct:boost::proto::reverse_fold::impl	access:public
boost::proto::reverse_fold::impl::state0	proto/transform/fold.hpp	/^            state0;$/;"	t	struct:boost::proto::reverse_fold::impl	access:public
boost::proto::reverse_fold_tree	proto/transform/fold_tree.hpp	/^    struct reverse_fold_tree$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::reverse_fold_tree::impl	proto/transform/fold_tree.hpp	/^        struct impl$/;"	s	struct:boost::proto::reverse_fold_tree	inherits:reverse_fold::,impl	access:public
boost::proto::reverse_fold_tree::impl	proto/transform/fold_tree.hpp	/^        struct impl<Expr &, State, Data>$/;"	s	struct:boost::proto::reverse_fold_tree	inherits:reverse_fold::,impl	access:public
boost::proto::right	proto/traits.hpp	/^    right(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
boost::proto::size_t	proto/transform/integral_c.hpp	/^    struct size_t$/;"	s	namespace:boost::proto	inherits:integral_c
boost::proto::switch_	proto/matches.hpp	/^    struct switch_ : transform<switch_<Cases, Transform> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::switch_	proto/matches.hpp	/^    struct switch_<Cases> : transform<switch_<Cases> >$/;"	s	namespace:boost::proto	inherits:transform
boost::proto::switch_::impl	proto/matches.hpp	/^        struct impl$/;"	s	struct:boost::proto::switch_	inherits:Cases::,case_::,impl	access:public
boost::proto::switch_::impl	proto/matches.hpp	/^        struct impl<Expr &, State, Data>$/;"	s	struct:boost::proto::switch_	inherits:Cases::,case_::,impl	access:public
boost::proto::switch_::proto_grammar	proto/matches.hpp	/^        typedef switch_ proto_grammar;$/;"	t	struct:boost::proto::switch_	access:public
boost::proto::tag_of	proto/traits.hpp	/^    struct tag_of$/;"	s	namespace:boost::proto
boost::proto::tag_of	proto/traits.hpp	/^    struct tag_of<Expr &>$/;"	s	namespace:boost::proto
boost::proto::tag_of::type	proto/traits.hpp	/^        typedef typename Expr::proto_tag type;$/;"	t	struct:boost::proto::tag_of	access:public
boost::proto::tagns_	proto/debug.hpp	/^    namespace tagns_ { namespace tag$/;"	n	namespace:boost::proto
boost::proto::tagns_	proto/proto_fwd.hpp	/^    namespace tagns_$/;"	n	namespace:boost::proto
boost::proto::tagns_	proto/tags.hpp	/^namespace boost { namespace proto { namespace tagns_ { namespace tag$/;"	n	namespace:boost::proto
boost::proto::tagns_::tag	proto/debug.hpp	/^    namespace tagns_ { namespace tag$/;"	n	namespace:boost::proto::tagns_
boost::proto::tagns_::tag	proto/proto_fwd.hpp	/^        namespace tag$/;"	n	namespace:boost::proto::tagns_
boost::proto::tagns_::tag	proto/tags.hpp	/^namespace boost { namespace proto { namespace tagns_ { namespace tag$/;"	n	namespace:boost::proto::tagns_
boost::proto::tagns_::tag::address_of	proto/tags.hpp	/^    struct address_of {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::assign	proto/tags.hpp	/^    struct assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::bitwise_and	proto/tags.hpp	/^    struct bitwise_and {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::bitwise_and_assign	proto/tags.hpp	/^    struct bitwise_and_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::bitwise_or	proto/tags.hpp	/^    struct bitwise_or {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::bitwise_or_assign	proto/tags.hpp	/^    struct bitwise_or_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::bitwise_xor	proto/tags.hpp	/^    struct bitwise_xor {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::bitwise_xor_assign	proto/tags.hpp	/^    struct bitwise_xor_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::comma	proto/tags.hpp	/^    struct comma {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::complement	proto/tags.hpp	/^    struct complement {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::dereference	proto/tags.hpp	/^    struct dereference {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::divides	proto/tags.hpp	/^    struct divides {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::divides_assign	proto/tags.hpp	/^    struct divides_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::equal_to	proto/tags.hpp	/^    struct equal_to {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::function	proto/tags.hpp	/^    struct function {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::greater	proto/tags.hpp	/^    struct greater {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::greater_equal	proto/tags.hpp	/^    struct greater_equal {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::if_else_	proto/tags.hpp	/^    struct if_else_ {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::less	proto/tags.hpp	/^    struct less {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::less_equal	proto/tags.hpp	/^    struct less_equal {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::logical_and	proto/tags.hpp	/^    struct logical_and {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::logical_not	proto/tags.hpp	/^    struct logical_not {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::logical_or	proto/tags.hpp	/^    struct logical_or {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::mem_ptr	proto/tags.hpp	/^    struct mem_ptr {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::member	proto/tags.hpp	/^    struct member {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::minus	proto/tags.hpp	/^    struct minus {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::minus_assign	proto/tags.hpp	/^    struct minus_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::modulus	proto/tags.hpp	/^    struct modulus {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::modulus_assign	proto/tags.hpp	/^    struct modulus_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::multiplies	proto/tags.hpp	/^    struct multiplies {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::multiplies_assign	proto/tags.hpp	/^    struct multiplies_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::negate	proto/tags.hpp	/^    struct negate {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::not_equal_to	proto/tags.hpp	/^    struct not_equal_to {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::plus	proto/tags.hpp	/^    struct plus {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::plus_assign	proto/tags.hpp	/^    struct plus_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::post_dec	proto/tags.hpp	/^    struct post_dec {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::post_inc	proto/tags.hpp	/^    struct post_inc {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::pre_dec	proto/tags.hpp	/^    struct pre_dec {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::pre_inc	proto/tags.hpp	/^    struct pre_inc {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::shift_left	proto/tags.hpp	/^    struct shift_left {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::shift_left_assign	proto/tags.hpp	/^    struct shift_left_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::shift_right	proto/tags.hpp	/^    struct shift_right {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::shift_right_assign	proto/tags.hpp	/^    struct shift_right_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::subscript	proto/tags.hpp	/^    struct subscript {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::terminal	proto/tags.hpp	/^    struct terminal {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::tagns_::tag::unary_plus	proto/tags.hpp	/^    struct unary_plus {};$/;"	s	namespace:boost::proto::tagns_::tag
boost::proto::terminal	proto/traits.hpp	/^    struct terminal$/;"	s	namespace:boost::proto	inherits:proto::transform
boost::proto::terminal::impl	proto/traits.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::terminal	inherits:transform_impl	access:public
boost::proto::terminal::impl::operator ()	proto/traits.hpp	/^            operator ()($/;"	f	struct:boost::proto::terminal::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
boost::proto::terminal::impl::result_type	proto/traits.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::terminal::impl	access:public
boost::proto::terminal::proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::terminal	access:public
boost::proto::terminal::proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<T>, 0> proto_grammar;$/;"	t	struct:boost::proto::terminal	access:public
boost::proto::terminal::proto_tag	proto/traits.hpp	/^        typedef proto::tag::terminal proto_tag;$/;"	t	struct:boost::proto::terminal	access:public
boost::proto::terminal::type	proto/traits.hpp	/^        typedef proto::expr<proto::tag::terminal, term<T>, 0> type;$/;"	t	struct:boost::proto::terminal	access:public
boost::proto::transform	proto/transform/impl.hpp	/^    struct transform$/;"	s	namespace:boost::proto
boost::proto::transform_impl	proto/transform/impl.hpp	/^    struct transform_impl$/;"	s	namespace:boost::proto
boost::proto::transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr &, State &, Data &>$/;"	s	namespace:boost::proto
boost::proto::transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr &, State &, Data>$/;"	s	namespace:boost::proto
boost::proto::transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr &, State, Data &>$/;"	s	namespace:boost::proto
boost::proto::transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr &, State, Data>$/;"	s	namespace:boost::proto
boost::proto::transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr, State &, Data &>$/;"	s	namespace:boost::proto
boost::proto::transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr, State &, Data>$/;"	s	namespace:boost::proto
boost::proto::transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr, State, Data &>$/;"	s	namespace:boost::proto
boost::proto::transform_impl::data	proto/transform/impl.hpp	/^        typedef Data const data;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::data	proto/transform/impl.hpp	/^        typedef Data data;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::data_param	proto/transform/impl.hpp	/^        typedef Data &data_param;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::data_param	proto/transform/impl.hpp	/^        typedef Data const &data_param;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::expr	proto/transform/impl.hpp	/^        typedef Expr const expr;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::expr	proto/transform/impl.hpp	/^        typedef Expr expr;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::expr_param	proto/transform/impl.hpp	/^        typedef Expr &expr_param;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::expr_param	proto/transform/impl.hpp	/^        typedef Expr const &expr_param;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::state	proto/transform/impl.hpp	/^        typedef State const state;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::state	proto/transform/impl.hpp	/^        typedef State state;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::state_param	proto/transform/impl.hpp	/^        typedef State &state_param;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::transform_impl::state_param	proto/transform/impl.hpp	/^        typedef State const &state_param;$/;"	t	struct:boost::proto::transform_impl	access:public
boost::proto::unary_expr	proto/traits.hpp	/^    struct unary_expr$/;"	s	namespace:boost::proto	inherits:proto::transform
boost::proto::unary_expr::impl	proto/traits.hpp	/^        struct impl$/;"	s	struct:boost::proto::unary_expr	inherits:detail::pass_through_impl	access:public
boost::proto::unary_expr::proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::unary_expr	access:public
boost::proto::unary_expr::proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<Tag, list1<T>, 1> proto_grammar;$/;"	t	struct:boost::proto::unary_expr	access:public
boost::proto::unary_expr::proto_tag	proto/traits.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:boost::proto::unary_expr	access:public
boost::proto::unary_expr::type	proto/traits.hpp	/^        typedef proto::expr<Tag, list1<T>, 1> type;$/;"	t	struct:boost::proto::unary_expr	access:public
boost::proto::unexpr	proto/expr.hpp	/^    struct unexpr$/;"	s	namespace:boost::proto	inherits:Expr
boost::proto::unexpr::unexpr	proto/expr.hpp	/^        explicit unexpr(Expr const &e)$/;"	f	struct:boost::proto::unexpr	access:public	signature:(Expr const &e)
boost::proto::use_basic_expr	proto/generate.hpp	/^    struct use_basic_expr$/;"	s	namespace:boost::proto	inherits:Generator
boost::proto::utility	proto/literal.hpp	/^    namespace utility$/;"	n	namespace:boost::proto
boost::proto::utility	proto/proto_fwd.hpp	/^    namespace utility$/;"	n	namespace:boost::proto
boost::proto::utility::literal	proto/literal.hpp	/^        struct literal$/;"	s	namespace:boost::proto::utility	inherits:extends
boost::proto::utility::literal::base_type	proto/literal.hpp	/^            typedef extends<terminal_type, literal<T, Domain>, Domain> base_type;$/;"	t	struct:boost::proto::utility::literal	access:private
boost::proto::utility::literal::const_reference	proto/literal.hpp	/^            typedef typename detail::term_traits<T>::const_reference  const_reference;$/;"	t	struct:boost::proto::utility::literal	access:public
boost::proto::utility::literal::get	proto/literal.hpp	/^            const_reference get() const$/;"	f	struct:boost::proto::utility::literal	access:public	signature:() const
boost::proto::utility::literal::get	proto/literal.hpp	/^            reference get()$/;"	f	struct:boost::proto::utility::literal	access:public	signature:()
boost::proto::utility::literal::literal	proto/literal.hpp	/^            literal()$/;"	f	struct:boost::proto::utility::literal	access:public	signature:()
boost::proto::utility::literal::literal	proto/literal.hpp	/^            literal(U &u)$/;"	f	struct:boost::proto::utility::literal	access:public	signature:(U &u)
boost::proto::utility::literal::literal	proto/literal.hpp	/^            literal(U const &u)$/;"	f	struct:boost::proto::utility::literal	access:public	signature:(U const &u)
boost::proto::utility::literal::literal	proto/literal.hpp	/^            literal(literal<U, Domain> const &u)$/;"	f	struct:boost::proto::utility::literal	access:public	signature:(literal<U, Domain> const &u)
boost::proto::utility::literal::literal_t	proto/literal.hpp	/^            typedef literal<T, Domain> literal_t;$/;"	t	struct:boost::proto::utility::literal	access:private
boost::proto::utility::literal::reference	proto/literal.hpp	/^            typedef typename detail::term_traits<T>::reference        reference;$/;"	t	struct:boost::proto::utility::literal	access:public
boost::proto::utility::literal::terminal_type	proto/literal.hpp	/^            typedef basic_expr<tag::terminal, term<T>, 0> terminal_type;$/;"	t	struct:boost::proto::utility::literal	access:private
boost::proto::utility::literal::value_type	proto/literal.hpp	/^            typedef typename detail::term_traits<T>::value_type       value_type;$/;"	t	struct:boost::proto::utility::literal	access:public
boost::proto::value	proto/traits.hpp	/^    value(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
boost::proto::vararg	proto/matches.hpp	/^    struct vararg$/;"	s	namespace:boost::proto	inherits:Grammar
boost::proto::vararg::proto_is_vararg_	proto/matches.hpp	/^        typedef void proto_is_vararg_;$/;"	t	struct:boost::proto::vararg	access:public
boost::proto::wants_basic_expr	proto/generate.hpp	/^    struct wants_basic_expr$/;"	s	namespace:boost::proto	inherits:mpl::false_
boost::proto::wants_basic_expr	proto/generate.hpp	/^    struct wants_basic_expr<Generator, typename Generator::proto_use_basic_expr_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
boost::proto::when	proto/transform/when.hpp	/^    struct when$/;"	s	namespace:boost::proto	inherits:PrimitiveTransform
boost::proto::when	proto/transform/when.hpp	/^    struct when<Grammar, Fun *>$/;"	s	namespace:boost::proto	inherits:when
boost::proto::when	proto/transform/when.hpp	/^    struct when<Grammar, external_transform>$/;"	s	namespace:boost::proto	inherits:proto::transform
boost::proto::when::first	proto/transform/when.hpp	/^        typedef Grammar first;$/;"	t	struct:boost::proto::when	access:public
boost::proto::when::impl	proto/transform/when.hpp	/^        struct impl$/;"	s	struct:boost::proto::when	inherits:remove_reference::type::,when::,impl	access:public
boost::proto::when::proto_grammar	proto/transform/when.hpp	/^        typedef typename Grammar::proto_grammar proto_grammar;$/;"	t	struct:boost::proto::when	access:public
boost::proto::when::second	proto/transform/when.hpp	/^        typedef PrimitiveTransform second;$/;"	t	struct:boost::proto::when	access:public
boost::proto::when::second	proto/transform/when.hpp	/^        typedef external_transform second;$/;"	t	struct:boost::proto::when	access:public
boost::result_of	proto/generate.hpp	/^    struct result_of<proto::basic_default_domain(Expr)>$/;"	s	namespace:boost
boost::result_of	proto/generate.hpp	/^    struct result_of<proto::basic_default_generator(Expr)>$/;"	s	namespace:boost
boost::result_of	proto/generate.hpp	/^    struct result_of<proto::default_domain(Expr)>$/;"	s	namespace:boost
boost::result_of	proto/generate.hpp	/^    struct result_of<proto::default_generator(Expr)>$/;"	s	namespace:boost
boost::result_of::type	proto/generate.hpp	/^        typedef Expr type;$/;"	t	struct:boost::result_of	access:public
boost::tr1_result_of	proto/generate.hpp	/^    struct tr1_result_of<proto::basic_default_domain(Expr)>$/;"	s	namespace:boost
boost::tr1_result_of	proto/generate.hpp	/^    struct tr1_result_of<proto::basic_default_generator(Expr)>$/;"	s	namespace:boost
boost::tr1_result_of	proto/generate.hpp	/^    struct tr1_result_of<proto::default_domain(Expr)>$/;"	s	namespace:boost
boost::tr1_result_of	proto/generate.hpp	/^    struct tr1_result_of<proto::default_generator(Expr)>$/;"	s	namespace:boost
boost::tr1_result_of::type	proto/generate.hpp	/^        typedef Expr type;$/;"	t	struct:boost::tr1_result_of	access:public
by_value_generator	proto/generate.hpp	/^    struct by_value_generator$/;"	s	namespace:boost::proto
by_value_generator_	proto/detail/generate_by_value.hpp	/^    struct by_value_generator_<$/;"	s
by_value_generator_	proto/detail/preprocessed/generate_by_value.hpp	/^    struct by_value_generator_<$/;"	s
by_value_generator_	proto/generate.hpp	/^        struct by_value_generator_<proto::basic_expr<Tag, term<Arg>, 0> >$/;"	s	namespace:boost::proto::detail
by_value_generator_	proto/generate.hpp	/^        struct by_value_generator_<proto::expr<Tag, term<Arg>, 0> >$/;"	s	namespace:boost::proto::detail
by_value_generator_::call	proto/detail/generate_by_value.hpp	/^        static type const call(src_type const &e)$/;"	f	struct:by_value_generator_	access:public	signature:(src_type const &e)
by_value_generator_::call	proto/detail/preprocessed/generate_by_value.hpp	/^        static type const call(src_type const &e)$/;"	f	struct:by_value_generator_	access:public	signature:(src_type const &e)
by_value_generator_::dst_args	proto/detail/generate_by_value.hpp	/^        dst_args;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::dst_args	proto/detail/preprocessed/generate_by_value.hpp	/^        dst_args;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_args	proto/detail/generate_by_value.hpp	/^        src_args;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_args	proto/detail/preprocessed/generate_by_value.hpp	/^        src_args;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, N> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, N> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 10> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 1> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 2> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 3> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 4> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 5> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 6> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 7> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 8> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 9> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 10> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 1> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 2> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 3> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 4> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 5> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 6> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 7> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 8> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 9> src_type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, N> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, N> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 10> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 1> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 2> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 3> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 4> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 5> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 6> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 7> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 8> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 9> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 10> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 1> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 2> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 3> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 4> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 5> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 6> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 7> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 8> type;$/;"	t	struct:by_value_generator_	access:public
by_value_generator_::type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 9> type;$/;"	t	struct:by_value_generator_	access:public
call	proto/detail/generate_by_value.hpp	/^        static type const call(src_type const &e)$/;"	f	struct:by_value_generator_	access:public	signature:(src_type const &e)
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop0	access:public	signature:( Expr &e )
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop1	access:public	signature:( Expr &e , A0 &a0 )
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop2	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 )
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop3	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 )
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop4	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 )
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop5	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 )
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop6	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 )
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop7	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 )
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop8	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 )
call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop9	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 )
call	proto/detail/preprocessed/generate_by_value.hpp	/^        static type const call(src_type const &e)$/;"	f	struct:by_value_generator_	access:public	signature:(src_type const &e)
call	proto/detail/preprocessed/traits.hpp	/^                static type call(Expr &e)$/;"	f	struct:result_of::child_c	access:public	signature:(Expr &e)
call	proto/detail/preprocessed/traits.hpp	/^                static type call(Expr const &e)$/;"	f	struct:result_of::child_c	access:public	signature:(Expr const &e)
call	proto/detail/preprocessed/unpack_expr_.hpp	/^        static type const call(Sequence const &sequence)$/;"	f	struct:unpack_expr_	access:public	signature:(Sequence const &sequence)
call	proto/detail/traits.hpp	/^                static type call(Expr &e)$/;"	f	struct:result_of::child_c	access:public	signature:(Expr &e)
call	proto/detail/traits.hpp	/^                static type call(Expr const &e)$/;"	f	struct:result_of::child_c	access:public	signature:(Expr const &e)
call	proto/detail/unpack_expr_.hpp	/^        static type const call(Sequence const &sequence)$/;"	f	struct:unpack_expr_	access:public	signature:(Sequence const &sequence)
call	proto/fusion.hpp	/^                static type call(Iterator const &iter)$/;"	f	struct:boost::fusion::extension::advance_impl::apply	access:public	signature:(Iterator const &iter)
call	proto/fusion.hpp	/^                static type call(Iterator const &iter)$/;"	f	struct:boost::fusion::extension::deref_impl::apply	access:public	signature:(Iterator const &iter)
call	proto/fusion.hpp	/^                static type call(Sequence &seq)$/;"	f	struct:boost::fusion::extension::at_impl::apply	access:public	signature:(Sequence &seq)
call	proto/fusion.hpp	/^                static type call(Sequence &seq)$/;"	f	struct:boost::fusion::extension::begin_impl::apply	access:public	signature:(Sequence &seq)
call	proto/fusion.hpp	/^                static type call(Sequence &seq)$/;"	f	struct:boost::fusion::extension::end_impl::apply	access:public	signature:(Sequence &seq)
call	proto/fusion.hpp	/^                static type call(Sequence &sequence)$/;"	f	struct:boost::fusion::extension::segments_impl::apply	access:public	signature:(Sequence &sequence)
call	proto/fusion.hpp	/^                static type call(Sequence& seq)$/;"	f	struct:boost::fusion::extension::convert_impl::apply	access:public	signature:(Sequence& seq)
call	proto/generate.hpp	/^            static type const call(proto::basic_expr<Tag, term<Arg>, 0> const &e)$/;"	f	struct:boost::proto::detail::by_value_generator_	access:public	signature:(proto::basic_expr<Tag, term<Arg>, 0> const &e)
call	proto/generate.hpp	/^            static type const call(proto::expr<Tag, term<Arg>, 0> const &e)$/;"	f	struct:boost::proto::detail::by_value_generator_	access:public	signature:(proto::expr<Tag, term<Arg>, 0> const &e)
call	proto/transform/call.hpp	/^    struct call$/;"	s	namespace:boost::proto	inherits:PrimitiveTransform
call	proto/transform/call.hpp	/^    struct call<Fun *>$/;"	s	namespace:boost::proto	inherits:call
call	proto/transform/call.hpp	/^    struct call<Fun()> : transform<call<Fun()> >$/;"	s	namespace:boost::proto	inherits:transform
call	proto/transform/call.hpp	/^    struct call<Fun(A0)> : transform<call<Fun(A0)> >$/;"	s	namespace:boost::proto	inherits:transform
call	proto/transform/call.hpp	/^    struct call<Fun(A0, A1)> : transform<call<Fun(A0, A1)> >$/;"	s	namespace:boost::proto	inherits:transform
call	proto/transform/call.hpp	/^    struct call<Fun(A0, A1, A2)> : transform<call<Fun(A0, A1, A2)> >$/;"	s	namespace:boost::proto	inherits:transform
call	proto/transform/call.hpp	/^    struct call<detail::msvc_fun_workaround<Fun> >$/;"	s	namespace:boost::proto	inherits:call
call	proto/transform/detail/call.hpp	/^    struct call<Fun(BOOST_PP_ENUM_PARAMS(N, A))> : transform<call<Fun(BOOST_PP_ENUM_PARAMS(N, A))> >$/;"	s	inherits:transform
call	proto/transform/detail/call.hpp	/^    struct call<Fun(BOOST_PP_ENUM_PARAMS(N, A)...)> : transform<call<Fun(BOOST_PP_ENUM_PARAMS(N, A)...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9...)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8...)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7...)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6...)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5 , A6...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4 , A5...)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4 , A5...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3 , A4...)> : transform<call<Fun(A0 , A1 , A2 , A3 , A4...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3)> : transform<call<Fun(A0 , A1 , A2 , A3)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2 , A3...)> : transform<call<Fun(A0 , A1 , A2 , A3...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1 , A2...)> : transform<call<Fun(A0 , A1 , A2...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0 , A1...)> : transform<call<Fun(A0 , A1...)> >$/;"	s	inherits:transform
call	proto/transform/detail/preprocessed/call.hpp	/^    struct call<Fun(A0...)> : transform<call<Fun(A0...)> >$/;"	s	inherits:transform
call::impl	proto/transform/detail/call.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:call	inherits:transform_impl	access:public
call::impl	proto/transform/detail/call.hpp	/^        struct impl$/;"	s	struct:call	inherits:call::,impl	access:public
call::impl	proto/transform/detail/preprocessed/call.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:call	inherits:transform_impl	access:public
call::impl	proto/transform/detail/preprocessed/call.hpp	/^        struct impl$/;"	s	struct:call	inherits:call::,impl	access:public
call::impl::a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::a0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
call::impl::a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::a1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
call::impl::a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::a2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
call::impl::a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::a3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
call::impl::a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::a4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::a5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::a6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::a6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::a6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::a6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::a7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::a7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::a7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::a8	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::a8	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::a9	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::b0	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
call::impl::b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::b1	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
call::impl::b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::b2	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
call::impl::b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::b3	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3;$/;"	t	struct:call::impl	access:public
call::impl::b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::b4	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4;$/;"	t	struct:call::impl	access:public
call::impl::b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::b5	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5;$/;"	t	struct:call::impl	access:public
call::impl::b6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::b6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::b6	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6;$/;"	t	struct:call::impl	access:public
call::impl::b7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::b7	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7;$/;"	t	struct:call::impl	access:public
call::impl::b8	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::b8	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8;$/;"	t	struct:call::impl	access:public
call::impl::b9	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename when<_, A0>::template impl<Expr, State, Data> a0; typedef typename a0::result_type b0; typedef typename when<_, A1>::template impl<Expr, State, Data> a1; typedef typename a1::result_type b1; typedef typename when<_, A2>::template impl<Expr, State, Data> a2; typedef typename a2::result_type b2; typedef typename when<_, A3>::template impl<Expr, State, Data> a3; typedef typename a3::result_type b3; typedef typename when<_, A4>::template impl<Expr, State, Data> a4; typedef typename a4::result_type b4; typedef typename when<_, A5>::template impl<Expr, State, Data> a5; typedef typename a5::result_type b5; typedef typename when<_, A6>::template impl<Expr, State, Data> a6; typedef typename a6::result_type b6; typedef typename when<_, A7>::template impl<Expr, State, Data> a7; typedef typename a7::result_type b7; typedef typename when<_, A8>::template impl<Expr, State, Data> a8; typedef typename a8::result_type b8; typedef typename when<_, A9>::template impl<Expr, State, Data> a9; typedef typename a9::result_type b9;$/;"	t	struct:call::impl	access:public
call::impl::function_traits	proto/transform/detail/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(BOOST_PP_ENUM_PARAMS(N, b))> function_traits;$/;"	t	struct:call::impl	access:public
call::impl::function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5 , b6 , b7 , b8 , b9)> function_traits;$/;"	t	struct:call::impl	access:public
call::impl::function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5 , b6 , b7 , b8)> function_traits;$/;"	t	struct:call::impl	access:public
call::impl::function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5 , b6 , b7)> function_traits;$/;"	t	struct:call::impl	access:public
call::impl::function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5 , b6)> function_traits;$/;"	t	struct:call::impl	access:public
call::impl::function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5)> function_traits;$/;"	t	struct:call::impl	access:public
call::impl::function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4)> function_traits;$/;"	t	struct:call::impl	access:public
call::impl::function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3)> function_traits;$/;"	t	struct:call::impl	access:public
call::impl::operator ()	proto/transform/detail/call.hpp	/^            result_type operator ()($/;"	f	struct:call::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
call::impl::operator ()	proto/transform/detail/preprocessed/call.hpp	/^            result_type operator ()($/;"	f	struct:call::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
call::impl::result_type	proto/transform/detail/call.hpp	/^            typedef typename function_traits::result_type result_type;$/;"	t	struct:call::impl	access:public
call::impl::result_type	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename function_traits::result_type result_type;$/;"	t	struct:call::impl	access:public
callable	proto/proto_fwd.hpp	/^    struct callable$/;"	s	namespace:boost::proto
callable_context	proto/context/callable.hpp	/^        struct callable_context$/;"	s	namespace:boost::proto::context
callable_context_wrapper	proto/context/callable.hpp	/^            callable_context_wrapper();$/;"	p	struct:boost::proto::detail::callable_context_wrapper	access:public	signature:()
callable_context_wrapper	proto/context/callable.hpp	/^        struct callable_context_wrapper$/;"	s	namespace:boost::proto::detail	inherits:remove_cv::type
callable_eval	proto/context/callable.hpp	/^        struct callable_eval$/;"	s	namespace:boost::proto::context
callable_eval	proto/context/callable.hpp	/^        struct callable_eval<Expr, Context, 0>$/;"	s	namespace:boost::proto::context
callable_eval	proto/context/detail/callable_eval.hpp	/^        struct callable_eval<Expr, Context, N>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 10>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 1>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 2>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 3>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 4>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 5>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 6>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 7>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 8>$/;"	s	namespace:context
callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 9>$/;"	s	namespace:context
case_	proto/transform/default.hpp	/^            struct case_$/;"	s	struct:boost::proto::detail::default_cases	inherits:default_case	access:public
cat	proto/transform/detail/pack_impl.hpp	/^            struct cat<BOOST_PP_ENUM_PARAMS(I, C)>$/;"	s
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8 , C9>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8>$/;"	s	struct:expand_pattern_rest_1	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7>$/;"	s	struct:expand_pattern_rest_1	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7>$/;"	s	struct:expand_pattern_rest_2	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6>$/;"	s	struct:expand_pattern_rest_1	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6>$/;"	s	struct:expand_pattern_rest_2	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6>$/;"	s	struct:expand_pattern_rest_3	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_1	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_2	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_3	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_4	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_1	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_2	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_3	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_4	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_5	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_1	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_2	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_3	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_4	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_5	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_6	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_1	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_2	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_3	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_4	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_5	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_6	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_7	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_1	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_2	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_3	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_4	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_5	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_6	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_7	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_8	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_0	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_1	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_2	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_3	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_4	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_5	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_6	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_7	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_8	access:public
cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_9	access:public
cat::type	proto/transform/detail/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(BOOST_PP_ENUM_PARAMS(J, A) BOOST_PP_COMMA_IF(J) BOOST_PP_ENUM_PARAMS(I, C))> type;$/;"	t	struct:cat	access:public
category	proto/fusion.hpp	/^            typedef fusion::forward_traversal_tag category;$/;"	t	struct:boost::proto::detail::flat_view	access:public
category	proto/fusion.hpp	/^            typedef fusion::random_access_traversal_tag category;$/;"	t	struct:boost::proto::detail::expr_iterator	access:public
category_of_impl	proto/fusion.hpp	/^        struct category_of_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
category_of_impl	proto/fusion.hpp	/^        struct category_of_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
char_	proto/transform/integral_c.hpp	/^    struct char_$/;"	s	namespace:boost::proto	inherits:integral_c
check_is_expr_handled	proto/context/callable.hpp	/^        no_type check_is_expr_handled(private_type_ const &);$/;"	p	namespace:boost::proto::detail	signature:(private_type_ const &)
check_is_expr_handled	proto/context/callable.hpp	/^        yes_type check_is_expr_handled(T const &);$/;"	p	namespace:boost::proto::detail	signature:(T const &)
check_is_iostream	proto/detail/is_noncopyable.hpp	/^    no_type check_is_iostream(...);$/;"	p	namespace:boost::proto::detail	signature:(....)
check_is_iostream	proto/detail/is_noncopyable.hpp	/^    yes_type check_is_iostream($/;"	p	namespace:boost::proto::detail	signature:( typename T::failure * , typename T::Init * , typename T::fmtflags * , typename T::iostate * , typename T::openmode * , typename T::seekdir * )
check_reference	proto/detail/decltype.hpp	/^        char (&check_reference(T const &))[2];$/;"	p	namespace:boost::proto::detail	signature:(T const &)
check_reference	proto/detail/decltype.hpp	/^        char check_reference(T &);$/;"	p	namespace:boost::proto::detail	signature:(T &)
child	proto/traits.hpp	/^        struct child$/;"	s	namespace:boost::proto::functional
child	proto/traits.hpp	/^        struct child$/;"	s	namespace:boost::proto::result_of	inherits:child_c
child	proto/traits.hpp	/^    child(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
child	proto/traits.hpp	/^    child(Expr2 const &expr2)$/;"	f	namespace:boost::proto	signature:(Expr2 const &expr2)
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3;$/;"	t	struct:context::callable_eval	access:public
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2;$/;"	t	struct:context::callable_eval	access:public
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1;$/;"	t	struct:context::callable_eval	access:public
child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0;$/;"	t	struct:context::callable_eval	access:public
child0	proto/detail/args.hpp	/^        typedef Arg0 child0;$/;"	t	struct:term	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3;$/;"	t	struct:list4	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2;$/;"	t	struct:list3	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1;$/;"	t	struct:list2	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0;$/;"	t	struct:list1	access:public
child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0;$/;"	t	struct:term	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	m	struct:basic_expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:expr	access:public
child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	m	struct:expr	access:public
child0	proto/extends.hpp	/^            proto_child0 child0() const$/;"	f	struct:boost::proto::exprns_::virtual_member	access:public	signature:() const
child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3;$/;"	t	struct:context::callable_eval	access:public
child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2;$/;"	t	struct:context::callable_eval	access:public
child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1;$/;"	t	struct:context::callable_eval	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3;$/;"	t	struct:list4	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2;$/;"	t	struct:list3	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1;$/;"	t	struct:list2	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
child1	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:basic_expr	access:public
child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:basic_expr	access:public
child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:basic_expr	access:public
child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:expr	access:public
child1	proto/extends.hpp	/^            proto_child1 child1() const$/;"	f	struct:boost::proto::exprns_::virtual_member	access:public	signature:() const
child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3;$/;"	t	struct:context::callable_eval	access:public
child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2;$/;"	t	struct:context::callable_eval	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3;$/;"	t	struct:list4	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2;$/;"	t	struct:list3	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
child2	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:basic_expr	access:public
child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:basic_expr	access:public
child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3;$/;"	t	struct:context::callable_eval	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3;$/;"	t	struct:list4	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
child3	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:basic_expr	access:public
child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:basic_expr	access:public
child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:basic_expr	access:public
child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
child6	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child6	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
child6	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
child6	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list6	access:public
child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:basic_expr	access:public
child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
child7	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child7	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
child7	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list6	access:public
child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list7	access:public
child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:basic_expr	access:public
child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
child8	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child8	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list6	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list7	access:public
child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list8	access:public
child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:basic_expr	access:public
child8	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child8	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
child9	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list6	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list7	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list8	access:public
child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child9;$/;"	t	struct:list9	access:public
child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:basic_expr	access:public
child9	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 0>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 10>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 1>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 2>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 3>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 4>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 5>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 6>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 7>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 8>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 9>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 0>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 10>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 1>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 2>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 3>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 4>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 5>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 6>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 7>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 8>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 9>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 0>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 10>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 1>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 2>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 3>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 4>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 5>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 6>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 7>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 8>$/;"	s	namespace:result_of
child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 9>$/;"	s	namespace:result_of
child_c	proto/detail/traits.hpp	/^            struct child_c<Expr &, N>$/;"	s	namespace:result_of
child_c	proto/detail/traits.hpp	/^            struct child_c<Expr const &, N>$/;"	s	namespace:result_of
child_c	proto/detail/traits.hpp	/^            struct child_c<Expr, N>$/;"	s	namespace:result_of
child_c	proto/traits.hpp	/^        struct child_c$/;"	s	namespace:boost::proto::functional
child_c	proto/traits.hpp	/^    child_c(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
class_member_traits	proto/detail/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(BOOST_PP_ENUM_PARAMS(N, A)) const>$/;"	s
class_member_traits	proto/detail/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s
class_member_traits	proto/detail/decltype.hpp	/^        struct class_member_traits<T U::*>$/;"	s	namespace:boost::proto::detail
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)() const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)()>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5 , A6) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3 , A4)>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2 , A3)>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1 , A2)>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0 , A1)>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0) const>$/;"	s
class_member_traits	proto/detail/preprocessed/class_member_traits.hpp	/^    struct class_member_traits<T (U::*)(A0)>$/;"	s
class_member_traits::class_type	proto/detail/class_member_traits.hpp	/^        typedef U class_type;$/;"	t	struct:class_member_traits	access:public
class_member_traits::class_type	proto/detail/preprocessed/class_member_traits.hpp	/^        typedef U class_type;$/;"	t	struct:class_member_traits	access:public
class_member_traits::result_type	proto/detail/class_member_traits.hpp	/^        typedef T result_type;$/;"	t	struct:class_member_traits	access:public
class_member_traits::result_type	proto/detail/preprocessed/class_member_traits.hpp	/^        typedef T result_type;$/;"	t	struct:class_member_traits	access:public
class_type	proto/detail/class_member_traits.hpp	/^        typedef U class_type;$/;"	t	struct:class_member_traits	access:public
class_type	proto/detail/decltype.hpp	/^            typedef U class_type;$/;"	t	struct:boost::proto::detail::class_member_traits	access:public
class_type	proto/detail/preprocessed/class_member_traits.hpp	/^        typedef U class_type;$/;"	t	struct:class_member_traits	access:public
comma	proto/tags.hpp	/^    struct comma {};$/;"	s	namespace:boost::proto::tagns_::tag
comma_result	proto/detail/decltype.hpp	/^        struct comma_result$/;"	s	namespace:boost::proto::detail
comma_result	proto/detail/decltype.hpp	/^        struct comma_result<A0, void>$/;"	s	namespace:boost::proto::detail
comma_result	proto/detail/decltype.hpp	/^        struct comma_result<void, A1>$/;"	s	namespace:boost::proto::detail
comma_result	proto/detail/decltype.hpp	/^        struct comma_result<void, void>$/;"	s	namespace:boost::proto::detail
common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain10	access:public
common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain3	access:public
common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain4	access:public
common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain5	access:public
common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain6	access:public
common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain7	access:public
common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain8	access:public
common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain9	access:public
common10	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5;$/;"	t	struct:common_domain5	access:public
common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4;$/;"	t	struct:common_domain4	access:public
common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3;$/;"	t	struct:common_domain3	access:public
common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5;$/;"	t	struct:common_domain5	access:public
common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4;$/;"	t	struct:common_domain4	access:public
common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3;$/;"	t	struct:common_domain3	access:public
common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5;$/;"	t	struct:common_domain5	access:public
common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4;$/;"	t	struct:common_domain4	access:public
common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5;$/;"	t	struct:common_domain5	access:public
common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common7	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common7	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common7	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common7	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common8	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common8	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common8	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common9	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common9	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common_domain1	proto/detail/deduce_domain.hpp	/^            struct common_domain1$/;"	s	namespace:boost::proto::detail
common_domain10	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct common_domain10$/;"	s
common_domain10::BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain10	access:public	signature:(type)
common_domain10::common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain10	access:public
common_domain10::common10	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common_domain10::common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common_domain10::common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common_domain10::common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common_domain10::common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common_domain10::common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common_domain10::common7	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common_domain10::common8	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common_domain10::common9	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9; typedef typename common_domain2<common9, A9>::type common10;$/;"	t	struct:common_domain10	access:public
common_domain10::type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common10 type;$/;"	t	struct:common_domain10	access:public
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<D0, D1, 2>$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<D0, D1, 3>$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<D0, basic_default_domain, 4>$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<D0, default_domain, 4>$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<basic_default_domain, D1, 4>$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<basic_default_domain, basic_default_domain, 4>$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<basic_default_domain, default_domain, 4>$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<default_domain, D1, 4>$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<default_domain, basic_default_domain, 4>$/;"	s	namespace:boost::proto::detail
common_domain2	proto/detail/deduce_domain.hpp	/^            struct common_domain2<default_domain, default_domain, 4>$/;"	s	namespace:boost::proto::detail
common_domain3	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct common_domain3$/;"	s
common_domain3::BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain3	access:public	signature:(type)
common_domain3::common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain3	access:public
common_domain3::common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3;$/;"	t	struct:common_domain3	access:public
common_domain3::common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3;$/;"	t	struct:common_domain3	access:public
common_domain3::type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common3 type;$/;"	t	struct:common_domain3	access:public
common_domain4	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct common_domain4$/;"	s
common_domain4::BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain4	access:public	signature:(type)
common_domain4::common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain4	access:public
common_domain4::common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4;$/;"	t	struct:common_domain4	access:public
common_domain4::common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4;$/;"	t	struct:common_domain4	access:public
common_domain4::common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4;$/;"	t	struct:common_domain4	access:public
common_domain4::type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common4 type;$/;"	t	struct:common_domain4	access:public
common_domain5	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct common_domain5$/;"	s
common_domain5::BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain5	access:public	signature:(type)
common_domain5::common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain5	access:public
common_domain5::common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5;$/;"	t	struct:common_domain5	access:public
common_domain5::common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5;$/;"	t	struct:common_domain5	access:public
common_domain5::common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5;$/;"	t	struct:common_domain5	access:public
common_domain5::common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5;$/;"	t	struct:common_domain5	access:public
common_domain5::type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common5 type;$/;"	t	struct:common_domain5	access:public
common_domain6	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct common_domain6$/;"	s
common_domain6::BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain6	access:public	signature:(type)
common_domain6::common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain6	access:public
common_domain6::common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common_domain6::common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common_domain6::common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common_domain6::common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common_domain6::common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6;$/;"	t	struct:common_domain6	access:public
common_domain6::type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common6 type;$/;"	t	struct:common_domain6	access:public
common_domain7	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct common_domain7$/;"	s
common_domain7::BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain7	access:public	signature:(type)
common_domain7::common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain7	access:public
common_domain7::common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common_domain7::common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common_domain7::common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common_domain7::common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common_domain7::common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common_domain7::common7	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7;$/;"	t	struct:common_domain7	access:public
common_domain7::type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common7 type;$/;"	t	struct:common_domain7	access:public
common_domain8	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct common_domain8$/;"	s
common_domain8::BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain8	access:public	signature:(type)
common_domain8::common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain8	access:public
common_domain8::common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common_domain8::common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common_domain8::common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common_domain8::common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common_domain8::common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common_domain8::common7	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common_domain8::common8	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8;$/;"	t	struct:common_domain8	access:public
common_domain8::type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common8 type;$/;"	t	struct:common_domain8	access:public
common_domain9	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct common_domain9$/;"	s
common_domain9::BOOST_PROTO_ASSERT_VALID_DOMAIN	proto/detail/preprocessed/deduce_domain_n.hpp	/^        BOOST_PROTO_ASSERT_VALID_DOMAIN(type);$/;"	p	struct:common_domain9	access:public	signature:(type)
common_domain9::common1	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef A0 common1;$/;"	t	struct:common_domain9	access:public
common_domain9::common2	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common_domain9::common3	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common_domain9::common4	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common_domain9::common5	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common_domain9::common6	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common_domain9::common7	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common_domain9::common8	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common_domain9::common9	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef typename common_domain2<common1, A1>::type common2; typedef typename common_domain2<common2, A2>::type common3; typedef typename common_domain2<common3, A3>::type common4; typedef typename common_domain2<common4, A4>::type common5; typedef typename common_domain2<common5, A5>::type common6; typedef typename common_domain2<common6, A6>::type common7; typedef typename common_domain2<common7, A7>::type common8; typedef typename common_domain2<common8, A8>::type common9;$/;"	t	struct:common_domain9	access:public
common_domain9::type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common9 type;$/;"	t	struct:common_domain9	access:public
complement	proto/tags.hpp	/^    struct complement {};$/;"	s	namespace:boost::proto::tagns_::tag
compose_generators	proto/generate.hpp	/^    struct compose_generators$/;"	s	namespace:boost::proto
condition	proto/matches.hpp	/^            condition;$/;"	t	struct:boost::proto::if_::impl	access:public
const_reference	proto/args.hpp	/^            typedef Expr &const_reference;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
const_reference	proto/args.hpp	/^            typedef Expr const &const_reference;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
const_reference	proto/args.hpp	/^            typedef T &const_reference;$/;"	t	struct:boost::proto::detail::term_traits	access:public
const_reference	proto/args.hpp	/^            typedef T (&const_reference)[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
const_reference	proto/args.hpp	/^            typedef T const &const_reference;$/;"	t	struct:boost::proto::detail::term_traits	access:public
const_reference	proto/args.hpp	/^            typedef T const (&const_reference)[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
const_reference	proto/literal.hpp	/^            typedef typename detail::term_traits<T>::const_reference  const_reference;$/;"	t	struct:boost::proto::utility::literal	access:public
const_reference	proto/transform/env.hpp	/^                    typedef typename add_reference<typename add_const<Value>::type>::type const_reference;$/;"	t	struct:boost::proto::envns_::env::found	access:public
const_reference	proto/transform/env.hpp	/^                    typedef typename add_reference<typename add_const<Value>::type>::type const_reference;$/;"	t	struct:boost::proto::envns_::env::lookup	access:public
const_reference	proto/transform/env.hpp	/^                typedef typename add_reference<typename add_const<Value>::type>::type const_reference;$/;"	t	struct:boost::proto::envns_::env	access:public
const_reference	proto/transform/impl.hpp	/^                const_reference;$/;"	t	struct:boost::proto::envns_::empty_env::lookup	access:public
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct()$/;"	f	namespace:detail	signature:()
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9)
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8)
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7)
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6)
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5)
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4)
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3)
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2)
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1)
construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0)$/;"	f	namespace:detail	signature:(A0 &a0)
construct_	proto/transform/detail/make.hpp	/^        struct construct_<proto::basic_expr<T, A, N>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/make.hpp	/^        struct construct_<proto::expr<T, A, N>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 0>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 10>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 1>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 2>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 3>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 4>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 5>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 6>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 7>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 8>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 9>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 0>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 10>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 1>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 2>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 3>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 4>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 5>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 6>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 7>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 8>, true>$/;"	s	namespace:detail
construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 9>, true>$/;"	s	namespace:detail
construct_	proto/transform/make.hpp	/^        struct construct_$/;"	s	namespace:boost::proto::detail
construct_	proto/transform/make.hpp	/^        struct construct_<Type, true>$/;"	s	namespace:boost::proto::detail
context	proto/context/callable.hpp	/^    namespace context$/;"	n	namespace:boost::proto
context	proto/context/default.hpp	/^    namespace context$/;"	n	namespace:boost::proto
context	proto/context/detail/callable_eval.hpp	/^    namespace context$/;"	n
context	proto/context/detail/preprocessed/callable_eval.hpp	/^    namespace context$/;"	n
context	proto/context/null.hpp	/^namespace boost { namespace proto { namespace context$/;"	n	namespace:boost::proto
context	proto/proto_fwd.hpp	/^    namespace context$/;"	n	namespace:boost::proto
context::callable_eval	proto/context/detail/callable_eval.hpp	/^        struct callable_eval<Expr, Context, N>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 10>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 1>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 2>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 3>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 4>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 5>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 6>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 7>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 8>$/;"	s	namespace:context
context::callable_eval	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct callable_eval<Expr, Context, 9>$/;"	s	namespace:context
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child0	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child1	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child2	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child3	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child4	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child5	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child6	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child6	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child6	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child6	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child7	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child7	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child7	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child8	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child8	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::child9	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef typename proto::result_of::child_c< Expr const &, 0>::type child0; typedef typename proto::result_of::child_c< Expr const &, 1>::type child1; typedef typename proto::result_of::child_c< Expr const &, 2>::type child2; typedef typename proto::result_of::child_c< Expr const &, 3>::type child3; typedef typename proto::result_of::child_c< Expr const &, 4>::type child4; typedef typename proto::result_of::child_c< Expr const &, 5>::type child5; typedef typename proto::result_of::child_c< Expr const &, 6>::type child6; typedef typename proto::result_of::child_c< Expr const &, 7>::type child7; typedef typename proto::result_of::child_c< Expr const &, 8>::type child8; typedef typename proto::result_of::child_c< Expr const &, 9>::type child9;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::operator ()	proto/context/detail/callable_eval.hpp	/^            result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:context::callable_eval	access:public	signature:(Expr &expr, Context &context) const
context::callable_eval::operator ()	proto/context/detail/preprocessed/callable_eval.hpp	/^            result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:context::callable_eval	access:public	signature:(Expr &expr, Context &context) const
context::callable_eval::result_type	proto/context/detail/callable_eval.hpp	/^            result_type;$/;"	t	struct:context::callable_eval	access:public
context::callable_eval::result_type	proto/context/detail/preprocessed/callable_eval.hpp	/^            result_type;$/;"	t	struct:context::callable_eval	access:public
convert_impl	proto/fusion.hpp	/^        struct convert_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
convert_impl	proto/fusion.hpp	/^        struct convert_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
convertible_to	proto/matches.hpp	/^    struct convertible_to$/;"	s	namespace:boost::proto
ctx_	proto/fusion.hpp	/^        Context &ctx_;$/;"	m	struct:boost::proto::eval_fun	access:private
d_	proto/transform/fold.hpp	/^            Data d_;$/;"	m	struct:boost::proto::detail::as_callable	access:private
data	proto/transform/impl.hpp	/^        typedef Data const data;$/;"	t	struct:boost::proto::transform_impl	access:public
data	proto/transform/impl.hpp	/^        typedef Data data;$/;"	t	struct:boost::proto::transform_impl	access:public
data_param	proto/transform/impl.hpp	/^        typedef Data &data_param;$/;"	t	struct:boost::proto::transform_impl	access:public
data_param	proto/transform/impl.hpp	/^        typedef Data const &data_param;$/;"	t	struct:boost::proto::transform_impl	access:public
deduce0x	proto/detail/deduce_domain.hpp	/^                static Domain deduce0x(domain_<Domain>*);$/;"	p	struct:boost::proto::detail::domain_	access:public	signature:(domain_<Domain>*)
deduce0x	proto/detail/deduce_domain.hpp	/^                static not_a_domain deduce0x(void*);$/;"	p	struct:boost::proto::detail::domain_	access:public	signature:(void*)
deduce98	proto/detail/deduce_domain.hpp	/^                static sized_type<1>::type deduce98(void*);$/;"	p	struct:boost::proto::detail::domain_	access:public	signature:(void*)
deduce98	proto/detail/deduce_domain.hpp	/^                static typename sized_type<index>::type deduce98(domain_<Domain>*);$/;"	p	struct:boost::proto::detail::domain_	access:public	signature:(domain_<Domain>*)
deduce_domain	proto/domain.hpp	/^        struct deduce_domain$/;"	s	namespace:boost::proto::domainns_	inherits:domain
deduce_domain1	proto/detail/deduce_domain.hpp	/^            struct deduce_domain1$/;"	s	namespace:boost::proto::detail	inherits:domain_of
deduce_domain10	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct deduce_domain10$/;"	s	inherits:common_domain10
deduce_domain2	proto/detail/deduce_domain.hpp	/^            struct deduce_domain2$/;"	s	namespace:boost::proto::detail	inherits:common_domain2
deduce_domain3	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct deduce_domain3$/;"	s	inherits:common_domain3
deduce_domain4	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct deduce_domain4$/;"	s	inherits:common_domain4
deduce_domain5	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct deduce_domain5$/;"	s	inherits:common_domain5
deduce_domain6	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct deduce_domain6$/;"	s	inherits:common_domain6
deduce_domain7	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct deduce_domain7$/;"	s	inherits:common_domain7
deduce_domain8	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct deduce_domain8$/;"	s	inherits:common_domain8
deduce_domain9	proto/detail/preprocessed/deduce_domain_n.hpp	/^    struct deduce_domain9$/;"	s	inherits:common_domain9
deep_copy	proto/deep_copy.hpp	/^        struct deep_copy$/;"	s	namespace:boost::proto::functional
deep_copy	proto/deep_copy.hpp	/^        struct deep_copy$/;"	s	namespace:boost::proto::result_of
deep_copy	proto/deep_copy.hpp	/^    deep_copy(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
deep_copy_impl	proto/deep_copy.hpp	/^        struct deep_copy_impl<Expr, 0>$/;"	s	namespace:boost::proto::detail
deep_copy_impl	proto/detail/deep_copy.hpp	/^    struct deep_copy_impl<Expr, N>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 10>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 1>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 2>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 3>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 4>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 5>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 6>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 7>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 8>$/;"	s
deep_copy_impl	proto/detail/preprocessed/deep_copy.hpp	/^    struct deep_copy_impl<Expr, 9>$/;"	s
deep_copy_impl::expr_type	proto/detail/deep_copy.hpp	/^        expr_type;$/;"	t	struct:deep_copy_impl	access:public
deep_copy_impl::expr_type	proto/detail/preprocessed/deep_copy.hpp	/^        expr_type;$/;"	t	struct:deep_copy_impl	access:public
deep_copy_impl::operator ()	proto/detail/deep_copy.hpp	/^        result_type operator()(Expr2 const &e, S const &, D const &) const$/;"	f	struct:deep_copy_impl	access:public	signature:(Expr2 const &e, S const &, D const &) const
deep_copy_impl::operator ()	proto/detail/preprocessed/deep_copy.hpp	/^        result_type operator()(Expr2 const &e, S const &, D const &) const$/;"	f	struct:deep_copy_impl	access:public	signature:(Expr2 const &e, S const &, D const &) const
deep_copy_impl::proto_generator	proto/detail/deep_copy.hpp	/^        typedef typename Expr::proto_generator proto_generator;$/;"	t	struct:deep_copy_impl	access:public
deep_copy_impl::proto_generator	proto/detail/preprocessed/deep_copy.hpp	/^        typedef typename Expr::proto_generator proto_generator;$/;"	t	struct:deep_copy_impl	access:public
deep_copy_impl::result_type	proto/detail/deep_copy.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:deep_copy_impl	access:public
deep_copy_impl::result_type	proto/detail/preprocessed/deep_copy.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:deep_copy_impl	access:public
default_case	proto/transform/default.hpp	/^        struct default_case$/;"	s	namespace:boost::proto::detail	inherits:not_
default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::comma>$/;"	s	namespace:boost::proto::detail	inherits:when
default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::function>$/;"	s	namespace:boost::proto::detail	inherits:when
default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::if_else_>$/;"	s	namespace:boost::proto::detail	inherits:when
default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::mem_ptr>$/;"	s	namespace:boost::proto::detail	inherits:when
default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::post_dec>$/;"	s	namespace:boost::proto::detail	inherits:when
default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::post_inc>$/;"	s	namespace:boost::proto::detail	inherits:when
default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::subscript>$/;"	s	namespace:boost::proto::detail	inherits:when
default_case	proto/transform/default.hpp	/^        struct default_case<Grammar, tag::terminal>$/;"	s	namespace:boost::proto::detail	inherits:when
default_cases	proto/transform/default.hpp	/^        struct default_cases$/;"	s	namespace:boost::proto::detail
default_comma	proto/transform/default.hpp	/^        struct default_comma$/;"	s	namespace:boost::proto::detail	inherits:transform
default_context	proto/context/default.hpp	/^        struct default_context$/;"	s	namespace:boost::proto::context
default_domain	proto/domain.hpp	/^        struct default_domain$/;"	s	namespace:boost::proto::domainns_	inherits:domain
default_eval	proto/context/default.hpp	/^        struct default_eval$/;"	s	namespace:boost::proto::context
default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::comma, 2>$/;"	s	namespace:boost::proto::context
default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::function, 1>$/;"	s	namespace:boost::proto::context
default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::function, 2>$/;"	s	namespace:boost::proto::context
default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::if_else_, 3>$/;"	s	namespace:boost::proto::context
default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::post_dec, 1>$/;"	s	namespace:boost::proto::context
default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::post_inc, 1>$/;"	s	namespace:boost::proto::context
default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, proto::tag::subscript, 2>$/;"	s	namespace:boost::proto::context
default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, tag::mem_ptr, 2>$/;"	s	namespace:boost::proto::context	inherits:memfun_eval
default_eval	proto/context/default.hpp	/^        struct default_eval<Expr, Context, tag::terminal, 0>$/;"	s	namespace:boost::proto::context
default_eval	proto/context/detail/default_eval.hpp	/^    struct default_eval<Expr, Context, proto::tag::function, N>$/;"	s
default_eval	proto/context/detail/preprocessed/default_eval.hpp	/^    struct default_eval<Expr, Context, proto::tag::function, 10>$/;"	s
default_eval	proto/context/detail/preprocessed/default_eval.hpp	/^    struct default_eval<Expr, Context, proto::tag::function, 3>$/;"	s
default_eval	proto/context/detail/preprocessed/default_eval.hpp	/^    struct default_eval<Expr, Context, proto::tag::function, 4>$/;"	s
default_eval	proto/context/detail/preprocessed/default_eval.hpp	/^    struct default_eval<Expr, Context, proto::tag::function, 5>$/;"	s
default_eval	proto/context/detail/preprocessed/default_eval.hpp	/^    struct default_eval<Expr, Context, proto::tag::function, 6>$/;"	s
default_eval	proto/context/detail/preprocessed/default_eval.hpp	/^    struct default_eval<Expr, Context, proto::tag::function, 7>$/;"	s
default_eval	proto/context/detail/preprocessed/default_eval.hpp	/^    struct default_eval<Expr, Context, proto::tag::function, 8>$/;"	s
default_eval	proto/context/detail/preprocessed/default_eval.hpp	/^    struct default_eval<Expr, Context, proto::tag::function, 9>$/;"	s
default_eval::function_type	proto/context/detail/default_eval.hpp	/^        function_type;$/;"	t	struct:default_eval	access:public
default_eval::function_type	proto/context/detail/preprocessed/default_eval.hpp	/^        function_type;$/;"	t	struct:default_eval	access:public
default_eval::invoke	proto/context/detail/default_eval.hpp	/^        result_type invoke(Expr &expr, Context &context, mpl::false_) const$/;"	f	struct:default_eval	access:private	signature:(Expr &expr, Context &context, mpl::false_) const
default_eval::invoke	proto/context/detail/default_eval.hpp	/^        result_type invoke(Expr &expr, Context &context, mpl::true_) const$/;"	f	struct:default_eval	access:private	signature:(Expr &expr, Context &context, mpl::true_) const
default_eval::invoke	proto/context/detail/preprocessed/default_eval.hpp	/^        result_type invoke(Expr &expr, Context &context, mpl::false_) const$/;"	f	struct:default_eval	access:private	signature:(Expr &expr, Context &context, mpl::false_) const
default_eval::invoke	proto/context/detail/preprocessed/default_eval.hpp	/^        result_type invoke(Expr &expr, Context &context, mpl::true_) const$/;"	f	struct:default_eval	access:private	signature:(Expr &expr, Context &context, mpl::true_) const
default_eval::operator ()	proto/context/detail/default_eval.hpp	/^        result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:default_eval	access:public	signature:(Expr &expr, Context &context) const
default_eval::operator ()	proto/context/detail/preprocessed/default_eval.hpp	/^        result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:default_eval	access:public	signature:(Expr &expr, Context &context) const
default_eval::result_type	proto/context/detail/default_eval.hpp	/^        result_type;$/;"	t	struct:default_eval	access:public
default_eval::result_type	proto/context/detail/preprocessed/default_eval.hpp	/^        result_type;$/;"	t	struct:default_eval	access:public
default_function	proto/transform/default.hpp	/^        struct default_function$/;"	s	namespace:boost::proto::detail	inherits:transform
default_function_impl	proto/transform/default.hpp	/^        struct default_function_impl<Grammar, Expr, State, Data, 1>$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
default_function_impl	proto/transform/default.hpp	/^        struct default_function_impl<Grammar, Expr, State, Data, 2>$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
default_function_impl	proto/transform/detail/default_function_impl.hpp	/^    struct default_function_impl<Grammar, Expr, State, Data, N>$/;"	s	inherits:transform_impl
default_function_impl	proto/transform/detail/preprocessed/default_function_impl.hpp	/^    struct default_function_impl<Grammar, Expr, State, Data, 10>$/;"	s	inherits:transform_impl
default_function_impl	proto/transform/detail/preprocessed/default_function_impl.hpp	/^    struct default_function_impl<Grammar, Expr, State, Data, 3>$/;"	s	inherits:transform_impl
default_function_impl	proto/transform/detail/preprocessed/default_function_impl.hpp	/^    struct default_function_impl<Grammar, Expr, State, Data, 4>$/;"	s	inherits:transform_impl
default_function_impl	proto/transform/detail/preprocessed/default_function_impl.hpp	/^    struct default_function_impl<Grammar, Expr, State, Data, 5>$/;"	s	inherits:transform_impl
default_function_impl	proto/transform/detail/preprocessed/default_function_impl.hpp	/^    struct default_function_impl<Grammar, Expr, State, Data, 6>$/;"	s	inherits:transform_impl
default_function_impl	proto/transform/detail/preprocessed/default_function_impl.hpp	/^    struct default_function_impl<Grammar, Expr, State, Data, 7>$/;"	s	inherits:transform_impl
default_function_impl	proto/transform/detail/preprocessed/default_function_impl.hpp	/^    struct default_function_impl<Grammar, Expr, State, Data, 8>$/;"	s	inherits:transform_impl
default_function_impl	proto/transform/detail/preprocessed/default_function_impl.hpp	/^    struct default_function_impl<Grammar, Expr, State, Data, 9>$/;"	s	inherits:transform_impl
default_function_impl::e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e8	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e8	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::e9	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::function_type	proto/transform/detail/default_function_impl.hpp	/^        function_type;$/;"	t	struct:default_function_impl	access:public
default_function_impl::function_type	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        function_type;$/;"	t	struct:default_function_impl	access:public
default_function_impl::invoke	proto/transform/detail/default_function_impl.hpp	/^        result_type invoke($/;"	f	struct:default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::false_ ) const
default_function_impl::invoke	proto/transform/detail/default_function_impl.hpp	/^        result_type invoke($/;"	f	struct:default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::true_ ) const
default_function_impl::invoke	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        result_type invoke($/;"	f	struct:default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::false_ ) const
default_function_impl::invoke	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        result_type invoke($/;"	f	struct:default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::true_ ) const
default_function_impl::operator ()	proto/transform/detail/default_function_impl.hpp	/^        result_type operator ()($/;"	f	struct:default_function_impl	access:public	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d ) const
default_function_impl::operator ()	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        result_type operator ()($/;"	f	struct:default_function_impl	access:public	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d ) const
default_function_impl::r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r8	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r8	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
default_function_impl::r9	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
default_function_impl::result_type	proto/transform/detail/default_function_impl.hpp	/^        result_type;$/;"	t	struct:default_function_impl	access:public
default_function_impl::result_type	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        result_type;$/;"	t	struct:default_function_impl	access:public
default_generator	proto/generate.hpp	/^    struct default_generator$/;"	s	namespace:boost::proto
default_if_else_	proto/transform/default.hpp	/^        struct default_if_else_$/;"	s	namespace:boost::proto::detail
default_mem_ptr	proto/transform/default.hpp	/^        struct default_mem_ptr$/;"	s	namespace:boost::proto::detail	inherits:transform
default_mem_ptr_impl	proto/transform/default.hpp	/^        struct default_mem_ptr_impl$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
default_mem_ptr_impl	proto/transform/default.hpp	/^        struct default_mem_ptr_impl<Grammar, Expr, State, Data, true>$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
default_post_dec	proto/transform/default.hpp	/^        struct default_post_dec$/;"	s	namespace:boost::proto::detail	inherits:transform
default_post_inc	proto/transform/default.hpp	/^        struct default_post_inc$/;"	s	namespace:boost::proto::detail	inherits:transform
default_subscript	proto/transform/default.hpp	/^        struct default_subscript$/;"	s	namespace:boost::proto::detail	inherits:transform
default_test	proto/detail/deduce_domain.hpp	/^            sized_type<1>::type default_test(void*, void*);$/;"	p	namespace:boost::proto::detail	signature:(void*, void*)
default_test	proto/detail/deduce_domain.hpp	/^            sized_type<2>::type default_test(domain_<basic_default_domain>*, void*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<basic_default_domain>*, void*)
default_test	proto/detail/deduce_domain.hpp	/^            sized_type<2>::type default_test(domain_<default_domain>*, void*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<default_domain>*, void*)
default_test	proto/detail/deduce_domain.hpp	/^            sized_type<3>::type default_test(void*, domain_<basic_default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(void*, domain_<basic_default_domain>*)
default_test	proto/detail/deduce_domain.hpp	/^            sized_type<3>::type default_test(void*, domain_<default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(void*, domain_<default_domain>*)
default_test	proto/detail/deduce_domain.hpp	/^            sized_type<4>::type default_test(domain_<basic_default_domain>*, domain_<basic_default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<basic_default_domain>*, domain_<basic_default_domain>*)
default_test	proto/detail/deduce_domain.hpp	/^            sized_type<4>::type default_test(domain_<basic_default_domain>*, domain_<default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<basic_default_domain>*, domain_<default_domain>*)
default_test	proto/detail/deduce_domain.hpp	/^            sized_type<4>::type default_test(domain_<default_domain>*, domain_<basic_default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<default_domain>*, domain_<basic_default_domain>*)
default_test	proto/detail/deduce_domain.hpp	/^            sized_type<4>::type default_test(domain_<default_domain>*, domain_<default_domain>*);$/;"	p	namespace:boost::proto::detail	signature:(domain_<default_domain>*, domain_<default_domain>*)
depth_	proto/debug.hpp	/^            int depth_;$/;"	m	struct:boost::proto::detail::display_expr_impl	access:private
depth_	proto/debug.hpp	/^            int depth_;$/;"	m	struct:boost::proto::functional::display_expr	access:private
deref_impl	proto/fusion.hpp	/^        struct deref_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
dereference	proto/tags.hpp	/^    struct dereference {};$/;"	s	namespace:boost::proto::tagns_::tag
detail	proto/args.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/context/callable.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/context/detail/callable_eval.hpp	/^    namespace detail$/;"	n
detail	proto/context/detail/preprocessed/callable_eval.hpp	/^    namespace detail$/;"	n
detail	proto/debug.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/deep_copy.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/any.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/as_expr.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/as_lvalue.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/decltype.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/deduce_domain.hpp	/^        namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/dont_care.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/ignore_unused.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/is_noncopyable.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/poly_function.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/preprocessed/traits.hpp	/^        namespace detail$/;"	n
detail	proto/detail/static_const.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/template_arity.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost::proto
detail	proto/detail/traits.hpp	/^        namespace detail$/;"	n
detail	proto/domain.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/expr.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/fusion.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/generate.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/make_expr.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/matches.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/operators.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/proto_fwd.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/traits.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/transform/default.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/transform/detail/make.hpp	/^    namespace detail$/;"	n
detail	proto/transform/detail/pack.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/transform/detail/preprocessed/make.hpp	/^    namespace detail$/;"	n
detail	proto/transform/env.hpp	/^        namespace detail$/;"	n	namespace:boost::proto
detail	proto/transform/fold.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/transform/fold_tree.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/transform/impl.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/transform/make.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/transform/pass_through.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail	proto/transform/when.hpp	/^    namespace detail$/;"	n	namespace:boost::proto
detail::BOOST_PP_ENUM_BINARY_PARAMS	proto/transform/detail/make.hpp	/^        Type construct(BOOST_PP_ENUM_BINARY_PARAMS(N, A, &a))$/;"	f	namespace:detail	signature:(N, A, &a)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct()$/;"	f	namespace:detail	signature:()
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1 , A2 &a2)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1 , A2 &a2)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0 , A1 &a1)$/;"	f	namespace:detail	signature:(A0 &a0 , A1 &a1)
detail::construct	proto/transform/detail/preprocessed/make.hpp	/^        Type construct(A0 &a0)$/;"	f	namespace:detail	signature:(A0 &a0)
detail::construct_	proto/transform/detail/make.hpp	/^        struct construct_<proto::basic_expr<T, A, N>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/make.hpp	/^        struct construct_<proto::expr<T, A, N>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 0>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 10>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 1>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 2>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 3>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 4>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 5>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 6>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 7>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 8>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::basic_expr<T, A, 9>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 0>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 10>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 1>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 2>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 3>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 4>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 5>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 6>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 7>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 8>, true>$/;"	s	namespace:detail
detail::construct_	proto/transform/detail/preprocessed/make.hpp	/^        struct construct_<proto::expr<T, A, 9>, true>$/;"	s	namespace:detail
detail::construct_::A	proto/transform/detail/make.hpp	/^            result_type operator ()(BOOST_PP_ENUM_BINARY_PARAMS(BOOST_PP_MAX(N, 1), A, &a)) const$/;"	m	struct:detail::construct_	access:public
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9) const
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8) const
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7) const
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6) const
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5) const
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4) const
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3) const
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2) const
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1) const
detail::construct_::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0) const
detail::construct_::result_type	proto/transform/detail/make.hpp	/^            typedef proto::basic_expr<T, A, N> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/make.hpp	/^            typedef proto::expr<T, A, N> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 0> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 10> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 1> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 2> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 3> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 4> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 5> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 6> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 7> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 8> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 9> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 0> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 10> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 1> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 2> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 3> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 4> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 5> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 6> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 7> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 8> result_type;$/;"	t	struct:detail::construct_	access:public
detail::construct_::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 9> result_type;$/;"	t	struct:detail::construct_	access:public
detail::is_applyable	proto/transform/detail/make.hpp	/^        struct is_applyable<R(*)(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/make.hpp	/^        struct is_applyable<R(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R()>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)()>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0)>$/;"	s	namespace:detail	inherits:mpl::true_
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9> BOOST_PROTO_TEMPLATE_ARITY_PARAM(10)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8> BOOST_PROTO_TEMPLATE_ARITY_PARAM(9)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7> BOOST_PROTO_TEMPLATE_ARITY_PARAM(8)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5 , A6> BOOST_PROTO_TEMPLATE_ARITY_PARAM(7)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5> BOOST_PROTO_TEMPLATE_ARITY_PARAM(6)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4> BOOST_PROTO_TEMPLATE_ARITY_PARAM(5)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3> BOOST_PROTO_TEMPLATE_ARITY_PARAM(4)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2> BOOST_PROTO_TEMPLATE_ARITY_PARAM(3)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1> BOOST_PROTO_TEMPLATE_ARITY_PARAM(2)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0> BOOST_PROTO_TEMPLATE_ARITY_PARAM(1)>$/;"	s	namespace:detail	inherits:is_same
detail::is_callable_	proto/detail/traits.hpp	/^            struct is_callable_<T<BOOST_PP_ENUM_PARAMS(N, A)> BOOST_PROTO_TEMPLATE_ARITY_PARAM(N)>$/;"	s	namespace:detail	inherits:is_same
detail::is_expr_handled	proto/context/detail/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, N>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 10>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 1>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 2>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 3>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 4>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 5>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 6>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 7>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 8>$/;"	s	namespace:detail
detail::is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 9>$/;"	s	namespace:detail
detail::is_expr_handled::sctx_	proto/context/detail/callable_eval.hpp	/^            static callable_context_wrapper<Context> &sctx_;$/;"	m	struct:detail::is_expr_handled	access:public
detail::is_expr_handled::sctx_	proto/context/detail/preprocessed/callable_eval.hpp	/^            static callable_context_wrapper<Context> &sctx_;$/;"	m	struct:detail::is_expr_handled	access:public
detail::is_expr_handled::sexpr_	proto/context/detail/callable_eval.hpp	/^            static Expr &sexpr_;$/;"	m	struct:detail::is_expr_handled	access:public
detail::is_expr_handled::sexpr_	proto/context/detail/preprocessed/callable_eval.hpp	/^            static Expr &sexpr_;$/;"	m	struct:detail::is_expr_handled	access:public
detail::is_expr_handled::stag_	proto/context/detail/callable_eval.hpp	/^            static typename Expr::proto_tag &stag_;$/;"	m	struct:detail::is_expr_handled	access:public
detail::is_expr_handled::stag_	proto/context/detail/preprocessed/callable_eval.hpp	/^            static typename Expr::proto_tag &stag_;$/;"	m	struct:detail::is_expr_handled	access:public
detail::is_expr_handled::type	proto/context/detail/callable_eval.hpp	/^            typedef mpl::bool_<value> type;$/;"	t	struct:detail::is_expr_handled	access:public
detail::is_expr_handled::type	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef mpl::bool_<value> type;$/;"	t	struct:detail::is_expr_handled	access:public
detail::is_expr_handled::value	proto/context/detail/callable_eval.hpp	/^            static const bool value =$/;"	m	struct:detail::is_expr_handled	access:public
detail::is_expr_handled::value	proto/context/detail/preprocessed/callable_eval.hpp	/^            static const bool value =$/;"	m	struct:detail::is_expr_handled	access:public
detail::make_	proto/transform/detail/make.hpp	/^        struct make_<$/;"	s	namespace:detail
detail::make_	proto/transform/detail/make.hpp	/^        struct make_<$/;"	s	namespace:detail	inherits:nested_type_if
detail::make_	proto/transform/detail/preprocessed/make.hpp	/^        struct make_<$/;"	s	namespace:detail
detail::make_	proto/transform/detail/preprocessed/make.hpp	/^        struct make_<$/;"	s	namespace:detail	inherits:nested_type_if
detail::make_::applied	proto/transform/detail/make.hpp	/^            static bool const applied = true;$/;"	m	struct:detail::make_	access:public
detail::make_::applied	proto/transform/detail/preprocessed/make.hpp	/^            static bool const applied = true;$/;"	m	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/make.hpp	/^            typedef R<BOOST_PP_ENUM(N, BOOST_PROTO_MAKE_IF_TYPE, ~)> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type , typename make_if_<A6, Expr, State, Data> ::type , typename make_if_<A7, Expr, State, Data> ::type , typename make_if_<A8, Expr, State, Data> ::type , typename make_if_<A9, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type , typename make_if_<A6, Expr, State, Data> ::type , typename make_if_<A7, Expr, State, Data> ::type , typename make_if_<A8, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type , typename make_if_<A6, Expr, State, Data> ::type , typename make_if_<A7, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type , typename make_if_<A6, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
detail::make_::type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
display_expr	proto/debug.hpp	/^            explicit display_expr(std::ostream &sout = std::cout, int depth = 0)$/;"	f	struct:boost::proto::functional::display_expr	access:public	signature:(std::ostream &sout = std::cout, int depth = 0)
display_expr	proto/debug.hpp	/^        struct display_expr$/;"	s	namespace:boost::proto::functional
display_expr	proto/debug.hpp	/^    void display_expr(Expr const &expr)$/;"	f	namespace:boost::proto	signature:(Expr const &expr)
display_expr	proto/debug.hpp	/^    void display_expr(Expr const &expr, std::ostream &sout)$/;"	f	namespace:boost::proto	signature:(Expr const &expr, std::ostream &sout)
display_expr_impl	proto/debug.hpp	/^            display_expr_impl(display_expr_impl const &);$/;"	p	struct:boost::proto::detail::display_expr_impl	access:private	signature:(display_expr_impl const &)
display_expr_impl	proto/debug.hpp	/^            explicit display_expr_impl(std::ostream &sout, int depth = 0)$/;"	f	struct:boost::proto::detail::display_expr_impl	access:public	signature:(std::ostream &sout, int depth = 0)
display_expr_impl	proto/debug.hpp	/^        struct display_expr_impl$/;"	s	namespace:boost::proto::detail
distance	proto/functional/std/iterator.hpp	/^    struct distance$/;"	s	namespace:boost::proto::functional
distance_impl	proto/fusion.hpp	/^        struct distance_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
divides	proto/tags.hpp	/^    struct divides {};$/;"	s	namespace:boost::proto::tagns_::tag
divides_assign	proto/tags.hpp	/^    struct divides_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
domain	proto/domain.hpp	/^        struct domain$/;"	s	namespace:boost::proto::domainns_	inherits:Generator
domain_	proto/detail/deduce_domain.hpp	/^            struct domain_$/;"	s	namespace:boost::proto::detail	inherits:domain_
domain_	proto/detail/deduce_domain.hpp	/^            struct domain_<basic_default_domain>$/;"	s	namespace:boost::proto::detail	inherits:domain_
domain_	proto/detail/deduce_domain.hpp	/^            struct domain_<default_domain>$/;"	s	namespace:boost::proto::detail	inherits:domain_
domain_	proto/detail/deduce_domain.hpp	/^            struct domain_<not_a_domain>$/;"	s	namespace:boost::proto::detail
domain_of	proto/domain.hpp	/^    struct domain_of$/;"	s	namespace:boost::proto
domain_of	proto/domain.hpp	/^    struct domain_of<T &, void>$/;"	s	namespace:boost::proto
domain_of	proto/domain.hpp	/^    struct domain_of<T, typename T::proto_is_expr_>$/;"	s	namespace:boost::proto
domain_of	proto/domain.hpp	/^    struct domain_of<boost::reference_wrapper<T> const, void>$/;"	s	namespace:boost::proto
domain_of	proto/domain.hpp	/^    struct domain_of<boost::reference_wrapper<T>, void>$/;"	s	namespace:boost::proto
domainns_	proto/domain.hpp	/^    namespace domainns_$/;"	n	namespace:boost::proto
domainns_	proto/proto_fwd.hpp	/^    namespace domainns_$/;"	n	namespace:boost::proto
dont_care	proto/detail/dont_care.hpp	/^            BOOST_FORCEINLINE dont_care(...);$/;"	p	struct:boost::proto::detail::dont_care	access:public	signature:(....)
dont_care	proto/detail/dont_care.hpp	/^        struct dont_care$/;"	s	namespace:boost::proto::detail
dst_args	proto/detail/generate_by_value.hpp	/^        dst_args;$/;"	t	struct:by_value_generator_	access:public
dst_args	proto/detail/preprocessed/generate_by_value.hpp	/^        dst_args;$/;"	t	struct:by_value_generator_	access:public
e0	proto/context/default.hpp	/^            typedef typename proto::result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::context::default_eval	access:private
e0	proto/context/default.hpp	/^            typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::context::memfun_eval	access:private
e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:private
e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_post_dec::impl	access:private
e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_post_inc::impl	access:private
e0	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_subscript::impl	access:private
e0	proto/transform/default.hpp	/^            typedef typename result_of::child_c<Expr, 0>::type e0;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:private
e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
e0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
e1	proto/context/default.hpp	/^            typedef typename proto::result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::context::default_eval	access:private
e1	proto/context/default.hpp	/^            typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::context::memfun_eval	access:private
e1	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:private
e1	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
e1	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::detail::default_subscript::impl	access:private
e1	proto/transform/default.hpp	/^            typedef typename result_of::child_c<Expr, 1>::type e1;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:private
e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
e1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
e2	proto/context/default.hpp	/^            typedef typename proto::result_of::child_c<Expr, 2>::type e2;$/;"	t	struct:boost::proto::context::default_eval	access:private
e2	proto/transform/default.hpp	/^                typedef typename result_of::child_c<Expr, 2>::type e2;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
e2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
e3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
e4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
e5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
e6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
e6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
e6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
e6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
e7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
e7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
e7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
e8	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
e8	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
e9	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
empty	proto/functional/range/empty.hpp	/^    struct empty$/;"	s	namespace:boost::proto::functional
empty_env	proto/transform/impl.hpp	/^        struct empty_env$/;"	s	namespace:boost::proto::envns_
empty_state	proto/proto_fwd.hpp	/^        typedef int empty_state;$/;"	t	namespace:boost::proto::envns_
enable_binary	proto/operators.hpp	/^        struct enable_binary$/;"	s	namespace:boost::proto::detail	inherits:boost::lazy_enable_if_c
enable_binary	proto/operators.hpp	/^        struct enable_binary<Domain, proto::_, Trait, Tag, Left &, Right &>$/;"	s	namespace:boost::proto::detail	inherits:boost::lazy_enable_if_c
enable_binary	proto/operators.hpp	/^        struct enable_binary<deduce_domain, not_a_grammar, Trait, Tag, Left &, Right &>$/;"	s	namespace:boost::proto::detail	inherits:enable_binary
enable_comparison	proto/fusion.hpp	/^        struct enable_comparison<$/;"	s	namespace:boost::fusion::traits	inherits:mpl::false_
enable_equality	proto/fusion.hpp	/^        struct enable_equality<$/;"	s	namespace:boost::fusion::traits	inherits:mpl::false_
enable_unary	proto/operators.hpp	/^        struct enable_unary$/;"	s	namespace:boost::proto::detail	inherits:boost::lazy_enable_if_c
enable_unary	proto/operators.hpp	/^        struct enable_unary<Domain, proto::_, Trait, Tag, Arg &>$/;"	s	namespace:boost::proto::detail	inherits:boost::lazy_enable_if_c
enable_unary	proto/operators.hpp	/^        struct enable_unary<deduce_domain, not_a_grammar, Trait, Tag, Arg &>$/;"	s	namespace:boost::proto::detail	inherits:enable_unary
end	proto/functional/range/end.hpp	/^    struct end$/;"	s	namespace:boost::proto::functional
end_impl	proto/fusion.hpp	/^        struct end_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
env	proto/transform/env.hpp	/^                explicit env(const_reference value, Base const &base = Base())$/;"	f	struct:boost::proto::envns_::env	access:public	signature:(const_reference value, Base const &base = Base())
env	proto/transform/env.hpp	/^            struct env$/;"	s	namespace:boost::proto::envns_	inherits:Base
env_var	proto/transform/env.hpp	/^            struct env_var$/;"	s	namespace:boost::proto::functional	inherits:detail::poly_function
env_var	proto/transform/env.hpp	/^            struct env_var$/;"	s	namespace:boost::proto::result_of	inherits:BOOST_PROTO_RESULT_OF
env_var	proto/transform/env.hpp	/^            struct env_var<data_type>$/;"	s	namespace:boost::proto::functional	inherits:detail::poly_function
env_var	proto/transform/env.hpp	/^        typename proto::result_of::env_var<Env const &, Key>::type env_var(Env const &e)$/;"	f	namespace:boost::proto	signature:(Env const &e)
envns_	proto/proto_fwd.hpp	/^    namespace envns_$/;"	n	namespace:boost::proto
envns_	proto/transform/env.hpp	/^        namespace envns_$/;"	n	namespace:boost::proto
envns_	proto/transform/impl.hpp	/^    namespace envns_$/;"	n	namespace:boost::proto
envns_	proto/transform/when.hpp	/^    namespace envns_$/;"	n	namespace:boost::proto
equal_to	proto/tags.hpp	/^    struct equal_to {};$/;"	s	namespace:boost::proto::tagns_::tag
eval	proto/context/callable.hpp	/^            struct eval$/;"	s	struct:boost::proto::context::callable_context	inherits:mpl::if_c::type	access:public
eval	proto/context/default.hpp	/^            struct eval$/;"	s	struct:boost::proto::context::default_context	inherits:default_eval	access:public
eval	proto/context/null.hpp	/^        struct eval$/;"	s	struct:boost::proto::context::null_context	inherits:null_eval	access:public
eval	proto/eval.hpp	/^        struct eval$/;"	s	namespace:boost::proto::functional
eval	proto/eval.hpp	/^        struct eval$/;"	s	namespace:boost::proto::result_of
eval	proto/eval.hpp	/^    eval(Expr &e, Context &ctx)$/;"	f	namespace:boost::proto	signature:(Expr &e, Context &ctx)
eval	proto/eval.hpp	/^    eval(Expr &e, Context const &ctx)$/;"	f	namespace:boost::proto	signature:(Expr &e, Context const &ctx)
eval	proto/eval.hpp	/^    eval(Expr const &e, Context &ctx)$/;"	f	namespace:boost::proto	signature:(Expr const &e, Context &ctx)
eval	proto/eval.hpp	/^    eval(Expr const &e, Context const &ctx)$/;"	f	namespace:boost::proto	signature:(Expr const &e, Context const &ctx)
eval_fun	proto/fusion.hpp	/^        explicit eval_fun(Context &ctx)$/;"	f	struct:boost::proto::eval_fun	access:public	signature:(Context &ctx)
eval_fun	proto/fusion.hpp	/^    struct eval_fun$/;"	s	namespace:boost::proto	inherits:proto::callable
exact	proto/matches.hpp	/^    struct exact$/;"	s	namespace:boost::proto
expand_pattern	proto/transform/detail/pack.hpp	/^        struct expand_pattern<0, Fun, Cont>$/;"	s	namespace:boost::proto::detail	inherits:Cont::,cat
expand_pattern	proto/transform/detail/pack_impl.hpp	/^        struct expand_pattern<BOOST_PP_INC(N), Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<1, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<10, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<2, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<3, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<4, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<5, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<6, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<7, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<8, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern<9, Fun, Cont>$/;"	s	inherits:Cont::,cat
expand_pattern::BOOST_MPL_ASSERT_MSG	proto/transform/detail/pack_impl.hpp	/^            BOOST_MPL_ASSERT_MSG($/;"	p	struct:expand_pattern	access:public	signature:(expand_pattern_helper<proto::_child_c<0>, Fun>::applied::value) , NO_PACK_EXPRESSION_FOUND_IN_UNPACKING_PATTERN , (Fun) 
expand_pattern::BOOST_MPL_ASSERT_MSG	proto/transform/detail/preprocessed/pack_impl.hpp	/^            BOOST_MPL_ASSERT_MSG($/;"	p	struct:expand_pattern	access:public	signature:(expand_pattern_helper<proto::_child_c<0>, Fun>::applied::value) , NO_PACK_EXPRESSION_FOUND_IN_UNPACKING_PATTERN , (Fun) 
expand_pattern_helper	proto/transform/detail/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s
expand_pattern_helper	proto/transform/detail/pack.hpp	/^        struct expand_pattern_helper$/;"	s	namespace:boost::proto::detail
expand_pattern_helper	proto/transform/detail/pack.hpp	/^        struct expand_pattern_helper<Tfx, Fun *>$/;"	s	namespace:boost::proto::detail	inherits:expand_pattern_helper
expand_pattern_helper	proto/transform/detail/pack.hpp	/^        struct expand_pattern_helper<Tfx, pack(T)>$/;"	s	namespace:boost::proto::detail
expand_pattern_helper	proto/transform/detail/pack.hpp	/^        struct expand_pattern_helper<Tfx, pack(_)>$/;"	s	namespace:boost::proto::detail
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret()>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4)>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3)>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2)>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0 , A1)>$/;"	s
expand_pattern_helper	proto/transform/detail/preprocessed/expand_pack.hpp	/^        struct expand_pattern_helper<Tfx, Ret(A0)>$/;"	s
expand_pattern_helper::applied	proto/transform/detail/expand_pack.hpp	/^            typedef mpl::bool_<BOOST_PP_REPEAT(N, M1, ~) false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_< false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || expand_pattern_helper<Tfx, A7>::applied::value || expand_pattern_helper<Tfx, A8>::applied::value || expand_pattern_helper<Tfx, A9>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || expand_pattern_helper<Tfx, A7>::applied::value || expand_pattern_helper<Tfx, A8>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || expand_pattern_helper<Tfx, A7>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::applied	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || false> applied;$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/expand_pack.hpp	/^            typedef Ret (*type)(BOOST_PP_ENUM(N, M0, ~));$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)();$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type , typename expand_pattern_helper<Tfx, A7>::type , typename expand_pattern_helper<Tfx, A8>::type , typename expand_pattern_helper<Tfx, A9>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type , typename expand_pattern_helper<Tfx, A7>::type , typename expand_pattern_helper<Tfx, A8>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type , typename expand_pattern_helper<Tfx, A7>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_helper::type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type);$/;"	t	struct:expand_pattern_helper	access:public
expand_pattern_rest_0	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_0$/;"	s
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8 , C9>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_0	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8 , C9)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5 , C6)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_0::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
expand_pattern_rest_1	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_1$/;"	s
expand_pattern_rest_1::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8>$/;"	s	struct:expand_pattern_rest_1	access:public
expand_pattern_rest_1::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7>$/;"	s	struct:expand_pattern_rest_1	access:public
expand_pattern_rest_1::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6>$/;"	s	struct:expand_pattern_rest_1	access:public
expand_pattern_rest_1::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_1	access:public
expand_pattern_rest_1::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_1	access:public
expand_pattern_rest_1::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_1	access:public
expand_pattern_rest_1::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_1	access:public
expand_pattern_rest_1::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_1	access:public
expand_pattern_rest_1::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_1	access:public
expand_pattern_rest_1::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
expand_pattern_rest_1::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
expand_pattern_rest_1::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4 , C5 , C6)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
expand_pattern_rest_1::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
expand_pattern_rest_1::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
expand_pattern_rest_1::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
expand_pattern_rest_1::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
expand_pattern_rest_1::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
expand_pattern_rest_1::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
expand_pattern_rest_2	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_2$/;"	s
expand_pattern_rest_2::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7>$/;"	s	struct:expand_pattern_rest_2	access:public
expand_pattern_rest_2::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6>$/;"	s	struct:expand_pattern_rest_2	access:public
expand_pattern_rest_2::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_2	access:public
expand_pattern_rest_2::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_2	access:public
expand_pattern_rest_2::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_2	access:public
expand_pattern_rest_2::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_2	access:public
expand_pattern_rest_2::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_2	access:public
expand_pattern_rest_2::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_2	access:public
expand_pattern_rest_2::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
expand_pattern_rest_2::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3 , C4 , C5 , C6)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
expand_pattern_rest_2::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
expand_pattern_rest_2::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
expand_pattern_rest_2::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
expand_pattern_rest_2::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
expand_pattern_rest_2::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
expand_pattern_rest_2::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
expand_pattern_rest_3	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_3$/;"	s
expand_pattern_rest_3::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5 , C6>$/;"	s	struct:expand_pattern_rest_3	access:public
expand_pattern_rest_3::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_3	access:public
expand_pattern_rest_3::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_3	access:public
expand_pattern_rest_3::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_3	access:public
expand_pattern_rest_3::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_3	access:public
expand_pattern_rest_3::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_3	access:public
expand_pattern_rest_3::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_3	access:public
expand_pattern_rest_3::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2 , C3 , C4 , C5 , C6)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
expand_pattern_rest_3::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
expand_pattern_rest_3::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
expand_pattern_rest_3::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
expand_pattern_rest_3::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
expand_pattern_rest_3::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
expand_pattern_rest_3::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
expand_pattern_rest_4	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_4$/;"	s
expand_pattern_rest_4::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4 , C5>$/;"	s	struct:expand_pattern_rest_4	access:public
expand_pattern_rest_4::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_4	access:public
expand_pattern_rest_4::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_4	access:public
expand_pattern_rest_4::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_4	access:public
expand_pattern_rest_4::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_4	access:public
expand_pattern_rest_4::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_4	access:public
expand_pattern_rest_4::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
expand_pattern_rest_4::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
expand_pattern_rest_4::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
expand_pattern_rest_4::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
expand_pattern_rest_4::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
expand_pattern_rest_4::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
expand_pattern_rest_5	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_5$/;"	s
expand_pattern_rest_5::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3 , C4>$/;"	s	struct:expand_pattern_rest_5	access:public
expand_pattern_rest_5::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_5	access:public
expand_pattern_rest_5::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_5	access:public
expand_pattern_rest_5::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_5	access:public
expand_pattern_rest_5::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_5	access:public
expand_pattern_rest_5::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
expand_pattern_rest_5::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
expand_pattern_rest_5::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
expand_pattern_rest_5::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
expand_pattern_rest_5::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
expand_pattern_rest_6	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_6$/;"	s
expand_pattern_rest_6::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2 , C3>$/;"	s	struct:expand_pattern_rest_6	access:public
expand_pattern_rest_6::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_6	access:public
expand_pattern_rest_6::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_6	access:public
expand_pattern_rest_6::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_6	access:public
expand_pattern_rest_6::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_6::cat	access:public
expand_pattern_rest_6::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_6::cat	access:public
expand_pattern_rest_6::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_6::cat	access:public
expand_pattern_rest_6::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , C0)> type;$/;"	t	struct:expand_pattern_rest_6::cat	access:public
expand_pattern_rest_7	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_7$/;"	s
expand_pattern_rest_7::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1 , C2>$/;"	s	struct:expand_pattern_rest_7	access:public
expand_pattern_rest_7::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_7	access:public
expand_pattern_rest_7::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_7	access:public
expand_pattern_rest_7::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_7::cat	access:public
expand_pattern_rest_7::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_7::cat	access:public
expand_pattern_rest_7::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , C0)> type;$/;"	t	struct:expand_pattern_rest_7::cat	access:public
expand_pattern_rest_8	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_8$/;"	s
expand_pattern_rest_8::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0 , C1>$/;"	s	struct:expand_pattern_rest_8	access:public
expand_pattern_rest_8::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_8	access:public
expand_pattern_rest_8::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_8::cat	access:public
expand_pattern_rest_8::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , C0)> type;$/;"	t	struct:expand_pattern_rest_8::cat	access:public
expand_pattern_rest_9	proto/transform/detail/preprocessed/pack_impl.hpp	/^        struct expand_pattern_rest_9$/;"	s
expand_pattern_rest_9::cat	proto/transform/detail/preprocessed/pack_impl.hpp	/^            struct cat<C0>$/;"	s	struct:expand_pattern_rest_9	access:public
expand_pattern_rest_9::cat::type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , C0)> type;$/;"	t	struct:expand_pattern_rest_9::cat	access:public
expr	proto/detail/expr.hpp	/^    struct expr<Tag, term<Arg0>, 0>$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list10<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9>, 10 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list1<Arg0>, 1 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list2<Arg0 , Arg1>, 2 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list3<Arg0 , Arg1 , Arg2>, 3 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list4<Arg0 , Arg1 , Arg2 , Arg3>, 4 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list5<Arg0 , Arg1 , Arg2 , Arg3 , Arg4>, 5 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list6<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5>, 6 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list7<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6>, 7 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list8<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7>, 8 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, list9<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8>, 9 >$/;"	s
expr	proto/detail/preprocessed/expr.hpp	/^    struct expr<Tag, term<Arg0>, 0>$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list10<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9>, 10 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list1<Arg0>, 1 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list2<Arg0 , Arg1>, 2 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list3<Arg0 , Arg1 , Arg2>, 3 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list4<Arg0 , Arg1 , Arg2 , Arg3>, 4 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list5<Arg0 , Arg1 , Arg2 , Arg3 , Arg4>, 5 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list6<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5>, 6 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list7<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6>, 7 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list8<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7>, 8 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, list9<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8>, 9 >$/;"	s
expr	proto/detail/preprocessed/expr_variadic.hpp	/^    struct expr<Tag, term<Arg0>, 0>$/;"	s
expr	proto/fusion.hpp	/^            Expr &expr;$/;"	m	struct:boost::proto::detail::expr_iterator	access:public
expr	proto/transform/impl.hpp	/^        typedef Expr const expr;$/;"	t	struct:boost::proto::transform_impl	access:public
expr	proto/transform/impl.hpp	/^        typedef Expr expr;$/;"	t	struct:boost::proto::transform_impl	access:public
expr::BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/expr.hpp	/^        static expr const make(BOOST_PP_ENUM_BINARY_PARAMS(ARG_COUNT, A, const &a))$/;"	f	struct:expr	access:public	signature:(ARG_COUNT, A, const &a)
expr::address_of_hack_type_	proto/detail/expr.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:expr	access:public
expr::address_of_hack_type_	proto/detail/expr.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:expr	access:public
expr::address_of_hack_type_	proto/detail/preprocessed/expr.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:expr	access:public
expr::address_of_hack_type_	proto/detail/preprocessed/expr.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:expr	access:public
expr::address_of_hack_type_	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef detail::not_a_valid_type address_of_hack_type_;$/;"	t	struct:expr	access:public
expr::address_of_hack_type_	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef typename detail::address_of_hack<Tag, proto_child0>::type address_of_hack_type_;$/;"	t	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:expr	access:public
expr::child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
expr::child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
expr::child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	m	struct:expr	access:public
expr::child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	m	struct:expr	access:public
expr::child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	m	struct:expr	access:public
expr::child8	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child8	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	m	struct:expr	access:public
expr::child9	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	m	struct:expr	access:public
expr::fusion_tag	proto/detail/expr.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:expr	access:public
expr::fusion_tag	proto/detail/preprocessed/expr.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:expr	access:public
expr::fusion_tag	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:expr	access:public
expr::make	proto/detail/expr.hpp	/^        static expr const make(A0 &a0)$/;"	f	struct:expr	access:public	signature:(A0 &a0)
expr::make	proto/detail/expr.hpp	/^        static expr const make(A0 const &a0)$/;"	f	struct:expr	access:public	signature:(A0 const &a0)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 &a0)$/;"	f	struct:expr	access:public	signature:(A0 &a0)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1)
expr::make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0)$/;"	f	struct:expr	access:public	signature:(A0 const &a0)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 &a0)$/;"	f	struct:expr	access:public	signature:(A0 &a0)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1)
expr::make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0)$/;"	f	struct:expr	access:public	signature:(A0 const &a0)
expr::operator address_of_hack_type_	proto/detail/expr.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:expr	access:public	signature:() const
expr::operator address_of_hack_type_	proto/detail/preprocessed/expr.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:expr	access:public	signature:() const
expr::operator address_of_hack_type_	proto/detail/preprocessed/expr_variadic.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:expr	access:public	signature:() const
expr::proto::operator ()	proto/detail/expr.hpp	/^        operator ()() const$/;"	f	class:expr::proto	access:public	signature:() const
expr::proto::operator ()	proto/detail/expr.hpp	/^        operator ()()$/;"	f	class:expr::proto	access:public	signature:()
expr::proto::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()() const$/;"	f	class:expr::proto	access:public	signature:() const
expr::proto::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()()$/;"	f	class:expr::proto	access:public	signature:()
expr::proto::operator =	proto/detail/expr.hpp	/^        operator =(A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
expr::proto::operator =	proto/detail/expr.hpp	/^        operator =(A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
expr::proto::operator =	proto/detail/expr.hpp	/^        operator =(A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
expr::proto::operator =	proto/detail/expr.hpp	/^        operator =(A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
expr::proto::operator =	proto/detail/expr.hpp	/^        operator =(expr const &a)$/;"	f	class:expr::proto	access:public	signature:(expr const &a)
expr::proto::operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
expr::proto::operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
expr::proto::operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
expr::proto::operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
expr::proto::operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(expr const &a)$/;"	f	class:expr::proto	access:public	signature:(expr const &a)
expr::proto::operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
expr::proto::operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
expr::proto::operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
expr::proto::operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
expr::proto::operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(expr const &a)$/;"	f	class:expr::proto	access:public	signature:(expr const &a)
expr::proto::operator []	proto/detail/expr.hpp	/^        operator [](A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
expr::proto::operator []	proto/detail/expr.hpp	/^        operator [](A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
expr::proto::operator []	proto/detail/expr.hpp	/^        operator [](A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
expr::proto::operator []	proto/detail/expr.hpp	/^        operator [](A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
expr::proto::operator []	proto/detail/preprocessed/expr.hpp	/^        operator [](A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
expr::proto::operator []	proto/detail/preprocessed/expr.hpp	/^        operator [](A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
expr::proto::operator []	proto/detail/preprocessed/expr.hpp	/^        operator [](A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
expr::proto::operator []	proto/detail/preprocessed/expr.hpp	/^        operator [](A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
expr::proto::operator []	proto/detail/preprocessed/expr_variadic.hpp	/^        operator [](A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
expr::proto::operator []	proto/detail/preprocessed/expr_variadic.hpp	/^        operator [](A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
expr::proto::operator []	proto/detail/preprocessed/expr_variadic.hpp	/^        operator [](A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
expr::proto::operator []	proto/detail/preprocessed/expr_variadic.hpp	/^        operator [](A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
expr::proto_args	proto/detail/expr.hpp	/^        typedef BOOST_PP_CAT(list, BOOST_PP_ITERATION())<BOOST_PP_ENUM_PARAMS(ARG_COUNT, Arg)> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/expr.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list10<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list1<Arg0> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list2<Arg0 , Arg1> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list3<Arg0 , Arg1 , Arg2> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list4<Arg0 , Arg1 , Arg2 , Arg3> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list5<Arg0 , Arg1 , Arg2 , Arg3 , Arg4> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list6<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list7<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list8<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list9<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list10<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list1<Arg0> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list2<Arg0 , Arg1> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list3<Arg0 , Arg1 , Arg2> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list4<Arg0 , Arg1 , Arg2 , Arg3> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list5<Arg0 , Arg1 , Arg2 , Arg3 , Arg4> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list6<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list7<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list8<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list9<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8> proto_args;$/;"	t	struct:expr	access:public
expr::proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/expr.hpp	/^        typedef mpl::long_<BOOST_PP_ITERATION() > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<0 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<1 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<10 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<2 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<3 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<4 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<5 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<6 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<7 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<8 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<9 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<0 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<1 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<10 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<2 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<3 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<4 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<5 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<6 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<7 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<8 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<9 > proto_arity;$/;"	t	struct:expr	access:public
expr::proto_arity_c	proto/detail/expr.hpp	/^        static const long proto_arity_c = BOOST_PP_ITERATION();$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 0;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 10;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 1;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 2;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 3;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 4;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 5;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 6;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 7;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 8;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 9;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 0;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 10;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 1;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 2;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 3;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 4;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 5;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 6;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 7;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 8;$/;"	m	struct:expr	access:public
expr::proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 9;$/;"	m	struct:expr	access:public
expr::proto_base	proto/detail/expr.hpp	/^        expr &proto_base()$/;"	f	struct:expr	access:public	signature:()
expr::proto_base	proto/detail/expr.hpp	/^        expr const &proto_base() const$/;"	f	struct:expr	access:public	signature:() const
expr::proto_base	proto/detail/preprocessed/expr.hpp	/^        expr &proto_base()$/;"	f	struct:expr	access:public	signature:()
expr::proto_base	proto/detail/preprocessed/expr.hpp	/^        expr const &proto_base() const$/;"	f	struct:expr	access:public	signature:() const
expr::proto_base	proto/detail/preprocessed/expr_variadic.hpp	/^        expr &proto_base()$/;"	f	struct:expr	access:public	signature:()
expr::proto_base	proto/detail/preprocessed/expr_variadic.hpp	/^        expr const &proto_base() const$/;"	f	struct:expr	access:public	signature:() const
expr::proto_base_expr	proto/detail/expr.hpp	/^        typedef expr proto_base_expr;$/;"	t	struct:expr	access:public
expr::proto_base_expr	proto/detail/preprocessed/expr.hpp	/^        typedef expr proto_base_expr;$/;"	t	struct:expr	access:public
expr::proto_base_expr	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef expr proto_base_expr;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:expr	access:public
expr::proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:expr	access:public
expr::proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child9;$/;"	t	struct:expr	access:public
expr::proto_derived_expr	proto/detail/expr.hpp	/^        typedef expr proto_derived_expr;$/;"	t	struct:expr	access:public
expr::proto_derived_expr	proto/detail/preprocessed/expr.hpp	/^        typedef expr proto_derived_expr;$/;"	t	struct:expr	access:public
expr::proto_derived_expr	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef expr proto_derived_expr;$/;"	t	struct:expr	access:public
expr::proto_domain	proto/detail/expr.hpp	/^        typedef default_domain proto_domain;$/;"	t	struct:expr	access:public
expr::proto_domain	proto/detail/preprocessed/expr.hpp	/^        typedef default_domain proto_domain;$/;"	t	struct:expr	access:public
expr::proto_domain	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef default_domain proto_domain;$/;"	t	struct:expr	access:public
expr::proto_generator	proto/detail/expr.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:expr	access:public
expr::proto_generator	proto/detail/preprocessed/expr.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:expr	access:public
expr::proto_generator	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/expr.hpp	/^        typedef basic_expr<Tag, proto_args, BOOST_PP_ITERATION() > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 0 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 1 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 10 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 2 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 3 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 4 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 5 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 6 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 7 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 8 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 9 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 0 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 1 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 10 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 2 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 3 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 4 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 5 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 6 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 7 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 8 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 9 > proto_grammar;$/;"	t	struct:expr	access:public
expr::proto_is_expr_	proto/detail/expr.hpp	/^        typedef void proto_is_expr_; \/**< INTERNAL ONLY *\/$/;"	t	struct:expr	access:public
expr::proto_is_expr_	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_is_expr_; $/;"	t	struct:expr	access:public
expr::proto_is_expr_	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_is_expr_; $/;"	t	struct:expr	access:public
expr::proto_tag	proto/detail/expr.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:expr	access:public
expr::proto_tag	proto/detail/preprocessed/expr.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:expr	access:public
expr::proto_tag	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:expr	access:public
expr::result	proto/detail/expr.hpp	/^        struct result$/;"	s	struct:expr	access:public
expr::result	proto/detail/preprocessed/expr.hpp	/^        struct result$/;"	s	struct:expr	access:public
expr::result	proto/detail/preprocessed/expr_variadic.hpp	/^        struct result$/;"	s	struct:expr	access:public
expr::result::result_of::funop::type	proto/detail/expr.hpp	/^            typedef typename result_of::funop<Sig, expr, default_domain>::type const type;$/;"	t	class:expr::result::result_of::funop	access:public
expr::result::result_of::funop::type	proto/detail/preprocessed/expr.hpp	/^            typedef typename result_of::funop<Sig, expr, default_domain>::type const type;$/;"	t	class:expr::result::result_of::funop	access:public
expr::result::result_of::funop::type	proto/detail/preprocessed/expr_variadic.hpp	/^            typedef typename result_of::funop<Sig, expr, default_domain>::type const type;$/;"	t	class:expr::result::result_of::funop	access:public
expr::result_of::funop1::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0) const$/;"	f	class:expr::result_of::funop1	access:public	signature:(A0 const &a0) const
expr::result_of::funop1::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0)$/;"	f	class:expr::result_of::funop1	access:public	signature:(A0 const &a0)
expr::result_of::funop2::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1) const$/;"	f	class:expr::result_of::funop2	access:public	signature:(A0 const &a0 , A1 const &a1) const
expr::result_of::funop2::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1)$/;"	f	class:expr::result_of::funop2	access:public	signature:(A0 const &a0 , A1 const &a1)
expr::result_of::funop3::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) const$/;"	f	class:expr::result_of::funop3	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2) const
expr::result_of::funop3::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2)$/;"	f	class:expr::result_of::funop3	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
expr::result_of::funop4::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const$/;"	f	class:expr::result_of::funop4	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const
expr::result_of::funop4::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)$/;"	f	class:expr::result_of::funop4	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
expr::result_of::funop5::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const$/;"	f	class:expr::result_of::funop5	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const
expr::result_of::funop5::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)$/;"	f	class:expr::result_of::funop5	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
expr::result_of::funop6::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const$/;"	f	class:expr::result_of::funop6	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const
expr::result_of::funop6::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)$/;"	f	class:expr::result_of::funop6	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
expr::result_of::funop7::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const$/;"	f	class:expr::result_of::funop7	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const
expr::result_of::funop7::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)$/;"	f	class:expr::result_of::funop7	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
expr::result_of::funop8::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const$/;"	f	class:expr::result_of::funop8	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const
expr::result_of::funop8::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)$/;"	f	class:expr::result_of::funop8	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
expr::result_of::funop9::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const$/;"	f	class:expr::result_of::funop9	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const
expr::result_of::funop9::operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)$/;"	f	class:expr::result_of::funop9	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
expr::result_of::funop::operator ()	proto/detail/expr.hpp	/^        operator ()(A const &... a) const$/;"	f	class:expr::result_of::funop	access:public	signature:(A const &.... a) const
expr::result_of::funop::operator ()	proto/detail/expr.hpp	/^        operator ()(A const &... a)$/;"	f	class:expr::result_of::funop	access:public	signature:(A const &.... a)
expr::result_of::funop::operator ()	proto/detail/preprocessed/expr_variadic.hpp	/^        operator ()(A const &... a) const$/;"	f	class:expr::result_of::funop	access:public	signature:(A const &.... a) const
expr::result_of::funop::operator ()	proto/detail/preprocessed/expr_variadic.hpp	/^        operator ()(A const &... a)$/;"	f	class:expr::result_of::funop	access:public	signature:(A const &.... a)
expr_iterator	proto/fusion.hpp	/^            explicit expr_iterator(Expr &e)$/;"	f	struct:boost::proto::detail::expr_iterator	access:public	signature:(Expr &e)
expr_iterator	proto/fusion.hpp	/^        struct expr_iterator$/;"	s	namespace:boost::proto::detail	inherits:fusion::iterator_base
expr_param	proto/transform/impl.hpp	/^        typedef Expr &expr_param;$/;"	t	struct:boost::proto::transform_impl	access:public
expr_param	proto/transform/impl.hpp	/^        typedef Expr const &expr_param;$/;"	t	struct:boost::proto::transform_impl	access:public
expr_traits	proto/args.hpp	/^        struct expr_traits$/;"	s	namespace:boost::proto::detail
expr_traits	proto/args.hpp	/^        struct expr_traits<Expr &>$/;"	s	namespace:boost::proto::detail
expr_traits	proto/args.hpp	/^        struct expr_traits<Expr const &>$/;"	s	namespace:boost::proto::detail
expr_type	proto/deep_copy.hpp	/^            expr_type;$/;"	t	struct:boost::proto::detail::deep_copy_impl	access:public
expr_type	proto/detail/as_expr.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<reference>, 0> expr_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
expr_type	proto/detail/as_expr.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<value_type>, 0> expr_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
expr_type	proto/detail/as_expr.hpp	/^        typedef proto::expr<proto::tag::terminal, term<reference>, 0> expr_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
expr_type	proto/detail/as_expr.hpp	/^        typedef proto::expr<proto::tag::terminal, term<value_type>, 0> expr_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
expr_type	proto/detail/deep_copy.hpp	/^        expr_type;$/;"	t	struct:deep_copy_impl	access:public
expr_type	proto/detail/make_expr_.hpp	/^        typedef typename base_expr<Domain, Tag, proto_args>::type expr_type;$/;"	t	struct:make_expr_	access:public
expr_type	proto/detail/preprocessed/deep_copy.hpp	/^        expr_type;$/;"	t	struct:deep_copy_impl	access:public
expr_type	proto/detail/preprocessed/make_expr_.hpp	/^        typedef typename base_expr<Domain, Tag, proto_args>::type expr_type;$/;"	t	struct:make_expr_	access:public
expr_type	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename base_expr<Domain, Tag, proto_args>::type expr_type;$/;"	t	struct:unpack_expr_	access:public
expr_type	proto/detail/unpack_expr_.hpp	/^        typedef typename base_expr<Domain, Tag, proto_args>::type expr_type;$/;"	t	struct:unpack_expr_	access:public
expr_type	proto/fusion.hpp	/^            typedef Expr expr_type;$/;"	t	struct:boost::proto::detail::expr_iterator	access:public
expr_type	proto/transform/detail/pass_through_impl.hpp	/^        expr_type;$/;"	t	struct:pass_through_impl	access:public
expr_type	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        expr_type;$/;"	t	struct:pass_through_impl	access:public
exprns_	proto/expr.hpp	/^    namespace exprns_$/;"	n	namespace:boost::proto
exprns_	proto/extends.hpp	/^    namespace exprns_$/;"	n	namespace:boost::proto
exprns_	proto/operators.hpp	/^    namespace exprns_$/;"	n	namespace:boost::proto
exprns_	proto/proto_fwd.hpp	/^    namespace exprns_$/;"	n	namespace:boost::proto
extends	proto/extends.hpp	/^            extends()$/;"	f	struct:boost::proto::exprns_::extends	access:public	signature:()
extends	proto/extends.hpp	/^            extends(Expr const &expr_)$/;"	f	struct:boost::proto::exprns_::extends	access:public	signature:(Expr const &expr_)
extends	proto/extends.hpp	/^            extends(extends const &that)$/;"	f	struct:boost::proto::exprns_::extends	access:public	signature:(extends const &that)
extends	proto/extends.hpp	/^        struct extends$/;"	s	namespace:boost::proto::exprns_
extends	proto/extends.hpp	/^        struct extends<Expr, Derived, Domain, 0>$/;"	s	namespace:boost::proto::exprns_
extension	proto/fusion.hpp	/^    namespace extension$/;"	n	namespace:boost::fusion
external_transforms	proto/transform/when.hpp	/^    struct external_transforms$/;"	s	namespace:boost::proto
first	proto/functional/std/utility.hpp	/^    struct first$/;"	s	namespace:boost::proto::functional
first	proto/transform/when.hpp	/^            typedef Grammar first;$/;"	t	struct:boost::proto::detail::when_impl	access:public
first	proto/transform/when.hpp	/^        typedef Grammar first;$/;"	t	struct:boost::proto::when	access:public
first_	proto/debug.hpp	/^            mutable bool first_;$/;"	m	struct:boost::proto::detail::display_expr_impl	access:private
flat_view	proto/fusion.hpp	/^            explicit flat_view(Expr &e)$/;"	f	struct:boost::proto::detail::flat_view	access:public	signature:(Expr &e)
flat_view	proto/fusion.hpp	/^        struct flat_view$/;"	s	namespace:boost::proto::detail	inherits:fusion::sequence_base
flatten	proto/fusion.hpp	/^        struct flatten$/;"	s	namespace:boost::proto::functional
flatten	proto/fusion.hpp	/^        struct flatten$/;"	s	namespace:boost::proto::result_of	inherits:flatten
flatten	proto/fusion.hpp	/^        struct flatten<Expr &>$/;"	s	namespace:boost::proto::result_of
flatten	proto/fusion.hpp	/^    flatten(Expr &e)$/;"	f	class:boost::proto::proto::detail	signature:(Expr &e)
flatten	proto/fusion.hpp	/^    flatten(Expr const &e)$/;"	f	class:boost::proto::proto::detail	signature:(Expr const &e)
fold	proto/transform/fold.hpp	/^    struct fold : transform<fold<Sequence, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:transform
fold	proto/transform/fold.hpp	/^    struct fold<_, State0, Fun> : transform<fold<_, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:transform
fold_impl	proto/transform/detail/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, N>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 10>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 1>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 2>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 3>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 4>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 5>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 6>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 7>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 8>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct fold_impl<State0, Fun, Expr, State, Data, 9>$/;"	s	inherits:transform_impl
fold_impl	proto/transform/fold.hpp	/^        struct fold_impl$/;"	s	namespace:boost::proto::detail
fold_impl::operator ()	proto/transform/detail/fold_impl.hpp	/^        result_type operator ()($/;"	f	struct:fold_impl	access:public	signature:( typename fold_impl::expr_param e , typename fold_impl::state_param s , typename fold_impl::data_param d ) const
fold_impl::operator ()	proto/transform/detail/preprocessed/fold_impl.hpp	/^        result_type operator ()($/;"	f	struct:fold_impl	access:public	signature:( typename fold_impl::expr_param e , typename fold_impl::state_param s , typename fold_impl::data_param d ) const
fold_impl::result_type	proto/transform/detail/fold_impl.hpp	/^        typedef BOOST_PP_CAT(state, N) result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state1 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state10 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state2 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state3 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state4 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state5 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state6 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state7 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state8 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state9 result_type;$/;"	t	struct:fold_impl	access:public
fold_impl::state0	proto/transform/detail/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;$/;"	t	struct:fold_impl	access:public
fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2;$/;"	t	struct:fold_impl	access:public
fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1;$/;"	t	struct:fold_impl	access:public
fold_impl::state10	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4;$/;"	t	struct:fold_impl	access:public
fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3;$/;"	t	struct:fold_impl	access:public
fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2;$/;"	t	struct:fold_impl	access:public
fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4;$/;"	t	struct:fold_impl	access:public
fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3;$/;"	t	struct:fold_impl	access:public
fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4;$/;"	t	struct:fold_impl	access:public
fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
fold_impl::state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
fold_impl::state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
fold_impl::state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
fold_impl::state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
fold_impl::state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
fold_impl::state9	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
fold_impl::state9	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
fold_tree	proto/transform/fold_tree.hpp	/^    struct fold_tree$/;"	s	namespace:boost::proto	inherits:transform
fold_tree_	proto/transform/fold_tree.hpp	/^        struct fold_tree_$/;"	s	namespace:boost::proto::detail	inherits:if_
found	proto/transform/env.hpp	/^                struct found$/;"	s	struct:boost::proto::envns_::env	access:public
fun	proto/transform/fold.hpp	/^            fun;$/;"	t	struct:boost::proto::fold::impl	access:public
fun	proto/transform/fold.hpp	/^            fun;$/;"	t	struct:boost::proto::reverse_fold::impl	access:public
fun_type	proto/context/callable.hpp	/^            typedef private_type_ fun_type(...);$/;"	t	struct:boost::proto::detail::callable_context_wrapper	access:public
function	proto/detail/preprocessed/traits.hpp	/^        struct function$/;"	s	inherits:proto::transform
function	proto/detail/traits.hpp	/^        struct function$/;"	s	inherits:proto::transform
function	proto/tags.hpp	/^    struct function {};$/;"	s	namespace:boost::proto::tagns_::tag
function::impl	proto/detail/preprocessed/traits.hpp	/^            struct impl$/;"	s	struct:function	inherits:detail::pass_through_impl	access:public
function::impl	proto/detail/traits.hpp	/^            struct impl$/;"	s	struct:function	inherits:detail::pass_through_impl	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:function	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:function	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1;$/;"	t	struct:function	access:public
function::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1;$/;"	t	struct:function	access:public
function::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
function::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
function::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
function::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
function::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
function::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:function	access:public
function::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:function	access:public
function::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A7> proto_child8; typedef detail::if_vararg<A7> proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A7> proto_child8; typedef detail::if_vararg<A7> proto_child9;$/;"	t	struct:function	access:public
function::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A8> proto_child9;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list10<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9>, 10> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list1<A0>, 1> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list2<A0 , A1>, 2> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list3<A0 , A1 , A2>, 3> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list4<A0 , A1 , A2 , A3>, 4> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list5<A0 , A1 , A2 , A3 , A4>, 5> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list6<A0 , A1 , A2 , A3 , A4 , A5>, 6> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list7<A0 , A1 , A2 , A3 , A4 , A5 , A6>, 7> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list8<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7>, 8> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list9<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8>, 9> proto_grammar;$/;"	t	struct:function	access:public
function::proto_grammar	proto/detail/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, BOOST_PP_CAT(list, N)<BOOST_PP_ENUM_PARAMS(N, A)>, N> proto_grammar;$/;"	t	struct:function	access:public
function::proto_tag	proto/detail/preprocessed/traits.hpp	/^            typedef proto::tag::function proto_tag;$/;"	t	struct:function	access:public
function::proto_tag	proto/detail/traits.hpp	/^            typedef proto::tag::function proto_tag;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list10<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9>, 10> type;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list1<A0>, 1> type;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list2<A0 , A1>, 2> type;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list3<A0 , A1 , A2>, 3> type;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list4<A0 , A1 , A2 , A3>, 4> type;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list5<A0 , A1 , A2 , A3 , A4>, 5> type;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list6<A0 , A1 , A2 , A3 , A4 , A5>, 6> type;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list7<A0 , A1 , A2 , A3 , A4 , A5 , A6>, 7> type;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list8<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7>, 8> type;$/;"	t	struct:function	access:public
function::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list9<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8>, 9> type;$/;"	t	struct:function	access:public
function::type	proto/detail/traits.hpp	/^            typedef proto::expr<proto::tag::function, BOOST_PP_CAT(list, N)<BOOST_PP_ENUM_PARAMS(N, A)>, N> type;$/;"	t	struct:function	access:public
function_traits	proto/transform/detail/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(BOOST_PP_ENUM_PARAMS(N, b))> function_traits;$/;"	t	struct:call::impl	access:public
function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5 , b6 , b7 , b8 , b9)> function_traits;$/;"	t	struct:call::impl	access:public
function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5 , b6 , b7 , b8)> function_traits;$/;"	t	struct:call::impl	access:public
function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5 , b6 , b7)> function_traits;$/;"	t	struct:call::impl	access:public
function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5 , b6)> function_traits;$/;"	t	struct:call::impl	access:public
function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4 , b5)> function_traits;$/;"	t	struct:call::impl	access:public
function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3 , b4)> function_traits;$/;"	t	struct:call::impl	access:public
function_traits	proto/transform/detail/preprocessed/call.hpp	/^            typedef detail::poly_function_traits<Fun, Fun(b0 , b1 , b2 , b3)> function_traits;$/;"	t	struct:call::impl	access:public
function_type	proto/context/default.hpp	/^            function_type;$/;"	t	struct:boost::proto::context::default_eval	access:public
function_type	proto/context/detail/default_eval.hpp	/^        function_type;$/;"	t	struct:default_eval	access:public
function_type	proto/context/detail/preprocessed/default_eval.hpp	/^        function_type;$/;"	t	struct:default_eval	access:public
function_type	proto/detail/poly_function.hpp	/^        typedef Fun function_type;$/;"	t	struct:boost::proto::detail::poly_function_traits	access:public
function_type	proto/detail/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<BOOST_PP_ENUM_PARAMS(N, const A)> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 , const A9> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0> function_type;$/;"	t	struct:poly_function_traits	access:public
function_type	proto/transform/default.hpp	/^            function_type;$/;"	t	struct:boost::proto::detail::default_function_impl	access:public
function_type	proto/transform/detail/default_function_impl.hpp	/^        function_type;$/;"	t	struct:default_function_impl	access:public
function_type	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        function_type;$/;"	t	struct:default_function_impl	access:public
functional	proto/debug.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
functional	proto/deep_copy.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
functional	proto/eval.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/fusion/at.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/fusion/pop_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/fusion/pop_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/fusion/push_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/fusion/push_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/fusion/reverse.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/range/begin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/range/empty.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/range/end.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/range/rbegin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/range/rend.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/range/size.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/std/iterator.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/functional/std/utility.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost::proto
functional	proto/fusion.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
functional	proto/make_expr.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
functional	proto/proto_fwd.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
functional	proto/traits.hpp	/^    namespace functional$/;"	n	namespace:boost::proto
functional	proto/transform/env.hpp	/^        namespace functional$/;"	n	namespace:boost::proto
funop	proto/detail/funop.hpp	/^    struct funop<Expr(BOOST_PP_ENUM_PARAMS(BOOST_PP_ITERATION(), A)), This, Domain>$/;"	s	inherits:BOOST_PP_CAT,funop,BOOST_PP_ITERATION
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(), This, Domain>$/;"	s	inherits:funop0
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8), This, Domain>$/;"	s	inherits:funop9
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7), This, Domain>$/;"	s	inherits:funop8
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(A0 , A1 , A2 , A3 , A4 , A5 , A6), This, Domain>$/;"	s	inherits:funop7
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(A0 , A1 , A2 , A3 , A4 , A5), This, Domain>$/;"	s	inherits:funop6
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(A0 , A1 , A2 , A3 , A4), This, Domain>$/;"	s	inherits:funop5
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(A0 , A1 , A2 , A3), This, Domain>$/;"	s	inherits:funop4
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(A0 , A1 , A2), This, Domain>$/;"	s	inherits:funop3
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(A0 , A1), This, Domain>$/;"	s	inherits:funop2
funop	proto/detail/preprocessed/funop.hpp	/^    struct funop<Expr(A0), This, Domain>$/;"	s	inherits:funop1
funop0	proto/detail/preprocessed/funop.hpp	/^    struct funop0$/;"	s
funop0::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop0	access:public	signature:( Expr &e )
funop0::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop0	access:public
funop1	proto/detail/preprocessed/funop.hpp	/^    struct funop1$/;"	s
funop1::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop1	access:public	signature:( Expr &e , A0 &a0 )
funop1::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop1	access:public
funop2	proto/detail/preprocessed/funop.hpp	/^    struct funop2$/;"	s
funop2::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop2	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 )
funop2::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop2	access:public
funop3	proto/detail/preprocessed/funop.hpp	/^    struct funop3$/;"	s
funop3::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop3	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 )
funop3::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop3	access:public
funop4	proto/detail/preprocessed/funop.hpp	/^    struct funop4$/;"	s
funop4::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop4	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 )
funop4::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop4	access:public
funop5	proto/detail/preprocessed/funop.hpp	/^    struct funop5$/;"	s
funop5::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop5	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 )
funop5::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop5	access:public
funop6	proto/detail/preprocessed/funop.hpp	/^    struct funop6$/;"	s
funop6::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop6	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 )
funop6::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop6	access:public
funop7	proto/detail/preprocessed/funop.hpp	/^    struct funop7$/;"	s
funop7::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop7	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 )
funop7::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop7	access:public
funop8	proto/detail/preprocessed/funop.hpp	/^    struct funop8$/;"	s
funop8::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop8	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 )
funop8::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop8	access:public
funop9	proto/detail/preprocessed/funop.hpp	/^    struct funop9$/;"	s
funop9::call	proto/detail/preprocessed/funop.hpp	/^        static type const call($/;"	f	struct:funop9	access:public	signature:( Expr &e , A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 )
funop9::type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop9	access:public
fusion	proto/fusion.hpp	/^namespace boost { namespace fusion$/;"	n	namespace:boost
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator6	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator6	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator6	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator6	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator7	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator7	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator7	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator8	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator8	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
fusion_iterator9	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
fusion_tag	proto/detail/basic_expr.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:basic_expr	access:public
fusion_tag	proto/detail/expr.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:expr	access:public
fusion_tag	proto/detail/preprocessed/basic_expr.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:basic_expr	access:public
fusion_tag	proto/detail/preprocessed/expr.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:expr	access:public
fusion_tag	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef proto::tag::proto_expr<Tag, proto_domain> fusion_tag;$/;"	t	struct:expr	access:public
fusion_tag	proto/extends.hpp	/^            typedef boost::proto::tag::proto_expr<proto_tag, Domain> fusion_tag;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
fusion_tag	proto/fusion.hpp	/^            fusion_tag;$/;"	t	struct:boost::proto::detail::expr_iterator	access:public
fusion_tag	proto/fusion.hpp	/^            fusion_tag;$/;"	t	struct:boost::proto::detail::flat_view	access:public
generator	proto/generate.hpp	/^    struct generator$/;"	s	namespace:boost::proto
get	proto/literal.hpp	/^            const_reference get() const$/;"	f	struct:boost::proto::utility::literal	access:public	signature:() const
get	proto/literal.hpp	/^            reference get()$/;"	f	struct:boost::proto::utility::literal	access:public	signature:()
get_pointer	proto/detail/decltype.hpp	/^            get_pointer(T &t)$/;"	f	namespace:boost::proto::detail::get_pointerns	signature:(T &t)
get_pointer	proto/detail/decltype.hpp	/^            get_pointer(T const &t)$/;"	f	namespace:boost::proto::detail::get_pointerns	signature:(T const &t)
get_pointer	proto/detail/decltype.hpp	/^            void *(&get_pointer(...))[2];$/;"	p	namespace:boost::proto::detail::has_get_pointerns	signature:(....)
get_pointerns	proto/detail/decltype.hpp	/^        namespace get_pointerns$/;"	n	namespace:boost::proto::detail
greater	proto/tags.hpp	/^    struct greater {};$/;"	s	namespace:boost::proto::tagns_::tag
greater_equal	proto/tags.hpp	/^    struct greater_equal {};$/;"	s	namespace:boost::proto::tagns_::tag
has_env_var	proto/transform/env.hpp	/^            struct has_env_var$/;"	s	namespace:boost::proto::functional	inherits:detail::poly_function
has_env_var	proto/transform/env.hpp	/^            struct has_env_var$/;"	s	namespace:boost::proto::result_of	inherits:BOOST_PROTO_RESULT_OF::type
has_env_var	proto/transform/env.hpp	/^            struct has_env_var<data_type>$/;"	s	namespace:boost::proto::functional	inherits:detail::poly_function
has_env_var	proto/transform/env.hpp	/^        typename proto::result_of::has_env_var<Env const &, Key>::type has_env_var(Env const &e)$/;"	f	namespace:boost::proto	signature:(Env const &e)
has_get_pointer	proto/detail/decltype.hpp	/^            struct has_get_pointer$/;"	s	namespace:boost::proto::detail::has_get_pointerns
has_get_pointerns	proto/detail/decltype.hpp	/^        namespace has_get_pointerns$/;"	n	namespace:boost::proto::detail
has_tag	proto/transform/fold_tree.hpp	/^        struct has_tag$/;"	s	namespace:boost::proto::detail
hidden_detail_	proto/debug.hpp	/^    namespace hidden_detail_$/;"	n	namespace:boost::proto
if_	proto/matches.hpp	/^    struct if_ : transform<if_<If, Then, Else> >$/;"	s	namespace:boost::proto	inherits:transform
if_else	proto/operators.hpp	/^        if_else(A0 const &a0, A1 const &a1, A2 const &a2)$/;"	f	class:boost::proto::exprns_::result_of::make_expr	signature:(A0 const &a0, A1 const &a1, A2 const &a2)
if_else_	proto/tags.hpp	/^    struct if_else_ {};$/;"	s	namespace:boost::proto::tagns_::tag
if_else_	proto/traits.hpp	/^    struct if_else_$/;"	s	namespace:boost::proto	inherits:proto::transform
if_vararg	proto/traits.hpp	/^        struct if_vararg$/;"	s	namespace:boost::proto::detail
if_vararg	proto/traits.hpp	/^        struct if_vararg<T, typename T::proto_is_vararg_>$/;"	s	namespace:boost::proto::detail	inherits:T
ignore	proto/proto_fwd.hpp	/^            ignore()$/;"	f	struct:boost::proto::detail::ignore	access:public	signature:()
ignore	proto/proto_fwd.hpp	/^            ignore(T const &)$/;"	f	struct:boost::proto::detail::ignore	access:public	signature:(T const &)
ignore	proto/proto_fwd.hpp	/^        struct ignore$/;"	s	namespace:boost::proto::detail
ignore	proto/proto_fwd.hpp	/^    typedef detail::ignore const ignore;$/;"	t	class:boost::proto::detail
ignore_unused	proto/detail/ignore_unused.hpp	/^        BOOST_FORCEINLINE void ignore_unused(T const &)$/;"	f	namespace:boost::proto::detail	signature:(T const &)
impl	proto/debug.hpp	/^            void impl(Expr const &expr, Arity) const$/;"	f	struct:boost::proto::detail::display_expr_impl	access:private	signature:(Expr const &expr, Arity) const
impl	proto/debug.hpp	/^            void impl(Expr const &expr, mpl::long_<0>) const$/;"	f	struct:boost::proto::detail::display_expr_impl	access:private	signature:(Expr const &expr, mpl::long_<0>) const
impl	proto/deep_copy.hpp	/^        struct impl$/;"	s	struct:boost::proto::_deep_copy	inherits:detail::deep_copy_impl	access:public
impl	proto/detail/preprocessed/traits.hpp	/^            struct impl$/;"	s	struct:function	inherits:detail::pass_through_impl	access:public
impl	proto/detail/preprocessed/traits.hpp	/^            struct impl$/;"	s	struct:nary_expr	inherits:detail::pass_through_impl	access:public
impl	proto/detail/traits.hpp	/^            struct impl$/;"	s	struct:function	inherits:detail::pass_through_impl	access:public
impl	proto/detail/traits.hpp	/^            struct impl$/;"	s	struct:nary_expr	inherits:detail::pass_through_impl	access:public
impl	proto/make_expr.hpp	/^            struct impl$/;"	s	struct:boost::proto::functional::make_expr	inherits:detail::make_expr_	access:public
impl	proto/matches.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_	inherits:transform_impl	access:public
impl	proto/matches.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::if_	inherits:transform_impl	access:public
impl	proto/matches.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::not_	inherits:transform_impl	access:public
impl	proto/matches.hpp	/^        struct impl$/;"	s	struct:boost::proto::and_	inherits:detail::_and_impl	access:public
impl	proto/matches.hpp	/^        struct impl$/;"	s	struct:boost::proto::or_	inherits:detail::matches_::which::,impl	access:public
impl	proto/matches.hpp	/^        struct impl$/;"	s	struct:boost::proto::switch_	inherits:Cases::,case_::,impl	access:public
impl	proto/matches.hpp	/^        struct impl<Expr &, State, Data>$/;"	s	struct:boost::proto::or_	inherits:detail::matches_::which::,impl	access:public
impl	proto/matches.hpp	/^        struct impl<Expr &, State, Data>$/;"	s	struct:boost::proto::switch_	inherits:Cases::,case_::,impl	access:public
impl	proto/traits.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::nullary_expr	inherits:transform_impl	access:public
impl	proto/traits.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::terminal	inherits:transform_impl	access:public
impl	proto/traits.hpp	/^        struct impl$/;"	s	struct:boost::proto::binary_expr	inherits:detail::pass_through_impl	access:public
impl	proto/traits.hpp	/^        struct impl$/;"	s	struct:boost::proto::if_else_	inherits:detail::pass_through_impl	access:public
impl	proto/traits.hpp	/^        struct impl$/;"	s	struct:boost::proto::unary_expr	inherits:detail::pass_through_impl	access:public
impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_child_c	inherits:transform_impl	access:public
impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_expr	inherits:transform_impl	access:public
impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_state	inherits:transform_impl	access:public
impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_value	inherits:transform_impl	access:public
impl	proto/transform/arg.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::_void	inherits:transform_impl	access:public
impl	proto/transform/arg.hpp	/^        struct impl$/;"	s	struct:boost::proto::_data	inherits:mpl::if_c::type::,impl	access:public
impl	proto/transform/call.hpp	/^        struct impl$/;"	s	struct:boost::proto::call	inherits:impl2	access:public
impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_comma	inherits:transform_impl	access:public
impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_function	inherits:default_function_impl	access:public
impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_if_else_	inherits:transform_impl	access:public
impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_mem_ptr	inherits:default_mem_ptr_impl	access:public
impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_post_dec	inherits:transform_impl	access:public
impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_post_inc	inherits:transform_impl	access:public
impl	proto/transform/default.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::default_subscript	inherits:transform_impl	access:public
impl	proto/transform/detail/call.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:call	inherits:transform_impl	access:public
impl	proto/transform/detail/call.hpp	/^        struct impl$/;"	s	struct:call	inherits:call::,impl	access:public
impl	proto/transform/detail/lazy.hpp	/^        struct impl$/;"	s	struct:lazy	inherits:call::,impl	access:public
impl	proto/transform/detail/lazy.hpp	/^        struct impl$/;"	s	struct:lazy	inherits:lazy::,impl	access:public
impl	proto/transform/detail/make.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:make	inherits:transform_impl	access:public
impl	proto/transform/detail/make.hpp	/^        struct impl$/;"	s	struct:make	inherits:make::,impl	access:public
impl	proto/transform/detail/make_gcc_workaround.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:make	inherits:transform_impl	access:public
impl	proto/transform/detail/preprocessed/call.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:call	inherits:transform_impl	access:public
impl	proto/transform/detail/preprocessed/call.hpp	/^        struct impl$/;"	s	struct:call	inherits:call::,impl	access:public
impl	proto/transform/detail/preprocessed/lazy.hpp	/^        struct impl$/;"	s	struct:lazy	inherits:call::,impl	access:public
impl	proto/transform/detail/preprocessed/lazy.hpp	/^        struct impl$/;"	s	struct:lazy	inherits:lazy::,impl	access:public
impl	proto/transform/detail/preprocessed/make.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:make	inherits:transform_impl	access:public
impl	proto/transform/detail/preprocessed/make.hpp	/^        struct impl$/;"	s	struct:make	inherits:make::,impl	access:public
impl	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:make	inherits:transform_impl	access:public
impl	proto/transform/env.hpp	/^                struct impl$/;"	s	struct:boost::proto::functional::as_env	access:public
impl	proto/transform/env.hpp	/^                struct impl$/;"	s	struct:boost::proto::functional::env_var	access:public
impl	proto/transform/env.hpp	/^                struct impl$/;"	s	struct:boost::proto::functional::has_env_var	access:public
impl	proto/transform/env.hpp	/^                struct impl<Env, false>$/;"	s	struct:boost::proto::functional::has_env_var	access:public
impl	proto/transform/env.hpp	/^                struct impl<Env, true>$/;"	s	struct:boost::proto::functional::env_var	access:public
impl	proto/transform/env.hpp	/^                struct impl<T, true>$/;"	s	struct:boost::proto::functional::as_env	access:public
impl	proto/transform/env.hpp	/^            struct impl$/;"	s	struct:boost::proto::_env	inherits:transform_impl	access:public
impl	proto/transform/env.hpp	/^            struct impl$/;"	s	struct:boost::proto::_env_var	inherits:transform_impl	access:public
impl	proto/transform/fold.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::fold	inherits:transform_impl	access:public
impl	proto/transform/fold.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::reverse_fold	inherits:transform_impl	access:public
impl	proto/transform/fold.hpp	/^        struct impl$/;"	s	struct:boost::proto::fold	inherits:detail::fold_impl	access:public
impl	proto/transform/fold.hpp	/^        struct impl$/;"	s	struct:boost::proto::reverse_fold	inherits:detail::reverse_fold_impl	access:public
impl	proto/transform/fold_tree.hpp	/^            struct impl$/;"	s	struct:boost::proto::detail::has_tag	access:public
impl	proto/transform/fold_tree.hpp	/^            struct impl<Expr &, State, Data, typename Expr::proto_tag>$/;"	s	struct:boost::proto::detail::has_tag	access:public
impl	proto/transform/fold_tree.hpp	/^            struct impl<Expr, State, Data, typename Expr::proto_tag>$/;"	s	struct:boost::proto::detail::has_tag	access:public
impl	proto/transform/fold_tree.hpp	/^        struct impl$/;"	s	struct:boost::proto::fold_tree	inherits:fold::,impl	access:public
impl	proto/transform/fold_tree.hpp	/^        struct impl$/;"	s	struct:boost::proto::reverse_fold_tree	inherits:reverse_fold::,impl	access:public
impl	proto/transform/fold_tree.hpp	/^        struct impl<Expr &, State, Data>$/;"	s	struct:boost::proto::fold_tree	inherits:fold::,impl	access:public
impl	proto/transform/fold_tree.hpp	/^        struct impl<Expr &, State, Data>$/;"	s	struct:boost::proto::reverse_fold_tree	inherits:reverse_fold::,impl	access:public
impl	proto/transform/integral_c.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::integral_c	inherits:transform_impl	access:public
impl	proto/transform/lazy.hpp	/^        struct impl$/;"	s	struct:boost::proto::lazy	inherits:call::,impl	access:public
impl	proto/transform/make.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::make	inherits:transform_impl	access:public
impl	proto/transform/make.hpp	/^        struct impl$/;"	s	struct:boost::proto::protect	access:public
impl	proto/transform/pass_through.hpp	/^        struct impl$/;"	s	struct:boost::proto::pass_through	inherits:detail::pass_through_impl	access:public
impl	proto/transform/when.hpp	/^            struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:boost::proto::detail::when_impl	inherits:transform_impl	access:public
impl	proto/transform/when.hpp	/^        struct impl$/;"	s	struct:boost::proto::when	inherits:remove_reference::type::,when::,impl	access:public
impl2	proto/transform/call.hpp	/^        struct impl2$/;"	s	struct:boost::proto::call	inherits:transform_impl	access:public
impl2	proto/transform/call.hpp	/^        struct impl2<Expr, State, Data, true>$/;"	s	struct:boost::proto::call	inherits:Fun::,impl	access:public
impl2	proto/transform/call.hpp	/^        struct impl2<Expr, State, Data, true>$/;"	s	struct:boost::proto::call	inherits:transform_impl	access:public
index	proto/detail/deduce_domain.hpp	/^                static int const index = 1;$/;"	m	struct:boost::proto::detail::domain_	access:public
index	proto/detail/deduce_domain.hpp	/^                static int const index = base::index + 1;$/;"	m	struct:boost::proto::detail::domain_	access:public
index	proto/detail/deduce_domain.hpp	/^                static int const index = domain_<D0>::index - sizeof(domain_<D0>::deduce98((domain_<D1>*)0));$/;"	m	struct:boost::proto::detail::common_domain2	access:public
index	proto/fusion.hpp	/^            static const long index = Pos;$/;"	m	struct:boost::proto::detail::expr_iterator	access:public
int_	proto/transform/integral_c.hpp	/^    struct int_$/;"	s	namespace:boost::proto	inherits:integral_c
integral_c	proto/transform/integral_c.hpp	/^    struct integral_c : transform<integral_c<T, I> >$/;"	s	namespace:boost::proto	inherits:transform
invoke	proto/context/default.hpp	/^            result_type invoke(Expr &expr, Context &context, mpl::false_, mpl::false_) const$/;"	f	struct:boost::proto::context::default_eval	access:private	signature:(Expr &expr, Context &context, mpl::false_, mpl::false_) const
invoke	proto/context/default.hpp	/^            result_type invoke(Expr &expr, Context &context, mpl::false_, mpl::true_) const$/;"	f	struct:boost::proto::context::default_eval	access:private	signature:(Expr &expr, Context &context, mpl::false_, mpl::true_) const
invoke	proto/context/default.hpp	/^            result_type invoke(Expr &expr, Context &context, mpl::true_, mpl::false_) const$/;"	f	struct:boost::proto::context::default_eval	access:private	signature:(Expr &expr, Context &context, mpl::true_, mpl::false_) const
invoke	proto/context/detail/default_eval.hpp	/^        result_type invoke(Expr &expr, Context &context, mpl::false_) const$/;"	f	struct:default_eval	access:private	signature:(Expr &expr, Context &context, mpl::false_) const
invoke	proto/context/detail/default_eval.hpp	/^        result_type invoke(Expr &expr, Context &context, mpl::true_) const$/;"	f	struct:default_eval	access:private	signature:(Expr &expr, Context &context, mpl::true_) const
invoke	proto/context/detail/preprocessed/default_eval.hpp	/^        result_type invoke(Expr &expr, Context &context, mpl::false_) const$/;"	f	struct:default_eval	access:private	signature:(Expr &expr, Context &context, mpl::false_) const
invoke	proto/context/detail/preprocessed/default_eval.hpp	/^        result_type invoke(Expr &expr, Context &context, mpl::true_) const$/;"	f	struct:default_eval	access:private	signature:(Expr &expr, Context &context, mpl::true_) const
invoke	proto/transform/default.hpp	/^            result_type invoke($/;"	f	struct:boost::proto::detail::default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::false_ , mpl::false_ ) const
invoke	proto/transform/default.hpp	/^            result_type invoke($/;"	f	struct:boost::proto::detail::default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::false_ , mpl::true_ ) const
invoke	proto/transform/default.hpp	/^            result_type invoke($/;"	f	struct:boost::proto::detail::default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::true_ , mpl::false_ ) const
invoke	proto/transform/detail/default_function_impl.hpp	/^        result_type invoke($/;"	f	struct:default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::false_ ) const
invoke	proto/transform/detail/default_function_impl.hpp	/^        result_type invoke($/;"	f	struct:default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::true_ ) const
invoke	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        result_type invoke($/;"	f	struct:default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::false_ ) const
invoke	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        result_type invoke($/;"	f	struct:default_function_impl	access:private	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d , mpl::true_ ) const
is_V_a_smart_ptr	proto/detail/decltype.hpp	/^                static const bool is_V_a_smart_ptr = 2 == sizeof(test_V_is_a_U<U>(&lvalue(make<V>())));$/;"	m	struct:boost::proto::detail::get_pointerns::result_of_	access:public
is_aggregate	proto/traits.hpp	/^    struct is_aggregate$/;"	s	namespace:boost::proto	inherits:proto::detail::is_aggregate_
is_aggregate_	proto/traits.hpp	/^        struct is_aggregate_$/;"	s	namespace:boost::proto::detail	inherits:is_pod
is_aggregate_	proto/traits.hpp	/^        struct is_aggregate_<T, typename T::proto_is_aggregate_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
is_aggregate_	proto/traits.hpp	/^        struct is_aggregate_<proto::basic_expr<Tag, Args, N>, void>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
is_aggregate_	proto/traits.hpp	/^        struct is_aggregate_<proto::expr<Tag, Args, N>, void>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
is_applyable	proto/transform/detail/make.hpp	/^        struct is_applyable<R(*)(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/make.hpp	/^        struct is_applyable<R(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R()>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)()>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3 , A4)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2 , A3)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1 , A2)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0 , A1)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(*)(A0)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3 , A4)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2 , A3)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1 , A2)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0 , A1)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/detail/preprocessed/make.hpp	/^        struct is_applyable<R(A0)>$/;"	s	namespace:detail	inherits:mpl::true_
is_applyable	proto/transform/make.hpp	/^        struct is_applyable$/;"	s	namespace:boost::proto::detail	inherits:mpl::and_
is_callable	proto/fusion.hpp	/^    struct is_callable<eval_fun<Context> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/generate.hpp	/^    struct is_callable<by_value_generator>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/generate.hpp	/^    struct is_callable<compose_generators<First, Second> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/generate.hpp	/^    struct is_callable<default_generator>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/generate.hpp	/^    struct is_callable<generator<Extends> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/generate.hpp	/^    struct is_callable<pod_generator<Extends> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/make_expr.hpp	/^    struct is_callable<functional::make_expr<Tag, Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/make_expr.hpp	/^    struct is_callable<functional::unpack_expr<Tag, Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/matches.hpp	/^    struct is_callable<and_<BOOST_PROTO_LOGICAL_G> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/matches.hpp	/^    struct is_callable<if_<If, Then, Else> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/matches.hpp	/^    struct is_callable<not_<Grammar> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/matches.hpp	/^    struct is_callable<or_<BOOST_PROTO_LOGICAL_G> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/matches.hpp	/^    struct is_callable<switch_<Cases, Transform> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/matches.hpp	/^    struct is_callable<vararg<Grammar> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/traits.hpp	/^    struct is_callable$/;"	s	namespace:boost::proto	inherits:proto::detail::is_callable_
is_callable	proto/traits.hpp	/^    struct is_callable<functional::as_child<Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/traits.hpp	/^    struct is_callable<functional::as_expr<Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/traits.hpp	/^    struct is_callable<functional::child<N> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/traits.hpp	/^    struct is_callable<functional::child_c<N> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/traits.hpp	/^    struct is_callable<proto::_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/traits.hpp	/^    struct is_callable<proto::basic_expr<Tag, Args, N> >$/;"	s	namespace:boost::proto	inherits:mpl::false_
is_callable	proto/traits.hpp	/^    struct is_callable<proto::callable>$/;"	s	namespace:boost::proto	inherits:mpl::false_
is_callable	proto/traits.hpp	/^    struct is_callable<proto::expr<Tag, Args, N> >$/;"	s	namespace:boost::proto	inherits:mpl::false_
is_callable	proto/traits.hpp	/^    struct is_callable<proto::transform<PrimitiveTransform, X> >$/;"	s	namespace:boost::proto	inherits:mpl::false_
is_callable	proto/transform/arg.hpp	/^    struct is_callable<_byref>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/arg.hpp	/^    struct is_callable<_byval>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/arg.hpp	/^    struct is_callable<_child_c<N> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/arg.hpp	/^    struct is_callable<_data>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/arg.hpp	/^    struct is_callable<_expr>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/arg.hpp	/^    struct is_callable<_state>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/arg.hpp	/^    struct is_callable<_value>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/call.hpp	/^    struct is_callable<call<Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/default.hpp	/^    struct is_callable<_default<Grammar> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/env.hpp	/^        struct is_callable<_env_var<Key> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/env.hpp	/^        struct is_callable<functional::env_var<Key> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/env.hpp	/^        struct is_callable<functional::has_env_var<Key> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/fold.hpp	/^    struct is_callable<fold<Sequence, State, Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/fold.hpp	/^    struct is_callable<reverse_fold<Sequence, State, Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/fold_tree.hpp	/^    struct is_callable<fold_tree<Sequence, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/fold_tree.hpp	/^    struct is_callable<reverse_fold_tree<Sequence, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<char_<I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<int_<I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<integral_c<T, I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<long_<I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/integral_c.hpp	/^    struct is_callable<size_t<I> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/lazy.hpp	/^    struct is_callable<lazy<Object> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/make.hpp	/^    struct is_callable<make<Object> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/make.hpp	/^    struct is_callable<protect<PrimitiveTransform> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/pass_through.hpp	/^    struct is_callable<pass_through<Grammar, Domain> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable	proto/transform/when.hpp	/^    struct is_callable<when<Grammar, Transform> >$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_callable2_	proto/traits.hpp	/^        struct is_callable2_$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
is_callable2_	proto/traits.hpp	/^        struct is_callable2_<T, typename T::proto_is_callable_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9> BOOST_PROTO_TEMPLATE_ARITY_PARAM(10)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8> BOOST_PROTO_TEMPLATE_ARITY_PARAM(9)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7> BOOST_PROTO_TEMPLATE_ARITY_PARAM(8)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5 , A6> BOOST_PROTO_TEMPLATE_ARITY_PARAM(7)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4 , A5> BOOST_PROTO_TEMPLATE_ARITY_PARAM(6)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3 , A4> BOOST_PROTO_TEMPLATE_ARITY_PARAM(5)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2 , A3> BOOST_PROTO_TEMPLATE_ARITY_PARAM(4)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1 , A2> BOOST_PROTO_TEMPLATE_ARITY_PARAM(3)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0 , A1> BOOST_PROTO_TEMPLATE_ARITY_PARAM(2)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/preprocessed/traits.hpp	/^            struct is_callable_<T<A0> BOOST_PROTO_TEMPLATE_ARITY_PARAM(1)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/detail/traits.hpp	/^            struct is_callable_<T<BOOST_PP_ENUM_PARAMS(N, A)> BOOST_PROTO_TEMPLATE_ARITY_PARAM(N)>$/;"	s	namespace:detail	inherits:is_same
is_callable_	proto/traits.hpp	/^        struct is_callable_$/;"	s	namespace:boost::proto::detail	inherits:is_callable2_
is_cv_ref_compatible	proto/matches.hpp	/^        struct is_cv_ref_compatible$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
is_cv_ref_compatible	proto/matches.hpp	/^        struct is_cv_ref_compatible<T &, U &>$/;"	s	namespace:boost::proto::detail	inherits:mpl::bool_
is_cv_ref_compatible	proto/matches.hpp	/^        struct is_cv_ref_compatible<T, U &>$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
is_domain	proto/domain.hpp	/^    struct is_domain$/;"	s	namespace:boost::proto	inherits:mpl::false_
is_domain	proto/domain.hpp	/^    struct is_domain<T, typename T::proto_is_domain_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_env	proto/transform/impl.hpp	/^    struct is_env$/;"	s	namespace:boost::proto	inherits:mpl::false_
is_env	proto/transform/impl.hpp	/^    struct is_env<T &, void>$/;"	s	namespace:boost::proto	inherits:is_env
is_env	proto/transform/impl.hpp	/^    struct is_env<T, typename T::proto_environment_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_expr	proto/traits.hpp	/^    struct is_expr$/;"	s	namespace:boost::proto	inherits:mpl::false_
is_expr	proto/traits.hpp	/^    struct is_expr<T &, void>$/;"	s	namespace:boost::proto	inherits:is_expr
is_expr	proto/traits.hpp	/^    struct is_expr<T, typename T::proto_is_expr_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_expr_handled	proto/context/callable.hpp	/^        struct is_expr_handled<Expr, Context, 0>$/;"	s	namespace:boost::proto::detail
is_expr_handled	proto/context/detail/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, N>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 10>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 1>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 2>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 3>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 4>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 5>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 6>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 7>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 8>$/;"	s	namespace:detail
is_expr_handled	proto/context/detail/preprocessed/callable_eval.hpp	/^        struct is_expr_handled<Expr, Context, 9>$/;"	s	namespace:detail
is_extension	proto/operators.hpp	/^    struct is_extension$/;"	s	namespace:boost::proto	inherits:is_expr
is_extension	proto/operators.hpp	/^    struct is_extension<T &>$/;"	s	namespace:boost::proto	inherits:is_expr
is_iostream	proto/detail/is_noncopyable.hpp	/^    struct is_iostream$/;"	s	namespace:boost::proto::detail
is_member_function_eval	proto/context/default.hpp	/^        struct is_member_function_eval$/;"	s	namespace:boost::proto::context	inherits:is_member_function_pointer
is_member_function_invocation	proto/transform/default.hpp	/^        struct is_member_function_invocation$/;"	s	namespace:boost::proto::detail	inherits:is_member_function_pointer
is_noncopyable	proto/detail/is_noncopyable.hpp	/^    struct is_noncopyable$/;"	s	namespace:boost::proto::detail	inherits:mpl::or_
is_noncopyable	proto/detail/is_noncopyable.hpp	/^    struct is_noncopyable<T[N]>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
is_poly_function	proto/detail/poly_function.hpp	/^    struct is_poly_function$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
is_poly_function	proto/detail/poly_function.hpp	/^    struct is_poly_function<T, typename T::is_poly_function_base_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
is_proto_expr	proto/extends.hpp	/^        struct is_proto_expr$/;"	s	namespace:boost::proto::exprns_
is_ptr_to_const	proto/detail/decltype.hpp	/^                static const bool is_ptr_to_const = 2 == sizeof(test_ptr_to_const(BOOST_PROTO_GET_POINTER(U, make<V>())));$/;"	m	struct:boost::proto::detail::get_pointerns::result_of_	access:public
is_segmented_impl	proto/fusion.hpp	/^        struct is_segmented_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
is_sequence_impl	proto/fusion.hpp	/^        struct is_sequence_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
is_sequence_impl	proto/fusion.hpp	/^        struct is_sequence_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
is_sub_domain_of	proto/domain.hpp	/^    struct is_sub_domain_of$/;"	s	namespace:boost::proto	inherits:is_sub_domain_of
is_sub_domain_of	proto/domain.hpp	/^    struct is_sub_domain_of<SuperDomain, SuperDomain>$/;"	s	namespace:boost::proto	inherits:mpl::true_
is_sub_domain_of	proto/domain.hpp	/^    struct is_sub_domain_of<proto::no_super_domain, SuperDomain>$/;"	s	namespace:boost::proto	inherits:mpl::false_
is_transform	proto/traits.hpp	/^    struct is_transform$/;"	s	namespace:boost::proto	inherits:proto::detail::is_transform_
is_transform_	proto/traits.hpp	/^        struct is_transform_$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
is_transform_	proto/traits.hpp	/^        struct is_transform_<T, typename T::proto_is_transform_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
is_view_impl	proto/fusion.hpp	/^        struct is_view_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
is_view_impl	proto/fusion.hpp	/^        struct is_view_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
key_not_found	proto/transform/impl.hpp	/^        struct key_not_found$/;"	s	namespace:boost::proto::envns_
lambda_matches	proto/detail/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:BOOST_PP_CAT,and_,N
lambda_matches	proto/detail/preprocessed/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:and_10
lambda_matches	proto/detail/preprocessed/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:and_2
lambda_matches	proto/detail/preprocessed/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:and_3
lambda_matches	proto/detail/preprocessed/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:and_4
lambda_matches	proto/detail/preprocessed/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:and_5
lambda_matches	proto/detail/preprocessed/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:and_6
lambda_matches	proto/detail/preprocessed/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:and_7
lambda_matches	proto/detail/preprocessed/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:and_8
lambda_matches	proto/detail/preprocessed/lambda_matches.hpp	/^    struct lambda_matches<$/;"	s	inherits:and_9
lambda_matches	proto/matches.hpp	/^        struct lambda_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T, T BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T, proto::_ BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T<Expr0>, T<Grammar0> BOOST_PROTO_TEMPLATE_ARITY_PARAM(1) >$/;"	s	namespace:boost::proto::detail	inherits:lambda_matches
lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T[M], T[M] BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T[M], U BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:array_matches
lambda_matches	proto/matches.hpp	/^        struct lambda_matches<T[M], _ BOOST_PROTO_TEMPLATE_ARITY_PARAM(-1)>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
lazy	proto/transform/detail/lazy.hpp	/^    struct lazy<Object(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	inherits:transform
lazy	proto/transform/detail/lazy.hpp	/^    struct lazy<Object(BOOST_PP_ENUM_PARAMS(N, A)...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object()>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4 , A5...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3 , A4...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2 , A3...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1 , A2...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0 , A1...)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0)>$/;"	s	inherits:transform
lazy	proto/transform/detail/preprocessed/lazy.hpp	/^    struct lazy<Object(A0...)>$/;"	s	inherits:transform
lazy	proto/transform/lazy.hpp	/^    struct lazy : transform<lazy<Object> >$/;"	s	namespace:boost::proto	inherits:transform
lazy	proto/transform/lazy.hpp	/^    struct lazy<detail::msvc_fun_workaround<Fun> >$/;"	s	namespace:boost::proto	inherits:lazy
lazy::impl	proto/transform/detail/lazy.hpp	/^        struct impl$/;"	s	struct:lazy	inherits:call::,impl	access:public
lazy::impl	proto/transform/detail/lazy.hpp	/^        struct impl$/;"	s	struct:lazy	inherits:lazy::,impl	access:public
lazy::impl	proto/transform/detail/preprocessed/lazy.hpp	/^        struct impl$/;"	s	struct:lazy	inherits:call::,impl	access:public
lazy::impl	proto/transform/detail/preprocessed/lazy.hpp	/^        struct impl$/;"	s	struct:lazy	inherits:lazy::,impl	access:public
lazy_disable_if::BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/make_expr.hpp	/^    make_expr(BOOST_PP_ENUM_BINARY_PARAMS(N, const A, &a))$/;"	f	class:lazy_disable_if	signature:(N, const A, &a)
lazy_disable_if::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8 , const A9 &a9)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8 , const A9 &a9)
lazy_disable_if::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8)
lazy_disable_if::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7)
lazy_disable_if::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6)
lazy_disable_if::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5)
lazy_disable_if::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4)
lazy_disable_if::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3)
lazy_disable_if::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2)
lazy_disable_if::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1)
lazy_matches	proto/operators.hpp	/^        struct lazy_matches$/;"	s	namespace:boost::proto::detail	inherits:proto::matches
left	proto/traits.hpp	/^        struct left$/;"	s	namespace:boost::proto::functional
left	proto/traits.hpp	/^        struct left$/;"	s	namespace:boost::proto::result_of	inherits:child_c
left	proto/traits.hpp	/^    left(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
less	proto/tags.hpp	/^    struct less {};$/;"	s	namespace:boost::proto::tagns_::tag
less_equal	proto/tags.hpp	/^    struct less_equal {};$/;"	s	namespace:boost::proto::tagns_::tag
list1	proto/detail/preprocessed/args.hpp	/^    struct list1$/;"	s
list10	proto/detail/preprocessed/args.hpp	/^    struct list10$/;"	s
list10::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 10;$/;"	m	struct:list10	access:public
list10::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg9 back_;$/;"	t	struct:list10	access:public
list10::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list10::child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list10::child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list10::child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list10::child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list10::child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list10::child6	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list10::child7	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list10::child8	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list10::child9	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8; typedef Arg9 child9;$/;"	t	struct:list10	access:public
list1::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 1;$/;"	m	struct:list1	access:public
list1::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 back_;$/;"	t	struct:list1	access:public
list1::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0;$/;"	t	struct:list1	access:public
list1::child1	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
list1::child2	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
list1::child3	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
list1::child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
list1::child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
list1::child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
list1::child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
list1::child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
list1::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list1	access:public
list2	proto/detail/preprocessed/args.hpp	/^    struct list2$/;"	s
list2::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 2;$/;"	m	struct:list2	access:public
list2::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg1 back_;$/;"	t	struct:list2	access:public
list2::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1;$/;"	t	struct:list2	access:public
list2::child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1;$/;"	t	struct:list2	access:public
list2::child2	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
list2::child3	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
list2::child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
list2::child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
list2::child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
list2::child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
list2::child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
list2::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list2	access:public
list3	proto/detail/preprocessed/args.hpp	/^    struct list3$/;"	s
list3::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 3;$/;"	m	struct:list3	access:public
list3::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg2 back_;$/;"	t	struct:list3	access:public
list3::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2;$/;"	t	struct:list3	access:public
list3::child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2;$/;"	t	struct:list3	access:public
list3::child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2;$/;"	t	struct:list3	access:public
list3::child3	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
list3::child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
list3::child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
list3::child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
list3::child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
list3::child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
list3::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list3	access:public
list4	proto/detail/preprocessed/args.hpp	/^    struct list4$/;"	s
list4::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 4;$/;"	m	struct:list4	access:public
list4::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg3 back_;$/;"	t	struct:list4	access:public
list4::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3;$/;"	t	struct:list4	access:public
list4::child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3;$/;"	t	struct:list4	access:public
list4::child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3;$/;"	t	struct:list4	access:public
list4::child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3;$/;"	t	struct:list4	access:public
list4::child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
list4::child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
list4::child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
list4::child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
list4::child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
list4::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list4	access:public
list5	proto/detail/preprocessed/args.hpp	/^    struct list5$/;"	s
list5::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 5;$/;"	m	struct:list5	access:public
list5::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg4 back_;$/;"	t	struct:list5	access:public
list5::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
list5::child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
list5::child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
list5::child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
list5::child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4;$/;"	t	struct:list5	access:public
list5::child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
list5::child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
list5::child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
list5::child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
list5::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list5	access:public
list6	proto/detail/preprocessed/args.hpp	/^    struct list6$/;"	s
list6::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 6;$/;"	m	struct:list6	access:public
list6::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg5 back_;$/;"	t	struct:list6	access:public
list6::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
list6::child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
list6::child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
list6::child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
list6::child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
list6::child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5;$/;"	t	struct:list6	access:public
list6::child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list6	access:public
list6::child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list6	access:public
list6::child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list6	access:public
list6::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list6	access:public
list7	proto/detail/preprocessed/args.hpp	/^    struct list7$/;"	s
list7::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 7;$/;"	m	struct:list7	access:public
list7::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg6 back_;$/;"	t	struct:list7	access:public
list7::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
list7::child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
list7::child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
list7::child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
list7::child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
list7::child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
list7::child6	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6;$/;"	t	struct:list7	access:public
list7::child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list7	access:public
list7::child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list7	access:public
list7::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list7	access:public
list8	proto/detail/preprocessed/args.hpp	/^    struct list8$/;"	s
list8::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 8;$/;"	m	struct:list8	access:public
list8::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg7 back_;$/;"	t	struct:list8	access:public
list8::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
list8::child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
list8::child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
list8::child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
list8::child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
list8::child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
list8::child6	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
list8::child7	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7;$/;"	t	struct:list8	access:public
list8::child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list8	access:public
list8::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:list8	access:public
list9	proto/detail/preprocessed/args.hpp	/^    struct list9$/;"	s
list9::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 9;$/;"	m	struct:list9	access:public
list9::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg8 back_;$/;"	t	struct:list9	access:public
list9::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
list9::child1	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
list9::child2	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
list9::child3	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
list9::child4	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
list9::child5	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
list9::child6	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
list9::child7	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
list9::child8	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0; typedef Arg1 child1; typedef Arg2 child2; typedef Arg3 child3; typedef Arg4 child4; typedef Arg5 child5; typedef Arg6 child6; typedef Arg7 child7; typedef Arg8 child8;$/;"	t	struct:list9	access:public
list9::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child9;$/;"	t	struct:list9	access:public
lit	proto/literal.hpp	/^    inline literal<T &> const lit(T &t)$/;"	f	namespace:boost::proto	signature:(T &t)
lit	proto/literal.hpp	/^    inline literal<T const &> const lit(T const &t)$/;"	f	namespace:boost::proto	signature:(T const &t)
literal	proto/literal.hpp	/^            literal()$/;"	f	struct:boost::proto::utility::literal	access:public	signature:()
literal	proto/literal.hpp	/^            literal(U &u)$/;"	f	struct:boost::proto::utility::literal	access:public	signature:(U &u)
literal	proto/literal.hpp	/^            literal(U const &u)$/;"	f	struct:boost::proto::utility::literal	access:public	signature:(U const &u)
literal	proto/literal.hpp	/^            literal(literal<U, Domain> const &u)$/;"	f	struct:boost::proto::utility::literal	access:public	signature:(literal<U, Domain> const &u)
literal	proto/literal.hpp	/^        struct literal$/;"	s	namespace:boost::proto::utility	inherits:extends
literal_t	proto/literal.hpp	/^            typedef literal<T, Domain> literal_t;$/;"	t	struct:boost::proto::utility::literal	access:private
logical_and	proto/tags.hpp	/^    struct logical_and {};$/;"	s	namespace:boost::proto::tagns_::tag
logical_not	proto/tags.hpp	/^    struct logical_not {};$/;"	s	namespace:boost::proto::tagns_::tag
logical_or	proto/tags.hpp	/^    struct logical_or {};$/;"	s	namespace:boost::proto::tagns_::tag
long_	proto/transform/integral_c.hpp	/^    struct long_$/;"	s	namespace:boost::proto	inherits:integral_c
lookup	proto/transform/env.hpp	/^                struct lookup$/;"	s	struct:boost::proto::envns_::env	inherits:Base::,lookup	access:public
lookup	proto/transform/env.hpp	/^                struct lookup$/;"	s	struct:boost::proto::envns_::env	inherits:mpl::if_c::type	access:public
lookup	proto/transform/env.hpp	/^                struct lookup<Key, OtherValue>$/;"	s	struct:boost::proto::envns_::env	access:public
lookup	proto/transform/impl.hpp	/^            struct lookup$/;"	s	struct:boost::proto::envns_::empty_env	access:public
lvalue	proto/detail/decltype.hpp	/^        T &lvalue(T &t)$/;"	f	namespace:boost::proto::detail	signature:(T &t)
lvalue	proto/detail/decltype.hpp	/^        T const &lvalue(T const &t)$/;"	f	namespace:boost::proto::detail	signature:(T const &t)
make	proto/detail/basic_expr.hpp	/^        static basic_expr const make(A0 &a0)$/;"	f	struct:basic_expr	access:public	signature:(A0 &a0)
make	proto/detail/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0)
make	proto/detail/decltype.hpp	/^                    BOOST_PROTO_GET_POINTER(V, proto::detail::make_mutable<T>()) ->* proto::detail::make<U>()$/;"	p	class:boost::proto::detail::get_pointerns::mem_ptr_fun::proto::detail	access:public	signature:()
make	proto/detail/decltype.hpp	/^                    proto::detail::make_mutable<T>() ->* proto::detail::make<U>()$/;"	p	class:boost::proto::detail::get_pointerns::mem_ptr_fun::proto::detail	access:public	signature:()
make	proto/detail/decltype.hpp	/^        T make();$/;"	p	namespace:boost::proto::detail	signature:()
make	proto/detail/expr.hpp	/^        static expr const make(A0 &a0)$/;"	f	struct:expr	access:public	signature:(A0 &a0)
make	proto/detail/expr.hpp	/^        static expr const make(A0 const &a0)$/;"	f	struct:expr	access:public	signature:(A0 const &a0)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 &a0)$/;"	f	struct:basic_expr	access:public	signature:(A0 &a0)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0 , A1 const &a1)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0 , A1 const &a1)
make	proto/detail/preprocessed/basic_expr.hpp	/^        static basic_expr const make(A0 const &a0)$/;"	f	struct:basic_expr	access:public	signature:(A0 const &a0)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 &a0)$/;"	f	struct:expr	access:public	signature:(A0 &a0)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1)
make	proto/detail/preprocessed/expr.hpp	/^        static expr const make(A0 const &a0)$/;"	f	struct:expr	access:public	signature:(A0 const &a0)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 &a0)$/;"	f	struct:expr	access:public	signature:(A0 &a0)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1 , A2 const &a2)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0 , A1 const &a1)$/;"	f	struct:expr	access:public	signature:(A0 const &a0 , A1 const &a1)
make	proto/detail/preprocessed/expr_variadic.hpp	/^        static expr const make(A0 const &a0)$/;"	f	struct:expr	access:public	signature:(A0 const &a0)
make	proto/transform/detail/make.hpp	/^    struct make<Object(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	inherits:transform
make	proto/transform/detail/make.hpp	/^    struct make<Object(BOOST_PP_ENUM_PARAMS(N, A)...)>$/;"	s	inherits:transform
make	proto/transform/detail/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	inherits:transform
make	proto/transform/detail/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object()>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5 , A6...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4 , A5...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3 , A4...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2 , A3...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1 , A2...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0 , A1...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make.hpp	/^    struct make<Object(A0...)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>()>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0 , A1 , A2 , A3)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0 , A1 , A2)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0 , A1)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::basic_expr<Tag, Args, Arity>(A0)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>()>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0 , A1 , A2 , A3 , A4)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0 , A1 , A2 , A3)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0 , A1 , A2)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0 , A1)>$/;"	s	inherits:transform
make	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^    struct make<proto::expr<Tag, Args, Arity>(A0)>$/;"	s	inherits:transform
make	proto/transform/make.hpp	/^    struct make : transform<make<Object> >$/;"	s	namespace:boost::proto	inherits:transform
make	proto/transform/make.hpp	/^    struct make<detail::msvc_fun_workaround<Fun> >$/;"	s	namespace:boost::proto	inherits:make
make::impl	proto/transform/detail/make.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:make	inherits:transform_impl	access:public
make::impl	proto/transform/detail/make.hpp	/^        struct impl$/;"	s	struct:make	inherits:make::,impl	access:public
make::impl	proto/transform/detail/make_gcc_workaround.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:make	inherits:transform_impl	access:public
make::impl	proto/transform/detail/preprocessed/make.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:make	inherits:transform_impl	access:public
make::impl	proto/transform/detail/preprocessed/make.hpp	/^        struct impl$/;"	s	struct:make	inherits:make::,impl	access:public
make::impl	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^        struct impl : transform_impl<Expr, State, Data>$/;"	s	struct:make	inherits:transform_impl	access:public
make::impl::operator ()	proto/transform/detail/make.hpp	/^            result_type operator ()($/;"	f	struct:make::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
make::impl::operator ()	proto/transform/detail/make_gcc_workaround.hpp	/^            result_type operator ()($/;"	f	struct:make::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
make::impl::operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()($/;"	f	struct:make::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
make::impl::operator ()	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^            result_type operator ()($/;"	f	struct:make::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
make::impl::result_type	proto/transform/detail/make.hpp	/^            typedef typename detail::make_if_<Object, Expr, State, Data>::type result_type;$/;"	t	struct:make::impl	access:public
make::impl::result_type	proto/transform/detail/make_gcc_workaround.hpp	/^            typedef proto::basic_expr<Tag, Args, Arity> result_type;$/;"	t	struct:make::impl	access:public
make::impl::result_type	proto/transform/detail/make_gcc_workaround.hpp	/^            typedef proto::expr<Tag, Args, Arity> result_type;$/;"	t	struct:make::impl	access:public
make::impl::result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef typename detail::make_if_<Object, Expr, State, Data>::type result_type;$/;"	t	struct:make::impl	access:public
make::impl::result_type	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^            typedef proto::basic_expr<Tag, Args, Arity> result_type;$/;"	t	struct:make::impl	access:public
make::impl::result_type	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^            typedef proto::expr<Tag, Args, Arity> result_type;$/;"	t	struct:make::impl	access:public
make_	proto/transform/detail/make.hpp	/^        struct make_<$/;"	s	namespace:detail
make_	proto/transform/detail/make.hpp	/^        struct make_<$/;"	s	namespace:detail	inherits:nested_type_if
make_	proto/transform/detail/preprocessed/make.hpp	/^        struct make_<$/;"	s	namespace:detail
make_	proto/transform/detail/preprocessed/make.hpp	/^        struct make_<$/;"	s	namespace:detail	inherits:nested_type_if
make_	proto/transform/make.hpp	/^        struct make_$/;"	s	namespace:boost::proto::detail
make_address_of	proto/proto_fwd.hpp	/^        typedef make_expr<tag::address_of>          make_address_of;$/;"	t	namespace:boost::proto::functional
make_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::assign>              make_assign;$/;"	t	namespace:boost::proto::functional
make_bitwise_and	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_and>         make_bitwise_and;$/;"	t	namespace:boost::proto::functional
make_bitwise_and_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_and_assign>  make_bitwise_and_assign;$/;"	t	namespace:boost::proto::functional
make_bitwise_or	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_or>          make_bitwise_or;$/;"	t	namespace:boost::proto::functional
make_bitwise_or_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_or_assign>   make_bitwise_or_assign;$/;"	t	namespace:boost::proto::functional
make_bitwise_xor	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_xor>         make_bitwise_xor;$/;"	t	namespace:boost::proto::functional
make_bitwise_xor_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::bitwise_xor_assign>  make_bitwise_xor_assign;$/;"	t	namespace:boost::proto::functional
make_comma	proto/proto_fwd.hpp	/^        typedef make_expr<tag::comma>               make_comma;$/;"	t	namespace:boost::proto::functional
make_complement	proto/proto_fwd.hpp	/^        typedef make_expr<tag::complement>          make_complement;$/;"	t	namespace:boost::proto::functional
make_dereference	proto/proto_fwd.hpp	/^        typedef make_expr<tag::dereference>         make_dereference;$/;"	t	namespace:boost::proto::functional
make_divides	proto/proto_fwd.hpp	/^        typedef make_expr<tag::divides>             make_divides;$/;"	t	namespace:boost::proto::functional
make_divides_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::divides_assign>      make_divides_assign;$/;"	t	namespace:boost::proto::functional
make_equal_to	proto/proto_fwd.hpp	/^        typedef make_expr<tag::equal_to>            make_equal_to;$/;"	t	namespace:boost::proto::functional
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8 , const A9 &a9)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8 , const A9 &a9)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1 , const A2 &a2)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const A0 &a0 , const A1 &a1)$/;"	f	class:lazy_disable_if	signature:(const A0 &a0 , const A1 &a1)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7 , const C8 &c8 , const C9 &c9)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7 , const C8 &c8 , const C9 &c9)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7 , const C8 &c8)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7 , const C8 &c8)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2)
make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1)
make_expr	proto/make_expr.hpp	/^        struct make_expr$/;"	s	namespace:boost::proto::functional
make_expr	proto/make_expr.hpp	/^        struct make_expr$/;"	s	namespace:boost::proto::result_of
make_expr	proto/make_expr.hpp	/^        struct make_expr<$/;"	s	namespace:boost::proto::result_of
make_expr	proto/make_expr.hpp	/^    make_expr(A0 const &a0)$/;"	f	class:boost::proto::lazy_disable_if	signature:(A0 const &a0)
make_expr	proto/make_expr.hpp	/^    make_expr(C0 const &c0)$/;"	f	class:boost::proto::result_of::make_expr	signature:(C0 const &c0)
make_expr_	proto/detail/make_expr_.hpp	/^    struct make_expr_$/;"	s
make_expr_	proto/detail/make_expr_.hpp	/^    struct make_expr_<Tag, Domain BOOST_PP_ENUM_TRAILING_PARAMS(N, A)$/;"	s
make_expr_	proto/detail/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain BOOST_PP_ENUM_TRAILING_PARAMS(N, A)$/;"	s	inherits:make_expr_
make_expr_	proto/detail/make_expr_.hpp	/^    struct make_expr_<tag::terminal, Domain, A$/;"	s
make_expr_	proto/detail/make_expr_.hpp	/^    struct make_expr_<tag::terminal, deduce_domain, A$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0 , A1 , A2 , A3 , A4 , A5 , A6$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0 , A1 , A2 , A3 , A4 , A5$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0 , A1 , A2 , A3 , A4$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0 , A1 , A2 , A3$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0 , A1 , A2$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0 , A1$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, Domain , A0$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0 , A1 , A2 , A3 , A4 , A5 , A6$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0 , A1 , A2 , A3 , A4 , A5$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0 , A1 , A2 , A3 , A4$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0 , A1 , A2 , A3$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0 , A1 , A2$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0 , A1$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<Tag, deduce_domain , A0$/;"	s	inherits:make_expr_
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<tag::terminal, Domain, A$/;"	s
make_expr_	proto/detail/preprocessed/make_expr_.hpp	/^    struct make_expr_<tag::terminal, deduce_domain, A$/;"	s	inherits:make_expr_
make_expr_::BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/make_expr_.hpp	/^        result_type operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, typename add_reference<A, >::type a)) const$/;"	f	struct:make_expr_	access:public	signature:(N, typename add_reference<A, >::type a) const
make_expr_::expr_type	proto/detail/make_expr_.hpp	/^        typedef typename base_expr<Domain, Tag, proto_args>::type expr_type;$/;"	t	struct:make_expr_	access:public
make_expr_::expr_type	proto/detail/preprocessed/make_expr_.hpp	/^        typedef typename base_expr<Domain, Tag, proto_args>::type expr_type;$/;"	t	struct:make_expr_	access:public
make_expr_::operator ()	proto/detail/make_expr_.hpp	/^        result_type operator()(typename add_reference<A>::type a) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A>::type a) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7 , typename add_reference<A8 >::type a8 , typename add_reference<A9 >::type a9) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7 , typename add_reference<A8 >::type a8 , typename add_reference<A9 >::type a9) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7 , typename add_reference<A8 >::type a8) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7 , typename add_reference<A8 >::type a8) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0) const
make_expr_::operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A>::type a) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A>::type a) const
make_expr_::proto_args	proto/detail/make_expr_.hpp	/^        proto_args;$/;"	t	struct:make_expr_	access:public
make_expr_::proto_args	proto/detail/preprocessed/make_expr_.hpp	/^        proto_args;$/;"	t	struct:make_expr_	access:public
make_expr_::proto_generator	proto/detail/make_expr_.hpp	/^        typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:make_expr_	access:public
make_expr_::proto_generator	proto/detail/preprocessed/make_expr_.hpp	/^        typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:make_expr_	access:public
make_expr_::result_type	proto/detail/make_expr_.hpp	/^        typedef typename proto::detail::protoify<A, Domain>::result_type result_type;$/;"	t	struct:make_expr_	access:public
make_expr_::result_type	proto/detail/make_expr_.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:make_expr_	access:public
make_expr_::result_type	proto/detail/preprocessed/make_expr_.hpp	/^        typedef typename proto::detail::protoify<A, Domain>::result_type result_type;$/;"	t	struct:make_expr_	access:public
make_expr_::result_type	proto/detail/preprocessed/make_expr_.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:make_expr_	access:public
make_function	proto/proto_fwd.hpp	/^        typedef make_expr<tag::function>            make_function;$/;"	t	namespace:boost::proto::functional
make_greater	proto/proto_fwd.hpp	/^        typedef make_expr<tag::greater>             make_greater;$/;"	t	namespace:boost::proto::functional
make_greater_equal	proto/proto_fwd.hpp	/^        typedef make_expr<tag::greater_equal>       make_greater_equal;$/;"	t	namespace:boost::proto::functional
make_if_	proto/transform/make.hpp	/^        struct make_if_$/;"	s	namespace:boost::proto::detail	inherits:make_
make_if_	proto/transform/make.hpp	/^        struct make_if_<R, Expr, State, Data, true>$/;"	s	namespace:boost::proto::detail	inherits:uncvref
make_if_	proto/transform/make.hpp	/^        struct make_if_<proto::basic_expr<Tag, Args, N>, Expr, State, Data, false>$/;"	s	namespace:boost::proto::detail
make_if_	proto/transform/make.hpp	/^        struct make_if_<proto::expr<Tag, Args, N>, Expr, State, Data, false>$/;"	s	namespace:boost::proto::detail
make_if_else	proto/proto_fwd.hpp	/^        typedef make_expr<tag::if_else_>            make_if_else;$/;"	t	namespace:boost::proto::functional
make_less	proto/proto_fwd.hpp	/^        typedef make_expr<tag::less>                make_less;$/;"	t	namespace:boost::proto::functional
make_less_equal	proto/proto_fwd.hpp	/^        typedef make_expr<tag::less_equal>          make_less_equal;$/;"	t	namespace:boost::proto::functional
make_logical_and	proto/proto_fwd.hpp	/^        typedef make_expr<tag::logical_and>         make_logical_and;$/;"	t	namespace:boost::proto::functional
make_logical_not	proto/proto_fwd.hpp	/^        typedef make_expr<tag::logical_not>         make_logical_not;$/;"	t	namespace:boost::proto::functional
make_logical_or	proto/proto_fwd.hpp	/^        typedef make_expr<tag::logical_or>          make_logical_or;$/;"	t	namespace:boost::proto::functional
make_mem_ptr	proto/proto_fwd.hpp	/^        typedef make_expr<tag::mem_ptr>             make_mem_ptr;$/;"	t	namespace:boost::proto::functional
make_minus	proto/proto_fwd.hpp	/^        typedef make_expr<tag::minus>               make_minus;$/;"	t	namespace:boost::proto::functional
make_minus_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::minus_assign>        make_minus_assign;$/;"	t	namespace:boost::proto::functional
make_modulus	proto/proto_fwd.hpp	/^        typedef make_expr<tag::modulus>             make_modulus;$/;"	t	namespace:boost::proto::functional
make_modulus_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::modulus_assign>      make_modulus_assign;$/;"	t	namespace:boost::proto::functional
make_multiplies	proto/proto_fwd.hpp	/^        typedef make_expr<tag::multiplies>          make_multiplies;$/;"	t	namespace:boost::proto::functional
make_multiplies_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::multiplies_assign>   make_multiplies_assign;$/;"	t	namespace:boost::proto::functional
make_mutable	proto/detail/decltype.hpp	/^        typename as_mutable<T>::type make_mutable();$/;"	p	namespace:boost::proto::detail	signature:()
make_negate	proto/proto_fwd.hpp	/^        typedef make_expr<tag::negate>              make_negate;$/;"	t	namespace:boost::proto::functional
make_not_equal_to	proto/proto_fwd.hpp	/^        typedef make_expr<tag::not_equal_to>        make_not_equal_to;$/;"	t	namespace:boost::proto::functional
make_pair	proto/functional/std/utility.hpp	/^    struct make_pair$/;"	s	namespace:boost::proto::functional
make_plus	proto/proto_fwd.hpp	/^        typedef make_expr<tag::plus>                make_plus;$/;"	t	namespace:boost::proto::functional
make_plus_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::plus_assign>         make_plus_assign;$/;"	t	namespace:boost::proto::functional
make_post_dec	proto/proto_fwd.hpp	/^        typedef make_expr<tag::post_dec>            make_post_dec;$/;"	t	namespace:boost::proto::functional
make_post_inc	proto/proto_fwd.hpp	/^        typedef make_expr<tag::post_inc>            make_post_inc;$/;"	t	namespace:boost::proto::functional
make_pre_dec	proto/proto_fwd.hpp	/^        typedef make_expr<tag::pre_dec>             make_pre_dec;$/;"	t	namespace:boost::proto::functional
make_pre_inc	proto/proto_fwd.hpp	/^        typedef make_expr<tag::pre_inc>             make_pre_inc;$/;"	t	namespace:boost::proto::functional
make_shift_left	proto/proto_fwd.hpp	/^        typedef make_expr<tag::shift_left>          make_shift_left;$/;"	t	namespace:boost::proto::functional
make_shift_left_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::shift_left_assign>   make_shift_left_assign;$/;"	t	namespace:boost::proto::functional
make_shift_right	proto/proto_fwd.hpp	/^        typedef make_expr<tag::shift_right>         make_shift_right;$/;"	t	namespace:boost::proto::functional
make_shift_right_assign	proto/proto_fwd.hpp	/^        typedef make_expr<tag::shift_right_assign>  make_shift_right_assign;$/;"	t	namespace:boost::proto::functional
make_subscript	proto/proto_fwd.hpp	/^        typedef make_expr<tag::subscript>           make_subscript;$/;"	t	namespace:boost::proto::functional
make_subscriptable	proto/detail/decltype.hpp	/^        typename as_subscriptable<T>::type make_subscriptable();$/;"	p	namespace:boost::proto::detail	signature:()
make_terminal	proto/expr.hpp	/^        Expr make_terminal(T &t, Expr *, proto::term<Arg0> *)$/;"	f	namespace:boost::proto::detail	signature:(T &t, Expr *, proto::term<Arg0> *)
make_terminal	proto/expr.hpp	/^        Expr make_terminal(T &t, Expr *, proto::term<U C::*> *)$/;"	f	namespace:boost::proto::detail	signature:(T &t, Expr *, proto::term<U C::*> *)
make_terminal	proto/expr.hpp	/^        Expr make_terminal(T const(&t)[N], Expr *, proto::term<Arg0[N]> *)$/;"	f	namespace:boost::proto::detail	signature:(T const(&t)[N], Expr *, proto::term<Arg0[N]> *)
make_terminal	proto/proto_fwd.hpp	/^        typedef make_expr<tag::terminal>            make_terminal;$/;"	t	namespace:boost::proto::functional
make_unary_plus	proto/proto_fwd.hpp	/^        typedef make_expr<tag::unary_plus>          make_unary_plus;$/;"	t	namespace:boost::proto::functional
map_type	proto/transform/when.hpp	/^        typedef mpl::map<BOOST_PP_ENUM_PARAMS(BOOST_MPL_LIMIT_MAP_SIZE, T)> map_type;$/;"	t	struct:boost::proto::external_transforms	access:public
matches	proto/matches.hpp	/^    struct matches$/;"	s	namespace:boost::proto	inherits:detail::matches_
matches	proto/matches.hpp	/^    struct matches<Expr &, Grammar>$/;"	s	namespace:boost::proto	inherits:detail::matches_
matches_	proto/detail/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, N>, proto::basic_expr<Tag, Args2, N> >$/;"	s	inherits:BOOST_PP_CAT,and_,N
matches_	proto/detail/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, N>, proto::basic_expr<proto::_, Args2, N> >$/;"	s	inherits:BOOST_PP_CAT,and_,N
matches_	proto/detail/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<BOOST_PP_ENUM_PARAMS(N, G)> >$/;"	s	inherits:detail::BOOST_PP_CAT,and_,N
matches_	proto/detail/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<BOOST_PP_ENUM_PARAMS(N, G)> >$/;"	s	inherits:BOOST_PP_CAT,or_,N
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 10>, proto::basic_expr<Tag, Args2, 10> >$/;"	s	inherits:and_10
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 10>, proto::basic_expr<proto::_, Args2, 10> >$/;"	s	inherits:and_10
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 2>, proto::basic_expr<Tag, Args2, 2> >$/;"	s	inherits:and_2
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 2>, proto::basic_expr<proto::_, Args2, 2> >$/;"	s	inherits:and_2
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 3>, proto::basic_expr<Tag, Args2, 3> >$/;"	s	inherits:and_3
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 3>, proto::basic_expr<proto::_, Args2, 3> >$/;"	s	inherits:and_3
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 4>, proto::basic_expr<Tag, Args2, 4> >$/;"	s	inherits:and_4
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 4>, proto::basic_expr<proto::_, Args2, 4> >$/;"	s	inherits:and_4
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 5>, proto::basic_expr<Tag, Args2, 5> >$/;"	s	inherits:and_5
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 5>, proto::basic_expr<proto::_, Args2, 5> >$/;"	s	inherits:and_5
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 6>, proto::basic_expr<Tag, Args2, 6> >$/;"	s	inherits:and_6
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 6>, proto::basic_expr<proto::_, Args2, 6> >$/;"	s	inherits:and_6
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 7>, proto::basic_expr<Tag, Args2, 7> >$/;"	s	inherits:and_7
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 7>, proto::basic_expr<proto::_, Args2, 7> >$/;"	s	inherits:and_7
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 8>, proto::basic_expr<Tag, Args2, 8> >$/;"	s	inherits:and_8
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 8>, proto::basic_expr<proto::_, Args2, 8> >$/;"	s	inherits:and_8
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 9>, proto::basic_expr<Tag, Args2, 9> >$/;"	s	inherits:and_9
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 9>, proto::basic_expr<proto::_, Args2, 9> >$/;"	s	inherits:and_9
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8 , G9> >$/;"	s	inherits:detail::and_10
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8> >$/;"	s	inherits:detail::and_9
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7> >$/;"	s	inherits:detail::and_8
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<G0 , G1 , G2 , G3 , G4 , G5 , G6> >$/;"	s	inherits:detail::and_7
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<G0 , G1 , G2 , G3 , G4 , G5> >$/;"	s	inherits:detail::and_6
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<G0 , G1 , G2 , G3 , G4> >$/;"	s	inherits:detail::and_5
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<G0 , G1 , G2 , G3> >$/;"	s	inherits:detail::and_4
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<G0 , G1 , G2> >$/;"	s	inherits:detail::and_3
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::and_<G0 , G1> >$/;"	s	inherits:detail::and_2
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8 , G9> >$/;"	s	inherits:or_10
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8> >$/;"	s	inherits:or_9
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7> >$/;"	s	inherits:or_8
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<G0 , G1 , G2 , G3 , G4 , G5 , G6> >$/;"	s	inherits:or_7
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<G0 , G1 , G2 , G3 , G4 , G5> >$/;"	s	inherits:or_6
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<G0 , G1 , G2 , G3 , G4> >$/;"	s	inherits:or_5
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<G0 , G1 , G2 , G3> >$/;"	s	inherits:or_4
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<G0 , G1 , G2> >$/;"	s	inherits:or_3
matches_	proto/detail/preprocessed/matches_.hpp	/^        struct matches_<Expr, BasicExpr, proto::or_<G0 , G1> >$/;"	s	inherits:or_2
matches_	proto/matches.hpp	/^        struct matches_$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
matches_	proto/matches.hpp	/^        struct matches_< Expr, BasicExpr, proto::_ >$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 0>, proto::basic_expr<Tag, Args2, 0> >$/;"	s	namespace:boost::proto::detail	inherits:terminal_matches
matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 0>, proto::basic_expr<proto::_, Args2, 0> >$/;"	s	namespace:boost::proto::detail	inherits:terminal_matches
matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 0>, proto::basic_expr<proto::_, Args2, N2> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 1>, proto::basic_expr<Tag, Args2, 1> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, 1>, proto::basic_expr<proto::_, Args2, 1> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, N1>, proto::basic_expr<Tag, Args2, N2> >$/;"	s	namespace:boost::proto::detail	inherits:vararg_matchesN2,N2,N1
matches_	proto/matches.hpp	/^        struct matches_< Expr, proto::basic_expr<Tag, Args1, N1>, proto::basic_expr<proto::_, Args2, N2> >$/;"	s	namespace:boost::proto::detail	inherits:vararg_matchesN2,N2,N1
matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, and_<> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, and_<G0> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, not_<Grammar> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::not_
matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, or_<> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
matches_	proto/matches.hpp	/^        struct matches_<Expr, BasicExpr, or_<G0> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
matches_	proto/matches.hpp	/^        struct matches_<Expr, proto::basic_expr<Tag, Args, Arity>, proto::if_<If, Then, Else> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::eval_if_c::type
matches_	proto/matches.hpp	/^        struct matches_<Expr, proto::basic_expr<Tag, Args, Arity>, switch_<Cases, Transform> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
matches_	proto/matches.hpp	/^        struct matches_<Expr, proto::basic_expr<Tag, Args, Arity>, switch_<Cases> >$/;"	s	namespace:boost::proto::detail	inherits:matches_
mem_ptr	proto/tags.hpp	/^    struct mem_ptr {};$/;"	s	namespace:boost::proto::tagns_::tag
mem_ptr_fun	proto/detail/decltype.hpp	/^            struct mem_ptr_fun$/;"	s	namespace:boost::proto::detail::get_pointerns
mem_ptr_fun	proto/detail/decltype.hpp	/^            struct mem_ptr_fun<T, U, true>$/;"	s	namespace:boost::proto::detail::get_pointerns
member	proto/tags.hpp	/^    struct member {};$/;"	s	namespace:boost::proto::tagns_::tag
memfun	proto/detail/decltype.hpp	/^            memfun(T t, pmf_type p)$/;"	f	struct:boost::proto::detail::memfun	access:public	signature:(T t, pmf_type p)
memfun	proto/detail/decltype.hpp	/^        struct memfun$/;"	s	namespace:boost::proto::detail
memfun_eval	proto/context/default.hpp	/^        struct memfun_eval$/;"	s	namespace:boost::proto::context
memfun_eval	proto/context/default.hpp	/^        struct memfun_eval<Expr, Context, true>$/;"	s	namespace:boost::proto::context
minus	proto/tags.hpp	/^    struct minus {};$/;"	s	namespace:boost::proto::tagns_::tag
minus_assign	proto/tags.hpp	/^    struct minus_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
modulus	proto/tags.hpp	/^    struct modulus {};$/;"	s	namespace:boost::proto::tagns_::tag
modulus_assign	proto/tags.hpp	/^    struct modulus_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
mono_function_t	proto/detail/poly_function.hpp	/^    typedef char (&mono_function_t)[2];$/;"	t	namespace:boost::proto::detail
mpl	proto/fusion.hpp	/^namespace boost { namespace mpl$/;"	n	namespace:boost
multiplies	proto/tags.hpp	/^    struct multiplies {};$/;"	s	namespace:boost::proto::tagns_::tag
multiplies_assign	proto/tags.hpp	/^    struct multiplies_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
name_	proto/debug.hpp	/^            char const *name_;$/;"	m	struct:boost::proto::hidden_detail_::named_any	access:public
named_any	proto/debug.hpp	/^            named_any(T const &)$/;"	f	struct:boost::proto::hidden_detail_::named_any	access:public	signature:(T const &)
named_any	proto/debug.hpp	/^        struct named_any$/;"	s	namespace:boost::proto::hidden_detail_
nary_expr	proto/detail/preprocessed/traits.hpp	/^        struct nary_expr$/;"	s	inherits:proto::transform
nary_expr	proto/detail/traits.hpp	/^        struct nary_expr$/;"	s	inherits:proto::transform
nary_expr::impl	proto/detail/preprocessed/traits.hpp	/^            struct impl$/;"	s	struct:nary_expr	inherits:detail::pass_through_impl	access:public
nary_expr::impl	proto/detail/traits.hpp	/^            struct impl$/;"	s	struct:nary_expr	inherits:detail::pass_through_impl	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A7> proto_child8; typedef detail::if_vararg<A7> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A7> proto_child8; typedef detail::if_vararg<A7> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A8> proto_child9;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list10<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9>, 10> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list1<A0>, 1> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list2<A0 , A1>, 2> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list3<A0 , A1 , A2>, 3> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list4<A0 , A1 , A2 , A3>, 4> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list5<A0 , A1 , A2 , A3 , A4>, 5> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list6<A0 , A1 , A2 , A3 , A4 , A5>, 6> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list7<A0 , A1 , A2 , A3 , A4 , A5 , A6>, 7> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list8<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7>, 8> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list9<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8>, 9> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_grammar	proto/detail/traits.hpp	/^            typedef proto::basic_expr<Tag, BOOST_PP_CAT(list, N)<BOOST_PP_ENUM_PARAMS(N, A)>, N> proto_grammar;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_tag	proto/detail/preprocessed/traits.hpp	/^            typedef Tag proto_tag;$/;"	t	struct:nary_expr	access:public
nary_expr::proto_tag	proto/detail/traits.hpp	/^            typedef Tag proto_tag;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list10<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9>, 10> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list1<A0>, 1> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list2<A0 , A1>, 2> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list3<A0 , A1 , A2>, 3> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list4<A0 , A1 , A2 , A3>, 4> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list5<A0 , A1 , A2 , A3 , A4>, 5> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list6<A0 , A1 , A2 , A3 , A4 , A5>, 6> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list7<A0 , A1 , A2 , A3 , A4 , A5 , A6>, 7> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list8<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7>, 8> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list9<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8>, 9> type;$/;"	t	struct:nary_expr	access:public
nary_expr::type	proto/detail/traits.hpp	/^            typedef proto::expr<Tag, BOOST_PP_CAT(list, N)<BOOST_PP_ENUM_PARAMS(N, A)>, N> type;$/;"	t	struct:nary_expr	access:public
negate	proto/tags.hpp	/^    struct negate {};$/;"	s	namespace:boost::proto::tagns_::tag
nested_type	proto/transform/make.hpp	/^        struct nested_type$/;"	s	namespace:boost::proto::detail
nested_type	proto/transform/make.hpp	/^        struct nested_type<T, false>$/;"	s	namespace:boost::proto::detail
nested_type_if	proto/transform/make.hpp	/^        struct nested_type_if$/;"	s	namespace:boost::proto::detail
nested_type_if	proto/transform/make.hpp	/^        struct nested_type_if<T, true>$/;"	s	namespace:boost::proto::detail	inherits:nested_type
next	proto/functional/std/iterator.hpp	/^    struct next$/;"	s	namespace:boost::proto::functional
next_impl	proto/fusion.hpp	/^        struct next_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
no_super_domain	proto/proto_fwd.hpp	/^        typedef detail::not_a_domain no_super_domain;$/;"	t	namespace:boost::proto::domainns_
no_type	proto/proto_fwd.hpp	/^        typedef char (&no_type)[2];$/;"	t	namespace:boost::proto::detail
normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg$/;"	s	namespace:boost::proto::detail
normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<T &>$/;"	s	namespace:boost::proto::detail
normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<T const &>$/;"	s	namespace:boost::proto::detail
normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<T const>$/;"	s	namespace:boost::proto::detail
normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<boost::reference_wrapper<T> &>$/;"	s	namespace:boost::proto::detail
normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<boost::reference_wrapper<T> >$/;"	s	namespace:boost::proto::detail
normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<boost::reference_wrapper<T> const &>$/;"	s	namespace:boost::proto::detail
normalize_arg	proto/detail/poly_function.hpp	/^    struct normalize_arg<boost::reference_wrapper<T> const>$/;"	s	namespace:boost::proto::detail
not_	proto/matches.hpp	/^    struct not_ : transform<not_<Grammar> >$/;"	s	namespace:boost::proto	inherits:transform
not_a_domain	proto/domain.hpp	/^        struct not_a_domain$/;"	s	namespace:boost::proto::detail
not_a_generator	proto/domain.hpp	/^        struct not_a_generator$/;"	s	namespace:boost::proto::detail
not_a_grammar	proto/domain.hpp	/^        struct not_a_grammar$/;"	s	namespace:boost::proto::detail
not_a_valid_type	proto/expr.hpp	/^            not_a_valid_type()$/;"	f	struct:boost::proto::detail::not_a_valid_type	access:private	signature:()
not_a_valid_type	proto/expr.hpp	/^        struct not_a_valid_type$/;"	s	namespace:boost::proto::detail
not_equal_to	proto/tags.hpp	/^    struct not_equal_to {};$/;"	s	namespace:boost::proto::tagns_::tag
nth_domain	proto/detail/deduce_domain.hpp	/^            struct nth_domain$/;"	s	namespace:boost::proto::detail	inherits:nth_domain
nth_domain	proto/detail/deduce_domain.hpp	/^            struct nth_domain<0, Domain>$/;"	s	namespace:boost::proto::detail	inherits:Domain
null_context	proto/context/null.hpp	/^    struct null_context$/;"	s	namespace:boost::proto::context
null_eval	proto/context/detail/null_eval.hpp	/^    struct null_eval<Expr, Context, N>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 10>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 1>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 2>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 3>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 4>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 5>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 6>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 7>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 8>$/;"	s
null_eval	proto/context/detail/preprocessed/null_eval.hpp	/^    struct null_eval<Expr, Context, 9>$/;"	s
null_eval	proto/context/null.hpp	/^    struct null_eval$/;"	s	namespace:boost::proto::context
null_eval	proto/context/null.hpp	/^    struct null_eval<Expr, Context, 0>$/;"	s	namespace:boost::proto::context
null_eval::operator ()	proto/context/detail/null_eval.hpp	/^        void operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:null_eval	access:public	signature:(Expr &expr, Context &ctx) const
null_eval::operator ()	proto/context/detail/preprocessed/null_eval.hpp	/^        void operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:null_eval	access:public	signature:(Expr &expr, Context &ctx) const
null_eval::result_type	proto/context/detail/null_eval.hpp	/^        typedef void result_type;$/;"	t	struct:null_eval	access:public
null_eval::result_type	proto/context/detail/preprocessed/null_eval.hpp	/^        typedef void result_type;$/;"	t	struct:null_eval	access:public
nullary_expr	proto/traits.hpp	/^    struct nullary_expr$/;"	s	namespace:boost::proto	inherits:proto::transform
obj	proto/detail/decltype.hpp	/^            T obj;$/;"	m	struct:boost::proto::detail::memfun	access:private
operator !	proto/detail/any.hpp	/^                any operator!();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
operator !=	proto/detail/any.hpp	/^                friend any operator!=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator %	proto/detail/any.hpp	/^                friend any operator%(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator %=	proto/detail/any.hpp	/^                friend any operator%=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator &	proto/detail/any.hpp	/^                any operator&();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
operator &	proto/detail/any.hpp	/^                friend any operator&(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator &&	proto/detail/any.hpp	/^                friend any operator&&(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator &=	proto/detail/any.hpp	/^                friend any operator&=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator ()	proto/context/callable.hpp	/^            result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:boost::proto::context::callable_eval	access:public	signature:(Expr &expr, Context &context) const
operator ()	proto/context/default.hpp	/^            result_type const operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:boost::proto::context::memfun_eval	access:public	signature:(Expr &expr, Context &ctx) const
operator ()	proto/context/default.hpp	/^            result_type operator ()(Expr &expr, Context &) const$/;"	f	struct:boost::proto::context::default_eval	access:public	signature:(Expr &expr, Context &) const
operator ()	proto/context/default.hpp	/^            result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:boost::proto::context::default_eval	access:public	signature:(Expr &expr, Context &context) const
operator ()	proto/context/default.hpp	/^            result_type operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:boost::proto::context::default_eval	access:public	signature:(Expr &expr, Context &ctx) const
operator ()	proto/context/default.hpp	/^            result_type operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:boost::proto::context::memfun_eval	access:public	signature:(Expr &expr, Context &ctx) const
operator ()	proto/context/detail/callable_eval.hpp	/^            result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:context::callable_eval	access:public	signature:(Expr &expr, Context &context) const
operator ()	proto/context/detail/default_eval.hpp	/^        result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:default_eval	access:public	signature:(Expr &expr, Context &context) const
operator ()	proto/context/detail/null_eval.hpp	/^        void operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:null_eval	access:public	signature:(Expr &expr, Context &ctx) const
operator ()	proto/context/detail/preprocessed/callable_eval.hpp	/^            result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:context::callable_eval	access:public	signature:(Expr &expr, Context &context) const
operator ()	proto/context/detail/preprocessed/default_eval.hpp	/^        result_type operator ()(Expr &expr, Context &context) const$/;"	f	struct:default_eval	access:public	signature:(Expr &expr, Context &context) const
operator ()	proto/context/detail/preprocessed/null_eval.hpp	/^        void operator ()(Expr &expr, Context &ctx) const$/;"	f	struct:null_eval	access:public	signature:(Expr &expr, Context &ctx) const
operator ()	proto/context/null.hpp	/^        void operator()(Expr &, Context &) const$/;"	f	struct:boost::proto::context::null_eval	access:public	signature:(Expr &, Context &) const
operator ()	proto/debug.hpp	/^            void operator()(Expr const &expr) const$/;"	f	struct:boost::proto::detail::display_expr_impl	access:public	signature:(Expr const &expr) const
operator ()	proto/debug.hpp	/^            void operator()(Expr const &expr) const$/;"	f	struct:boost::proto::functional::display_expr	access:public	signature:(Expr const &expr) const
operator ()	proto/deep_copy.hpp	/^            operator()(Expr const &e) const$/;"	f	struct:boost::proto::functional::deep_copy	access:public	signature:(Expr const &e) const
operator ()	proto/deep_copy.hpp	/^            result_type operator()(Expr2 const &e, S const &, D const &) const$/;"	f	struct:boost::proto::detail::deep_copy_impl	access:public	signature:(Expr2 const &e, S const &, D const &) const
operator ()	proto/detail/and_n.hpp	/^            result_type operator()($/;"	f	struct:_and_impl	access:public	signature:( typename _and_impl::expr_param e , typename _and_impl::state_param s , typename _and_impl::data_param d ) const
operator ()	proto/detail/as_expr.hpp	/^        result_type operator()(T &t) const$/;"	f	struct:boost::proto::detail::as_child	access:public	signature:(T &t) const
operator ()	proto/detail/as_expr.hpp	/^        result_type operator()(T &t) const$/;"	f	struct:boost::proto::detail::as_expr	access:public	signature:(T &t) const
operator ()	proto/detail/decltype.hpp	/^                result_type operator()($/;"	f	struct:boost::proto::detail::get_pointerns::mem_ptr_fun	access:public	signature:( typename add_reference<typename add_const<T>::type>::type t , U u ) const
operator ()	proto/detail/decltype.hpp	/^                result_type operator()($/;"	f	struct:boost::proto::detail::get_pointerns::mem_ptr_fun	access:public	signature:( typename add_reference<typename add_const<T>::type>::type t , typename add_reference<typename add_const<U>::type>::type u ) const
operator ()	proto/detail/decltype.hpp	/^            result_type operator()() const$/;"	f	struct:boost::proto::detail::memfun	access:public	signature:() const
operator ()	proto/detail/deep_copy.hpp	/^        result_type operator()(Expr2 const &e, S const &, D const &) const$/;"	f	struct:deep_copy_impl	access:public	signature:(Expr2 const &e, S const &, D const &) const
operator ()	proto/detail/expr.hpp	/^        operator ()() const$/;"	f	class:expr::proto	access:public	signature:() const
operator ()	proto/detail/expr.hpp	/^        operator ()()$/;"	f	class:expr::proto	access:public	signature:()
operator ()	proto/detail/expr.hpp	/^        operator ()(A const &... a) const$/;"	f	class:expr::result_of::funop	access:public	signature:(A const &.... a) const
operator ()	proto/detail/expr.hpp	/^        operator ()(A const &... a)$/;"	f	class:expr::result_of::funop	access:public	signature:(A const &.... a)
operator ()	proto/detail/make_expr_.hpp	/^        result_type operator()(typename add_reference<A>::type a) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A>::type a) const
operator ()	proto/detail/poly_function.hpp	/^        NullaryResult operator()() const$/;"	f	struct:boost::proto::detail::poly_function	access:public	signature:() const
operator ()	proto/detail/poly_function.hpp	/^        type operator()() const$/;"	f	struct:boost::proto::detail::arg	access:public	signature:() const
operator ()	proto/detail/preprocessed/and_n.hpp	/^            result_type operator()($/;"	f	struct:_and_impl	access:public	signature:( typename _and_impl::expr_param e , typename _and_impl::state_param s , typename _and_impl::data_param d ) const
operator ()	proto/detail/preprocessed/deep_copy.hpp	/^        result_type operator()(Expr2 const &e, S const &, D const &) const$/;"	f	struct:deep_copy_impl	access:public	signature:(Expr2 const &e, S const &, D const &) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()() const$/;"	f	class:expr::proto	access:public	signature:() const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()()$/;"	f	class:expr::proto	access:public	signature:()
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const$/;"	f	class:expr::result_of::funop9	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)$/;"	f	class:expr::result_of::funop9	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const$/;"	f	class:expr::result_of::funop8	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)$/;"	f	class:expr::result_of::funop8	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const$/;"	f	class:expr::result_of::funop7	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)$/;"	f	class:expr::result_of::funop7	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const$/;"	f	class:expr::result_of::funop6	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)$/;"	f	class:expr::result_of::funop6	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const$/;"	f	class:expr::result_of::funop5	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)$/;"	f	class:expr::result_of::funop5	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const$/;"	f	class:expr::result_of::funop4	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)$/;"	f	class:expr::result_of::funop4	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) const$/;"	f	class:expr::result_of::funop3	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2)$/;"	f	class:expr::result_of::funop3	access:public	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1) const$/;"	f	class:expr::result_of::funop2	access:public	signature:(A0 const &a0 , A1 const &a1) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0 , A1 const &a1)$/;"	f	class:expr::result_of::funop2	access:public	signature:(A0 const &a0 , A1 const &a1)
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0) const$/;"	f	class:expr::result_of::funop1	access:public	signature:(A0 const &a0) const
operator ()	proto/detail/preprocessed/expr.hpp	/^        operator ()(A0 const &a0)$/;"	f	class:expr::result_of::funop1	access:public	signature:(A0 const &a0)
operator ()	proto/detail/preprocessed/expr_variadic.hpp	/^        operator ()(A const &... a) const$/;"	f	class:expr::result_of::funop	access:public	signature:(A const &.... a) const
operator ()	proto/detail/preprocessed/expr_variadic.hpp	/^        operator ()(A const &... a)$/;"	f	class:expr::result_of::funop	access:public	signature:(A const &.... a)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr const , proto_domain >::type ) >::type const operator ()() const { typedef boost::proto::result_of::funop0< proto_derived_expr const , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) ) ); } BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr , proto_domain >::type ) >::type const operator ()() { typedef boost::proto::result_of::funop0< proto_derived_expr , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:()
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr const , proto_domain >::type ) >::type const operator ()() const { typedef boost::proto::result_of::funop0< proto_derived_expr const , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) ) ); } BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr , proto_domain >::type ) >::type const operator ()() { typedef boost::proto::result_of::funop0< proto_derived_expr , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:() const
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const { typedef boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) { typedef boost::proto::result_of::funop9< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const { typedef boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) { typedef boost::proto::result_of::funop9< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const { typedef boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) { typedef boost::proto::result_of::funop8< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const { typedef boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) { typedef boost::proto::result_of::funop8< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const { typedef boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) { typedef boost::proto::result_of::funop7< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const { typedef boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) { typedef boost::proto::result_of::funop7< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const { typedef boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) { typedef boost::proto::result_of::funop6< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const { typedef boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) { typedef boost::proto::result_of::funop6< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const { typedef boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) { typedef boost::proto::result_of::funop5< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const { typedef boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) { typedef boost::proto::result_of::funop5< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 , a4 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const { typedef boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) { typedef boost::proto::result_of::funop4< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const { typedef boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 ) ); } template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) { typedef boost::proto::result_of::funop4< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 , a3 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) const { typedef boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 ) ); } template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) { typedef boost::proto::result_of::funop3< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) const { typedef boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 ) ); } template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) { typedef boost::proto::result_of::funop3< proto_derived_expr , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 , a2 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2) const
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) const { typedef boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 ) ); } template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) { typedef boost::proto::result_of::funop2< proto_derived_expr , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) const { typedef boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 ) ); } template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) { typedef boost::proto::result_of::funop2< proto_derived_expr , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 , a1 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1) const
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) const { typedef boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 ) ); } template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) { typedef boost::proto::result_of::funop1< proto_derived_expr , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0)
operator ()	proto/detail/preprocessed/extends_funop.hpp	/^        template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) const { typedef boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 ) ); } template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) { typedef boost::proto::result_of::funop1< proto_derived_expr , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr *>(this) , a0 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0) const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop0< proto_derived_expr const , proto_domain >::type ) >::type const operator ()() const { typedef boost::proto::result_of::funop0< proto_derived_expr const , proto_domain > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:() const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const { typedef boost::proto::result_of::funop9< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const { typedef boost::proto::result_of::funop8< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const { typedef boost::proto::result_of::funop7< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 , a6 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const { typedef boost::proto::result_of::funop6< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 , const A5 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 , a5 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const { typedef boost::proto::result_of::funop5< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 , const A4 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 , a4 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2 , typename A3> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const { typedef boost::proto::result_of::funop4< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 , const A3 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 , a3 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1 , typename A2> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) const { typedef boost::proto::result_of::funop3< proto_derived_expr const , proto_domain , const A0 , const A1 , const A2 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 , a2 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2) const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0 , typename A1> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 >::type ) >::type const operator ()(A0 const &a0 , A1 const &a1) const { typedef boost::proto::result_of::funop2< proto_derived_expr const , proto_domain , const A0 , const A1 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 , a1 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0 , A1 const &a1) const
operator ()	proto/detail/preprocessed/extends_funop_const.hpp	/^        template<typename A0> BOOST_FORCEINLINE typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 >::type ) >::type const operator ()(A0 const &a0) const { typedef boost::proto::result_of::funop1< proto_derived_expr const , proto_domain , const A0 > funop; return proto_generator()( funop::call( *static_cast<proto_derived_expr const *>(this) , a0 ) ); }$/;"	f	class:BOOST_PROTO_RESULT_OF	signature:(A0 const &a0) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7 , typename add_reference<A8 >::type a8 , typename add_reference<A9 >::type a9) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7 , typename add_reference<A8 >::type a8 , typename add_reference<A9 >::type a9) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7 , typename add_reference<A8 >::type a8) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7 , typename add_reference<A8 >::type a8) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6 , typename add_reference<A7 >::type a7) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5 , typename add_reference<A6 >::type a6) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4 , typename add_reference<A5 >::type a5) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3 , typename add_reference<A4 >::type a4) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2 , typename add_reference<A3 >::type a3) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1 , typename add_reference<A2 >::type a2) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0 , typename add_reference<A1 >::type a1) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A0 >::type a0) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A0 >::type a0) const
operator ()	proto/detail/preprocessed/make_expr_.hpp	/^        result_type operator()(typename add_reference<A>::type a) const$/;"	f	struct:make_expr_	access:public	signature:(typename add_reference<A>::type a) const
operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8 , const A9 &a9) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8 , const A9 &a9) const
operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8) const
operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7) const
operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6) const
operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5) const
operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4) const
operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3) const
operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2) const
operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0 , A1 const &a1 , A2 const &a2) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0 , A1 const &a1) const$/;"	f	signature:(A0 const &a0 , A1 const &a1) const
operator ()	proto/detail/preprocessed/memfun_funop.hpp	/^    result_type operator()(A0 const &a0) const$/;"	f	signature:(A0 const &a0) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8 , A9 const &a9) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7 , A8 const &a8) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6 , A7 const &a7) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5 , A6 const &a6) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4 , A5 const &a5) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3 , A4 const &a4) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2 , A3 const &a3) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0 , A1 const &a1 , A2 const &a2) const$/;"	f	signature:(A0 const &a0 , A1 const &a1 , A2 const &a2) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0 , A1 const &a1) const$/;"	f	signature:(A0 const &a0 , A1 const &a1) const
operator ()	proto/detail/preprocessed/poly_function_funop.hpp	/^    operator ()(A0 const &a0) const$/;"	f	signature:(A0 const &a0) const
operator ()	proto/domain.hpp	/^                result_type operator()(T &e) const$/;"	f	struct:boost::proto::domainns_::domain::as_child	access:public	signature:(T &e) const
operator ()	proto/domain.hpp	/^                result_type operator()(T &e) const$/;"	f	struct:boost::proto::domainns_::domain::as_expr	access:public	signature:(T &e) const
operator ()	proto/eval.hpp	/^            operator ()(Expr &e, Context &ctx) const$/;"	f	struct:boost::proto::functional::eval	access:public	signature:(Expr &e, Context &ctx) const
operator ()	proto/eval.hpp	/^            operator ()(Expr &e, Context const &ctx) const$/;"	f	struct:boost::proto::functional::eval	access:public	signature:(Expr &e, Context const &ctx) const
operator ()	proto/eval.hpp	/^            operator ()(Expr const &e, Context &ctx) const$/;"	f	struct:boost::proto::functional::eval	access:public	signature:(Expr const &e, Context &ctx) const
operator ()	proto/eval.hpp	/^            operator ()(Expr const &e, Context const &ctx) const$/;"	f	struct:boost::proto::functional::eval	access:public	signature:(Expr const &e, Context const &ctx) const
operator ()	proto/functional/fusion/at.hpp	/^        operator ()(Seq &seq, N const & BOOST_PROTO_DISABLE_IF_IS_CONST(Seq)) const$/;"	f	struct:boost::proto::functional::at	access:public	signature:(Seq &seq, N const & BOOST_PROTO_DISABLE_IF_IS_CONST(Seq)) const
operator ()	proto/functional/fusion/at.hpp	/^        operator ()(Seq const &seq, N const &) const$/;"	f	struct:boost::proto::functional::at	access:public	signature:(Seq const &seq, N const &) const
operator ()	proto/functional/fusion/pop_back.hpp	/^        operator ()(Seq &seq) const$/;"	f	struct:boost::proto::functional::pop_back	access:public	signature:(Seq &seq) const
operator ()	proto/functional/fusion/pop_back.hpp	/^        operator ()(Seq const &seq) const$/;"	f	struct:boost::proto::functional::pop_back	access:public	signature:(Seq const &seq) const
operator ()	proto/functional/fusion/pop_front.hpp	/^        operator ()(Seq &seq) const$/;"	f	struct:boost::proto::functional::pop_front	access:public	signature:(Seq &seq) const
operator ()	proto/functional/fusion/pop_front.hpp	/^        operator ()(Seq const &seq) const$/;"	f	struct:boost::proto::functional::pop_front	access:public	signature:(Seq const &seq) const
operator ()	proto/functional/fusion/push_back.hpp	/^        operator ()(Seq const &seq, T const &t) const$/;"	f	struct:boost::proto::functional::push_back	access:public	signature:(Seq const &seq, T const &t) const
operator ()	proto/functional/fusion/push_front.hpp	/^        operator ()(Seq const &seq, T const &t) const$/;"	f	struct:boost::proto::functional::push_front	access:public	signature:(Seq const &seq, T const &t) const
operator ()	proto/functional/fusion/reverse.hpp	/^        operator ()(Seq &seq) const$/;"	f	struct:boost::proto::functional::reverse	access:public	signature:(Seq &seq) const
operator ()	proto/functional/fusion/reverse.hpp	/^        operator ()(Seq const &seq) const$/;"	f	struct:boost::proto::functional::reverse	access:public	signature:(Seq const &seq) const
operator ()	proto/functional/range/begin.hpp	/^        typename boost::range_iterator<Rng const>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::begin	access:public	signature:(Rng const &rng) const
operator ()	proto/functional/range/begin.hpp	/^        typename boost::range_iterator<Rng>::type operator()(Rng &rng) const$/;"	f	struct:boost::proto::functional::begin	access:public	signature:(Rng &rng) const
operator ()	proto/functional/range/empty.hpp	/^        bool operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::empty	access:public	signature:(Rng const &rng) const
operator ()	proto/functional/range/end.hpp	/^        typename boost::range_iterator<Rng const>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::end	access:public	signature:(Rng const &rng) const
operator ()	proto/functional/range/end.hpp	/^        typename boost::range_iterator<Rng>::type operator()(Rng &rng) const$/;"	f	struct:boost::proto::functional::end	access:public	signature:(Rng &rng) const
operator ()	proto/functional/range/rbegin.hpp	/^        typename boost::range_reverse_iterator<Rng const>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::rbegin	access:public	signature:(Rng const &rng) const
operator ()	proto/functional/range/rbegin.hpp	/^        typename boost::range_reverse_iterator<Rng>::type operator()(Rng &rng) const$/;"	f	struct:boost::proto::functional::rbegin	access:public	signature:(Rng &rng) const
operator ()	proto/functional/range/rend.hpp	/^        typename boost::range_reverse_iterator<Rng const>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::rend	access:public	signature:(Rng const &rng) const
operator ()	proto/functional/range/rend.hpp	/^        typename boost::range_reverse_iterator<Rng>::type operator()(Rng &rng) const$/;"	f	struct:boost::proto::functional::rend	access:public	signature:(Rng &rng) const
operator ()	proto/functional/range/size.hpp	/^        typename boost::range_size<Rng>::type operator()(Rng const &rng) const$/;"	f	struct:boost::proto::functional::size	access:public	signature:(Rng const &rng) const
operator ()	proto/functional/std/iterator.hpp	/^        BidirectionalIterator operator()($/;"	f	struct:boost::proto::functional::prior	access:public	signature:( BidirectionalIterator x , typename std::iterator_traits<BidirectionalIterator>::difference_type n ) const
operator ()	proto/functional/std/iterator.hpp	/^        BidirectionalIterator operator()(BidirectionalIterator x) const$/;"	f	struct:boost::proto::functional::prior	access:public	signature:(BidirectionalIterator x) const
operator ()	proto/functional/std/iterator.hpp	/^        ForwardIterator operator()($/;"	f	struct:boost::proto::functional::next	access:public	signature:( ForwardIterator x , typename std::iterator_traits<ForwardIterator>::difference_type n ) const
operator ()	proto/functional/std/iterator.hpp	/^        ForwardIterator operator()(ForwardIterator x) const$/;"	f	struct:boost::proto::functional::next	access:public	signature:(ForwardIterator x) const
operator ()	proto/functional/std/iterator.hpp	/^        operator()(InputIterator first, InputIterator last) const$/;"	f	struct:boost::proto::functional::distance	access:public	signature:(InputIterator first, InputIterator last) const
operator ()	proto/functional/std/iterator.hpp	/^        void operator()(InputIterator &x, Distance n) const$/;"	f	struct:boost::proto::functional::advance	access:public	signature:(InputIterator &x, Distance n) const
operator ()	proto/functional/std/utility.hpp	/^        std::pair<First, Second> operator()(First const &first, Second const &second) const$/;"	f	struct:boost::proto::functional::make_pair	access:public	signature:(First const &first, Second const &second) const
operator ()	proto/functional/std/utility.hpp	/^        typename Pair::first_type &operator()(Pair &pair) const$/;"	f	struct:boost::proto::functional::first	access:public	signature:(Pair &pair) const
operator ()	proto/functional/std/utility.hpp	/^        typename Pair::first_type const &operator()(Pair const &pair) const$/;"	f	class:boost::proto::functional::first::Pair	access:public	signature:(Pair const &pair) const
operator ()	proto/functional/std/utility.hpp	/^        typename Pair::second_type &operator()(Pair &pair) const$/;"	f	struct:boost::proto::functional::second	access:public	signature:(Pair &pair) const
operator ()	proto/functional/std/utility.hpp	/^        typename Pair::second_type const &operator()(Pair const &pair) const$/;"	f	class:boost::proto::functional::second::Pair	access:public	signature:(Pair const &pair) const
operator ()	proto/fusion.hpp	/^            operator ()(Expr &e) const$/;"	f	class:boost::proto::detail::as_element::result	access:public	signature:(Expr &e) const
operator ()	proto/fusion.hpp	/^            operator ()(Expr &e) const$/;"	f	class:boost::proto::functional::flatten::proto::detail	access:public	signature:(Expr &e) const
operator ()	proto/fusion.hpp	/^            operator ()(Expr const &e) const$/;"	f	class:boost::proto::detail::as_element::result	access:public	signature:(Expr const &e) const
operator ()	proto/fusion.hpp	/^            operator ()(Expr const &e) const$/;"	f	class:boost::proto::functional::flatten::proto::detail	access:public	signature:(Expr const &e) const
operator ()	proto/fusion.hpp	/^        operator ()(Expr &e) const$/;"	f	struct:boost::proto::eval_fun	access:public	signature:(Expr &e) const
operator ()	proto/fusion.hpp	/^        operator ()(Expr const &e) const$/;"	f	struct:boost::proto::eval_fun	access:public	signature:(Expr const &e) const
operator ()	proto/generate.hpp	/^        Extends<Expr> operator ()(Expr const &e) const$/;"	f	struct:boost::proto::generator	access:public	signature:(Expr const &e) const
operator ()	proto/generate.hpp	/^        Extends<Expr> operator ()(Expr const &e) const$/;"	f	struct:boost::proto::pod_generator	access:public	signature:(Expr const &e) const
operator ()	proto/generate.hpp	/^        Extends<basic_expr<tag::terminal, proto::term<Member Class::*> > > operator ()(basic_expr<tag::terminal, proto::term<Member Class::*> > const &e) const$/;"	f	struct:boost::proto::pod_generator	access:public	signature:(basic_expr<tag::terminal, proto::term<Member Class::*> > const &e) const
operator ()	proto/generate.hpp	/^        Extends<expr<tag::terminal, proto::term<Member Class::*> > > operator ()(expr<tag::terminal, proto::term<Member Class::*> > const &e) const$/;"	f	struct:boost::proto::pod_generator	access:public	signature:(expr<tag::terminal, proto::term<Member Class::*> > const &e) const
operator ()	proto/generate.hpp	/^        operator ()(Expr const &e) const$/;"	f	struct:boost::proto::default_generator	access:public	signature:(Expr const &e) const
operator ()	proto/generate.hpp	/^        typename result<by_value_generator(Expr)>::type operator ()(Expr const &e) const$/;"	f	struct:boost::proto::by_value_generator	access:public	signature:(Expr const &e) const
operator ()	proto/generate.hpp	/^        typename result<compose_generators(Expr)>::type operator ()(Expr const &e) const$/;"	f	struct:boost::proto::compose_generators	access:public	signature:(Expr const &e) const
operator ()	proto/make_expr.hpp	/^            operator ()(A0 const &a0) const$/;"	f	class:boost::proto::functional::make_expr::result_of::make_expr	access:public	signature:(A0 const &a0) const
operator ()	proto/make_expr.hpp	/^            operator ()(Sequence const &sequence) const$/;"	f	class:boost::proto::functional::unpack_expr::result_of::unpack_expr	access:public	signature:(Sequence const &sequence) const
operator ()	proto/matches.hpp	/^            operator()($/;"	f	struct:boost::proto::_::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/matches.hpp	/^            operator()($/;"	f	struct:boost::proto::not_::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/matches.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::if_::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/traits.hpp	/^            operator ()($/;"	f	struct:boost::proto::nullary_expr::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/traits.hpp	/^            operator ()($/;"	f	struct:boost::proto::terminal::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::child	access:public	signature:(Expr &e) const
operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::child_c	access:public	signature:(Expr &e) const
operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::left	access:public	signature:(Expr &e) const
operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::right	access:public	signature:(Expr &e) const
operator ()	proto/traits.hpp	/^            operator ()(Expr &e) const$/;"	f	struct:boost::proto::functional::value	access:public	signature:(Expr &e) const
operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::child	access:public	signature:(Expr const &e) const
operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::child_c	access:public	signature:(Expr const &e) const
operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::left	access:public	signature:(Expr const &e) const
operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::right	access:public	signature:(Expr const &e) const
operator ()	proto/traits.hpp	/^            operator ()(Expr const &e) const$/;"	f	struct:boost::proto::functional::value	access:public	signature:(Expr const &e) const
operator ()	proto/traits.hpp	/^            operator ()(T &t) const$/;"	f	struct:boost::proto::functional::as_child	access:public	signature:(T &t) const
operator ()	proto/traits.hpp	/^            operator ()(T &t) const$/;"	f	struct:boost::proto::functional::as_expr	access:public	signature:(T &t) const
operator ()	proto/traits.hpp	/^            operator ()(T const &t) const$/;"	f	struct:boost::proto::functional::as_child	access:public	signature:(T const &t) const
operator ()	proto/traits.hpp	/^            operator ()(T const &t) const$/;"	f	struct:boost::proto::functional::as_expr	access:public	signature:(T const &t) const
operator ()	proto/traits.hpp	/^            operator ()(T const (&t)[N_]) const$/;"	f	struct:boost::proto::functional::as_expr	access:public	signature:(T const (&t)[N_]) const
operator ()	proto/transform/arg.hpp	/^            operator ()($/;"	f	struct:boost::proto::_child_c::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/transform/arg.hpp	/^            operator ()($/;"	f	struct:boost::proto::_state::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param s , typename impl::data_param ) const
operator ()	proto/transform/arg.hpp	/^            operator ()($/;"	f	struct:boost::proto::_value::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/transform/arg.hpp	/^            operator()($/;"	f	struct:boost::proto::_expr::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/transform/arg.hpp	/^            void operator ()($/;"	f	struct:boost::proto::_void::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/transform/arg.hpp	/^        T operator ()(T const &t) const$/;"	f	struct:boost::proto::_byval	access:public	signature:(T const &t) const
operator ()	proto/transform/arg.hpp	/^        T operator ()(boost::reference_wrapper<T> const &t) const$/;"	f	struct:boost::proto::_byval	access:public	signature:(boost::reference_wrapper<T> const &t) const
operator ()	proto/transform/arg.hpp	/^        boost::reference_wrapper<T const> const operator ()(T const &t) const$/;"	f	class:boost::proto::_byref::boost	access:public	signature:(T const &t) const
operator ()	proto/transform/arg.hpp	/^        boost::reference_wrapper<T> const operator ()(T &t) const$/;"	f	class:boost::proto::_byref::boost	access:public	signature:(T &t) const
operator ()	proto/transform/call.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::call::impl2	access:public	signature:( typename impl2::expr_param e , typename impl2::state_param s , typename impl2::data_param d ) const
operator ()	proto/transform/call.hpp	/^            result_type operator()($/;"	f	struct:boost::proto::call::impl2	access:public	signature:( typename impl2::expr_param , typename impl2::state_param , typename impl2::data_param ) const
operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_comma::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_if_else_::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_post_dec::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_post_inc::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/default.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::default_subscript::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/default.hpp	/^            result_type const operator ()($/;"	f	struct:boost::proto::detail::default_mem_ptr_impl	access:public	signature:( typename default_mem_ptr_impl::expr_param e , typename default_mem_ptr_impl::state_param s , typename default_mem_ptr_impl::data_param d ) const
operator ()	proto/transform/default.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::detail::default_function_impl	access:public	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d ) const
operator ()	proto/transform/default.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::detail::default_mem_ptr_impl	access:public	signature:( typename default_mem_ptr_impl::expr_param e , typename default_mem_ptr_impl::state_param s , typename default_mem_ptr_impl::data_param d ) const
operator ()	proto/transform/detail/call.hpp	/^            result_type operator ()($/;"	f	struct:call::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/detail/default_function_impl.hpp	/^        result_type operator ()($/;"	f	struct:default_function_impl	access:public	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d ) const
operator ()	proto/transform/detail/fold_impl.hpp	/^        result_type operator ()($/;"	f	struct:fold_impl	access:public	signature:( typename fold_impl::expr_param e , typename fold_impl::state_param s , typename fold_impl::data_param d ) const
operator ()	proto/transform/detail/fold_impl.hpp	/^        result_type operator ()($/;"	f	struct:reverse_fold_impl	access:public	signature:( typename reverse_fold_impl::expr_param e , typename reverse_fold_impl::state_param s , typename reverse_fold_impl::data_param d ) const
operator ()	proto/transform/detail/make.hpp	/^            result_type operator ()($/;"	f	struct:make::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/detail/make_gcc_workaround.hpp	/^            result_type operator ()($/;"	f	struct:make::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/detail/pass_through_impl.hpp	/^        operator ()($/;"	f	struct:pass_through_impl	access:public	signature:( typename pass_through_impl::expr_param e , typename pass_through_impl::state_param s , typename pass_through_impl::data_param d ) const
operator ()	proto/transform/detail/preprocessed/call.hpp	/^            result_type operator ()($/;"	f	struct:call::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1) const$/;"	f	signature:(A0 &a0 , A1 &a1) const
operator ()	proto/transform/detail/preprocessed/construct_funop.hpp	/^    Type operator ()(A0 &a0) const$/;"	f	signature:(A0 &a0) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1 , A2 &a2) const$/;"	f	signature:(A0 &a0 , A1 &a1 , A2 &a2) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0 , A1 &a1) const$/;"	f	signature:(A0 &a0 , A1 &a1) const
operator ()	proto/transform/detail/preprocessed/construct_pod_funop.hpp	/^    Type operator ()(A0 &a0) const$/;"	f	signature:(A0 &a0) const
operator ()	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        result_type operator ()($/;"	f	struct:default_function_impl	access:public	signature:( typename default_function_impl::expr_param e , typename default_function_impl::state_param s , typename default_function_impl::data_param d ) const
operator ()	proto/transform/detail/preprocessed/fold_impl.hpp	/^        result_type operator ()($/;"	f	struct:fold_impl	access:public	signature:( typename fold_impl::expr_param e , typename fold_impl::state_param s , typename fold_impl::data_param d ) const
operator ()	proto/transform/detail/preprocessed/fold_impl.hpp	/^        result_type operator ()($/;"	f	struct:reverse_fold_impl	access:public	signature:( typename reverse_fold_impl::expr_param e , typename reverse_fold_impl::state_param s , typename reverse_fold_impl::data_param d ) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()($/;"	f	struct:make::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8 , A9 &a9) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7 , A8 &a8) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6 , A7 &a7) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5 , A6 &a6) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4 , A5 &a5) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3 , A4 &a4) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2 , A3 &a3) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1 , A2 &a2) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1 , A2 &a2) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0 , A1 &a1) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0 , A1 &a1) const
operator ()	proto/transform/detail/preprocessed/make.hpp	/^            result_type operator ()(A0 &a0) const$/;"	f	struct:detail::construct_	access:public	signature:(A0 &a0) const
operator ()	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^            result_type operator ()($/;"	f	struct:make::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        operator ()($/;"	f	struct:pass_through_impl	access:public	signature:( typename pass_through_impl::expr_param e , typename pass_through_impl::state_param s , typename pass_through_impl::data_param d ) const
operator ()	proto/transform/env.hpp	/^                    operator()(T const &t) const$/;"	f	class:boost::proto::functional::as_env::impl	access:public	signature:(T const &t) const
operator ()	proto/transform/env.hpp	/^                    result_type const operator()(detail::arg<T> t) const$/;"	f	struct:boost::proto::functional::as_env::impl	access:public	signature:(detail::arg<T> t) const
operator ()	proto/transform/env.hpp	/^                    result_type operator()(detail::arg<Env> e) const$/;"	f	struct:boost::proto::functional::env_var::impl	access:public	signature:(detail::arg<Env> e) const
operator ()	proto/transform/env.hpp	/^                    result_type operator()(detail::arg<Env>) const$/;"	f	struct:boost::proto::functional::has_env_var::impl	access:public	signature:(detail::arg<Env>) const
operator ()	proto/transform/env.hpp	/^                    typename add_const<T>::type operator()(detail::arg<T> t) const$/;"	f	struct:boost::proto::functional::as_env::impl	access:public	signature:(detail::arg<T> t) const
operator ()	proto/transform/env.hpp	/^                operator ()($/;"	f	struct:boost::proto::_env::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param d ) const
operator ()	proto/transform/env.hpp	/^                operator ()($/;"	f	struct:boost::proto::_env_var::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param d ) const
operator ()	proto/transform/fold.hpp	/^            operator ()(State const &s, Expr &e) const$/;"	f	struct:boost::proto::detail::as_callable	access:public	signature:(State const &s, Expr &e) const
operator ()	proto/transform/fold.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::fold::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/fold.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::reverse_fold::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator ()	proto/transform/integral_c.hpp	/^            T operator()($/;"	f	struct:boost::proto::integral_c::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/transform/make.hpp	/^            Type operator ()() const$/;"	f	struct:boost::proto::detail::construct_	access:public	signature:() const
operator ()	proto/transform/make.hpp	/^            result_type operator ()($/;"	f	struct:boost::proto::make::impl	access:public	signature:( typename impl::expr_param , typename impl::state_param , typename impl::data_param ) const
operator ()	proto/transform/pass_through.hpp	/^            operator()($/;"	f	struct:boost::proto::detail::pass_through_impl	access:public	signature:( typename pass_through_impl::expr_param e , typename pass_through_impl::state_param , typename pass_through_impl::data_param ) const
operator ()	proto/transform/when.hpp	/^                result_type operator ()($/;"	f	struct:boost::proto::detail::when_impl::impl	access:public	signature:( typename impl::expr_param e , typename impl::state_param s , typename impl::data_param d ) const
operator *	proto/detail/any.hpp	/^                any operator*();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
operator *	proto/detail/any.hpp	/^                friend any operator*(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator *=	proto/detail/any.hpp	/^                friend any operator*=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator +	proto/detail/any.hpp	/^                any operator+();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
operator +	proto/detail/any.hpp	/^                friend any operator+(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator ++	proto/detail/any.hpp	/^                any operator++();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
operator ++	proto/detail/any.hpp	/^                any operator++(int);$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:(int)
operator +=	proto/detail/any.hpp	/^                friend any operator+=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator ,	proto/detail/any.hpp	/^                friend any operator,(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator ,	proto/proto_fwd.hpp	/^            private_type_ operator ,(int) const;$/;"	p	struct:boost::proto::detail::private_type_	access:public	signature:(int) const
operator ,	proto/transform/env.hpp	/^                operator,(T const &t, env<T1, V1> const &head)$/;"	f	namespace:boost::proto::envns_	signature:(T const &t, env<T1, V1> const &head)
operator ,	proto/transform/env.hpp	/^            >::type const operator,(T &t, env<T1, V1> const &head)$/;"	f	class:boost::proto::envns_::disable_if_c	signature:(T &t, env<T1, V1> const &head)
operator -	proto/detail/any.hpp	/^                any operator-();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
operator -	proto/detail/any.hpp	/^                friend any operator-(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator --	proto/detail/any.hpp	/^                any operator--();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
operator --	proto/detail/any.hpp	/^                any operator--(int);$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:(int)
operator -=	proto/detail/any.hpp	/^                friend any operator-=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator ->*	proto/detail/any.hpp	/^                friend any operator->*(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator /	proto/detail/any.hpp	/^                friend any operator\/(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator /=	proto/detail/any.hpp	/^                friend any operator\/=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator <	proto/detail/any.hpp	/^                friend any operator<(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator <<	proto/debug.hpp	/^        inline std::ostream &operator <<(ostream_wrapper sout_wrap, named_any t)$/;"	f	namespace:boost::proto::hidden_detail_	signature:(ostream_wrapper sout_wrap, named_any t)
operator <<	proto/detail/any.hpp	/^                friend any operator<<(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator <<=	proto/detail/any.hpp	/^                friend any operator<<=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator <=	proto/detail/any.hpp	/^                friend any operator<=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator =	proto/context/callable.hpp	/^            callable_context_wrapper &operator =(callable_context_wrapper const &);$/;"	p	struct:boost::proto::detail::callable_context_wrapper	access:private	signature:(callable_context_wrapper const &)
operator =	proto/debug.hpp	/^            display_expr_impl &operator =(display_expr_impl const &);$/;"	p	struct:boost::proto::detail::display_expr_impl	access:private	signature:(display_expr_impl const &)
operator =	proto/debug.hpp	/^            ostream_wrapper &operator =(ostream_wrapper const &);$/;"	p	struct:boost::proto::hidden_detail_::ostream_wrapper	access:private	signature:(ostream_wrapper const &)
operator =	proto/detail/any.hpp	/^                any operator=(any);$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:(any)
operator =	proto/detail/expr.hpp	/^        operator =(A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
operator =	proto/detail/expr.hpp	/^        operator =(A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
operator =	proto/detail/expr.hpp	/^        operator =(A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
operator =	proto/detail/expr.hpp	/^        operator =(A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
operator =	proto/detail/expr.hpp	/^        operator =(expr const &a)$/;"	f	class:expr::proto	access:public	signature:(expr const &a)
operator =	proto/detail/poly_function.hpp	/^        arg &operator =(arg const &);$/;"	p	struct:boost::proto::detail::arg	access:private	signature:(arg const &)
operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
operator =	proto/detail/preprocessed/expr.hpp	/^        operator =(expr const &a)$/;"	f	class:expr::proto	access:public	signature:(expr const &a)
operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
operator =	proto/detail/preprocessed/expr_variadic.hpp	/^        operator =(expr const &a)$/;"	f	class:expr::proto	access:public	signature:(expr const &a)
operator ==	proto/detail/any.hpp	/^                friend any operator==(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator >	proto/detail/any.hpp	/^                friend any operator>(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator >=	proto/detail/any.hpp	/^                friend any operator>=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator >>	proto/detail/any.hpp	/^                friend any operator>>(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator >>=	proto/detail/any.hpp	/^                friend any operator>>=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator T &	proto/detail/any.hpp	/^                operator T &() const volatile;$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:() const volatile
operator []	proto/detail/any.hpp	/^                any operator[](any);$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:(any)
operator []	proto/detail/expr.hpp	/^        operator [](A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
operator []	proto/detail/expr.hpp	/^        operator [](A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
operator []	proto/detail/expr.hpp	/^        operator [](A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
operator []	proto/detail/expr.hpp	/^        operator [](A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
operator []	proto/detail/preprocessed/expr.hpp	/^        operator [](A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
operator []	proto/detail/preprocessed/expr.hpp	/^        operator [](A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
operator []	proto/detail/preprocessed/expr.hpp	/^        operator [](A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
operator []	proto/detail/preprocessed/expr.hpp	/^        operator [](A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
operator []	proto/detail/preprocessed/expr_variadic.hpp	/^        operator [](A &a) const$/;"	f	class:expr::proto	access:public	signature:(A &a) const
operator []	proto/detail/preprocessed/expr_variadic.hpp	/^        operator [](A &a)$/;"	f	class:expr::proto	access:public	signature:(A &a)
operator []	proto/detail/preprocessed/expr_variadic.hpp	/^        operator [](A const &a) const$/;"	f	class:expr::proto	access:public	signature:(A const &a) const
operator []	proto/detail/preprocessed/expr_variadic.hpp	/^        operator [](A const &a)$/;"	f	class:expr::proto	access:public	signature:(A const &a)
operator []	proto/transform/env.hpp	/^                const_reference operator[](Key) const$/;"	f	struct:boost::proto::envns_::env	access:public	signature:(Key) const
operator []	proto/transform/impl.hpp	/^            key_not_found operator[](detail::any) const$/;"	f	struct:boost::proto::envns_::empty_env	access:public	signature:(detail::any) const
operator ^	proto/detail/any.hpp	/^                friend any operator^(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator ^=	proto/detail/any.hpp	/^                friend any operator^=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator address_of_hack_type_	proto/detail/basic_expr.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:basic_expr	access:public	signature:() const
operator address_of_hack_type_	proto/detail/expr.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:expr	access:public	signature:() const
operator address_of_hack_type_	proto/detail/preprocessed/basic_expr.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:basic_expr	access:public	signature:() const
operator address_of_hack_type_	proto/detail/preprocessed/expr.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:expr	access:public	signature:() const
operator address_of_hack_type_	proto/detail/preprocessed/expr_variadic.hpp	/^        operator address_of_hack_type_() const$/;"	f	struct:expr	access:public	signature:() const
operator fun_type *	proto/context/callable.hpp	/^            operator fun_type *() const;$/;"	p	struct:boost::proto::detail::callable_context_wrapper	access:public	signature:() const
operator type	proto/detail/poly_function.hpp	/^        operator type() const$/;"	f	struct:boost::proto::detail::arg	access:public	signature:() const
operator |	proto/detail/any.hpp	/^                friend any operator|(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator |=	proto/detail/any.hpp	/^                friend any operator|=(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator ||	proto/detail/any.hpp	/^                friend any operator||(any, any);$/;"	p	struct:boost::proto::detail::anyns::any	access:friend	signature:(any, any)
operator ~	proto/detail/any.hpp	/^                any operator~();$/;"	p	struct:boost::proto::detail::anyns::any	access:public	signature:()
or_	proto/matches.hpp	/^    struct or_ : transform<or_<BOOST_PROTO_LOGICAL_G> >$/;"	s	namespace:boost::proto	inherits:transform
or_10	proto/detail/preprocessed/or_n.hpp	/^    struct or_10$/;"	s	inherits:or_9
or_10	proto/detail/preprocessed/or_n.hpp	/^    struct or_10<true, Expr, BasicExpr, G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8 , G9>$/;"	s	inherits:mpl::true_
or_10::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_10	access:public
or_2	proto/detail/preprocessed/or_n.hpp	/^    struct or_2$/;"	s	inherits:mpl::bool_
or_2	proto/detail/preprocessed/or_n.hpp	/^    struct or_2<true, Expr, BasicExpr, G0 , G1>$/;"	s	inherits:mpl::true_
or_2::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_2	access:public
or_2::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G1 which;$/;"	t	struct:or_2	access:public
or_3	proto/detail/preprocessed/or_n.hpp	/^    struct or_3$/;"	s	inherits:or_2
or_3	proto/detail/preprocessed/or_n.hpp	/^    struct or_3<true, Expr, BasicExpr, G0 , G1 , G2>$/;"	s	inherits:mpl::true_
or_3::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_3	access:public
or_4	proto/detail/preprocessed/or_n.hpp	/^    struct or_4$/;"	s	inherits:or_3
or_4	proto/detail/preprocessed/or_n.hpp	/^    struct or_4<true, Expr, BasicExpr, G0 , G1 , G2 , G3>$/;"	s	inherits:mpl::true_
or_4::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_4	access:public
or_5	proto/detail/preprocessed/or_n.hpp	/^    struct or_5$/;"	s	inherits:or_4
or_5	proto/detail/preprocessed/or_n.hpp	/^    struct or_5<true, Expr, BasicExpr, G0 , G1 , G2 , G3 , G4>$/;"	s	inherits:mpl::true_
or_5::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_5	access:public
or_6	proto/detail/preprocessed/or_n.hpp	/^    struct or_6$/;"	s	inherits:or_5
or_6	proto/detail/preprocessed/or_n.hpp	/^    struct or_6<true, Expr, BasicExpr, G0 , G1 , G2 , G3 , G4 , G5>$/;"	s	inherits:mpl::true_
or_6::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_6	access:public
or_7	proto/detail/preprocessed/or_n.hpp	/^    struct or_7$/;"	s	inherits:or_6
or_7	proto/detail/preprocessed/or_n.hpp	/^    struct or_7<true, Expr, BasicExpr, G0 , G1 , G2 , G3 , G4 , G5 , G6>$/;"	s	inherits:mpl::true_
or_7::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_7	access:public
or_8	proto/detail/preprocessed/or_n.hpp	/^    struct or_8$/;"	s	inherits:or_7
or_8	proto/detail/preprocessed/or_n.hpp	/^    struct or_8<true, Expr, BasicExpr, G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7>$/;"	s	inherits:mpl::true_
or_8::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_8	access:public
or_9	proto/detail/preprocessed/or_n.hpp	/^    struct or_9$/;"	s	inherits:or_8
or_9	proto/detail/preprocessed/or_n.hpp	/^    struct or_9<true, Expr, BasicExpr, G0 , G1 , G2 , G3 , G4 , G5 , G6 , G7 , G8>$/;"	s	inherits:mpl::true_
or_9::which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_9	access:public
ostream_wrapper	proto/debug.hpp	/^            ostream_wrapper(std::ostream &sout)$/;"	f	struct:boost::proto::hidden_detail_::ostream_wrapper	access:public	signature:(std::ostream &sout)
ostream_wrapper	proto/debug.hpp	/^        struct ostream_wrapper$/;"	s	namespace:boost::proto::hidden_detail_
other	proto/detail/preprocessed/unpack_expr_.hpp	/^        other;$/;"	t	struct:unpack_expr_	access:public
other	proto/detail/unpack_expr_.hpp	/^        other;$/;"	t	struct:unpack_expr_	access:public
otherwise	proto/transform/when.hpp	/^    struct otherwise$/;"	s	namespace:boost::proto	inherits:when
pass_through	proto/transform/pass_through.hpp	/^    struct pass_through$/;"	s	namespace:boost::proto	inherits:transform
pass_through_impl	proto/transform/detail/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, N>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 10>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 1>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 2>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 3>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 4>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 5>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 6>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 7>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 8>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^    struct pass_through_impl<Grammar, Domain, Expr, State, Data, 9>$/;"	s	inherits:transform_impl
pass_through_impl	proto/transform/pass_through.hpp	/^        struct pass_through_impl$/;"	s	namespace:boost::proto::detail
pass_through_impl	proto/transform/pass_through.hpp	/^        struct pass_through_impl<Grammar, Domain, Expr, State, Data, 0>$/;"	s	namespace:boost::proto::detail	inherits:transform_impl
pass_through_impl::expr_type	proto/transform/detail/pass_through_impl.hpp	/^        expr_type;$/;"	t	struct:pass_through_impl	access:public
pass_through_impl::expr_type	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        expr_type;$/;"	t	struct:pass_through_impl	access:public
pass_through_impl::operator ()	proto/transform/detail/pass_through_impl.hpp	/^        operator ()($/;"	f	struct:pass_through_impl	access:public	signature:( typename pass_through_impl::expr_param e , typename pass_through_impl::state_param s , typename pass_through_impl::data_param d ) const
pass_through_impl::operator ()	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        operator ()($/;"	f	struct:pass_through_impl	access:public	signature:( typename pass_through_impl::expr_param e , typename pass_through_impl::state_param s , typename pass_through_impl::data_param d ) const
pass_through_impl::proto_generator	proto/transform/detail/pass_through_impl.hpp	/^        typedef typename result_domain::proto_generator proto_generator;$/;"	t	struct:pass_through_impl	access:public
pass_through_impl::proto_generator	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        typedef typename result_domain::proto_generator proto_generator;$/;"	t	struct:pass_through_impl	access:public
pass_through_impl::result_domain	proto/transform/detail/pass_through_impl.hpp	/^        result_domain;$/;"	t	struct:pass_through_impl	access:public
pass_through_impl::result_domain	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        result_domain;$/;"	t	struct:pass_through_impl	access:public
pass_through_impl::result_type	proto/transform/detail/pass_through_impl.hpp	/^        typedef typename BOOST_PROTO_RESULT_OF<proto_generator(expr_type)>::type result_type;$/;"	t	struct:pass_through_impl	access:public
pass_through_impl::result_type	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        typedef typename BOOST_PROTO_RESULT_OF<proto_generator(expr_type)>::type result_type;$/;"	t	struct:pass_through_impl	access:public
pass_through_impl::unref_expr	proto/transform/detail/pass_through_impl.hpp	/^        typedef typename pass_through_impl::expr unref_expr;$/;"	t	struct:pass_through_impl	access:public
pass_through_impl::unref_expr	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        typedef typename pass_through_impl::expr unref_expr;$/;"	t	struct:pass_through_impl	access:public
plus	proto/tags.hpp	/^    struct plus {};$/;"	s	namespace:boost::proto::tagns_::tag
plus_assign	proto/tags.hpp	/^    struct plus_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
pmf	proto/detail/decltype.hpp	/^            pmf_type pmf;$/;"	m	struct:boost::proto::detail::memfun	access:private
pmf_type	proto/detail/decltype.hpp	/^            typedef typename uncvref<PMF>::type pmf_type;$/;"	t	struct:boost::proto::detail::memfun	access:public
pod_generator	proto/generate.hpp	/^    struct pod_generator$/;"	s	namespace:boost::proto
poly_function	proto/detail/poly_function.hpp	/^    struct poly_function$/;"	s	namespace:boost::proto::detail	inherits:poly_function_base
poly_function_base	proto/detail/poly_function.hpp	/^    struct poly_function_base$/;"	s	namespace:boost::proto::detail
poly_function_t	proto/detail/poly_function.hpp	/^    typedef char poly_function_t;$/;"	t	namespace:boost::proto::detail
poly_function_traits	proto/detail/poly_function.hpp	/^    struct poly_function_traits$/;"	s	namespace:boost::proto::detail
poly_function_traits	proto/detail/poly_function.hpp	/^    struct poly_function_traits<Fun, Sig, mpl::size_t<sizeof(mono_function_t)> >$/;"	s	namespace:boost::proto::detail
poly_function_traits	proto/detail/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(BOOST_PP_ENUM_PARAMS(N, A)), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0 , A1 , A2 , A3 , A4 , A5 , A6), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0 , A1 , A2 , A3 , A4 , A5), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0 , A1 , A2 , A3 , A4), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0 , A1 , A2 , A3), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0 , A1 , A2), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0 , A1), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits	proto/detail/preprocessed/poly_function_traits.hpp	/^    struct poly_function_traits<PolyFun, PolyFun(A0), mpl::size_t<sizeof(poly_function_t)> >$/;"	s
poly_function_traits::function_type	proto/detail/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<BOOST_PP_ENUM_PARAMS(N, const A)> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 , const A9> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::function_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0> function_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::result_type	proto/detail/poly_function_traits.hpp	/^        typedef typename function_type::result_type result_type;$/;"	t	struct:poly_function_traits	access:public
poly_function_traits::result_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename function_type::result_type result_type;$/;"	t	struct:poly_function_traits	access:public
pop_back	proto/functional/fusion/pop_back.hpp	/^    struct pop_back$/;"	s	namespace:boost::proto::functional
pop_front	proto/functional/fusion/pop_front.hpp	/^    struct pop_front$/;"	s	namespace:boost::proto::functional
post_dec	proto/tags.hpp	/^    struct post_dec {};$/;"	s	namespace:boost::proto::tagns_::tag
post_inc	proto/tags.hpp	/^    struct post_inc {};$/;"	s	namespace:boost::proto::tagns_::tag
pre_dec	proto/tags.hpp	/^    struct pre_dec {};$/;"	s	namespace:boost::proto::tagns_::tag
pre_inc	proto/tags.hpp	/^    struct pre_inc {};$/;"	s	namespace:boost::proto::tagns_::tag
prior	proto/functional/std/iterator.hpp	/^    struct prior$/;"	s	namespace:boost::proto::functional
prior_impl	proto/fusion.hpp	/^        struct prior_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
private_type_	proto/proto_fwd.hpp	/^        struct private_type_$/;"	s	namespace:boost::proto::detail
protect	proto/transform/make.hpp	/^    struct protect : transform<protect<PrimitiveTransform> >$/;"	s	namespace:boost::proto	inherits:transform
proto	proto/args.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/context/callable.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/context/default.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/context/null.hpp	/^namespace boost { namespace proto { namespace context$/;"	n	namespace:boost
proto	proto/debug.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/deep_copy.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/detail/any.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/detail/as_expr.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost
proto	proto/detail/as_lvalue.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/detail/decltype.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/detail/deduce_domain.hpp	/^    namespace proto$/;"	n	namespace:boost
proto	proto/detail/dont_care.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/detail/ignore_unused.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/detail/is_noncopyable.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost
proto	proto/detail/poly_function.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost
proto	proto/detail/static_const.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/detail/template_arity.hpp	/^namespace boost { namespace proto { namespace detail$/;"	n	namespace:boost
proto	proto/domain.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/eval.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/expr.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/extends.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/functional/fusion/at.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/fusion/pop_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/fusion/pop_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/fusion/push_back.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/fusion/push_front.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/fusion/reverse.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/range/begin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/range/empty.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/range/end.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/range/rbegin.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/range/rend.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/range/size.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/std/iterator.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/functional/std/utility.hpp	/^namespace boost { namespace proto { namespace functional$/;"	n	namespace:boost
proto	proto/fusion.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/generate.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/literal.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/make_expr.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/matches.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/operators.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/proto_fwd.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/tags.hpp	/^namespace boost { namespace proto { namespace tagns_ { namespace tag$/;"	n	namespace:boost
proto	proto/traits.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/arg.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/call.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/default.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/detail/pack.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/env.hpp	/^    namespace proto$/;"	n	namespace:boost
proto	proto/transform/fold.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/fold_tree.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/impl.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/integral_c.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/lazy.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/make.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/pass_through.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto	proto/transform/when.hpp	/^namespace boost { namespace proto$/;"	n	namespace:boost
proto_address_of_hack_type_	proto/extends.hpp	/^            typedef detail::not_a_valid_type proto_address_of_hack_type_;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_args	proto/detail/basic_expr.hpp	/^        typedef BOOST_PP_CAT(list, BOOST_PP_ITERATION())<BOOST_PP_ENUM_PARAMS(ARG_COUNT, Arg)> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/basic_expr.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/expr.hpp	/^        typedef BOOST_PP_CAT(list, BOOST_PP_ITERATION())<BOOST_PP_ENUM_PARAMS(ARG_COUNT, Arg)> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/expr.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/make_expr_.hpp	/^        proto_args;$/;"	t	struct:make_expr_	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list10<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list1<Arg0> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list2<Arg0 , Arg1> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list3<Arg0 , Arg1 , Arg2> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list4<Arg0 , Arg1 , Arg2 , Arg3> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list5<Arg0 , Arg1 , Arg2 , Arg3 , Arg4> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list6<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list7<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list8<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef list9<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/basic_expr.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:basic_expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list10<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list1<Arg0> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list2<Arg0 , Arg1> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list3<Arg0 , Arg1 , Arg2> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list4<Arg0 , Arg1 , Arg2 , Arg3> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list5<Arg0 , Arg1 , Arg2 , Arg3 , Arg4> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list6<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list7<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list8<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef list9<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list10<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8 , Arg9> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list1<Arg0> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list2<Arg0 , Arg1> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list3<Arg0 , Arg1 , Arg2> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list4<Arg0 , Arg1 , Arg2 , Arg3> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list5<Arg0 , Arg1 , Arg2 , Arg3 , Arg4> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list6<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list7<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list8<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef list9<Arg0 , Arg1 , Arg2 , Arg3 , Arg4 , Arg5 , Arg6 , Arg7 , Arg8> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef term<Arg0> proto_args;$/;"	t	struct:expr	access:public
proto_args	proto/detail/preprocessed/make_expr_.hpp	/^        proto_args;$/;"	t	struct:make_expr_	access:public
proto_args	proto/detail/preprocessed/unpack_expr_.hpp	/^        proto_args;$/;"	t	struct:unpack_expr_	access:public
proto_args	proto/detail/unpack_expr_.hpp	/^        proto_args;$/;"	t	struct:unpack_expr_	access:public
proto_args	proto/extends.hpp	/^            typedef list2<This &, expr<tag::terminal, term<Fun> > const &> proto_args;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_arity	proto/detail/basic_expr.hpp	/^        typedef mpl::long_<BOOST_PP_ITERATION() > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/expr.hpp	/^        typedef mpl::long_<BOOST_PP_ITERATION() > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<0 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<1 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<10 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<2 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<3 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<4 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<5 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<6 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<7 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<8 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/basic_expr.hpp	/^        typedef mpl::long_<9 > proto_arity;$/;"	t	struct:basic_expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<0 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<1 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<10 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<2 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<3 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<4 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<5 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<6 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<7 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<8 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr.hpp	/^        typedef mpl::long_<9 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<0 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<1 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<10 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<2 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<3 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<4 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<5 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<6 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<7 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<8 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef mpl::long_<9 > proto_arity;$/;"	t	struct:expr	access:public
proto_arity	proto/extends.hpp	/^            typedef mpl::long_<2> proto_arity;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_arity_c	proto/detail/basic_expr.hpp	/^        static const long proto_arity_c = BOOST_PP_ITERATION();$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/expr.hpp	/^        static const long proto_arity_c = BOOST_PP_ITERATION();$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 0;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 10;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 1;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 2;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 3;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 4;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 5;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 6;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 7;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 8;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/basic_expr.hpp	/^        static const long proto_arity_c = 9;$/;"	m	struct:basic_expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 0;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 10;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 1;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 2;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 3;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 4;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 5;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 6;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 7;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 8;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr.hpp	/^        static const long proto_arity_c = 9;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 0;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 10;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 1;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 2;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 3;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 4;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 5;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 6;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 7;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 8;$/;"	m	struct:expr	access:public
proto_arity_c	proto/detail/preprocessed/expr_variadic.hpp	/^        static const long proto_arity_c = 9;$/;"	m	struct:expr	access:public
proto_arity_c	proto/extends.hpp	/^            static const long proto_arity_c = 2;$/;"	m	struct:boost::proto::exprns_::virtual_member	access:public
proto_base	proto/detail/basic_expr.hpp	/^        basic_expr &proto_base()$/;"	f	struct:basic_expr	access:public	signature:()
proto_base	proto/detail/basic_expr.hpp	/^        basic_expr const &proto_base() const$/;"	f	struct:basic_expr	access:public	signature:() const
proto_base	proto/detail/expr.hpp	/^        expr &proto_base()$/;"	f	struct:expr	access:public	signature:()
proto_base	proto/detail/expr.hpp	/^        expr const &proto_base() const$/;"	f	struct:expr	access:public	signature:() const
proto_base	proto/detail/preprocessed/basic_expr.hpp	/^        basic_expr &proto_base()$/;"	f	struct:basic_expr	access:public	signature:()
proto_base	proto/detail/preprocessed/basic_expr.hpp	/^        basic_expr const &proto_base() const$/;"	f	struct:basic_expr	access:public	signature:() const
proto_base	proto/detail/preprocessed/expr.hpp	/^        expr &proto_base()$/;"	f	struct:expr	access:public	signature:()
proto_base	proto/detail/preprocessed/expr.hpp	/^        expr const &proto_base() const$/;"	f	struct:expr	access:public	signature:() const
proto_base	proto/detail/preprocessed/expr_variadic.hpp	/^        expr &proto_base()$/;"	f	struct:expr	access:public	signature:()
proto_base	proto/detail/preprocessed/expr_variadic.hpp	/^        expr const &proto_base() const$/;"	f	struct:expr	access:public	signature:() const
proto_base	proto/extends.hpp	/^            proto_base_expr const proto_base() const$/;"	f	struct:boost::proto::exprns_::virtual_member	access:public	signature:() const
proto_base_domain	proto/domain.hpp	/^            typedef domain    proto_base_domain;$/;"	t	struct:boost::proto::domainns_::domain	access:public
proto_base_expr	proto/detail/basic_expr.hpp	/^        typedef basic_expr proto_base_expr;$/;"	t	struct:basic_expr	access:public
proto_base_expr	proto/detail/expr.hpp	/^        typedef expr proto_base_expr;$/;"	t	struct:expr	access:public
proto_base_expr	proto/detail/preprocessed/basic_expr.hpp	/^        typedef basic_expr proto_base_expr;$/;"	t	struct:basic_expr	access:public
proto_base_expr	proto/detail/preprocessed/expr.hpp	/^        typedef expr proto_base_expr;$/;"	t	struct:expr	access:public
proto_base_expr	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef expr proto_base_expr;$/;"	t	struct:expr	access:public
proto_base_expr	proto/extends.hpp	/^            typedef expr<proto_tag, proto_args, proto_arity_c> proto_base_expr;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	t	struct:basic_expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0;$/;"	t	struct:expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0;$/;"	t	struct:function	access:public
proto_child0	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0;$/;"	t	struct:nary_expr	access:public
proto_child0	proto/extends.hpp	/^            typedef This &proto_child0;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::binary_expr	access:public
proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::if_else_	access:public
proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::nullary_expr	access:public
proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::terminal	access:public
proto_child0	proto/traits.hpp	/^        typedef T proto_child0;$/;"	t	struct:boost::proto::unary_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
proto_child1	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child1	proto/extends.hpp	/^            typedef expr<tag::terminal, term<Fun> > const &proto_child1;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_child1	proto/traits.hpp	/^        typedef U proto_child1;$/;"	t	struct:boost::proto::binary_expr	access:public
proto_child1	proto/traits.hpp	/^        typedef U proto_child1;$/;"	t	struct:boost::proto::if_else_	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
proto_child2	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child2	proto/traits.hpp	/^        typedef V proto_child2;$/;"	t	struct:boost::proto::if_else_	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3;$/;"	t	struct:nary_expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
proto_child3	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
proto_child4	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
proto_child5	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:function	access:public
proto_child6	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:function	access:public
proto_child7	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A7> proto_child8; typedef detail::if_vararg<A7> proto_child9;$/;"	t	struct:function	access:public
proto_child8	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A7> proto_child8; typedef detail::if_vararg<A7> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_child9;$/;"	t	struct:basic_expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Arg0 proto_child0; proto_child0 child0; typedef Arg1 proto_child1; proto_child1 child1; typedef Arg2 proto_child2; proto_child2 child2; typedef Arg3 proto_child3; proto_child3 child3; typedef Arg4 proto_child4; proto_child4 child4; typedef Arg5 proto_child5; proto_child5 child5; typedef Arg6 proto_child6; proto_child6 child6; typedef Arg7 proto_child7; proto_child7 child7; typedef Arg8 proto_child8; proto_child8 child8; typedef Arg9 proto_child9; proto_child9 child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child1; typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child2; typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child3; typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child4; typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child5; typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child6; typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child7; typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child8; typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_child9;$/;"	t	struct:expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef A0 proto_child0; typedef A1 proto_child1; typedef A2 proto_child2; typedef A3 proto_child3; typedef A4 proto_child4; typedef A5 proto_child5; typedef A6 proto_child6; typedef A7 proto_child7; typedef A8 proto_child8; typedef A9 proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A0> proto_child1; typedef detail::if_vararg<A0> proto_child2; typedef detail::if_vararg<A0> proto_child3; typedef detail::if_vararg<A0> proto_child4; typedef detail::if_vararg<A0> proto_child5; typedef detail::if_vararg<A0> proto_child6; typedef detail::if_vararg<A0> proto_child7; typedef detail::if_vararg<A0> proto_child8; typedef detail::if_vararg<A0> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A1> proto_child2; typedef detail::if_vararg<A1> proto_child3; typedef detail::if_vararg<A1> proto_child4; typedef detail::if_vararg<A1> proto_child5; typedef detail::if_vararg<A1> proto_child6; typedef detail::if_vararg<A1> proto_child7; typedef detail::if_vararg<A1> proto_child8; typedef detail::if_vararg<A1> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A2> proto_child3; typedef detail::if_vararg<A2> proto_child4; typedef detail::if_vararg<A2> proto_child5; typedef detail::if_vararg<A2> proto_child6; typedef detail::if_vararg<A2> proto_child7; typedef detail::if_vararg<A2> proto_child8; typedef detail::if_vararg<A2> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A3> proto_child4; typedef detail::if_vararg<A3> proto_child5; typedef detail::if_vararg<A3> proto_child6; typedef detail::if_vararg<A3> proto_child7; typedef detail::if_vararg<A3> proto_child8; typedef detail::if_vararg<A3> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A4> proto_child5; typedef detail::if_vararg<A4> proto_child6; typedef detail::if_vararg<A4> proto_child7; typedef detail::if_vararg<A4> proto_child8; typedef detail::if_vararg<A4> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A5> proto_child6; typedef detail::if_vararg<A5> proto_child7; typedef detail::if_vararg<A5> proto_child8; typedef detail::if_vararg<A5> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A6> proto_child7; typedef detail::if_vararg<A6> proto_child8; typedef detail::if_vararg<A6> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A7> proto_child8; typedef detail::if_vararg<A7> proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A7> proto_child8; typedef detail::if_vararg<A7> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A8> proto_child9;$/;"	t	struct:function	access:public
proto_child9	proto/detail/preprocessed/traits.hpp	/^            typedef detail::if_vararg<A8> proto_child9;$/;"	t	struct:nary_expr	access:public
proto_derived_expr	proto/detail/basic_expr.hpp	/^        typedef basic_expr proto_derived_expr;$/;"	t	struct:basic_expr	access:public
proto_derived_expr	proto/detail/expr.hpp	/^        typedef expr proto_derived_expr;$/;"	t	struct:expr	access:public
proto_derived_expr	proto/detail/preprocessed/basic_expr.hpp	/^        typedef basic_expr proto_derived_expr;$/;"	t	struct:basic_expr	access:public
proto_derived_expr	proto/detail/preprocessed/expr.hpp	/^        typedef expr proto_derived_expr;$/;"	t	struct:expr	access:public
proto_derived_expr	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef expr proto_derived_expr;$/;"	t	struct:expr	access:public
proto_derived_expr	proto/extends.hpp	/^            typedef virtual_member<This, Fun, Domain> proto_derived_expr;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_domain	proto/detail/basic_expr.hpp	/^        typedef basic_default_domain proto_domain;$/;"	t	struct:basic_expr	access:public
proto_domain	proto/detail/expr.hpp	/^        typedef default_domain proto_domain;$/;"	t	struct:expr	access:public
proto_domain	proto/detail/preprocessed/basic_expr.hpp	/^        typedef basic_default_domain proto_domain;$/;"	t	struct:basic_expr	access:public
proto_domain	proto/detail/preprocessed/expr.hpp	/^        typedef default_domain proto_domain;$/;"	t	struct:expr	access:public
proto_domain	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef default_domain proto_domain;$/;"	t	struct:expr	access:public
proto_domain	proto/extends.hpp	/^            typedef Domain proto_domain;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_environment_	proto/transform/env.hpp	/^                typedef void proto_environment_; \/\/\/< INTERNAL ONLY$/;"	t	struct:boost::proto::envns_::env	access:public
proto_environment_	proto/transform/impl.hpp	/^            typedef void proto_environment_;$/;"	t	struct:boost::proto::envns_::empty_env	access:public
proto_extends	proto/extends.hpp	/^            typedef extends proto_extends;$/;"	t	struct:boost::proto::exprns_::extends	access:public
proto_generator	proto/deep_copy.hpp	/^            typedef typename Expr::proto_generator proto_generator;$/;"	t	struct:boost::proto::detail::deep_copy_impl	access:public
proto_generator	proto/detail/basic_expr.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:basic_expr	access:public
proto_generator	proto/detail/deep_copy.hpp	/^        typedef typename Expr::proto_generator proto_generator;$/;"	t	struct:deep_copy_impl	access:public
proto_generator	proto/detail/expr.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:expr	access:public
proto_generator	proto/detail/make_expr_.hpp	/^        typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:make_expr_	access:public
proto_generator	proto/detail/preprocessed/basic_expr.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:basic_expr	access:public
proto_generator	proto/detail/preprocessed/deep_copy.hpp	/^        typedef typename Expr::proto_generator proto_generator;$/;"	t	struct:deep_copy_impl	access:public
proto_generator	proto/detail/preprocessed/expr.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:expr	access:public
proto_generator	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef default_generator proto_generator;$/;"	t	struct:expr	access:public
proto_generator	proto/detail/preprocessed/make_expr_.hpp	/^        typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:make_expr_	access:public
proto_generator	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:unpack_expr_	access:public
proto_generator	proto/detail/unpack_expr_.hpp	/^        typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:unpack_expr_	access:public
proto_generator	proto/domain.hpp	/^            typedef Generator proto_generator;$/;"	t	struct:boost::proto::domainns_::domain	access:public
proto_generator	proto/extends.hpp	/^            typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_generator	proto/transform/detail/pass_through_impl.hpp	/^        typedef typename result_domain::proto_generator proto_generator;$/;"	t	struct:pass_through_impl	access:public
proto_generator	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        typedef typename result_domain::proto_generator proto_generator;$/;"	t	struct:pass_through_impl	access:public
proto_get_pointer	proto/detail/decltype.hpp	/^        U *proto_get_pointer(T &t, V *, U *)$/;"	f	namespace:boost::proto::detail	signature:(T &t, V *, U *)
proto_get_pointer	proto/detail/decltype.hpp	/^        U const *proto_get_pointer(T &t, V *, U const *)$/;"	f	namespace:boost::proto::detail	signature:(T &t, V *, U const *)
proto_get_pointer	proto/detail/decltype.hpp	/^        V *proto_get_pointer(T &t, V *, ...)$/;"	f	namespace:boost::proto::detail	signature:(T &t, V *, ...)
proto_grammar	proto/detail/basic_expr.hpp	/^        typedef basic_expr proto_grammar;$/;"	t	struct:basic_expr	access:public
proto_grammar	proto/detail/expr.hpp	/^        typedef basic_expr<Tag, proto_args, BOOST_PP_ITERATION() > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/basic_expr.hpp	/^        typedef basic_expr proto_grammar;$/;"	t	struct:basic_expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 0 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 1 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 10 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 2 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 3 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 4 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 5 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 6 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 7 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 8 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr.hpp	/^        typedef basic_expr<Tag, proto_args, 9 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 0 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 1 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 10 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 2 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 3 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 4 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 5 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 6 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 7 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 8 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef basic_expr<Tag, proto_args, 9 > proto_grammar;$/;"	t	struct:expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list10<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9>, 10> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list1<A0>, 1> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list2<A0 , A1>, 2> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list3<A0 , A1 , A2>, 3> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list4<A0 , A1 , A2 , A3>, 4> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list5<A0 , A1 , A2 , A3 , A4>, 5> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list6<A0 , A1 , A2 , A3 , A4 , A5>, 6> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list7<A0 , A1 , A2 , A3 , A4 , A5 , A6>, 7> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list8<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7>, 8> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<Tag, list9<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8>, 9> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list10<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9>, 10> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list1<A0>, 1> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list2<A0 , A1>, 2> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list3<A0 , A1 , A2>, 3> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list4<A0 , A1 , A2 , A3>, 4> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list5<A0 , A1 , A2 , A3 , A4>, 5> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list6<A0 , A1 , A2 , A3 , A4 , A5>, 6> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list7<A0 , A1 , A2 , A3 , A4 , A5 , A6>, 7> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list8<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7>, 8> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/preprocessed/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, list9<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8>, 9> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/detail/traits.hpp	/^            typedef proto::basic_expr<Tag, BOOST_PP_CAT(list, N)<BOOST_PP_ENUM_PARAMS(N, A)>, N> proto_grammar;$/;"	t	struct:nary_expr	access:public
proto_grammar	proto/detail/traits.hpp	/^            typedef proto::basic_expr<proto::tag::function, BOOST_PP_CAT(list, N)<BOOST_PP_ENUM_PARAMS(N, A)>, N> proto_grammar;$/;"	t	struct:function	access:public
proto_grammar	proto/domain.hpp	/^            typedef Grammar   proto_grammar;$/;"	t	struct:boost::proto::domainns_::domain	access:public
proto_grammar	proto/extends.hpp	/^            typedef basic_expr<proto_tag, proto_args, proto_arity_c> proto_grammar;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_grammar	proto/matches.hpp	/^        typedef _ proto_grammar;$/;"	t	struct:boost::proto::_	access:public
proto_grammar	proto/matches.hpp	/^        typedef and_ proto_grammar;$/;"	t	struct:boost::proto::and_	access:public
proto_grammar	proto/matches.hpp	/^        typedef if_ proto_grammar;$/;"	t	struct:boost::proto::if_	access:public
proto_grammar	proto/matches.hpp	/^        typedef not_ proto_grammar;$/;"	t	struct:boost::proto::not_	access:public
proto_grammar	proto/matches.hpp	/^        typedef or_ proto_grammar;$/;"	t	struct:boost::proto::or_	access:public
proto_grammar	proto/matches.hpp	/^        typedef switch_ proto_grammar;$/;"	t	struct:boost::proto::switch_	access:public
proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<Tag, list1<T>, 1> proto_grammar;$/;"	t	struct:boost::proto::unary_expr	access:public
proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<Tag, list2<T, U>, 2> proto_grammar;$/;"	t	struct:boost::proto::binary_expr	access:public
proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<Tag, term<T>, 0> proto_grammar;$/;"	t	struct:boost::proto::nullary_expr	access:public
proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<proto::tag::if_else_, list3<T, U, V>, 3> proto_grammar;$/;"	t	struct:boost::proto::if_else_	access:public
proto_grammar	proto/traits.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<T>, 0> proto_grammar;$/;"	t	struct:boost::proto::terminal	access:public
proto_grammar	proto/transform/when.hpp	/^            typedef typename Grammar::proto_grammar proto_grammar;$/;"	t	struct:boost::proto::detail::when_impl	access:public
proto_grammar	proto/transform/when.hpp	/^        typedef typename Grammar::proto_grammar proto_grammar;$/;"	t	struct:boost::proto::when	access:public
proto_is_aggregate_	proto/extends.hpp	/^            typedef void proto_is_aggregate_; \/**< INTERNAL ONLY *\/$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_is_domain_	proto/domain.hpp	/^            typedef void proto_is_domain_;$/;"	t	struct:boost::proto::domainns_::domain	access:public
proto_is_expr_	proto/detail/basic_expr.hpp	/^        typedef void proto_is_expr_; \/**< INTERNAL ONLY *\/$/;"	t	struct:basic_expr	access:public
proto_is_expr_	proto/detail/expr.hpp	/^        typedef void proto_is_expr_; \/**< INTERNAL ONLY *\/$/;"	t	struct:expr	access:public
proto_is_expr_	proto/detail/preprocessed/basic_expr.hpp	/^        typedef void proto_is_expr_; $/;"	t	struct:basic_expr	access:public
proto_is_expr_	proto/detail/preprocessed/expr.hpp	/^        typedef void proto_is_expr_; $/;"	t	struct:expr	access:public
proto_is_expr_	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef void proto_is_expr_; $/;"	t	struct:expr	access:public
proto_is_expr_	proto/extends.hpp	/^            typedef void proto_is_expr_; \/**< INTERNAL ONLY *\/$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_is_vararg_	proto/matches.hpp	/^        typedef void proto_is_vararg_;$/;"	t	struct:boost::proto::vararg	access:public
proto_super_domain	proto/domain.hpp	/^            typedef Super     proto_super_domain;$/;"	t	struct:boost::proto::domainns_::domain	access:public
proto_tag	proto/detail/basic_expr.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:basic_expr	access:public
proto_tag	proto/detail/expr.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:expr	access:public
proto_tag	proto/detail/preprocessed/basic_expr.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:basic_expr	access:public
proto_tag	proto/detail/preprocessed/expr.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:expr	access:public
proto_tag	proto/detail/preprocessed/expr_variadic.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:expr	access:public
proto_tag	proto/detail/preprocessed/traits.hpp	/^            typedef Tag proto_tag;$/;"	t	struct:nary_expr	access:public
proto_tag	proto/detail/preprocessed/traits.hpp	/^            typedef proto::tag::function proto_tag;$/;"	t	struct:function	access:public
proto_tag	proto/detail/traits.hpp	/^            typedef Tag proto_tag;$/;"	t	struct:nary_expr	access:public
proto_tag	proto/detail/traits.hpp	/^            typedef proto::tag::function proto_tag;$/;"	t	struct:function	access:public
proto_tag	proto/extends.hpp	/^            typedef tag::member proto_tag;$/;"	t	struct:boost::proto::exprns_::virtual_member	access:public
proto_tag	proto/traits.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:boost::proto::binary_expr	access:public
proto_tag	proto/traits.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:boost::proto::nullary_expr	access:public
proto_tag	proto/traits.hpp	/^        typedef Tag proto_tag;$/;"	t	struct:boost::proto::unary_expr	access:public
proto_tag	proto/traits.hpp	/^        typedef proto::tag::if_else_ proto_tag;$/;"	t	struct:boost::proto::if_else_	access:public
proto_tag	proto/traits.hpp	/^        typedef proto::tag::terminal proto_tag;$/;"	t	struct:boost::proto::terminal	access:public
protoify	proto/make_expr.hpp	/^        struct protoify$/;"	s	namespace:boost::proto::detail	inherits:Domain::,as_expr
protoify	proto/make_expr.hpp	/^        struct protoify<T &, Domain>$/;"	s	namespace:boost::proto::detail	inherits:Domain::,as_child
protoify	proto/make_expr.hpp	/^        struct protoify<boost::reference_wrapper<T> const, Domain>$/;"	s	namespace:boost::proto::detail	inherits:Domain::,as_child
protoify	proto/make_expr.hpp	/^        struct protoify<boost::reference_wrapper<T>, Domain>$/;"	s	namespace:boost::proto::detail	inherits:Domain::,as_child
push_back	proto/functional/fusion/push_back.hpp	/^    struct push_back$/;"	s	namespace:boost::proto::functional
push_front	proto/functional/fusion/push_front.hpp	/^    struct push_front$/;"	s	namespace:boost::proto::functional
r0	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e0), Context>::type r0;$/;"	t	struct:boost::proto::context::default_eval	access:private
r0	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e0), Context>::type r0;$/;"	t	struct:boost::proto::context::memfun_eval	access:private
r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:private
r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_post_dec::impl	access:private
r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_post_inc::impl	access:private
r0	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_subscript::impl	access:private
r0	proto/transform/default.hpp	/^            typedef typename Grammar::template impl<e0, State, Data>::result_type r0;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:private
r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
r0	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
r1	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e1), Context>::type r1;$/;"	t	struct:boost::proto::context::default_eval	access:private
r1	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e1), Context>::type r1;$/;"	t	struct:boost::proto::context::memfun_eval	access:private
r1	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:private
r1	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
r1	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e1, State, Data>::result_type r1;$/;"	t	struct:boost::proto::detail::default_subscript::impl	access:private
r1	proto/transform/default.hpp	/^            typedef typename Grammar::template impl<e1, State, Data>::result_type r1;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:private
r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
r1	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
r2	proto/context/default.hpp	/^            typedef typename proto::result_of::eval<UNREF(e2), Context>::type r2;$/;"	t	struct:boost::proto::context::default_eval	access:private
r2	proto/transform/default.hpp	/^                typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:boost::proto::detail::default_if_else_::impl	access:private
r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
r2	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2;$/;"	t	struct:default_function_impl	access:public
r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
r3	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3;$/;"	t	struct:default_function_impl	access:public
r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
r4	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4;$/;"	t	struct:default_function_impl	access:public
r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
r5	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5;$/;"	t	struct:default_function_impl	access:public
r6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
r6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
r6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
r6	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6;$/;"	t	struct:default_function_impl	access:public
r7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
r7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
r7	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7;$/;"	t	struct:default_function_impl	access:public
r8	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
r8	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8;$/;"	t	struct:default_function_impl	access:public
r9	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        typedef typename result_of::child_c< Expr, 0>::type e0; typedef typename Grammar::template impl<e0, State, Data>::result_type r0; typedef typename result_of::child_c< Expr, 1>::type e1; typedef typename Grammar::template impl<e1, State, Data>::result_type r1; typedef typename result_of::child_c< Expr, 2>::type e2; typedef typename Grammar::template impl<e2, State, Data>::result_type r2; typedef typename result_of::child_c< Expr, 3>::type e3; typedef typename Grammar::template impl<e3, State, Data>::result_type r3; typedef typename result_of::child_c< Expr, 4>::type e4; typedef typename Grammar::template impl<e4, State, Data>::result_type r4; typedef typename result_of::child_c< Expr, 5>::type e5; typedef typename Grammar::template impl<e5, State, Data>::result_type r5; typedef typename result_of::child_c< Expr, 6>::type e6; typedef typename Grammar::template impl<e6, State, Data>::result_type r6; typedef typename result_of::child_c< Expr, 7>::type e7; typedef typename Grammar::template impl<e7, State, Data>::result_type r7; typedef typename result_of::child_c< Expr, 8>::type e8; typedef typename Grammar::template impl<e8, State, Data>::result_type r8; typedef typename result_of::child_c< Expr, 9>::type e9; typedef typename Grammar::template impl<e9, State, Data>::result_type r9;$/;"	t	struct:default_function_impl	access:public
rbegin	proto/functional/range/rbegin.hpp	/^    struct rbegin$/;"	s	namespace:boost::proto::functional
reference	proto/args.hpp	/^            typedef Expr &reference;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
reference	proto/args.hpp	/^            typedef Expr const &reference;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
reference	proto/args.hpp	/^            typedef T &reference;$/;"	t	struct:boost::proto::detail::term_traits	access:public
reference	proto/args.hpp	/^            typedef T (&reference)[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
reference	proto/args.hpp	/^            typedef T const &reference;$/;"	t	struct:boost::proto::detail::term_traits	access:public
reference	proto/args.hpp	/^            typedef T const (&reference)[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
reference	proto/detail/as_expr.hpp	/^        typedef typename term_traits<T &>::reference reference;$/;"	t	struct:boost::proto::detail::as_child	access:public
reference	proto/detail/poly_function.hpp	/^        typedef T &reference;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
reference	proto/detail/poly_function.hpp	/^        typedef T const &reference;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
reference	proto/literal.hpp	/^            typedef typename detail::term_traits<T>::reference        reference;$/;"	t	struct:boost::proto::utility::literal	access:public
reference	proto/transform/env.hpp	/^                typedef T &reference;$/;"	t	struct:boost::proto::detail::value_type	access:public
reference	proto/transform/env.hpp	/^                typedef typename add_reference<T>::type reference;$/;"	t	struct:boost::proto::detail::value_type	access:public
reference	proto/transform/env.hpp	/^                typedef typename add_reference<Value>::type reference;$/;"	t	struct:boost::proto::envns_::env	access:public
rend	proto/functional/range/rend.hpp	/^    struct rend$/;"	s	namespace:boost::proto::functional
result	proto/deep_copy.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::deep_copy	access:public
result	proto/detail/expr.hpp	/^        struct result$/;"	s	struct:expr	access:public
result	proto/detail/make_expr_funop.hpp	/^    struct result<This(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s
result	proto/detail/poly_function.hpp	/^        struct result<This()>$/;"	s	struct:boost::proto::detail::poly_function	inherits:Derived::,impl	access:public
result	proto/detail/poly_function_funop.hpp	/^    struct result<This(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/expr.hpp	/^        struct result$/;"	s	struct:expr	access:public
result	proto/detail/preprocessed/expr_variadic.hpp	/^        struct result$/;"	s	struct:expr	access:public
result	proto/detail/preprocessed/extends_funop.hpp	/^    template<typename Sig> struct result { typedef typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop< Sig , proto_derived_expr , proto_domain >::type ) >::type const type; };$/;"	s
result	proto/detail/preprocessed/extends_funop_const.hpp	/^    template<typename Sig> struct result { typedef typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop< Sig , proto_derived_expr , proto_domain >::type ) >::type const type; };$/;"	s
result	proto/detail/preprocessed/make_expr_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s
result	proto/detail/preprocessed/make_expr_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s
result	proto/detail/preprocessed/make_expr_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s
result	proto/detail/preprocessed/make_expr_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s
result	proto/detail/preprocessed/make_expr_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s
result	proto/detail/preprocessed/make_expr_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4)>$/;"	s
result	proto/detail/preprocessed/make_expr_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3)>$/;"	s
result	proto/detail/preprocessed/make_expr_funop.hpp	/^    struct result<This(A0 , A1 , A2)>$/;"	s
result	proto/detail/preprocessed/make_expr_funop.hpp	/^    struct result<This(A0 , A1)>$/;"	s
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3 , A4)>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0 , A1 , A2 , A3)>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0 , A1 , A2)>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0 , A1)>$/;"	s	inherits:Derived::,impl
result	proto/detail/preprocessed/poly_function_funop.hpp	/^    struct result<This(A0)>$/;"	s	inherits:Derived::,impl
result	proto/eval.hpp	/^            struct result<This(Expr, Context)>$/;"	s	struct:boost::proto::functional::eval	access:public
result	proto/functional/fusion/at.hpp	/^        struct result<This(Seq, N)>$/;"	s	struct:boost::proto::functional::at	inherits:fusion::result_of::at	access:public
result	proto/functional/fusion/pop_back.hpp	/^        struct result<This(Seq &)>$/;"	s	struct:boost::proto::functional::pop_back	inherits:fusion::result_of::pop_back	access:public
result	proto/functional/fusion/pop_back.hpp	/^        struct result<This(Seq)>$/;"	s	struct:boost::proto::functional::pop_back	inherits:result	access:public
result	proto/functional/fusion/pop_front.hpp	/^        struct result<This(Seq &)>$/;"	s	struct:boost::proto::functional::pop_front	inherits:fusion::result_of::pop_front	access:public
result	proto/functional/fusion/pop_front.hpp	/^        struct result<This(Seq)>$/;"	s	struct:boost::proto::functional::pop_front	inherits:result	access:public
result	proto/functional/fusion/push_back.hpp	/^        struct result<This(Seq, T)>$/;"	s	struct:boost::proto::functional::push_back	inherits:fusion::result_of::push_back	access:public
result	proto/functional/fusion/push_front.hpp	/^        struct result<This(Seq, T)>$/;"	s	struct:boost::proto::functional::push_front	inherits:fusion::result_of::push_front	access:public
result	proto/functional/fusion/reverse.hpp	/^        struct result<This(Seq &)>$/;"	s	struct:boost::proto::functional::reverse	inherits:fusion::result_of::reverse	access:public
result	proto/functional/fusion/reverse.hpp	/^        struct result<This(Seq)>$/;"	s	struct:boost::proto::functional::reverse	inherits:result	access:public
result	proto/functional/range/begin.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::begin	inherits:boost::range_iterator	access:public
result	proto/functional/range/begin.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::begin	inherits:boost::range_iterator	access:public
result	proto/functional/range/end.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::end	inherits:boost::range_iterator	access:public
result	proto/functional/range/end.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::end	inherits:boost::range_iterator	access:public
result	proto/functional/range/rbegin.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::rbegin	inherits:boost::range_reverse_iterator	access:public
result	proto/functional/range/rbegin.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::rbegin	inherits:boost::range_reverse_iterator	access:public
result	proto/functional/range/rend.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::rend	inherits:boost::range_reverse_iterator	access:public
result	proto/functional/range/rend.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::rend	inherits:boost::range_reverse_iterator	access:public
result	proto/functional/range/size.hpp	/^        struct result<This(Rng &)>$/;"	s	struct:boost::proto::functional::size	inherits:boost::range_size	access:public
result	proto/functional/range/size.hpp	/^        struct result<This(Rng)>$/;"	s	struct:boost::proto::functional::size	inherits:boost::range_size	access:public
result	proto/functional/std/iterator.hpp	/^        struct result<This(BidirectionalIterator)>$/;"	s	struct:boost::proto::functional::prior	access:public
result	proto/functional/std/iterator.hpp	/^        struct result<This(BidirectionalIterator, Distance)>$/;"	s	struct:boost::proto::functional::prior	access:public
result	proto/functional/std/iterator.hpp	/^        struct result<This(ForwardIterator)>$/;"	s	struct:boost::proto::functional::next	access:public
result	proto/functional/std/iterator.hpp	/^        struct result<This(ForwardIterator, Distance)>$/;"	s	struct:boost::proto::functional::next	access:public
result	proto/functional/std/iterator.hpp	/^        struct result<This(InputIter1, InputIter2)>$/;"	s	struct:boost::proto::functional::distance	access:public
result	proto/functional/std/utility.hpp	/^        struct result<This(First, Second)>$/;"	s	struct:boost::proto::functional::make_pair	access:public
result	proto/functional/std/utility.hpp	/^        struct result<This(Pair &)>$/;"	s	struct:boost::proto::functional::first	access:public
result	proto/functional/std/utility.hpp	/^        struct result<This(Pair &)>$/;"	s	struct:boost::proto::functional::second	access:public
result	proto/functional/std/utility.hpp	/^        struct result<This(Pair const &)>$/;"	s	struct:boost::proto::functional::first	access:public
result	proto/functional/std/utility.hpp	/^        struct result<This(Pair const &)>$/;"	s	struct:boost::proto::functional::second	access:public
result	proto/functional/std/utility.hpp	/^        struct result<This(Pair)>$/;"	s	struct:boost::proto::functional::first	access:public
result	proto/functional/std/utility.hpp	/^        struct result<This(Pair)>$/;"	s	struct:boost::proto::functional::second	access:public
result	proto/fusion.hpp	/^            struct result<This(Expr &)>$/;"	s	struct:boost::proto::detail::as_element	inherits:mpl::if_c	access:public
result	proto/fusion.hpp	/^            struct result<This(Expr &)>$/;"	s	struct:boost::proto::functional::flatten	access:public
result	proto/fusion.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::detail::as_element	inherits:result	access:public
result	proto/fusion.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::flatten	inherits:result	access:public
result	proto/fusion.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::eval_fun	inherits:proto::result_of::eval	access:public
result	proto/fusion.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::eval_fun	inherits:result	access:public
result	proto/generate.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::by_value_generator	access:public
result	proto/generate.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::compose_generators	access:public
result	proto/generate.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::generator	access:public
result	proto/generate.hpp	/^        struct result<This(Expr &)>$/;"	s	struct:boost::proto::pod_generator	access:public
result	proto/generate.hpp	/^        struct result<This(Expr const &)>$/;"	s	struct:boost::proto::by_value_generator	access:public
result	proto/generate.hpp	/^        struct result<This(Expr const &)>$/;"	s	struct:boost::proto::compose_generators	access:public
result	proto/generate.hpp	/^        struct result<This(Expr const &)>$/;"	s	struct:boost::proto::generator	access:public
result	proto/generate.hpp	/^        struct result<This(Expr const &)>$/;"	s	struct:boost::proto::pod_generator	access:public
result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::by_value_generator	access:public
result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::compose_generators	access:public
result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::default_generator	access:public
result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::generator	access:public
result	proto/generate.hpp	/^        struct result<This(Expr)>$/;"	s	struct:boost::proto::pod_generator	access:public
result	proto/make_expr.hpp	/^            struct result<This(A0)>$/;"	s	struct:boost::proto::functional::make_expr	access:public
result	proto/make_expr.hpp	/^            struct result<This(Sequence)>$/;"	s	struct:boost::proto::functional::unpack_expr	access:public
result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::child	access:public
result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::child_c	access:public
result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::left	access:public
result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::right	access:public
result	proto/traits.hpp	/^            struct result<This(Expr)>$/;"	s	struct:boost::proto::functional::value	access:public
result	proto/traits.hpp	/^            struct result<This(T &)>$/;"	s	struct:boost::proto::functional::as_child	access:public
result	proto/traits.hpp	/^            struct result<This(T &)>$/;"	s	struct:boost::proto::functional::as_expr	access:public
result	proto/traits.hpp	/^            struct result<This(T)>$/;"	s	struct:boost::proto::functional::as_child	access:public
result	proto/traits.hpp	/^            struct result<This(T)>$/;"	s	struct:boost::proto::functional::as_expr	access:public
result	proto/transform/arg.hpp	/^        struct result<This(T &)>$/;"	s	struct:boost::proto::_byref	access:public
result	proto/transform/arg.hpp	/^        struct result<This(T &)>$/;"	s	struct:boost::proto::_byval	inherits:result	access:public
result	proto/transform/arg.hpp	/^        struct result<This(T)>$/;"	s	struct:boost::proto::_byref	access:public
result	proto/transform/arg.hpp	/^        struct result<This(T)>$/;"	s	struct:boost::proto::_byval	access:public
result	proto/transform/arg.hpp	/^        struct result<This(boost::reference_wrapper<T>)>$/;"	s	struct:boost::proto::_byval	inherits:result	access:public
result	proto/transform/env.hpp	/^                struct result<This(T)>$/;"	s	struct:boost::proto::functional::as_env	access:public
result	proto/transform/fold.hpp	/^            struct result<This(State, Expr)>$/;"	s	struct:boost::proto::detail::as_callable	access:public
result::BOOST_PROTO_RESULT_OF::type	proto/detail/preprocessed/extends_funop.hpp	/^    template<typename Sig> struct result { typedef typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop< Sig , proto_derived_expr , proto_domain >::type ) >::type const type; };$/;"	t	class:result::BOOST_PROTO_RESULT_OF	access:public
result::BOOST_PROTO_RESULT_OF::type	proto/detail/preprocessed/extends_funop_const.hpp	/^    template<typename Sig> struct result { typedef typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop< Sig , proto_derived_expr , proto_domain >::type ) >::type const type; };$/;"	t	class:result::BOOST_PROTO_RESULT_OF	access:public
result::type	proto/detail/make_expr_funop.hpp	/^        type;$/;"	t	struct:result	access:public
result::type	proto/detail/poly_function_funop.hpp	/^        typedef typename result::result_type type;$/;"	t	struct:result	access:public
result::type	proto/detail/preprocessed/make_expr_funop.hpp	/^        type;$/;"	t	struct:result	access:public
result::type	proto/detail/preprocessed/poly_function_funop.hpp	/^        typedef typename result::result_type type;$/;"	t	struct:result	access:public
result_domain	proto/transform/detail/pass_through_impl.hpp	/^        result_domain;$/;"	t	struct:pass_through_impl	access:public
result_domain	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        result_domain;$/;"	t	struct:pass_through_impl	access:public
result_of	proto/deep_copy.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
result_of	proto/detail/preprocessed/traits.hpp	/^        namespace result_of$/;"	n
result_of	proto/detail/traits.hpp	/^        namespace result_of$/;"	n
result_of	proto/eval.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
result_of	proto/expr.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
result_of	proto/fusion.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
result_of	proto/generate.hpp	/^    struct result_of<proto::basic_default_domain(Expr)>$/;"	s	namespace:boost
result_of	proto/generate.hpp	/^    struct result_of<proto::basic_default_generator(Expr)>$/;"	s	namespace:boost
result_of	proto/generate.hpp	/^    struct result_of<proto::default_domain(Expr)>$/;"	s	namespace:boost
result_of	proto/generate.hpp	/^    struct result_of<proto::default_generator(Expr)>$/;"	s	namespace:boost
result_of	proto/make_expr.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
result_of	proto/proto_fwd.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
result_of	proto/traits.hpp	/^    namespace result_of$/;"	n	namespace:boost::proto
result_of	proto/transform/env.hpp	/^        namespace result_of$/;"	n	namespace:boost::proto
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 0>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 10>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 1>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 2>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 3>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 4>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 5>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 6>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 7>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 8>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr &, 9>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 0>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 10>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 1>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 2>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 3>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 4>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 5>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 6>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 7>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 8>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr const &, 9>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 0>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 10>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 1>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 2>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 3>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 4>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 5>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 6>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 7>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 8>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/preprocessed/traits.hpp	/^            struct child_c<Expr, 9>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/traits.hpp	/^            struct child_c<Expr &, N>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/traits.hpp	/^            struct child_c<Expr const &, N>$/;"	s	namespace:result_of
result_of::child_c	proto/detail/traits.hpp	/^            struct child_c<Expr, N>$/;"	s	namespace:result_of
result_of::child_c::Expr::value_type	proto/detail/traits.hpp	/^                typedef typename Expr::BOOST_PP_CAT(proto_child, N) value_type;$/;"	t	class:result_of::child_c::Expr	access:public
result_of::child_c::call	proto/detail/preprocessed/traits.hpp	/^                static type call(Expr &e)$/;"	f	struct:result_of::child_c	access:public	signature:(Expr &e)
result_of::child_c::call	proto/detail/preprocessed/traits.hpp	/^                static type call(Expr const &e)$/;"	f	struct:result_of::child_c	access:public	signature:(Expr const &e)
result_of::child_c::call	proto/detail/traits.hpp	/^                static type call(Expr &e)$/;"	f	struct:result_of::child_c	access:public	signature:(Expr &e)
result_of::child_c::call	proto/detail/traits.hpp	/^                static type call(Expr const &e)$/;"	f	struct:result_of::child_c	access:public	signature:(Expr const &e)
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child0>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child0>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child0>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child10>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child10>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child10>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child1>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child1>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child1>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child2>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child2>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child2>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child3>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child3>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child3>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child4>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child4>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child4>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child5>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child5>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child5>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child6>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child6>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child6>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child7>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child7>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child7>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child8>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child8>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child8>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child9>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child9>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child9>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::BOOST_PP_CAT(proto_child, N)>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::BOOST_PP_CAT(proto_child, N)>::reference type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::type	proto/detail/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::BOOST_PP_CAT(proto_child, N)>::value_type type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child0 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child1 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child10 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child2 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child3 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child4 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child5 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child6 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child7 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child8 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::child_c::value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child9 value_type;$/;"	t	struct:result_of::child_c	access:public
result_of::make_expr::BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/make_expr.hpp	/^    make_expr(BOOST_PP_ENUM_BINARY_PARAMS(N, const C, &c))$/;"	f	class:result_of::make_expr	signature:(N, const C, &c)
result_of::make_expr::BOOST_PP_ENUM_BINARY_PARAMS	proto/detail/make_expr_funop.hpp	/^    operator ()(BOOST_PP_ENUM_BINARY_PARAMS(N, const A, &a)) const$/;"	f	class:result_of::make_expr	signature:(N, const A, &a) const
result_of::make_expr::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7 , const C8 &c8 , const C9 &c9)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7 , const C8 &c8 , const C9 &c9)
result_of::make_expr::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7 , const C8 &c8)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7 , const C8 &c8)
result_of::make_expr::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6 , const C7 &c7)
result_of::make_expr::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5 , const C6 &c6)
result_of::make_expr::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4 , const C5 &c5)
result_of::make_expr::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3 , const C4 &c4)
result_of::make_expr::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2 , const C3 &c3)
result_of::make_expr::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1 , const C2 &c2)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1 , const C2 &c2)
result_of::make_expr::make_expr	proto/detail/preprocessed/make_expr.hpp	/^    make_expr(const C0 &c0 , const C1 &c1)$/;"	f	class:result_of::make_expr	signature:(const C0 &c0 , const C1 &c1)
result_of::make_expr::operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8 , const A9 &a9) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8 , const A9 &a9) const
result_of::make_expr::operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7 , const A8 &a8) const
result_of::make_expr::operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6 , const A7 &a7) const
result_of::make_expr::operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5 , const A6 &a6) const
result_of::make_expr::operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4 , const A5 &a5) const
result_of::make_expr::operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3 , const A4 &a4) const
result_of::make_expr::operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2 , const A3 &a3) const
result_of::make_expr::operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1 , const A2 &a2) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1 , const A2 &a2) const
result_of::make_expr::operator ()	proto/detail/preprocessed/make_expr_funop.hpp	/^    operator ()(const A0 &a0 , const A1 &a1) const$/;"	f	class:result_of::make_expr	signature:(const A0 &a0 , const A1 &a1) const
result_of_	proto/detail/decltype.hpp	/^            struct result_of_$/;"	s	namespace:boost::proto::detail::get_pointerns	inherits:BOOST_PROTO_RESULT_OF
result_of_	proto/detail/decltype.hpp	/^            struct result_of_<T U::*(V), typename enable_if_c<is_member_object_pointer<T U::*>::value>::type>$/;"	s	namespace:boost::proto::detail::get_pointerns
result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup$/;"	s	namespace:boost::proto::detail	inherits:mpl::if_c
result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<R T::*, U>$/;"	s	namespace:boost::proto::detail
result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<T &, U>$/;"	s	namespace:boost::proto::detail	inherits:result_of_fixup
result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<T *, U>$/;"	s	namespace:boost::proto::detail	inherits:result_of_fixup
result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<T const &, U>$/;"	s	namespace:boost::proto::detail	inherits:result_of_fixup
result_of_fixup	proto/detail/decltype.hpp	/^        struct result_of_fixup<T const, U>$/;"	s	namespace:boost::proto::detail	inherits:result_of_fixup
result_type	proto/context/callable.hpp	/^            result_type;$/;"	t	struct:boost::proto::context::callable_eval	access:public
result_type	proto/context/default.hpp	/^            result_type;$/;"	t	struct:boost::proto::context::default_eval	access:public
result_type	proto/context/default.hpp	/^            typedef detail::memfun<r0, r1> result_type;$/;"	t	struct:boost::proto::context::memfun_eval	access:public
result_type	proto/context/default.hpp	/^            typedef typename detail::mem_ptr_fun<r0, r1>::result_type result_type;$/;"	t	struct:boost::proto::context::memfun_eval	access:public
result_type	proto/context/default.hpp	/^            typedef typename proto::detail::comma_result<r0, r1>::type result_type;$/;"	t	struct:boost::proto::context::default_eval	access:public
result_type	proto/context/detail/callable_eval.hpp	/^            result_type;$/;"	t	struct:context::callable_eval	access:public
result_type	proto/context/detail/default_eval.hpp	/^        result_type;$/;"	t	struct:default_eval	access:public
result_type	proto/context/detail/null_eval.hpp	/^        typedef void result_type;$/;"	t	struct:null_eval	access:public
result_type	proto/context/detail/preprocessed/callable_eval.hpp	/^            result_type;$/;"	t	struct:context::callable_eval	access:public
result_type	proto/context/detail/preprocessed/default_eval.hpp	/^        result_type;$/;"	t	struct:default_eval	access:public
result_type	proto/context/detail/preprocessed/null_eval.hpp	/^        typedef void result_type;$/;"	t	struct:null_eval	access:public
result_type	proto/context/null.hpp	/^        typedef void result_type;$/;"	t	struct:boost::proto::context::null_eval	access:public
result_type	proto/debug.hpp	/^            typedef void result_type;$/;"	t	struct:boost::proto::functional::display_expr	access:public
result_type	proto/deep_copy.hpp	/^            typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:boost::proto::detail::deep_copy_impl	access:public
result_type	proto/detail/and_n.hpp	/^            typedef typename BOOST_PP_CAT(Gimpl, BOOST_PP_DEC(N))::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/as_expr.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<reference>, 0> result_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
result_type	proto/detail/as_expr.hpp	/^        typedef proto::basic_expr<proto::tag::terminal, term<value_type>, 0> result_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
result_type	proto/detail/as_expr.hpp	/^        typedef proto::expr<proto::tag::terminal, term<reference>, 0> result_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
result_type	proto/detail/as_expr.hpp	/^        typedef proto::expr<proto::tag::terminal, term<value_type>, 0> result_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
result_type	proto/detail/as_expr.hpp	/^        typedef typename Generator::template result<Generator(expr_type)>::type result_type;$/;"	t	struct:boost::proto::detail::as_child	access:public
result_type	proto/detail/as_expr.hpp	/^        typedef typename Generator::template result<Generator(expr_type)>::type result_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
result_type	proto/detail/class_member_traits.hpp	/^        typedef T result_type;$/;"	t	struct:class_member_traits	access:public
result_type	proto/detail/decltype.hpp	/^            typedef T result_type;$/;"	t	struct:boost::proto::detail::class_member_traits	access:public
result_type	proto/detail/decltype.hpp	/^            typedef typename class_member_traits<pmf_type>::result_type result_type;$/;"	t	struct:boost::proto::detail::memfun	access:public
result_type	proto/detail/deep_copy.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:deep_copy_impl	access:public
result_type	proto/detail/make_expr_.hpp	/^        typedef typename proto::detail::protoify<A, Domain>::result_type result_type;$/;"	t	struct:make_expr_	access:public
result_type	proto/detail/make_expr_.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:make_expr_	access:public
result_type	proto/detail/poly_function.hpp	/^        typedef typename Fun::result_type result_type;$/;"	t	struct:boost::proto::detail::poly_function_traits	access:public
result_type	proto/detail/poly_function.hpp	/^        typedef typename Fun::template result<Sig>::type result_type;$/;"	t	struct:boost::proto::detail::poly_function_traits	access:public
result_type	proto/detail/poly_function_traits.hpp	/^        typedef typename function_type::result_type result_type;$/;"	t	struct:poly_function_traits	access:public
result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl1::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl2::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl3::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl4::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl5::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl6::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl7::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl8::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/preprocessed/and_n.hpp	/^            typedef typename Gimpl9::result_type result_type;$/;"	t	struct:_and_impl	access:public
result_type	proto/detail/preprocessed/class_member_traits.hpp	/^        typedef T result_type;$/;"	t	struct:class_member_traits	access:public
result_type	proto/detail/preprocessed/deep_copy.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:deep_copy_impl	access:public
result_type	proto/detail/preprocessed/make_expr_.hpp	/^        typedef typename proto::detail::protoify<A, Domain>::result_type result_type;$/;"	t	struct:make_expr_	access:public
result_type	proto/detail/preprocessed/make_expr_.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type result_type;$/;"	t	struct:make_expr_	access:public
result_type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename function_type::result_type result_type;$/;"	t	struct:poly_function_traits	access:public
result_type	proto/domain.hpp	/^                typedef T &result_type;$/;"	t	struct:boost::proto::domainns_::domain::as_child	access:public
result_type	proto/domain.hpp	/^                typedef typename remove_const<T>::type result_type;$/;"	t	struct:boost::proto::domainns_::domain::as_expr	access:public
result_type	proto/functional/range/empty.hpp	/^        typedef bool result_type;$/;"	t	struct:boost::proto::functional::empty	access:public
result_type	proto/functional/std/iterator.hpp	/^        typedef void result_type;$/;"	t	struct:boost::proto::functional::advance	access:public
result_type	proto/matches.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::_::impl	access:public
result_type	proto/matches.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::not_::impl	access:public
result_type	proto/matches.hpp	/^            typedef typename which::template impl<Expr, State, Data>::result_type result_type;$/;"	t	struct:boost::proto::if_::impl	access:public
result_type	proto/traits.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::nullary_expr::impl	access:public
result_type	proto/traits.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::terminal::impl	access:public
result_type	proto/transform/arg.hpp	/^            result_type;$/;"	t	struct:boost::proto::_child_c::impl	access:public
result_type	proto/transform/arg.hpp	/^            result_type;$/;"	t	struct:boost::proto::_value::impl	access:public
result_type	proto/transform/arg.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::_expr::impl	access:public
result_type	proto/transform/arg.hpp	/^            typedef State result_type;$/;"	t	struct:boost::proto::_state::impl	access:public
result_type	proto/transform/arg.hpp	/^            typedef void result_type;$/;"	t	struct:boost::proto::_void::impl	access:public
result_type	proto/transform/call.hpp	/^            typedef typename BOOST_PROTO_RESULT_OF<Fun()>::type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
result_type	proto/transform/call.hpp	/^            typedef typename Fun::template impl<a0, State, Data>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
result_type	proto/transform/call.hpp	/^            typedef typename Fun::template impl<a0, a1, Data>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
result_type	proto/transform/call.hpp	/^            typedef typename Fun::template impl<a0, a1, a2>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
result_type	proto/transform/call.hpp	/^            typedef typename detail::poly_function_traits<Fun, Fun(a0)>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
result_type	proto/transform/call.hpp	/^            typedef typename detail::poly_function_traits<Fun, Fun(a0, a1)>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
result_type	proto/transform/call.hpp	/^            typedef typename detail::poly_function_traits<Fun, Fun(a0, a1, a2)>::result_type result_type;$/;"	t	struct:boost::proto::call::impl2	access:public
result_type	proto/transform/default.hpp	/^                typedef typename proto::detail::comma_result<r0, r1>::type result_type;$/;"	t	struct:boost::proto::detail::default_comma::impl	access:public
result_type	proto/transform/default.hpp	/^            result_type;$/;"	t	struct:boost::proto::detail::default_function_impl	access:public
result_type	proto/transform/default.hpp	/^            typedef detail::memfun<r0, r1> result_type;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:public
result_type	proto/transform/default.hpp	/^            typedef typename detail::mem_ptr_fun<r0, r1>::result_type result_type;$/;"	t	struct:boost::proto::detail::default_mem_ptr_impl	access:public
result_type	proto/transform/detail/call.hpp	/^            typedef typename function_traits::result_type result_type;$/;"	t	struct:call::impl	access:public
result_type	proto/transform/detail/default_function_impl.hpp	/^        result_type;$/;"	t	struct:default_function_impl	access:public
result_type	proto/transform/detail/fold_impl.hpp	/^        typedef BOOST_PP_CAT(state, N) result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/fold_impl.hpp	/^        typedef state0 result_type;$/;"	t	struct:reverse_fold_impl	access:public
result_type	proto/transform/detail/make.hpp	/^            typedef proto::basic_expr<T, A, N> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/make.hpp	/^            typedef proto::expr<T, A, N> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/make.hpp	/^            typedef typename detail::make_if_<Object, Expr, State, Data>::type result_type;$/;"	t	struct:make::impl	access:public
result_type	proto/transform/detail/make_gcc_workaround.hpp	/^            typedef proto::basic_expr<Tag, Args, Arity> result_type;$/;"	t	struct:make::impl	access:public
result_type	proto/transform/detail/make_gcc_workaround.hpp	/^            typedef proto::expr<Tag, Args, Arity> result_type;$/;"	t	struct:make::impl	access:public
result_type	proto/transform/detail/pass_through_impl.hpp	/^        typedef typename BOOST_PROTO_RESULT_OF<proto_generator(expr_type)>::type result_type;$/;"	t	struct:pass_through_impl	access:public
result_type	proto/transform/detail/preprocessed/call.hpp	/^            typedef typename function_traits::result_type result_type;$/;"	t	struct:call::impl	access:public
result_type	proto/transform/detail/preprocessed/default_function_impl.hpp	/^        result_type;$/;"	t	struct:default_function_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state0 result_type;$/;"	t	struct:reverse_fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state1 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state10 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state2 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state3 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state4 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state5 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state6 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state7 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state8 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state9 result_type;$/;"	t	struct:fold_impl	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 0> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 10> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 1> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 2> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 3> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 4> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 5> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 6> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 7> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 8> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::basic_expr<T, A, 9> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 0> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 10> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 1> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 2> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 3> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 4> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 5> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 6> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 7> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 8> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef proto::expr<T, A, 9> result_type;$/;"	t	struct:detail::construct_	access:public
result_type	proto/transform/detail/preprocessed/make.hpp	/^            typedef typename detail::make_if_<Object, Expr, State, Data>::type result_type;$/;"	t	struct:make::impl	access:public
result_type	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^            typedef proto::basic_expr<Tag, Args, Arity> result_type;$/;"	t	struct:make::impl	access:public
result_type	proto/transform/detail/preprocessed/make_gcc_workaround.hpp	/^            typedef proto::expr<Tag, Args, Arity> result_type;$/;"	t	struct:make::impl	access:public
result_type	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        typedef typename BOOST_PROTO_RESULT_OF<proto_generator(expr_type)>::type result_type;$/;"	t	struct:pass_through_impl	access:public
result_type	proto/transform/env.hpp	/^                    result_type;$/;"	t	struct:boost::proto::functional::env_var::impl	access:public
result_type	proto/transform/env.hpp	/^                    result_type;$/;"	t	struct:boost::proto::functional::has_env_var::impl	access:public
result_type	proto/transform/env.hpp	/^                    typedef Env result_type;$/;"	t	struct:boost::proto::functional::env_var::impl	access:public
result_type	proto/transform/env.hpp	/^                    typedef T result_type;$/;"	t	struct:boost::proto::functional::as_env::impl	access:public
result_type	proto/transform/env.hpp	/^                    typedef env<data_type, typename detail::value_type<T>::type> result_type;$/;"	t	struct:boost::proto::functional::as_env::impl	access:public
result_type	proto/transform/env.hpp	/^                    typedef mpl::false_ result_type;$/;"	t	struct:boost::proto::functional::has_env_var::impl	access:public
result_type	proto/transform/env.hpp	/^                    typedef mpl::true_ result_type;$/;"	t	struct:boost::proto::functional::has_env_var::impl	access:public
result_type	proto/transform/env.hpp	/^                typedef Data result_type;$/;"	t	struct:boost::proto::_env::impl	access:public
result_type	proto/transform/env.hpp	/^                typedef typename impl::data::template lookup<Key>::type result_type;$/;"	t	struct:boost::proto::_env_var::impl	access:public
result_type	proto/transform/fold.hpp	/^            result_type;$/;"	t	struct:boost::proto::fold::impl	access:public
result_type	proto/transform/fold.hpp	/^            result_type;$/;"	t	struct:boost::proto::reverse_fold::impl	access:public
result_type	proto/transform/fold_tree.hpp	/^                typedef mpl::false_ result_type;$/;"	t	struct:boost::proto::detail::has_tag::impl	access:public
result_type	proto/transform/fold_tree.hpp	/^                typedef mpl::true_ result_type;$/;"	t	struct:boost::proto::detail::has_tag::impl	access:public
result_type	proto/transform/integral_c.hpp	/^            typedef T result_type;$/;"	t	struct:boost::proto::integral_c::impl	access:public
result_type	proto/transform/make.hpp	/^            typedef PrimitiveTransform result_type;$/;"	t	struct:boost::proto::protect::impl	access:public
result_type	proto/transform/make.hpp	/^            typedef Type result_type;$/;"	t	struct:boost::proto::detail::construct_	access:public
result_type	proto/transform/make.hpp	/^            typedef typename detail::make_if_<Object, Expr, State, Data>::type result_type;$/;"	t	struct:boost::proto::make::impl	access:public
result_type	proto/transform/pass_through.hpp	/^            typedef Expr result_type;$/;"	t	struct:boost::proto::detail::pass_through_impl	access:public
result_type	proto/transform/when.hpp	/^                typedef typename which::template impl<Expr, State, Data>::result_type result_type;$/;"	t	struct:boost::proto::detail::when_impl::impl	access:public
reverse	proto/functional/fusion/reverse.hpp	/^    struct reverse$/;"	s	namespace:boost::proto::functional
reverse_fold	proto/transform/fold.hpp	/^    struct reverse_fold  : transform<reverse_fold<Sequence, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:transform
reverse_fold	proto/transform/fold.hpp	/^    struct reverse_fold<_, State0, Fun> : transform<reverse_fold<_, State0, Fun> >$/;"	s	namespace:boost::proto	inherits:transform
reverse_fold_impl	proto/transform/detail/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, N>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 10>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 1>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 2>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 3>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 4>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 5>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 6>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 7>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 8>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/detail/preprocessed/fold_impl.hpp	/^    struct reverse_fold_impl<State0, Fun, Expr, State, Data, 9>$/;"	s	inherits:transform_impl
reverse_fold_impl	proto/transform/fold.hpp	/^        struct reverse_fold_impl$/;"	s	namespace:boost::proto::detail
reverse_fold_impl::BOOST_PP_CAT	proto/transform/detail/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type BOOST_PP_CAT(state, N);$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::operator ()	proto/transform/detail/fold_impl.hpp	/^        result_type operator ()($/;"	f	struct:reverse_fold_impl	access:public	signature:( typename reverse_fold_impl::expr_param e , typename reverse_fold_impl::state_param s , typename reverse_fold_impl::data_param d ) const
reverse_fold_impl::operator ()	proto/transform/detail/preprocessed/fold_impl.hpp	/^        result_type operator ()($/;"	f	struct:reverse_fold_impl	access:public	signature:( typename reverse_fold_impl::expr_param e , typename reverse_fold_impl::state_param s , typename reverse_fold_impl::data_param d ) const
reverse_fold_impl::result_type	proto/transform/detail/fold_impl.hpp	/^        typedef state0 result_type;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::result_type	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef state0 result_type;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state1;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state10	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state10;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state2;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state3;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state4;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state5;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state6;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state7;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state8;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state9	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_impl::state9	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state9;$/;"	t	struct:reverse_fold_impl	access:public
reverse_fold_tree	proto/transform/fold_tree.hpp	/^    struct reverse_fold_tree$/;"	s	namespace:boost::proto	inherits:transform
reverse_fold_tree_	proto/transform/fold_tree.hpp	/^        struct reverse_fold_tree_$/;"	s	namespace:boost::proto::detail	inherits:if_
right	proto/traits.hpp	/^        struct right$/;"	s	namespace:boost::proto::functional
right	proto/traits.hpp	/^        struct right$/;"	s	namespace:boost::proto::result_of	inherits:child_c
right	proto/traits.hpp	/^    right(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
same_cv	proto/expr.hpp	/^        struct same_cv$/;"	s	namespace:boost::proto::detail
same_cv	proto/expr.hpp	/^        struct same_cv<T const, U>$/;"	s	namespace:boost::proto::detail
sctx_	proto/context/callable.hpp	/^            static callable_context_wrapper<Context> &sctx_;$/;"	m	struct:boost::proto::detail::is_expr_handled	access:public
sctx_	proto/context/detail/callable_eval.hpp	/^            static callable_context_wrapper<Context> &sctx_;$/;"	m	struct:detail::is_expr_handled	access:public
sctx_	proto/context/detail/preprocessed/callable_eval.hpp	/^            static callable_context_wrapper<Context> &sctx_;$/;"	m	struct:detail::is_expr_handled	access:public
second	proto/functional/std/utility.hpp	/^    struct second$/;"	s	namespace:boost::proto::functional
second	proto/transform/when.hpp	/^            typedef Fun second;$/;"	t	struct:boost::proto::detail::when_impl	access:public
second	proto/transform/when.hpp	/^        typedef PrimitiveTransform second;$/;"	t	struct:boost::proto::when	access:public
second	proto/transform/when.hpp	/^        typedef external_transform second;$/;"	t	struct:boost::proto::when	access:public
segments_impl	proto/fusion.hpp	/^        struct segments_impl<proto::tag::proto_flat_view<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
segments_type	proto/fusion.hpp	/^            segments_type;$/;"	t	struct:boost::proto::detail::flat_view	access:public
segs_	proto/fusion.hpp	/^            segments_type segs_;$/;"	m	struct:boost::proto::detail::flat_view	access:public
sequence	proto/transform/fold.hpp	/^            sequence;$/;"	t	struct:boost::proto::fold::impl	access:public
sequence	proto/transform/fold.hpp	/^            sequence;$/;"	t	struct:boost::proto::reverse_fold::impl	access:public
sequence_tag	proto/fusion.hpp	/^    struct sequence_tag< proto::basic_expr<Tag, Args, Arity> >$/;"	s	namespace:boost::mpl
sequence_tag	proto/fusion.hpp	/^    struct sequence_tag< proto::expr<Tag, Args, Arity> >$/;"	s	namespace:boost::mpl
sexpr_	proto/context/callable.hpp	/^            static Expr &sexpr_;$/;"	m	struct:boost::proto::detail::is_expr_handled	access:public
sexpr_	proto/context/detail/callable_eval.hpp	/^            static Expr &sexpr_;$/;"	m	struct:detail::is_expr_handled	access:public
sexpr_	proto/context/detail/preprocessed/callable_eval.hpp	/^            static Expr &sexpr_;$/;"	m	struct:detail::is_expr_handled	access:public
shift_left	proto/tags.hpp	/^    struct shift_left {};$/;"	s	namespace:boost::proto::tagns_::tag
shift_left_assign	proto/tags.hpp	/^    struct shift_left_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
shift_right	proto/tags.hpp	/^    struct shift_right {};$/;"	s	namespace:boost::proto::tagns_::tag
shift_right_assign	proto/tags.hpp	/^    struct shift_right_assign {};$/;"	s	namespace:boost::proto::tagns_::tag
size	proto/functional/range/size.hpp	/^    struct size$/;"	s	namespace:boost::proto::functional
size_impl	proto/fusion.hpp	/^        struct size_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
size_t	proto/transform/integral_c.hpp	/^    struct size_t$/;"	s	namespace:boost::proto	inherits:integral_c
sized_type	proto/proto_fwd.hpp	/^        struct sized_type$/;"	s	namespace:boost::proto::detail
sout_	proto/debug.hpp	/^            reference_wrapper<std::ostream> sout_;$/;"	m	struct:boost::proto::functional::display_expr	access:private
sout_	proto/debug.hpp	/^            std::ostream &sout_;$/;"	m	struct:boost::proto::detail::display_expr_impl	access:private
sout_	proto/debug.hpp	/^            std::ostream &sout_;$/;"	m	struct:boost::proto::hidden_detail_::ostream_wrapper	access:public
src_args	proto/detail/generate_by_value.hpp	/^        src_args;$/;"	t	struct:by_value_generator_	access:public
src_args	proto/detail/preprocessed/generate_by_value.hpp	/^        src_args;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, N> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, N> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 10> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 1> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 2> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 3> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 4> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 5> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 6> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 7> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 8> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, src_args, 9> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 10> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 1> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 2> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 3> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 4> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 5> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 6> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 7> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 8> src_type;$/;"	t	struct:by_value_generator_	access:public
src_type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, src_args, 9> src_type;$/;"	t	struct:by_value_generator_	access:public
stag_	proto/context/callable.hpp	/^            static typename Expr::proto_tag &stag_;$/;"	m	struct:boost::proto::detail::is_expr_handled	access:public
stag_	proto/context/detail/callable_eval.hpp	/^            static typename Expr::proto_tag &stag_;$/;"	m	struct:detail::is_expr_handled	access:public
stag_	proto/context/detail/preprocessed/callable_eval.hpp	/^            static typename Expr::proto_tag &stag_;$/;"	m	struct:detail::is_expr_handled	access:public
state	proto/transform/impl.hpp	/^        typedef State const state;$/;"	t	struct:boost::proto::transform_impl	access:public
state	proto/transform/impl.hpp	/^        typedef State state;$/;"	t	struct:boost::proto::transform_impl	access:public
state0	proto/transform/detail/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;$/;"	t	struct:fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state0	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state0;$/;"	t	struct:fold_impl	access:public
state0	proto/transform/fold.hpp	/^            state0;$/;"	t	struct:boost::proto::fold::impl	access:public
state0	proto/transform/fold.hpp	/^            state0;$/;"	t	struct:boost::proto::reverse_fold::impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1;$/;"	t	struct:fold_impl	access:public
state1	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state1;$/;"	t	struct:reverse_fold_impl	access:public
state10	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state10	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state10;$/;"	t	struct:reverse_fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4;$/;"	t	struct:fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3;$/;"	t	struct:fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2;$/;"	t	struct:fold_impl	access:public
state2	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state2;$/;"	t	struct:reverse_fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4;$/;"	t	struct:fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3;$/;"	t	struct:fold_impl	access:public
state3	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state3;$/;"	t	struct:reverse_fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4;$/;"	t	struct:fold_impl	access:public
state4	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state4;$/;"	t	struct:reverse_fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5;$/;"	t	struct:fold_impl	access:public
state5	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state5;$/;"	t	struct:reverse_fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6;$/;"	t	struct:fold_impl	access:public
state6	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state6;$/;"	t	struct:reverse_fold_impl	access:public
state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7;$/;"	t	struct:fold_impl	access:public
state7	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state7;$/;"	t	struct:reverse_fold_impl	access:public
state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8;$/;"	t	struct:fold_impl	access:public
state8	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state8;$/;"	t	struct:reverse_fold_impl	access:public
state9	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 9 >::type , state10 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 8 >::type , state9 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 7 >::type , state8 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 6 >::type , state7 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 5 >::type , state6 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 4 >::type , state5 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 3 >::type , state4 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 2 >::type , state3 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 1 >::type , state2 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c< Expr , 0 >::type , state1 , Data >::result_type state0;$/;"	t	struct:reverse_fold_impl	access:public
state9	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 9>::type , state9 , Data >::result_type state10;$/;"	t	struct:fold_impl	access:public
state9	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 0>::type , state0 , Data >::result_type state1; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 1>::type , state1 , Data >::result_type state2; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 2>::type , state2 , Data >::result_type state3; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 3>::type , state3 , Data >::result_type state4; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 4>::type , state4 , Data >::result_type state5; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 5>::type , state5 , Data >::result_type state6; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 6>::type , state6 , Data >::result_type state7; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 7>::type , state7 , Data >::result_type state8; typedef typename when<_, Fun>::template impl< typename result_of::child_c<Expr, 8>::type , state8 , Data >::result_type state9;$/;"	t	struct:fold_impl	access:public
state9	proto/transform/detail/preprocessed/fold_impl.hpp	/^        typedef typename when<_, State0>::template impl<Expr, State, Data>::result_type state9;$/;"	t	struct:reverse_fold_impl	access:public
state_param	proto/transform/impl.hpp	/^        typedef State &state_param;$/;"	t	struct:boost::proto::transform_impl	access:public
state_param	proto/transform/impl.hpp	/^        typedef State const &state_param;$/;"	t	struct:boost::proto::transform_impl	access:public
static_const	proto/detail/static_const.hpp	/^        struct static_const$/;"	s	namespace:boost::proto::detail
subscript	proto/tags.hpp	/^    struct subscript {};$/;"	s	namespace:boost::proto::tagns_::tag
subscript_wrapper	proto/detail/decltype.hpp	/^        struct subscript_wrapper$/;"	s	namespace:boost::proto::detail	inherits:T
switch_	proto/matches.hpp	/^    struct switch_ : transform<switch_<Cases, Transform> >$/;"	s	namespace:boost::proto	inherits:transform
switch_	proto/matches.hpp	/^    struct switch_<Cases> : transform<switch_<Cases> >$/;"	s	namespace:boost::proto	inherits:transform
tag	proto/debug.hpp	/^    namespace tagns_ { namespace tag$/;"	n	namespace:boost::proto::tagns_
tag	proto/proto_fwd.hpp	/^        namespace tag$/;"	n	namespace:boost::proto::tagns_
tag	proto/tags.hpp	/^namespace boost { namespace proto { namespace tagns_ { namespace tag$/;"	n	namespace:boost::proto::tagns_
tag_of	proto/traits.hpp	/^    struct tag_of$/;"	s	namespace:boost::proto
tag_of	proto/traits.hpp	/^    struct tag_of<Expr &>$/;"	s	namespace:boost::proto
tagns_	proto/debug.hpp	/^    namespace tagns_ { namespace tag$/;"	n	namespace:boost::proto
tagns_	proto/proto_fwd.hpp	/^    namespace tagns_$/;"	n	namespace:boost::proto
tagns_	proto/tags.hpp	/^namespace boost { namespace proto { namespace tagns_ { namespace tag$/;"	n	namespace:boost::proto
template_arity	proto/detail/template_arity.hpp	/^    struct template_arity$/;"	s	namespace:boost::proto::detail	inherits:template_arity_impl2
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9> **, mpl::int_<10> *);$/;"	p	signature:(F<T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9> **, mpl::int_<10> *)
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8> **, mpl::int_<9> *);$/;"	p	signature:(F<T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8> **, mpl::int_<9> *)
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7> **, mpl::int_<8> *);$/;"	p	signature:(F<T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7> **, mpl::int_<8> *)
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0 , T1 , T2 , T3 , T4 , T5 , T6> **, mpl::int_<7> *);$/;"	p	signature:(F<T0 , T1 , T2 , T3 , T4 , T5 , T6> **, mpl::int_<7> *)
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0 , T1 , T2 , T3 , T4 , T5> **, mpl::int_<6> *);$/;"	p	signature:(F<T0 , T1 , T2 , T3 , T4 , T5> **, mpl::int_<6> *)
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0 , T1 , T2 , T3 , T4> **, mpl::int_<5> *);$/;"	p	signature:(F<T0 , T1 , T2 , T3 , T4> **, mpl::int_<5> *)
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0 , T1 , T2 , T3> **, mpl::int_<4> *);$/;"	p	signature:(F<T0 , T1 , T2 , T3> **, mpl::int_<4> *)
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0 , T1 , T2> **, mpl::int_<3> *);$/;"	p	signature:(F<T0 , T1 , T2> **, mpl::int_<3> *)
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0 , T1> **, mpl::int_<2> *);$/;"	p	signature:(F<T0 , T1> **, mpl::int_<2> *)
template_arity_helper	proto/detail/preprocessed/template_arity_helper.hpp	/^    template_arity_helper(F<T0> **, mpl::int_<1> *);$/;"	p	signature:(F<T0> **, mpl::int_<1> *)
template_arity_helper	proto/detail/template_arity.hpp	/^    sized_type<1>::type template_arity_helper(...);$/;"	p	namespace:boost::proto::detail	signature:(....)
template_arity_helper	proto/detail/template_arity_helper.hpp	/^    template_arity_helper(F<BOOST_PP_ENUM_PARAMS(N, T)> **, mpl::int_<N> *);$/;"	p	signature:(F<BOOST_PP_ENUM_PARAMS(N, T)> **, mpl::int_<N> *)
template_arity_impl2	proto/detail/template_arity.hpp	/^    struct template_arity_impl2$/;"	s	namespace:boost::proto::detail	inherits:mpl::int_
template_arity_impl2	proto/detail/template_arity.hpp	/^    struct template_arity_impl2<F, 0, 1>$/;"	s	namespace:boost::proto::detail	inherits:mpl::int_
template_arity_impl2	proto/detail/template_arity.hpp	/^    struct template_arity_impl2<F, N, 1>$/;"	s	namespace:boost::proto::detail	inherits:template_arity
term	proto/detail/args.hpp	/^    struct term$/;"	s
term	proto/detail/preprocessed/args.hpp	/^    struct term$/;"	s
term::arity	proto/detail/args.hpp	/^        static const long arity = 0;$/;"	m	struct:term	access:public
term::arity	proto/detail/preprocessed/args.hpp	/^        static const long arity = 0;$/;"	m	struct:term	access:public
term::back_	proto/detail/args.hpp	/^        typedef Arg0 back_;$/;"	t	struct:term	access:public
term::back_	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 back_;$/;"	t	struct:term	access:public
term::child0	proto/detail/args.hpp	/^        typedef Arg0 child0;$/;"	t	struct:term	access:public
term::child0	proto/detail/preprocessed/args.hpp	/^        typedef Arg0 child0;$/;"	t	struct:term	access:public
term::child1	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
term::child2	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
term::child3	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
term::child4	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
term::child5	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
term::child6	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
term::child7	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
term::child8	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
term::child9	proto/detail/preprocessed/args.hpp	/^        typedef mpl::void_ child1; typedef mpl::void_ child2; typedef mpl::void_ child3; typedef mpl::void_ child4; typedef mpl::void_ child5; typedef mpl::void_ child6; typedef mpl::void_ child7; typedef mpl::void_ child8; typedef mpl::void_ child9;$/;"	t	struct:term	access:public
term_traits	proto/args.hpp	/^        struct term_traits$/;"	s	namespace:boost::proto::detail
term_traits	proto/args.hpp	/^        struct term_traits<T &>$/;"	s	namespace:boost::proto::detail
term_traits	proto/args.hpp	/^        struct term_traits<T (&)[N]>$/;"	s	namespace:boost::proto::detail
term_traits	proto/args.hpp	/^        struct term_traits<T const &>$/;"	s	namespace:boost::proto::detail
term_traits	proto/args.hpp	/^        struct term_traits<T const (&)[N]>$/;"	s	namespace:boost::proto::detail
term_traits	proto/args.hpp	/^        struct term_traits<T const[N]>$/;"	s	namespace:boost::proto::detail
term_traits	proto/args.hpp	/^        struct term_traits<T[N]>$/;"	s	namespace:boost::proto::detail
terminal	proto/tags.hpp	/^    struct terminal {};$/;"	s	namespace:boost::proto::tagns_::tag
terminal	proto/traits.hpp	/^    struct terminal$/;"	s	namespace:boost::proto	inherits:proto::transform
terminal_array_matches	proto/matches.hpp	/^        struct terminal_array_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
terminal_array_matches	proto/matches.hpp	/^        struct terminal_array_matches<T, U *, true>$/;"	s	namespace:boost::proto::detail	inherits:is_convertible
terminal_array_matches	proto/matches.hpp	/^        struct terminal_array_matches<T, U(&)[M], true>$/;"	s	namespace:boost::proto::detail	inherits:is_convertible
terminal_array_matches	proto/matches.hpp	/^        struct terminal_array_matches<T, U(&)[proto::N], true>$/;"	s	namespace:boost::proto::detail	inherits:is_convertible
terminal_matches	proto/matches.hpp	/^        struct terminal_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::and_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::or_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T &, T>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T const &, T>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T const (&)[M], T const[M]>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T(&)[M], T *>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T(&)[M], T(&)[proto::N]>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T, T>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T, exact<T> >$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T, proto::_>$/;"	s	namespace:boost::proto::detail	inherits:mpl::true_
terminal_matches	proto/matches.hpp	/^        struct terminal_matches<T, proto::convertible_to<U> >$/;"	s	namespace:boost::proto::detail	inherits:is_convertible
terminal_type	proto/detail/preprocessed/unpack_expr_.hpp	/^        terminal_type;$/;"	t	struct:unpack_expr_	access:public
terminal_type	proto/detail/unpack_expr_.hpp	/^        terminal_type;$/;"	t	struct:unpack_expr_	access:public
terminal_type	proto/literal.hpp	/^            typedef basic_expr<tag::terminal, term<T>, 0> terminal_type;$/;"	t	struct:boost::proto::utility::literal	access:private
test_V_is_a_U	proto/detail/decltype.hpp	/^            template<typename U> char (&test_V_is_a_U(...))[2];$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(....)
test_V_is_a_U	proto/detail/decltype.hpp	/^            template<typename U> char test_V_is_a_U(U *);$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(U *)
test_V_is_a_U	proto/detail/decltype.hpp	/^            template<typename U> char test_V_is_a_U(U const *);$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(U const *)
test_poly_function	proto/detail/poly_function.hpp	/^    template<typename T> mono_function_t test_poly_function(T *, wrap_t<typename T::result_type> * = 0);$/;"	p	namespace:boost::proto::detail	signature:(T *, wrap_t<typename T::result_type> * = 0)
test_poly_function	proto/detail/poly_function.hpp	/^    template<typename T> poly_function_t test_poly_function(T *, wrap_t<typename T::is_poly_function_base_> * = 0);$/;"	p	namespace:boost::proto::detail	signature:(T *, wrap_t<typename T::is_poly_function_base_> * = 0)
test_poly_function	proto/detail/poly_function.hpp	/^    template<typename T> unknown_function_t test_poly_function(T *, ...);$/;"	p	namespace:boost::proto::detail	signature:(T *, ...)
test_ptr_to_const	proto/detail/decltype.hpp	/^            char (&test_ptr_to_const(void const *))[2];$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(void const *)
test_ptr_to_const	proto/detail/decltype.hpp	/^            char test_ptr_to_const(void *);$/;"	p	namespace:boost::proto::detail::get_pointerns	signature:(void *)
tr1_result_of	proto/generate.hpp	/^    struct tr1_result_of<proto::basic_default_domain(Expr)>$/;"	s	namespace:boost
tr1_result_of	proto/generate.hpp	/^    struct tr1_result_of<proto::basic_default_generator(Expr)>$/;"	s	namespace:boost
tr1_result_of	proto/generate.hpp	/^    struct tr1_result_of<proto::default_domain(Expr)>$/;"	s	namespace:boost
tr1_result_of	proto/generate.hpp	/^    struct tr1_result_of<proto::default_generator(Expr)>$/;"	s	namespace:boost
traits	proto/fusion.hpp	/^    namespace traits$/;"	n	namespace:boost::fusion
transform	proto/transform/impl.hpp	/^    struct transform$/;"	s	namespace:boost::proto
transform_impl	proto/transform/impl.hpp	/^    struct transform_impl$/;"	s	namespace:boost::proto
transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr &, State &, Data &>$/;"	s	namespace:boost::proto
transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr &, State &, Data>$/;"	s	namespace:boost::proto
transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr &, State, Data &>$/;"	s	namespace:boost::proto
transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr &, State, Data>$/;"	s	namespace:boost::proto
transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr, State &, Data &>$/;"	s	namespace:boost::proto
transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr, State &, Data>$/;"	s	namespace:boost::proto
transform_impl	proto/transform/impl.hpp	/^    struct transform_impl<Expr, State, Data &>$/;"	s	namespace:boost::proto
type	proto/context/callable.hpp	/^            typedef mpl::bool_<value> type;$/;"	t	struct:boost::proto::detail::is_expr_handled	access:public
type	proto/context/detail/callable_eval.hpp	/^            typedef mpl::bool_<value> type;$/;"	t	struct:detail::is_expr_handled	access:public
type	proto/context/detail/preprocessed/callable_eval.hpp	/^            typedef mpl::bool_<value> type;$/;"	t	struct:detail::is_expr_handled	access:public
type	proto/deep_copy.hpp	/^                type;$/;"	t	struct:boost::proto::functional::deep_copy::result	access:public
type	proto/deep_copy.hpp	/^            type;$/;"	t	struct:boost::proto::result_of::deep_copy	access:public
type	proto/detail/as_expr.hpp	/^        typedef Generator type;$/;"	t	struct:boost::proto::detail::base_generator	access:public
type	proto/detail/decltype.hpp	/^                type;$/;"	t	struct:boost::proto::detail::get_pointerns::result_of_	access:public
type	proto/detail/decltype.hpp	/^                typedef mpl::bool_<value> type;$/;"	t	struct:boost::proto::detail::has_get_pointerns::has_get_pointer	access:public
type	proto/detail/decltype.hpp	/^            type;$/;"	t	struct:boost::proto::detail::as_subscriptable	access:public
type	proto/detail/decltype.hpp	/^            typedef A1 type;$/;"	t	struct:boost::proto::detail::comma_result	access:public
type	proto/detail/decltype.hpp	/^            typedef R T::*type;$/;"	t	class:boost::proto::detail::result_of_fixup::T	access:public
type	proto/detail/decltype.hpp	/^            typedef T &type;$/;"	t	struct:boost::proto::detail::as_mutable	access:public
type	proto/detail/decltype.hpp	/^            typedef void type;$/;"	t	struct:boost::proto::detail::comma_result	access:public
type	proto/detail/deduce_domain.hpp	/^                typedef D0 type;$/;"	t	struct:boost::proto::detail::common_domain1	access:public
type	proto/detail/deduce_domain.hpp	/^                typedef D0 type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
type	proto/detail/deduce_domain.hpp	/^                typedef D1 type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
type	proto/detail/deduce_domain.hpp	/^                typedef Domain type;$/;"	t	struct:boost::proto::detail::domain_	access:public
type	proto/detail/deduce_domain.hpp	/^                typedef basic_default_domain type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
type	proto/detail/deduce_domain.hpp	/^                typedef default_domain type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
type	proto/detail/deduce_domain.hpp	/^                typedef not_a_domain type;$/;"	t	struct:boost::proto::detail::domain_	access:public
type	proto/detail/deduce_domain.hpp	/^                typedef typename nth_domain<index, domain_<D0> >::type type;$/;"	t	struct:boost::proto::detail::common_domain2	access:public
type	proto/detail/expr.hpp	/^            typedef typename result_of::funop<Sig, expr, default_domain>::type const type;$/;"	t	class:expr::result::result_of::funop	access:public
type	proto/detail/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, N> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, N> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/is_noncopyable.hpp	/^        typedef mpl::bool_<value> type;$/;"	t	struct:boost::proto::detail::is_iostream	access:public
type	proto/detail/make_expr_funop.hpp	/^        type;$/;"	t	struct:result	access:public
type	proto/detail/poly_function.hpp	/^            typedef typename result::result_type type;$/;"	t	struct:boost::proto::detail::poly_function::result	access:public
type	proto/detail/poly_function.hpp	/^        typedef T &type;$/;"	t	struct:boost::proto::detail::arg	access:public
type	proto/detail/poly_function.hpp	/^        typedef T &type;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
type	proto/detail/poly_function.hpp	/^        typedef T const &type;$/;"	t	struct:boost::proto::detail::arg	access:public
type	proto/detail/poly_function.hpp	/^        typedef typename mpl::if_c<is_noncopyable<T>::value, T &, T>::type type;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
type	proto/detail/poly_function.hpp	/^        typedef typename mpl::if_c<is_noncopyable<T>::value, T const &, T>::type type;$/;"	t	struct:boost::proto::detail::normalize_arg	access:public
type	proto/detail/poly_function_funop.hpp	/^        typedef typename result::result_type type;$/;"	t	struct:result	access:public
type	proto/detail/poly_function_traits.hpp	/^        typedef PolyFun type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<BOOST_PP_ENUM_PARAMS(N, const A)> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common10 type;$/;"	t	struct:common_domain10	access:public
type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common3 type;$/;"	t	struct:common_domain3	access:public
type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common4 type;$/;"	t	struct:common_domain4	access:public
type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common5 type;$/;"	t	struct:common_domain5	access:public
type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common6 type;$/;"	t	struct:common_domain6	access:public
type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common7 type;$/;"	t	struct:common_domain7	access:public
type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common8 type;$/;"	t	struct:common_domain8	access:public
type	proto/detail/preprocessed/deduce_domain_n.hpp	/^        typedef common9 type;$/;"	t	struct:common_domain9	access:public
type	proto/detail/preprocessed/expr.hpp	/^            typedef typename result_of::funop<Sig, expr, default_domain>::type const type;$/;"	t	class:expr::result::result_of::funop	access:public
type	proto/detail/preprocessed/expr_variadic.hpp	/^            typedef typename result_of::funop<Sig, expr, default_domain>::type const type;$/;"	t	class:expr::result::result_of::funop	access:public
type	proto/detail/preprocessed/extends_funop.hpp	/^    template<typename Sig> struct result { typedef typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop< Sig , proto_derived_expr , proto_domain >::type ) >::type const type; };$/;"	t	class:result::BOOST_PROTO_RESULT_OF	access:public
type	proto/detail/preprocessed/extends_funop_const.hpp	/^    template<typename Sig> struct result { typedef typename BOOST_PROTO_RESULT_OF< proto_generator( typename boost::proto::result_of::funop< Sig , proto_derived_expr , proto_domain >::type ) >::type const type; };$/;"	t	class:result::BOOST_PROTO_RESULT_OF	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop0	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop1	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop2	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop3	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop4	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop5	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop6	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop7	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop8	access:public
type	proto/detail/preprocessed/funop.hpp	/^        >::type type;$/;"	t	struct:funop9	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 10> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 1> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 2> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 3> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 4> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 5> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 6> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 7> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 8> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::basic_expr<Tag, dst_args, 9> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 10> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 1> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 2> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 3> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 4> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 5> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 6> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 7> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 8> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/generate_by_value.hpp	/^        typedef proto::expr<Tag, dst_args, 9> type;$/;"	t	struct:by_value_generator_	access:public
type	proto/detail/preprocessed/make_expr_funop.hpp	/^        type;$/;"	t	struct:result	access:public
type	proto/detail/preprocessed/poly_function_funop.hpp	/^        typedef typename result::result_type type;$/;"	t	struct:result	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef PolyFun type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8 , const A9> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7 , const A8> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6 , const A7> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5 , const A6> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4 , const A5> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3 , const A4> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2 , const A3> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1 , const A2> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0 , const A1> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/poly_function_traits.hpp	/^        typedef typename PolyFun::template impl<const A0> type;$/;"	t	struct:as_mono_function_impl	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child0>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child0>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child0>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child10>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child10>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child10>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child1>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child1>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child1>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child2>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child2>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child2>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child3>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child3>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child3>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child4>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child4>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child4>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child5>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child5>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child5>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child6>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child6>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child6>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child7>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child7>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child7>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child8>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child8>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child8>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child9>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child9>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::proto_child9>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list10<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9>, 10> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list1<A0>, 1> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list2<A0 , A1>, 2> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list3<A0 , A1 , A2>, 3> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list4<A0 , A1 , A2 , A3>, 4> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list5<A0 , A1 , A2 , A3 , A4>, 5> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list6<A0 , A1 , A2 , A3 , A4 , A5>, 6> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list7<A0 , A1 , A2 , A3 , A4 , A5 , A6>, 7> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list8<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7>, 8> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<Tag, list9<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8>, 9> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list10<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9>, 10> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list1<A0>, 1> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list2<A0 , A1>, 2> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list3<A0 , A1 , A2>, 3> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list4<A0 , A1 , A2 , A3>, 4> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list5<A0 , A1 , A2 , A3 , A4>, 5> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list6<A0 , A1 , A2 , A3 , A4 , A5>, 6> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list7<A0 , A1 , A2 , A3 , A4 , A5 , A6>, 7> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list8<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7>, 8> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/traits.hpp	/^            typedef proto::expr<proto::tag::function, list9<A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8>, 9> type;$/;"	t	struct:function	access:public
type	proto/detail/preprocessed/unpack_expr_.hpp	/^        type;$/;"	t	struct:unpack_expr_	access:public
type	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename other::type type;$/;"	t	struct:unpack_expr_	access:public
type	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type type;$/;"	t	struct:unpack_expr_	access:public
type	proto/detail/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::BOOST_PP_CAT(proto_child, N)>::const_reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::BOOST_PP_CAT(proto_child, N)>::reference type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/traits.hpp	/^                typedef typename detail::expr_traits<typename Expr::BOOST_PP_CAT(proto_child, N)>::value_type type;$/;"	t	struct:result_of::child_c	access:public
type	proto/detail/traits.hpp	/^            typedef proto::expr<Tag, BOOST_PP_CAT(list, N)<BOOST_PP_ENUM_PARAMS(N, A)>, N> type;$/;"	t	struct:nary_expr	access:public
type	proto/detail/traits.hpp	/^            typedef proto::expr<proto::tag::function, BOOST_PP_CAT(list, N)<BOOST_PP_ENUM_PARAMS(N, A)>, N> type;$/;"	t	struct:function	access:public
type	proto/detail/unpack_expr_.hpp	/^        type;$/;"	t	struct:unpack_expr_	access:public
type	proto/detail/unpack_expr_.hpp	/^        typedef typename other::type type;$/;"	t	struct:unpack_expr_	access:public
type	proto/detail/unpack_expr_.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type type;$/;"	t	struct:unpack_expr_	access:public
type	proto/domain.hpp	/^            typedef proto::basic_expr<Tag, Args, Args::arity> type;$/;"	t	struct:boost::proto::domainns_::base_expr	access:public
type	proto/domain.hpp	/^            typedef proto::expr<Tag, Args, Args::arity> type;$/;"	t	struct:boost::proto::domainns_::base_expr	access:public
type	proto/domain.hpp	/^        typedef default_domain type;$/;"	t	struct:boost::proto::domain_of	access:public
type	proto/domain.hpp	/^        typedef typename T::proto_domain type;$/;"	t	struct:boost::proto::domain_of	access:public
type	proto/domain.hpp	/^        typedef typename domain_of<T>::type type;$/;"	t	struct:boost::proto::domain_of	access:public
type	proto/eval.hpp	/^                type;$/;"	t	struct:boost::proto::functional::eval::result	access:public
type	proto/eval.hpp	/^            typedef typename Context::template eval<Expr>::result_type type;$/;"	t	struct:boost::proto::result_of::eval	access:public
type	proto/expr.hpp	/^            typedef Expr *type;$/;"	t	struct:boost::proto::detail::address_of_hack	access:public
type	proto/expr.hpp	/^            typedef U const type;$/;"	t	struct:boost::proto::detail::same_cv	access:public
type	proto/expr.hpp	/^            typedef U type;$/;"	t	struct:boost::proto::detail::same_cv	access:public
type	proto/expr.hpp	/^            typedef not_a_valid_type type;$/;"	t	struct:boost::proto::detail::address_of_hack	access:public
type	proto/functional/std/iterator.hpp	/^            type;$/;"	t	struct:boost::proto::functional::distance::result	access:public
type	proto/functional/std/iterator.hpp	/^            type;$/;"	t	struct:boost::proto::functional::next::result	access:public
type	proto/functional/std/iterator.hpp	/^            type;$/;"	t	struct:boost::proto::functional::prior::result	access:public
type	proto/functional/std/utility.hpp	/^            type;$/;"	t	struct:boost::proto::functional::make_pair::result	access:public
type	proto/functional/std/utility.hpp	/^            typedef typename Pair::first_type &type;$/;"	t	struct:boost::proto::functional::first::result	access:public
type	proto/functional/std/utility.hpp	/^            typedef typename Pair::first_type const &type;$/;"	t	class:boost::proto::functional::first::result::Pair	access:public
type	proto/functional/std/utility.hpp	/^            typedef typename Pair::first_type type;$/;"	t	struct:boost::proto::functional::first::result	access:public
type	proto/functional/std/utility.hpp	/^            typedef typename Pair::second_type &type;$/;"	t	struct:boost::proto::functional::second::result	access:public
type	proto/functional/std/utility.hpp	/^            typedef typename Pair::second_type const &type;$/;"	t	class:boost::proto::functional::second::result::Pair	access:public
type	proto/functional/std/utility.hpp	/^            typedef typename Pair::second_type type;$/;"	t	struct:boost::proto::functional::second::result	access:public
type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::advance_impl::apply	access:public
type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::at_impl::apply	access:public
type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::convert_impl::apply	access:public
type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::deref_impl::apply	access:public
type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::end_impl::apply	access:public
type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::value_at_impl::apply	access:public
type	proto/fusion.hpp	/^                type;$/;"	t	struct:boost::fusion::extension::value_of_impl::apply	access:public
type	proto/fusion.hpp	/^                typedef forward_traversal_tag type;$/;"	t	struct:boost::fusion::extension::category_of_impl::apply	access:public
type	proto/fusion.hpp	/^                typedef proto::detail::expr_iterator<Sequence, 0> type;$/;"	t	struct:boost::fusion::extension::begin_impl::apply	access:public
type	proto/fusion.hpp	/^                typedef proto::detail::flat_view<Expr> type;$/;"	t	struct:boost::proto::functional::flatten::result	access:public
type	proto/fusion.hpp	/^                typedef random_access_traversal_tag type;$/;"	t	struct:boost::fusion::extension::category_of_impl::apply	access:public
type	proto/fusion.hpp	/^                typedef typename Sequence::segments_type const &type;$/;"	t	class:boost::fusion::extension::segments_impl::apply::Sequence	access:public
type	proto/fusion.hpp	/^            typedef detail::flat_view<Expr> type;$/;"	t	struct:boost::proto::result_of::flatten	access:public
type	proto/fusion.hpp	/^        typedef fusion::fusion_sequence_tag type;$/;"	t	struct:boost::mpl::sequence_tag	access:public
type	proto/generate.hpp	/^            type;$/;"	t	struct:boost::proto::by_value_generator::result	access:public
type	proto/generate.hpp	/^            type;$/;"	t	struct:boost::proto::compose_generators::result	access:public
type	proto/generate.hpp	/^            type;$/;"	t	struct:boost::proto::detail::by_value_generator_	access:public
type	proto/generate.hpp	/^            typedef Expr type;$/;"	t	struct:boost::proto::default_generator::result	access:public
type	proto/generate.hpp	/^            typedef Extends<Expr> type;$/;"	t	struct:boost::proto::generator::result	access:public
type	proto/generate.hpp	/^            typedef Extends<Expr> type;$/;"	t	struct:boost::proto::pod_generator::result	access:public
type	proto/generate.hpp	/^        typedef Expr type;$/;"	t	struct:boost::result_of	access:public
type	proto/generate.hpp	/^        typedef Expr type;$/;"	t	struct:boost::tr1_result_of	access:public
type	proto/make_expr.hpp	/^                type;$/;"	t	struct:boost::proto::functional::make_expr::result	access:public
type	proto/make_expr.hpp	/^                type;$/;"	t	struct:boost::proto::functional::unpack_expr::result	access:public
type	proto/make_expr.hpp	/^            type;$/;"	t	struct:boost::proto::result_of::make_expr	access:public
type	proto/make_expr.hpp	/^            type;$/;"	t	struct:boost::proto::result_of::unpack_expr	access:public
type	proto/proto_fwd.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::detail::uncvref	access:public
type	proto/proto_fwd.hpp	/^            typedef T type[N];$/;"	t	struct:boost::proto::detail::uncvref	access:public
type	proto/proto_fwd.hpp	/^            typedef char (&type)[N];$/;"	t	struct:boost::proto::detail::sized_type	access:public
type	proto/traits.hpp	/^                typedef typename Domain::template as_child<T>::result_type type;$/;"	t	struct:boost::proto::functional::as_child::result	access:public
type	proto/traits.hpp	/^                typedef typename Domain::template as_expr<T>::result_type type;$/;"	t	struct:boost::proto::functional::as_expr::result	access:public
type	proto/traits.hpp	/^                typedef typename result_of::child<Expr, N>::type type;$/;"	t	struct:boost::proto::functional::child::result	access:public
type	proto/traits.hpp	/^                typedef typename result_of::child_c<Expr, N>::type type;$/;"	t	struct:boost::proto::functional::child_c::result	access:public
type	proto/traits.hpp	/^                typedef typename result_of::left<Expr>::type type;$/;"	t	struct:boost::proto::functional::left::result	access:public
type	proto/traits.hpp	/^                typedef typename result_of::right<Expr>::type type;$/;"	t	struct:boost::proto::functional::right::result	access:public
type	proto/traits.hpp	/^                typedef typename result_of::value<Expr>::type type;$/;"	t	struct:boost::proto::functional::value::result	access:public
type	proto/traits.hpp	/^            typedef typename Domain::template as_child<T>::result_type type;$/;"	t	struct:boost::proto::result_of::as_child	access:public
type	proto/traits.hpp	/^            typedef typename Domain::template as_expr<T>::result_type type;$/;"	t	struct:boost::proto::result_of::as_expr	access:public
type	proto/traits.hpp	/^            typedef typename detail::term_traits<typename Expr::proto_child0>::const_reference type;$/;"	t	struct:boost::proto::result_of::value	access:public
type	proto/traits.hpp	/^            typedef typename detail::term_traits<typename Expr::proto_child0>::reference type;$/;"	t	struct:boost::proto::result_of::value	access:public
type	proto/traits.hpp	/^            typedef typename detail::term_traits<typename Expr::proto_child0>::value_type type;$/;"	t	struct:boost::proto::result_of::value	access:public
type	proto/traits.hpp	/^        typedef proto::expr<Tag, list1<T>, 1> type;$/;"	t	struct:boost::proto::unary_expr	access:public
type	proto/traits.hpp	/^        typedef proto::expr<Tag, list2<T, U>, 2> type;$/;"	t	struct:boost::proto::binary_expr	access:public
type	proto/traits.hpp	/^        typedef proto::expr<Tag, term<T>, 0> type;$/;"	t	struct:boost::proto::nullary_expr	access:public
type	proto/traits.hpp	/^        typedef proto::expr<proto::tag::if_else_, list3<T, U, V>, 3> type;$/;"	t	struct:boost::proto::if_else_	access:public
type	proto/traits.hpp	/^        typedef proto::expr<proto::tag::terminal, term<T>, 0> type;$/;"	t	struct:boost::proto::terminal	access:public
type	proto/traits.hpp	/^        typedef typename Expr::proto_tag type;$/;"	t	struct:boost::proto::tag_of	access:public
type	proto/transform/arg.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::_byval::result	access:public
type	proto/transform/arg.hpp	/^            typedef boost::reference_wrapper<T const> const type;$/;"	t	class:boost::proto::_byref::result::boost	access:public
type	proto/transform/arg.hpp	/^            typedef boost::reference_wrapper<T> const type;$/;"	t	class:boost::proto::_byref::result::boost	access:public
type	proto/transform/detail/expand_pack.hpp	/^            typedef Ret (*type)(BOOST_PP_ENUM(N, M0, ~));$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/make.hpp	/^            typedef R<BOOST_PP_ENUM(N, BOOST_PROTO_MAKE_IF_TYPE, ~)> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/pack.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
type	proto/transform/detail/pack.hpp	/^            typedef Tfx type(T);$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
type	proto/transform/detail/pack.hpp	/^            typedef Tfx type;$/;"	t	struct:boost::proto::detail::expand_pattern_helper	access:public
type	proto/transform/detail/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(BOOST_PP_ENUM_PARAMS(J, A) BOOST_PP_COMMA_IF(J) BOOST_PP_ENUM_PARAMS(I, C))> type;$/;"	t	struct:cat	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)();$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type , typename expand_pattern_helper<Tfx, A7>::type , typename expand_pattern_helper<Tfx, A8>::type , typename expand_pattern_helper<Tfx, A9>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type , typename expand_pattern_helper<Tfx, A7>::type , typename expand_pattern_helper<Tfx, A8>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type , typename expand_pattern_helper<Tfx, A7>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/expand_pack.hpp	/^            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type);$/;"	t	struct:expand_pattern_helper	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type , typename make_if_<A6, Expr, State, Data> ::type , typename make_if_<A7, Expr, State, Data> ::type , typename make_if_<A8, Expr, State, Data> ::type , typename make_if_<A9, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type , typename make_if_<A6, Expr, State, Data> ::type , typename make_if_<A7, Expr, State, Data> ::type , typename make_if_<A8, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type , typename make_if_<A6, Expr, State, Data> ::type , typename make_if_<A7, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type , typename make_if_<A6, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type , typename make_if_<A5, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type , typename make_if_<A4, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type , typename make_if_<A3, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type , typename make_if_<A2, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type , typename make_if_<A1, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/make.hpp	/^            typedef R<typename make_if_<A0, Expr, State, Data> ::type> type;$/;"	t	struct:detail::make_	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8 , C9)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5 , C6)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret( C0)> type;$/;"	t	struct:expand_pattern_rest_0::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , C0)> type;$/;"	t	struct:expand_pattern_rest_9::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_8::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , C0)> type;$/;"	t	struct:expand_pattern_rest_8::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_7::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_7::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , C0)> type;$/;"	t	struct:expand_pattern_rest_7::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_6::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_6::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_6::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , A5 , C0)> type;$/;"	t	struct:expand_pattern_rest_6::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , A4 , C0)> type;$/;"	t	struct:expand_pattern_rest_5::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , A3 , C0)> type;$/;"	t	struct:expand_pattern_rest_4::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2 , C3 , C4 , C5 , C6)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , A2 , C0)> type;$/;"	t	struct:expand_pattern_rest_3::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3 , C4 , C5 , C6)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , A1 , C0)> type;$/;"	t	struct:expand_pattern_rest_2::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7 , C8)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4 , C5 , C6 , C7)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4 , C5 , C6)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4 , C5)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3 , C4)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2 , C3)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1 , C2)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0 , C1)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
type	proto/transform/detail/preprocessed/pack_impl.hpp	/^                typedef msvc_fun_workaround<Ret(A0 , C0)> type;$/;"	t	struct:expand_pattern_rest_1::cat	access:public
type	proto/transform/env.hpp	/^                    typedef Value type;$/;"	t	struct:boost::proto::envns_::env::found	access:public
type	proto/transform/env.hpp	/^                    typedef Value type;$/;"	t	struct:boost::proto::envns_::env::lookup	access:public
type	proto/transform/env.hpp	/^                    typedef typename impl<typename detail::normalize_arg<T>::type>::result_type type;$/;"	t	struct:boost::proto::functional::as_env::result	access:public
type	proto/transform/env.hpp	/^                typedef T &type;$/;"	t	struct:boost::proto::detail::value_type	access:public
type	proto/transform/env.hpp	/^                typedef typename mpl::if_c<is_noncopyable<T>::value, reference, value>::type type;$/;"	t	struct:boost::proto::detail::value_type	access:public
type	proto/transform/fold.hpp	/^                type;$/;"	t	struct:boost::proto::detail::as_callable::result	access:public
type	proto/transform/impl.hpp	/^                typedef OtherValue type;$/;"	t	struct:boost::proto::envns_::empty_env::lookup	access:public
type	proto/transform/make.hpp	/^            typedef R type;$/;"	t	struct:boost::proto::detail::make_	access:public
type	proto/transform/make.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::detail::nested_type	access:public
type	proto/transform/make.hpp	/^            typedef T type;$/;"	t	struct:boost::proto::detail::nested_type_if	access:public
type	proto/transform/make.hpp	/^            typedef proto::basic_expr<Tag, Args, N> type;$/;"	t	struct:boost::proto::detail::make_if_	access:public
type	proto/transform/make.hpp	/^            typedef proto::expr<Tag, Args, N> type;$/;"	t	struct:boost::proto::detail::make_if_	access:public
type	proto/transform/make.hpp	/^            typedef typename T::type type;$/;"	t	struct:boost::proto::detail::nested_type	access:public
typename_BOOST_PROTO_DETAILS_KEYWORD_TYPENAME_IS	proto/detail/remove_typename.hpp	54;"	d
typename_BOOST_PROTO_DETAILS_KEYWORD_TYPENAME_REMOVE	proto/detail/remove_typename.hpp	56;"	d
unary_expr	proto/traits.hpp	/^    struct unary_expr$/;"	s	namespace:boost::proto	inherits:proto::transform
unary_plus	proto/tags.hpp	/^    struct unary_plus {};$/;"	s	namespace:boost::proto::tagns_::tag
uncvref	proto/proto_fwd.hpp	/^        struct uncvref$/;"	s	namespace:boost::proto::detail
uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T &>$/;"	s	namespace:boost::proto::detail
uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T (&)[N]>$/;"	s	namespace:boost::proto::detail
uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T const &>$/;"	s	namespace:boost::proto::detail
uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T const (&)[N]>$/;"	s	namespace:boost::proto::detail
uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T const>$/;"	s	namespace:boost::proto::detail
uncvref	proto/proto_fwd.hpp	/^        struct uncvref<T const[N]>$/;"	s	namespace:boost::proto::detail
unexpr	proto/expr.hpp	/^        explicit unexpr(Expr const &e)$/;"	f	struct:boost::proto::unexpr	access:public	signature:(Expr const &e)
unexpr	proto/expr.hpp	/^    struct unexpr$/;"	s	namespace:boost::proto	inherits:Expr
unknown_function_t	proto/detail/poly_function.hpp	/^    typedef char (&unknown_function_t)[3];$/;"	t	namespace:boost::proto::detail
unpack_expr	proto/make_expr.hpp	/^        struct unpack_expr$/;"	s	namespace:boost::proto::functional
unpack_expr	proto/make_expr.hpp	/^        struct unpack_expr$/;"	s	namespace:boost::proto::result_of
unpack_expr	proto/make_expr.hpp	/^        struct unpack_expr<Tag, Domain, Sequence, typename Domain::proto_is_domain_>$/;"	s	namespace:boost::proto::result_of
unpack_expr	proto/make_expr.hpp	/^    unpack_expr(Sequence const &sequence)$/;"	f	class:boost::proto::lazy_disable_if	signature:(Sequence const &sequence)
unpack_expr	proto/make_expr.hpp	/^    unpack_expr(Sequence2 const &sequence2)$/;"	f	class:boost::proto::result_of::unpack_expr	signature:(Sequence2 const &sequence2)
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 10>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 1>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 2>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 3>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 4>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 5>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 6>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 7>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 8>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, 9>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 10>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 1>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 2>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 3>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 4>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 5>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 6>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 7>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 8>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, 9>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<tag::terminal, Domain, Sequence, 1u>$/;"	s
unpack_expr_	proto/detail/preprocessed/unpack_expr_.hpp	/^    struct unpack_expr_<tag::terminal, deduce_domain, Sequence, 1u>$/;"	s	inherits:unpack_expr_
unpack_expr_	proto/detail/unpack_expr_.hpp	/^    struct unpack_expr_$/;"	s
unpack_expr_	proto/detail/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, Domain, Sequence, N>$/;"	s
unpack_expr_	proto/detail/unpack_expr_.hpp	/^    struct unpack_expr_<Tag, deduce_domain, Sequence, N>$/;"	s
unpack_expr_	proto/detail/unpack_expr_.hpp	/^    struct unpack_expr_<tag::terminal, Domain, Sequence, 1u>$/;"	s
unpack_expr_	proto/detail/unpack_expr_.hpp	/^    struct unpack_expr_<tag::terminal, deduce_domain, Sequence, 1u>$/;"	s	inherits:unpack_expr_
unpack_expr_::call	proto/detail/preprocessed/unpack_expr_.hpp	/^        static type const call(Sequence const &sequence)$/;"	f	struct:unpack_expr_	access:public	signature:(Sequence const &sequence)
unpack_expr_::call	proto/detail/unpack_expr_.hpp	/^        static type const call(Sequence const &sequence)$/;"	f	struct:unpack_expr_	access:public	signature:(Sequence const &sequence)
unpack_expr_::expr_type	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename base_expr<Domain, Tag, proto_args>::type expr_type;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::expr_type	proto/detail/unpack_expr_.hpp	/^        typedef typename base_expr<Domain, Tag, proto_args>::type expr_type;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator0	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator1	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator2	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator3	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator4	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator5	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator6	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator6	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator6	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator6	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator7	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator7	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator7	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator8	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator8	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::fusion_iterator9	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename fusion::result_of::begin<Sequence const>::type fusion_iterator0; typedef typename fusion::result_of::next< fusion_iterator0>::type fusion_iterator1; typedef typename fusion::result_of::next< fusion_iterator1>::type fusion_iterator2; typedef typename fusion::result_of::next< fusion_iterator2>::type fusion_iterator3; typedef typename fusion::result_of::next< fusion_iterator3>::type fusion_iterator4; typedef typename fusion::result_of::next< fusion_iterator4>::type fusion_iterator5; typedef typename fusion::result_of::next< fusion_iterator5>::type fusion_iterator6; typedef typename fusion::result_of::next< fusion_iterator6>::type fusion_iterator7; typedef typename fusion::result_of::next< fusion_iterator7>::type fusion_iterator8; typedef typename fusion::result_of::next< fusion_iterator8>::type fusion_iterator9;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::other	proto/detail/preprocessed/unpack_expr_.hpp	/^        other;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::other	proto/detail/unpack_expr_.hpp	/^        other;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::proto_args	proto/detail/preprocessed/unpack_expr_.hpp	/^        proto_args;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::proto_args	proto/detail/unpack_expr_.hpp	/^        proto_args;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::proto_generator	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::proto_generator	proto/detail/unpack_expr_.hpp	/^        typedef typename Domain::proto_generator proto_generator;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::terminal_type	proto/detail/preprocessed/unpack_expr_.hpp	/^        terminal_type;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::terminal_type	proto/detail/unpack_expr_.hpp	/^        terminal_type;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::type	proto/detail/preprocessed/unpack_expr_.hpp	/^        type;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::type	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename other::type type;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::type	proto/detail/preprocessed/unpack_expr_.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type type;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::type	proto/detail/unpack_expr_.hpp	/^        type;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::type	proto/detail/unpack_expr_.hpp	/^        typedef typename other::type type;$/;"	t	struct:unpack_expr_	access:public
unpack_expr_::type	proto/detail/unpack_expr_.hpp	/^        typedef typename proto_generator::template result<proto_generator(expr_type)>::type type;$/;"	t	struct:unpack_expr_	access:public
unref_expr	proto/transform/detail/pass_through_impl.hpp	/^        typedef typename pass_through_impl::expr unref_expr;$/;"	t	struct:pass_through_impl	access:public
unref_expr	proto/transform/detail/preprocessed/pass_through_impl.hpp	/^        typedef typename pass_through_impl::expr unref_expr;$/;"	t	struct:pass_through_impl	access:public
use_basic_expr	proto/generate.hpp	/^    struct use_basic_expr$/;"	s	namespace:boost::proto	inherits:Generator
utility	proto/literal.hpp	/^    namespace utility$/;"	n	namespace:boost::proto
utility	proto/proto_fwd.hpp	/^    namespace utility$/;"	n	namespace:boost::proto
value	proto/context/callable.hpp	/^            static const bool value =$/;"	m	struct:boost::proto::detail::is_expr_handled	access:public
value	proto/context/detail/callable_eval.hpp	/^            static const bool value =$/;"	m	struct:detail::is_expr_handled	access:public
value	proto/context/detail/preprocessed/callable_eval.hpp	/^            static const bool value =$/;"	m	struct:detail::is_expr_handled	access:public
value	proto/detail/decltype.hpp	/^                static const bool value = sizeof(void *) == sizeof(get_pointer(make<T &>()));$/;"	m	struct:boost::proto::detail::has_get_pointerns::has_get_pointer	access:public
value	proto/detail/is_noncopyable.hpp	/^        static bool const value = sizeof(yes_type) == sizeof(check_is_iostream<T>(0,0,0,0,0,0));$/;"	m	struct:boost::proto::detail::is_iostream	access:public
value	proto/detail/poly_function.hpp	/^        type value;$/;"	m	struct:boost::proto::detail::arg	access:private
value	proto/detail/static_const.hpp	/^            static T const value;$/;"	m	struct:boost::proto::detail::static_const	access:public
value	proto/detail/static_const.hpp	/^        T const static_const<T>::value = {};$/;"	m	class:boost::proto::detail::static_const
value	proto/traits.hpp	/^        struct value$/;"	s	namespace:boost::proto::functional
value	proto/traits.hpp	/^        struct value$/;"	s	namespace:boost::proto::result_of
value	proto/traits.hpp	/^        struct value<Expr &>$/;"	s	namespace:boost::proto::result_of
value	proto/traits.hpp	/^        struct value<Expr const &>$/;"	s	namespace:boost::proto::result_of
value	proto/traits.hpp	/^    value(Expr const &e)$/;"	f	namespace:boost::proto	signature:(Expr const &e)
value	proto/transform/env.hpp	/^                typedef T &value;$/;"	t	struct:boost::proto::detail::value_type	access:public
value	proto/transform/env.hpp	/^                typedef typename remove_const<T>::type value;$/;"	t	struct:boost::proto::detail::value_type	access:public
value_	proto/transform/env.hpp	/^                Value value_;$/;"	m	struct:boost::proto::envns_::env	access:private
value_at_impl	proto/fusion.hpp	/^        struct value_at_impl<proto::tag::proto_expr<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
value_of_impl	proto/fusion.hpp	/^        struct value_of_impl<proto::tag::proto_expr_iterator<Tag, Domain> >$/;"	s	namespace:boost::fusion::extension
value_type	proto/args.hpp	/^            typedef Expr value_type;$/;"	t	struct:boost::proto::detail::expr_traits	access:public
value_type	proto/args.hpp	/^            typedef T value_type;$/;"	t	struct:boost::proto::detail::term_traits	access:public
value_type	proto/args.hpp	/^            typedef T value_type[N];$/;"	t	struct:boost::proto::detail::term_traits	access:public
value_type	proto/args.hpp	/^            typedef typename mpl::if_c<is_noncopyable<T>::value, T &, T>::type value_type;$/;"	t	struct:boost::proto::detail::term_traits	access:public
value_type	proto/context/callable.hpp	/^            typedef typename proto::result_of::value<Expr const &>::type value_type;$/;"	t	struct:boost::proto::context::callable_eval	access:public
value_type	proto/detail/as_expr.hpp	/^        typedef typename term_traits<T &>::value_type value_type;$/;"	t	struct:boost::proto::detail::as_expr	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child0 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child1 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child10 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child2 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child3 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child4 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child5 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child6 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child7 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child8 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/preprocessed/traits.hpp	/^                typedef typename Expr::proto_child9 value_type;$/;"	t	struct:result_of::child_c	access:public
value_type	proto/detail/traits.hpp	/^                typedef typename Expr::BOOST_PP_CAT(proto_child, N) value_type;$/;"	t	class:result_of::child_c::Expr	access:public
value_type	proto/literal.hpp	/^            typedef typename detail::term_traits<T>::value_type       value_type;$/;"	t	struct:boost::proto::utility::literal	access:public
value_type	proto/traits.hpp	/^            typedef typename Expr::proto_child0 value_type;$/;"	t	struct:boost::proto::result_of::value	access:public
value_type	proto/transform/env.hpp	/^                typedef Value value_type;$/;"	t	struct:boost::proto::envns_::env	access:public
value_type	proto/transform/env.hpp	/^            struct value_type$/;"	s	namespace:boost::proto::detail
value_type	proto/transform/env.hpp	/^            struct value_type<T &>$/;"	s	namespace:boost::proto::detail
vararg	proto/matches.hpp	/^    struct vararg$/;"	s	namespace:boost::proto	inherits:Grammar
vararg_matches	proto/matches.hpp	/^        struct vararg_matches$/;"	s	namespace:boost::proto::detail	inherits:mpl::false_
vararg_matches	proto/matches.hpp	/^        struct vararg_matches<Expr, Args1, Args2, Back, true, false, typename Back::proto_is_vararg_>$/;"	s	namespace:boost::proto::detail	inherits:and_2
vararg_matches	proto/matches.hpp	/^        struct vararg_matches<Expr, Args1, Args2, Back, true, true, typename Back::proto_is_vararg_>$/;"	s	namespace:boost::proto::detail	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 10, 10>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 10, To>$/;"	s	inherits:and_2
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 2, 2>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 2, To>$/;"	s	inherits:and_2
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 3, 3>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 3, To>$/;"	s	inherits:and_2
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 4, 4>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 4, To>$/;"	s	inherits:and_2
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 5, 5>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 5, To>$/;"	s	inherits:and_2
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 6, 6>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 6, To>$/;"	s	inherits:and_2
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 7, 7>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 7, To>$/;"	s	inherits:and_2
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 8, 8>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 8, To>$/;"	s	inherits:and_2
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 9, 9>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/preprocessed/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, 9, To>$/;"	s	inherits:and_2
vararg_matches_impl	proto/detail/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, N, N>$/;"	s	inherits:matches_
vararg_matches_impl	proto/detail/vararg_matches_impl.hpp	/^    struct vararg_matches_impl<Args, Back, N, To>$/;"	s	inherits:and_2
virtual_member	proto/extends.hpp	/^        struct virtual_member$/;"	s	namespace:boost::proto::exprns_
wants_basic_expr	proto/generate.hpp	/^    struct wants_basic_expr$/;"	s	namespace:boost::proto	inherits:mpl::false_
wants_basic_expr	proto/generate.hpp	/^    struct wants_basic_expr<Generator, typename Generator::proto_use_basic_expr_>$/;"	s	namespace:boost::proto	inherits:mpl::true_
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R()>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5 , A6)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5 , A6...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4 , A5...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3 , A4...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2 , A3...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1 , A2...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0 , A1...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/preprocessed/when.hpp	/^    struct when<Grammar, R(A0...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/when.hpp	/^    struct when<Grammar, R(BOOST_PP_ENUM_PARAMS(N, A))>$/;"	s	inherits:detail::when_impl
when	proto/transform/detail/when.hpp	/^    struct when<Grammar, R(BOOST_PP_ENUM_PARAMS(N, A)...)>$/;"	s	inherits:detail::when_impl
when	proto/transform/when.hpp	/^        struct when$/;"	s	struct:boost::proto::external_transforms	inherits:proto::when	access:public
when	proto/transform/when.hpp	/^    struct when$/;"	s	namespace:boost::proto	inherits:PrimitiveTransform
when	proto/transform/when.hpp	/^    struct when<Grammar, Fun *>$/;"	s	namespace:boost::proto	inherits:when
when	proto/transform/when.hpp	/^    struct when<Grammar, external_transform>$/;"	s	namespace:boost::proto	inherits:proto::transform
when_impl	proto/transform/when.hpp	/^        struct when_impl$/;"	s	namespace:boost::proto::detail	inherits:transform
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_10	access:public
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_2	access:public
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_3	access:public
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_4	access:public
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_5	access:public
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_6	access:public
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_7	access:public
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_8	access:public
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G0 which;$/;"	t	struct:or_9	access:public
which	proto/detail/preprocessed/or_n.hpp	/^        typedef G1 which;$/;"	t	struct:or_2	access:public
which	proto/matches.hpp	/^            typedef G0 which;$/;"	t	struct:boost::proto::detail::matches_	access:public
which	proto/matches.hpp	/^            typedef not_<_> which;$/;"	t	struct:boost::proto::detail::matches_	access:public
which	proto/matches.hpp	/^            typedef typename Cases::template case_<Tag> which;$/;"	t	struct:boost::proto::detail::matches_	access:public
which	proto/matches.hpp	/^            which;$/;"	t	struct:boost::proto::detail::matches_	access:public
which	proto/matches.hpp	/^            which;$/;"	t	struct:boost::proto::if_::impl	access:public
which	proto/transform/when.hpp	/^                which;$/;"	t	struct:boost::proto::detail::when_impl::impl	access:public
yes_type	proto/proto_fwd.hpp	/^        typedef char yes_type;$/;"	t	namespace:boost::proto::detail
